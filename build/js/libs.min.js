!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(E,e){"use strict";function v(e){return null!=e&&e===e.window}var t=[],i=Object.getPrototypeOf,o=t.slice,m=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,a=t.indexOf,n={},r=n.toString,g=n.hasOwnProperty,s=g.toString,u=s.call(Object),y={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},S=E.document,c={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var i,a,r=(n=n||S).createElement("script");if(r.text=e,t)for(i in c)(a=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,a);n.head.appendChild(r).parentNode.removeChild(r)}function w(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[r.call(e)]||"object":typeof e}var d="3.5.1",T=function(e,t){return new T.fn.init(e,t)};function p(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!b(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}T.fn=T.prototype={jquery:d,constructor:T,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(n){return this.pushStack(T.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(T.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(T.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},T.extend=T.fn.extend=function(){var e,t,n,i,a,r,s=arguments[0]||{},o=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[o]||{},o++),"object"==typeof s||b(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(u&&i&&(T.isPlainObject(i)||(a=Array.isArray(i)))?(n=s[t],r=a&&!Array.isArray(n)?[]:a||T.isPlainObject(n)?n:{},a=!1,s[t]=T.extend(u,r,i)):void 0!==i&&(s[t]=i));return s},T.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==r.call(e))&&(!(t=i(e))||"function"==typeof(n=g.call(t,"constructor")&&t.constructor)&&s.call(n)===u)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(p(Object(e))?T.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:a.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,a=e.length;i<n;i++)e[a++]=t[i];return e.length=a,e},grep:function(e,t,n){for(var i=[],a=0,r=e.length,s=!n;a<r;a++)!t(e[a],a)!=s&&i.push(e[a]);return i},map:function(e,t,n){var i,a,r=0,s=[];if(p(e))for(i=e.length;r<i;r++)null!=(a=t(e[r],r,n))&&s.push(a);else for(r in e)null!=(a=t(e[r],r,n))&&s.push(a);return m(s)},guid:1,support:y}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=t[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){function d(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function a(){C()}var e,h,x,r,s,f,p,v,w,l,u,C,E,o,S,m,c,g,y,T="sizzle"+ +new Date,b=n.document,k=0,i=0,A=le(),M=le(),P=le(),$=le(),D=function(e,t){return e===t&&(u=!0),0},_={}.hasOwnProperty,t=[],F=t.pop,L=t.push,I=t.push,O=t.slice,z=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},B="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",N="(?:\\\\[\\da-fA-F]{1,6}"+j+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+j+"*("+N+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+j+"*\\]",R=":("+N+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",q=new RegExp(j+"+","g"),V=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),X=new RegExp("^"+j+"*,"+j+"*"),Y=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),W=new RegExp(j+"|>"),G=new RegExp(R),U=new RegExp("^"+N+"$"),K={ID:new RegExp("^#("+N+")"),CLASS:new RegExp("^\\.("+N+")"),TAG:new RegExp("^("+N+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+B+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+j+"?|\\\\([^\\r\\n\\f])","g"),ae=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=ye(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{I.apply(t=O.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){I={apply:t.length?function(e,t){L.apply(e,O.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(t,e,n,i){var a,r,s,o,l,u,c,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&(C(e),e=e||E,S)){if(11!==p&&(l=te.exec(t)))if(a=l[1]){if(9===p){if(!(s=e.getElementById(a)))return n;if(s.id===a)return n.push(s),n}else if(d&&(s=d.getElementById(a))&&y(e,s)&&s.id===a)return n.push(s),n}else{if(l[2])return I.apply(n,e.getElementsByTagName(t)),n;if((a=l[3])&&h.getElementsByClassName&&e.getElementsByClassName)return I.apply(n,e.getElementsByClassName(a)),n}if(h.qsa&&!$[t+" "]&&(!m||!m.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(c=t,d=e,1===p&&(W.test(t)||Y.test(t))){for((d=ne.test(t)&&ve(e.parentNode)||e)===e&&h.scope||((o=e.getAttribute("id"))?o=o.replace(ae,re):e.setAttribute("id",o=T)),r=(u=f(t)).length;r--;)u[r]=(o?"#"+o:":scope")+" "+ge(u[r]);c=u.join(",")}try{return I.apply(n,d.querySelectorAll(c)),n}catch(e){$(t,!0)}finally{o===T&&e.removeAttribute("id")}}}return v(t.replace(V,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>x.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function ue(e){return e[T]=!0,e}function ce(e){var t=E.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)x.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function fe(s){return ue(function(r){return r=+r,ue(function(e,t){for(var n,i=s([],e.length,r),a=i.length;a--;)e[n=i[a]]&&(e[n]=!(t[n]=e[n]))})})}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in h=oe.support={},s=oe.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Z.test(t||n&&n.nodeName||"HTML")},C=oe.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:b;return i!=E&&9===i.nodeType&&i.documentElement&&(o=(E=i).documentElement,S=!s(E),b!=E&&(n=E.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",a,!1):n.attachEvent&&n.attachEvent("onunload",a)),h.scope=ce(function(e){return o.appendChild(e).appendChild(E.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),h.attributes=ce(function(e){return e.className="i",!e.getAttribute("className")}),h.getElementsByTagName=ce(function(e){return e.appendChild(E.createComment("")),!e.getElementsByTagName("*").length}),h.getElementsByClassName=ee.test(E.getElementsByClassName),h.getById=ce(function(e){return o.appendChild(e).id=T,!E.getElementsByName||!E.getElementsByName(T).length}),h.getById?(x.filter.ID=function(e){var t=e.replace(ie,d);return function(e){return e.getAttribute("id")===t}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n=t.getElementById(e);return n?[n]:[]}}):(x.filter.ID=function(e){var n=e.replace(ie,d);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},x.find.ID=function(e,t){if(void 0!==t.getElementById&&S){var n,i,a,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(a=t.getElementsByName(e),i=0;r=a[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),x.find.TAG=h.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):h.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],a=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[a++];)1===n.nodeType&&i.push(n);return i},x.find.CLASS=h.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&S)return t.getElementsByClassName(e)},c=[],m=[],(h.qsa=ee.test(E.querySelectorAll))&&(ce(function(e){var t;o.appendChild(e).innerHTML="<a id='"+T+"'></a><select id='"+T+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+j+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+j+"*(?:value|"+B+")"),e.querySelectorAll("[id~="+T+"-]").length||m.push("~="),(t=E.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+j+"*name"+j+"*="+j+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+T+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]")}),ce(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=E.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+j+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),o.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")})),(h.matchesSelector=ee.test(g=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ce(function(e){h.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),c.push("!=",R)}),m=m.length&&new RegExp(m.join("|")),c=c.length&&new RegExp(c.join("|")),t=ee.test(o.compareDocumentPosition),y=t||ee.test(o.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return u=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!h.sortDetached&&t.compareDocumentPosition(e)===n?e==E||e.ownerDocument==b&&y(b,e)?-1:t==E||t.ownerDocument==b&&y(b,t)?1:l?z(l,e)-z(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,i=0,a=e.parentNode,r=t.parentNode,s=[e],o=[t];if(!a||!r)return e==E?-1:t==E?1:a?-1:r?1:l?z(l,e)-z(l,t):0;if(a===r)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[i]===o[i];)i++;return i?pe(s[i],o[i]):s[i]==b?-1:o[i]==b?1:0}),E},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(C(e),h.matchesSelector&&S&&!$[t+" "]&&(!c||!c.test(t))&&(!m||!m.test(t)))try{var n=g.call(e,t);if(n||h.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){$(t,!0)}return 0<oe(t,E,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=E&&C(e),y(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=E&&C(e);var n=x.attrHandle[t.toLowerCase()],i=n&&_.call(x.attrHandle,t.toLowerCase())?n(e,t,!S):void 0;return void 0!==i?i:h.attributes||!S?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(ae,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],i=0,a=0;if(u=!h.detectDuplicates,l=!h.sortStable&&e.slice(0),e.sort(D),u){for(;t=e[a++];)t===e[a]&&(i=n.push(a));for(;i--;)e.splice(n[i],1)}return l=null,e},r=oe.getText=function(e){var t,n="",i=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(x=oe.selectors={cacheLength:50,createPseudo:ue,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&G.test(n)&&(t=f(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=A[e+" "];return t||(t=new RegExp("(^|"+j+")"+e+"("+j+"|$)"))&&A(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,a){return function(e){var t=oe.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===a:"!="===i?t!==a:"^="===i?a&&0===t.indexOf(a):"*="===i?a&&-1<t.indexOf(a):"$="===i?a&&t.slice(-a.length)===a:"~="===i?-1<(" "+t.replace(q," ")+" ").indexOf(a):"|="===i&&(t===a||t.slice(0,a.length+1)===a+"-"))}},CHILD:function(f,e,t,v,m){var g="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===e;return 1===v&&0===m?function(e){return!!e.parentNode}:function(e,t,n){var i,a,r,s,o,l,u=g!=y?"nextSibling":"previousSibling",c=e.parentNode,d=b&&e.nodeName.toLowerCase(),p=!n&&!b,h=!1;if(c){if(g){for(;u;){for(s=e;s=s[u];)if(b?s.nodeName.toLowerCase()===d:1===s.nodeType)return!1;l=u="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&p){for(h=(o=(i=(a=(r=(s=c)[T]||(s[T]={}))[s.uniqueID]||(r[s.uniqueID]={}))[f]||[])[0]===k&&i[1])&&i[2],s=o&&c.childNodes[o];s=++o&&s&&s[u]||(h=o=0)||l.pop();)if(1===s.nodeType&&++h&&s===e){a[f]=[k,o,h];break}}else if(p&&(h=o=(i=(a=(r=(s=e)[T]||(s[T]={}))[s.uniqueID]||(r[s.uniqueID]={}))[f]||[])[0]===k&&i[1]),!1===h)for(;(s=++o&&s&&s[u]||(h=o=0)||l.pop())&&((b?s.nodeName.toLowerCase()!==d:1!==s.nodeType)||!++h||(p&&((a=(r=s[T]||(s[T]={}))[s.uniqueID]||(r[s.uniqueID]={}))[f]=[k,h]),s!==e)););return(h-=m)===v||h%v==0&&0<=h/v}}},PSEUDO:function(e,r){var t,s=x.pseudos[e]||x.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return s[T]?s(r):1<s.length?(t=[e,e,"",r],x.setFilters.hasOwnProperty(e.toLowerCase())?ue(function(e,t){for(var n,i=s(e,r),a=i.length;a--;)e[n=z(e,i[a])]=!(t[n]=i[a])}):function(e){return s(e,0,t)}):s}},pseudos:{not:ue(function(e){var i=[],a=[],o=p(e.replace(V,"$1"));return o[T]?ue(function(e,t,n,i){for(var a,r=o(e,null,i,[]),s=e.length;s--;)(a=r[s])&&(e[s]=!(t[s]=a))}):function(e,t,n){return i[0]=e,o(i,null,n,a),i[0]=null,!a.pop()}}),has:ue(function(t){return function(e){return 0<oe(t,e).length}}),contains:ue(function(t){return t=t.replace(ie,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ue(function(n){return U.test(n||"")||oe.error("unsupported lang: "+n),n=n.replace(ie,d).toLowerCase(),function(e){var t;do{if(t=S?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===E.activeElement&&(!E.hasFocus||E.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!x.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,n){return[n<0?n+t:n]}),even:fe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:fe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:fe(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:fe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})x.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function me(){}function ge(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(o,e,t){var l=e.dir,u=e.next,c=u||l,d=t&&"parentNode"===c,p=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||d)return o(e,t,n);return!1}:function(e,t,n){var i,a,r,s=[k,p];if(n){for(;e=e[l];)if((1===e.nodeType||d)&&o(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||d)if(a=(r=e[T]||(e[T]={}))[e.uniqueID]||(r[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=a[c])&&i[0]===k&&i[1]===p)return s[2]=i[2];if((a[c]=s)[2]=o(e,t,n))return!0}return!1}}function be(a){return 1<a.length?function(e,t,n){for(var i=a.length;i--;)if(!a[i](e,t,n))return!1;return!0}:a[0]}function xe(e,t,n,i,a){for(var r,s=[],o=0,l=e.length,u=null!=t;o<l;o++)(r=e[o])&&(n&&!n(r,i,a)||(s.push(r),u&&t.push(o)));return s}function we(h,f,v,m,g,e){return m&&!m[T]&&(m=we(m)),g&&!g[T]&&(g=we(g,e)),ue(function(e,t,n,i){var a,r,s,o=[],l=[],u=t.length,c=e||function(e,t,n){for(var i=0,a=t.length;i<a;i++)oe(e,t[i],n);return n}(f||"*",n.nodeType?[n]:n,[]),d=!h||!e&&f?c:xe(c,o,h,n,i),p=v?g||(e?h:u||m)?[]:t:d;if(v&&v(d,p,n,i),m)for(a=xe(p,l),m(a,[],n,i),r=a.length;r--;)(s=a[r])&&(p[l[r]]=!(d[l[r]]=s));if(e){if(g||h){if(g){for(a=[],r=p.length;r--;)(s=p[r])&&a.push(d[r]=s);g(null,p=[],a,i)}for(r=p.length;r--;)(s=p[r])&&-1<(a=g?z(e,s):o[r])&&(e[a]=!(t[a]=s))}}else p=xe(p===t?p.splice(u,p.length):p),g?g(null,t,p,i):I.apply(t,p)})}function Ce(m,g){function e(e,t,n,i,a){var r,s,o,l=0,u="0",c=e&&[],d=[],p=w,h=e||b&&x.find.TAG("*",a),f=k+=null==p?1:Math.random()||.1,v=h.length;for(a&&(w=t==E||t||a);u!==v&&null!=(r=h[u]);u++){if(b&&r){for(s=0,t||r.ownerDocument==E||(C(r),n=!S);o=m[s++];)if(o(r,t||E,n)){i.push(r);break}a&&(k=f)}y&&((r=!o&&r)&&l--,e&&c.push(r))}if(l+=u,y&&u!==l){for(s=0;o=g[s++];)o(c,d,t,n);if(e){if(0<l)for(;u--;)c[u]||d[u]||(d[u]=F.call(i));d=xe(d)}I.apply(i,d),a&&!e&&0<d.length&&1<l+g.length&&oe.uniqueSort(i)}return a&&(k=f,w=p),c}var y=0<g.length,b=0<m.length;return y?ue(e):e}return me.prototype=x.filters=x.pseudos,x.setFilters=new me,f=oe.tokenize=function(e,t){var n,i,a,r,s,o,l,u=M[e+" "];if(u)return t?0:u.slice(0);for(s=e,o=[],l=x.preFilter;s;){for(r in n&&!(i=X.exec(s))||(i&&(s=s.slice(i[0].length)||s),o.push(a=[])),n=!1,(i=Y.exec(s))&&(n=i.shift(),a.push({value:n,type:i[0].replace(V," ")}),s=s.slice(n.length)),x.filter)!(i=K[r].exec(s))||l[r]&&!(i=l[r](i))||(n=i.shift(),a.push({value:n,type:r,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):M(e,o).slice(0)},p=oe.compile=function(e,t){var n,i=[],a=[],r=P[e+" "];if(!r){for(n=(t=t||f(e)).length;n--;)(r=function e(t){for(var a,n,i,r=t.length,s=x.relative[t[0].type],o=s||x.relative[" "],l=s?1:0,u=ye(function(e){return e===a},o,!0),c=ye(function(e){return-1<z(a,e)},o,!0),d=[function(e,t,n){var i=!s&&(n||t!==w)||((a=t).nodeType?u:c)(e,t,n);return a=null,i}];l<r;l++)if(n=x.relative[t[l].type])d=[ye(be(d),n)];else{if((n=x.filter[t[l].type].apply(null,t[l].matches))[T]){for(i=++l;i<r&&!x.relative[t[i].type];i++);return we(1<l&&be(d),1<l&&ge(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(V,"$1"),n,l<i&&e(t.slice(l,i)),i<r&&e(t=t.slice(i)),i<r&&ge(t))}d.push(n)}return be(d)}(t[n]))[T]?i.push(r):a.push(r);(r=P(e,Ce(a,i))).selector=e}return r},v=oe.select=function(e,t,n,i){var a,r,s,o,l,u="function"==typeof e&&e,c=!i&&f(e=u.selector||e);if(n=n||[],1===c.length){if(2<(r=c[0]=c[0].slice(0)).length&&"ID"===(s=r[0]).type&&9===t.nodeType&&S&&x.relative[r[1].type]){if(!(t=(x.find.ID(s.matches[0].replace(ie,d),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(a=K.needsContext.test(e)?0:r.length;a--&&(s=r[a],!x.relative[o=s.type]);)if((l=x.find[o])&&(i=l(s.matches[0].replace(ie,d),ne.test(r[0].type)&&ve(t.parentNode)||t))){if(r.splice(a,1),!(e=i.length&&ge(r)))return I.apply(n,i),n;break}}return(u||p(e,c))(i,t,!S,n,!t||ne.test(e)&&ve(t.parentNode)||t),n},h.sortStable=T.split("").sort(D).join("")===T,h.detectDuplicates=!!u,C(),h.sortDetached=ce(function(e){return 1&e.compareDocumentPosition(E.createElement("fieldset"))}),ce(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),h.attributes&&ce(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ce(function(e){return null==e.getAttribute("disabled")})||de(B,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(E);T.find=h,T.expr=h.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=h.uniqueSort,T.text=h.getText,T.isXMLDoc=h.isXML,T.contains=h.contains,T.escapeSelector=h.escape;function f(e,t,n){for(var i=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&T(e).is(n))break;i.push(e)}return i}function C(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var k=T.expr.match.needsContext;function A(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(e,n,i){return b(n)?T.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?T.grep(e,function(e){return e===n!==i}):"string"!=typeof n?T.grep(e,function(e){return-1<a.call(n,e)!==i}):T.filter(n,e,i)}T.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?T.find.matchesSelector(i,e)?[i]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n,i=this.length,a=this;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<i;t++)if(T.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)T.find(e,a[t],n);return 1<i?T.uniqueSort(n):n},filter:function(e){return this.pushStack(P(this,e||[],!1))},not:function(e){return this.pushStack(P(this,e||[],!0))},is:function(e){return!!P(this,"string"==typeof e&&k.test(e)?T(e):e||[],!1).length}});var $,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var i,a;if(!e)return this;if(n=n||$,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:D.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:S,!0)),M.test(i[1])&&T.isPlainObject(t))for(i in t)b(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(a=S.getElementById(i[2]))&&(this[0]=a,this.length=1),this}).prototype=T.fn,$=T(S);var _=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function L(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,a=this.length,r=[],s="string"!=typeof e&&T(e);if(!k.test(e))for(;i<a;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&T.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?T.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?a.call(T(e),this[0]):a.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return f(e,"parentNode")},parentsUntil:function(e,t,n){return f(e,"parentNode",n)},next:function(e){return L(e,"nextSibling")},prev:function(e){return L(e,"previousSibling")},nextAll:function(e){return f(e,"nextSibling")},prevAll:function(e){return f(e,"previousSibling")},nextUntil:function(e,t,n){return f(e,"nextSibling",n)},prevUntil:function(e,t,n){return f(e,"previousSibling",n)},siblings:function(e){return C((e.parentNode||{}).firstChild,e)},children:function(e){return C(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(A(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},function(i,a){T.fn[i]=function(e,t){var n=T.map(this,a,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=T.filter(t,n)),1<this.length&&(F[i]||T.uniqueSort(n),_.test(i)&&n.reverse()),this.pushStack(n)}});var I=/[^\x20\t\r\n\f]+/g;function O(e){return e}function z(e){throw e}function B(e,t,n,i){var a;try{e&&b(a=e.promise)?a.call(e).done(t).fail(n):e&&b(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},T.each(e.match(I)||[],function(e,t){n[t]=!0}),n):T.extend({},i);function a(){for(o=o||i.once,s=r=!0;u.length;c=-1)for(t=u.shift();++c<l.length;)!1===l[c].apply(t[0],t[1])&&i.stopOnFalse&&(c=l.length,t=!1);i.memory||(t=!1),r=!1,o&&(l=t?[]:"")}var r,t,s,o,l=[],u=[],c=-1,d={add:function(){return l&&(t&&!r&&(c=l.length-1,u.push(t)),function n(e){T.each(e,function(e,t){b(t)?i.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==w(t)&&n(t)})}(arguments),t&&!r&&a()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;-1<(n=T.inArray(t,l,n));)l.splice(n,1),n<=c&&c--}),this},has:function(e){return e?-1<T.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return o=u=[],l=t="",this},disabled:function(){return!l},lock:function(){return o=u=[],t||r||(l=t=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],u.push(t),r||a()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},T.extend({Deferred:function(e){var r=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],a="pending",s={state:function(){return a},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var a=arguments;return T.Deferred(function(i){T.each(r,function(e,t){var n=b(a[t[4]])&&a[t[4]];o[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),a=null}).promise()},then:function(t,n,i){var l=0;function u(a,r,s,o){return function(){function e(){var e,t;if(!(a<l)){if((e=s.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?o?t.call(e,u(l,r,O,o),u(l,r,z,o)):(l++,t.call(e,u(l,r,O,o),u(l,r,z,o),u(l,r,O,r.notifyWith))):(s!==O&&(n=void 0,i=[e]),(o||r.resolveWith)(n,i))}}var n=this,i=arguments,t=o?e:function(){try{e()}catch(e){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(e,t.stackTrace),l<=a+1&&(s!==z&&(n=void 0,i=[e]),r.rejectWith(n,i))}};a?t():(T.Deferred.getStackHook&&(t.stackTrace=T.Deferred.getStackHook()),E.setTimeout(t))}}return T.Deferred(function(e){r[0][3].add(u(0,e,b(i)?i:O,e.notifyWith)),r[1][3].add(u(0,e,b(t)?t:O)),r[2][3].add(u(0,e,b(n)?n:z))}).promise()},promise:function(e){return null!=e?T.extend(e,s):s}},o={};return T.each(r,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){a=i},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=n.fireWith}),s.promise(o),e&&e.call(o,o),o},when:function(e){function t(t){return function(e){a[t]=this,r[t]=1<arguments.length?o.call(arguments):e,--n||s.resolveWith(a,r)}}var n=arguments.length,i=n,a=Array(i),r=o.call(arguments),s=T.Deferred();if(n<=1&&(B(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||b(r[i]&&r[i].then)))return s.then();for(;i--;)B(r[i],t(i),s.reject);return s.promise()}});var j=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){E.console&&E.console.warn&&e&&j.test(e.name)&&E.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){E.setTimeout(function(){throw e})};var N=T.Deferred();function H(){S.removeEventListener("DOMContentLoaded",H),E.removeEventListener("load",H),T.ready()}T.fn.ready=function(e){return N.then(e).catch(function(e){T.readyException(e)}),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0)!==e&&0<--T.readyWait||N.resolveWith(S,[T])}}),T.ready.then=N.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?E.setTimeout(T.ready):(S.addEventListener("DOMContentLoaded",H),E.addEventListener("load",H));var R=function(e,t,n,i,a,r,s){var o=0,l=e.length,u=null==n;if("object"===w(n))for(o in a=!0,n)R(e,t,o,n[o],!0,r,s);else if(void 0!==i&&(a=!0,b(i)||(s=!0),u&&(t=s?(t.call(e,i),null):(u=t,function(e,t,n){return u.call(T(e),n)})),t))for(;o<l;o++)t(e[o],n,s?i:i.call(e[o],o,t(e[o],n)));return a?e:u?t.call(e):l?t(e[0],n):r},q=/^-ms-/,V=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(q,"ms-").replace(V,X)}function W(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function G(){this.expando=T.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},W(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,a=this.cache(e);if("string"==typeof t)a[Y(t)]=n;else for(i in t)a[Y(i)]=t[i];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in i?[t]:t.match(I)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!T.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var U=new G,K=new G,Z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Q=/[A-Z]/g;function J(e,t,n){var i,a;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Q,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(a=n)||"false"!==a&&("null"===a?null:a===+a+""?+a:Z.test(a)?JSON.parse(a):a)}catch(e){}K.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return K.hasData(e)||U.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return U.access(e,t,n)},_removeData:function(e,t){U.remove(e,t)}}),T.fn.extend({data:function(n,e){var t,i,a,r=this[0],s=r&&r.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){K.set(this,n)}):R(this,function(e){var t;return r&&void 0===e?void 0!==(t=K.get(r,n))||void 0!==(t=J(r,n))?t:void 0:void this.each(function(){K.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(a=K.get(r),1===r.nodeType&&!U.get(r,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=Y(i.slice(5)),J(r,i,a[i]));U.set(r,"hasDataAttrs",!0)}return a},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),T.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=U.get(e,t),n&&(!i||Array.isArray(n)?i=U.access(e,t,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),i=n.length,a=n.shift(),r=T._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),i--),a&&("fx"===t&&n.unshift("inprogress"),delete r.stop,a.call(e,function(){T.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return U.get(e,n)||U.access(e,n,{empty:T.Callbacks("once memory").add(function(){U.remove(e,[t+"queue",n])})})}}),T.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?T.queue(this[0],t):void 0===n?this:this.each(function(){var e=T.queue(this,t,n);T._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&T.dequeue(this,t)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--a||r.resolveWith(s,[s])}var i,a=1,r=T.Deferred(),s=this,o=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(i=U.get(s[o],e+"queueHooks"))&&i.empty&&(a++,i.empty.add(n));return n(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=S.documentElement,ae=function(e){return T.contains(e.ownerDocument,e)},re={composed:!0};ie.getRootNode&&(ae=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===T.css(e,"display")};function oe(e,t,n,i){var a,r,s=20,o=i?function(){return i.cur()}:function(){return T.css(e,t,"")},l=o(),u=n&&n[3]||(T.cssNumber[t]?"":"px"),c=e.nodeType&&(T.cssNumber[t]||"px"!==u&&+l)&&te.exec(T.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;s--;)T.style(e,t,c+u),(1-r)*(1-(r=o()/l||.5))<=0&&(s=0),c/=r;c*=2,T.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,a=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=a)),a}var le={};function ue(e,t){for(var n,i,a,r,s,o,l,u=[],c=0,d=e.length;c<d;c++)(i=e[c]).style&&(n=i.style.display,t?("none"===n&&(u[c]=U.get(i,"display")||null,u[c]||(i.style.display="")),""===i.style.display&&se(i)&&(u[c]=(l=o=s=r=void 0,s=(a=i).ownerDocument,o=a.nodeName,(l=le[o])||(r=s.body.appendChild(s.createElement(o)),l=T.css(r,"display"),r.parentNode.removeChild(r),"none"===l&&(l="block"),le[o]=l)))):"none"!==n&&(u[c]="none",U.set(i,"display",n)));for(c=0;c<d;c++)null!=u[c]&&(e[c].style.display=u[c]);return e}T.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){se(this)?T(this).show():T(this).hide()})}});var ce,de,pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,fe=/^$|^module$|\/(?:java|ecma)script/i;ce=S.createDocumentFragment().appendChild(S.createElement("div")),(de=S.createElement("input")).setAttribute("type","radio"),de.setAttribute("checked","checked"),de.setAttribute("name","t"),ce.appendChild(de),y.checkClone=ce.cloneNode(!0).cloneNode(!0).lastChild.checked,ce.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!ce.cloneNode(!0).lastChild.defaultValue,ce.innerHTML="<option></option>",y.option=!!ce.lastChild;var ve={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&A(e,t)?T.merge([e],n):n}function ge(e,t){for(var n=0,i=e.length;n<i;n++)U.set(e[n],"globalEval",!t||U.get(t[n],"globalEval"))}ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td,y.option||(ve.optgroup=ve.option=[1,"<select multiple='multiple'>","</select>"]);var ye=/<|&#?\w+;/;function be(e,t,n,i,a){for(var r,s,o,l,u,c,d=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((r=e[h])||0===r)if("object"===w(r))T.merge(p,r.nodeType?[r]:r);else if(ye.test(r)){for(s=s||d.appendChild(t.createElement("div")),o=(he.exec(r)||["",""])[1].toLowerCase(),l=ve[o]||ve._default,s.innerHTML=l[1]+T.htmlPrefilter(r)+l[2],c=l[0];c--;)s=s.lastChild;T.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(r));for(d.textContent="",h=0;r=p[h++];)if(i&&-1<T.inArray(r,i))a&&a.push(r);else if(u=ae(r),s=me(d.appendChild(r),"script"),u&&ge(s),n)for(c=0;r=s[c++];)fe.test(r.type||"")&&n.push(r);return d}var xe=/^key/,we=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ce=/^([^.]*)(?:\.(.+)|)/;function Ee(){return!0}function Se(){return!1}function Te(e,t){return e===function(){try{return S.activeElement}catch(e){}}()==("focus"===t)}function ke(e,t,n,i,a,r){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(i=i||n,n=void 0),t)ke(e,o,n,i,t[o],r);return e}if(null==i&&null==a?(a=n,i=n=void 0):null==a&&("string"==typeof n?(a=i,i=void 0):(a=i,i=n,n=void 0)),!1===a)a=Se;else if(!a)return e;return 1===r&&(s=a,(a=function(e){return T().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=T.guid++)),e.each(function(){T.event.add(this,t,a,i,n)})}function Ae(e,a,r){r?(U.set(e,a,!1),T.event.add(e,a,{namespace:!1,handler:function(e){var t,n,i=U.get(this,a);if(1&e.isTrigger&&this[a]){if(i.length)(T.event.special[a]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),U.set(this,a,i),t=r(this,a),this[a](),i!==(n=U.get(this,a))||t?U.set(this,a,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else i.length&&(U.set(this,a,{value:T.event.trigger(T.extend(i[0],T.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===U.get(e,a)&&T.event.add(e,a,Ee)}T.event={global:{},add:function(t,e,n,i,a){var r,s,o,l,u,c,d,p,h,f,v,m=U.get(t);if(W(t))for(n.handler&&(n=(r=n).handler,a=r.selector),a&&T.find.matchesSelector(ie,a),n.guid||(n.guid=T.guid++),(l=m.events)||(l=m.events=Object.create(null)),(s=m.handle)||(s=m.handle=function(e){return void 0!==T&&T.event.triggered!==e.type?T.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(I)||[""]).length;u--;)h=v=(o=Ce.exec(e[u])||[])[1],f=(o[2]||"").split(".").sort(),h&&(d=T.event.special[h]||{},h=(a?d.delegateType:d.bindType)||h,d=T.event.special[h]||{},c=T.extend({type:h,origType:v,data:i,handler:n,guid:n.guid,selector:a,needsContext:a&&T.expr.match.needsContext.test(a),namespace:f.join(".")},r),(p=l[h])||((p=l[h]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(t,i,f,s)||t.addEventListener&&t.addEventListener(h,s)),d.add&&(d.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),a?p.splice(p.delegateCount++,0,c):p.push(c),T.event.global[h]=!0)},remove:function(e,t,n,i,a){var r,s,o,l,u,c,d,p,h,f,v,m=U.hasData(e)&&U.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(I)||[""]).length;u--;)if(h=v=(o=Ce.exec(t[u])||[])[1],f=(o[2]||"").split(".").sort(),h){for(d=T.event.special[h]||{},p=l[h=(i?d.delegateType:d.bindType)||h]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=r=p.length;r--;)c=p[r],!a&&v!==c.origType||n&&n.guid!==c.guid||o&&!o.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(r,1),c.selector&&p.delegateCount--,d.remove&&d.remove.call(e,c));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,f,m.handle)||T.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)T.event.remove(e,h+t[u],n,i,!0);T.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,n,i,a,r,s,o=new Array(arguments.length),l=T.event.fix(e),u=(U.get(this,"events")||Object.create(null))[l.type]||[],c=T.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(s=T.event.handlers.call(this,l,u),t=0;(a=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=a.elem,n=0;(r=a.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((T.event.special[r.origType]||{}).handle||r.handler).apply(a.elem,o))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,a,r,s,o=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(r=[],s={},n=0;n<l;n++)void 0===s[a=(i=t[n]).selector+" "]&&(s[a]=i.needsContext?-1<T(a,this).index(u):T.find(a,this,null,[u]).length),s[a]&&r.push(i);r.length&&o.push({elem:u,handlers:r})}return u=this,l<t.length&&o.push({elem:u,handlers:t.slice(l)}),o},addProp:function(t,e){Object.defineProperty(T.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click",Ee),!1},trigger:function(e){var t=this||e;return pe.test(t.type)&&t.click&&A(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return pe.test(t.type)&&t.click&&A(t,"input")&&U.get(t,"click")||A(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&xe.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&we.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},function(e,t){T.event.special[e]={setup:function(){return Ae(this,e,Te),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}}),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,a){T.event.special[e]={delegateType:a,bindType:a,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||T.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=a),t}}}),T.fn.extend({on:function(e,t,n,i){return ke(this,e,t,n,i)},one:function(e,t,n,i){return ke(this,e,t,n,i,1)},off:function(e,t,n){var i,a;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,T(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each(function(){T.event.remove(this,e,n,t)});for(a in e)this.off(a,t,e[a]);return this}});var Me=/<script|<style|<link/i,Pe=/checked\s*(?:[^=]|=\s*.checked.)/i,$e=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function De(e,t){return A(e,"table")&&A(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function _e(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Fe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,i,a,r,s,o;if(1===t.nodeType){if(U.hasData(e)&&(o=U.get(e).events))for(a in U.remove(t,"handle events"),o)for(n=0,i=o[a].length;n<i;n++)T.event.add(t,a,o[a][n]);K.hasData(e)&&(r=K.access(e),s=T.extend({},r),K.set(t,s))}}function Ie(n,i,a,r){i=m(i);var e,t,s,o,l,u,c=0,d=n.length,p=d-1,h=i[0],f=b(h);if(f||1<d&&"string"==typeof h&&!y.checkClone&&Pe.test(h))return n.each(function(e){var t=n.eq(e);f&&(i[0]=h.call(this,e,t.html())),Ie(t,i,a,r)});if(d&&(t=(e=be(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(o=(s=T.map(me(e,"script"),_e)).length;c<d;c++)l=e,c!==p&&(l=T.clone(l,!0,!0),o&&T.merge(s,me(l,"script"))),a.call(n[c],l,c);if(o)for(u=s[s.length-1].ownerDocument,T.map(s,Fe),c=0;c<o;c++)l=s[c],fe.test(l.type||"")&&!U.access(l,"globalEval")&&T.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&!l.noModule&&T._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):x(l.textContent.replace($e,""),l,u))}return n}function Oe(e,t,n){for(var i,a=t?T.filter(t,e):e,r=0;null!=(i=a[r]);r++)n||1!==i.nodeType||T.cleanData(me(i)),i.parentNode&&(n&&ae(i)&&ge(me(i,"script")),i.parentNode.removeChild(i));return e}T.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,a,r,s,o,l,u,c=e.cloneNode(!0),d=ae(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(s=me(c),i=0,a=(r=me(e)).length;i<a;i++)o=r[i],l=s[i],u=void 0,"input"===(u=l.nodeName.toLowerCase())&&pe.test(o.type)?l.checked=o.checked:"input"!==u&&"textarea"!==u||(l.defaultValue=o.defaultValue);if(t)if(n)for(r=r||me(e),s=s||me(c),i=0,a=r.length;i<a;i++)Le(r[i],s[i]);else Le(e,c);return 0<(s=me(c,"script")).length&&ge(s,!d&&me(e,"script")),c},cleanData:function(e){for(var t,n,i,a=T.event.special,r=0;void 0!==(n=e[r]);r++)if(W(n)){if(t=n[U.expando]){if(t.events)for(i in t.events)a[i]?T.event.remove(n,i):T.removeEvent(n,i,t.handle);n[U.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),T.fn.extend({detach:function(e){return Oe(this,e,!0)},remove:function(e){return Oe(this,e)},text:function(e){return R(this,function(e){return void 0===e?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||De(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=De(this,e)).insertBefore(e,t.firstChild)})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return R(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!ve[(he.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;T.inArray(this,n)<0&&(T.cleanData(me(this)),t&&t.replaceChild(e,this))},n)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){T.fn[e]=function(e){for(var t,n=[],i=T(e),a=i.length-1,r=0;r<=a;r++)t=r===a?this:this.clone(!0),T(i[r])[s](t),l.apply(n,t.get());return this.pushStack(n)}});function ze(e,t,n){var i,a,r={};for(a in t)r[a]=e.style[a],e.style[a]=t[a];for(a in i=n.call(e),t)e.style[a]=r[a];return i}var Be,je,Ne,He,Re,qe,Ve,Xe,Ye=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),We=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=E),t.getComputedStyle(e)},Ge=new RegExp(ne.join("|"),"i");function Ue(){var e;Xe&&(Ve.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(Ve).appendChild(Xe),e=E.getComputedStyle(Xe),Be="1%"!==e.top,qe=12===Ke(e.marginLeft),Xe.style.right="60%",He=36===Ke(e.right),je=36===Ke(e.width),Xe.style.position="absolute",Ne=12===Ke(Xe.offsetWidth/3),ie.removeChild(Ve),Xe=null)}function Ke(e){return Math.round(parseFloat(e))}function Ze(e,t,n){var i,a,r,s,o=e.style;return(n=n||We(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=T.style(e,t)),!y.pixelBoxStyles()&&Ye.test(s)&&Ge.test(t)&&(i=o.width,a=o.minWidth,r=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=i,o.minWidth=a,o.maxWidth=r)),void 0!==s?s+"":s}function Qe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Ve=S.createElement("div"),(Xe=S.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xe.style.backgroundClip,T.extend(y,{boxSizingReliable:function(){return Ue(),je},pixelBoxStyles:function(){return Ue(),He},pixelPosition:function(){return Ue(),Be},reliableMarginLeft:function(){return Ue(),qe},scrollboxSize:function(){return Ue(),Ne},reliableTrDimensions:function(){var e,t,n,i;return null==Re&&(e=S.createElement("table"),t=S.createElement("tr"),n=S.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",n.style.height="9px",ie.appendChild(e).appendChild(t).appendChild(n),i=E.getComputedStyle(t),Re=3<parseInt(i.height),ie.removeChild(e)),Re}}));var Je=["Webkit","Moz","ms"],et=S.createElement("div").style,tt={};function nt(e){var t=T.cssProps[e]||tt[e];return t||(e in et?e:tt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Je.length;n--;)if((e=Je[n]+t)in et)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,at=/^--/,rt={position:"absolute",visibility:"hidden",display:"block"},st={letterSpacing:"0",fontWeight:"400"};function ot(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function lt(e,t,n,i,a,r){var s="width"===t?1:0,o=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=T.css(e,n+ne[s],!0,a)),i?("content"===n&&(l-=T.css(e,"padding"+ne[s],!0,a)),"margin"!==n&&(l-=T.css(e,"border"+ne[s]+"Width",!0,a))):(l+=T.css(e,"padding"+ne[s],!0,a),"padding"!==n?l+=T.css(e,"border"+ne[s]+"Width",!0,a):o+=T.css(e,"border"+ne[s]+"Width",!0,a));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-o-.5))||0),l}function ut(e,t,n){var i=We(e),a=(!y.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,i),r=a,s=Ze(e,t,i),o="offset"+t[0].toUpperCase()+t.slice(1);if(Ye.test(s)){if(!n)return s;s="auto"}return(!y.boxSizingReliable()&&a||!y.reliableTrDimensions()&&A(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===T.css(e,"display",!1,i))&&e.getClientRects().length&&(a="border-box"===T.css(e,"boxSizing",!1,i),(r=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+lt(e,t,n||(a?"border":"content"),r,i,s)+"px"}function ct(e,t,n,i,a){return new ct.prototype.init(e,t,n,i,a)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,r,s,o=Y(t),l=at.test(t),u=e.style;if(l||(t=nt(o)),s=T.cssHooks[t]||T.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(a=s.get(e,!1,i))?a:u[t];"string"===(r=typeof n)&&(a=te.exec(n))&&a[1]&&(n=oe(e,t,a),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=a&&a[3]||(T.cssNumber[o]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,i){var a,r,s,o=Y(t);return at.test(t)||(t=nt(o)),(s=T.cssHooks[t]||T.cssHooks[o])&&"get"in s&&(a=s.get(e,!0,n)),void 0===a&&(a=Ze(e,t,i)),"normal"===a&&t in st&&(a=st[t]),""===n||n?(r=parseFloat(a),!0===n||isFinite(r)?r||0:a):a}}),T.each(["height","width"],function(e,l){T.cssHooks[l]={get:function(e,t,n){if(t)return!it.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ut(e,l,n):ze(e,rt,function(){return ut(e,l,n)})},set:function(e,t,n){var i,a=We(e),r=!y.scrollboxSize()&&"absolute"===a.position,s=(r||n)&&"border-box"===T.css(e,"boxSizing",!1,a),o=n?lt(e,l,n,s,a):0;return s&&r&&(o-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(a[l])-lt(e,l,"border",!1,a)-.5)),o&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[l]=t,t=T.css(e,l)),ot(0,t,o)}}}),T.cssHooks.marginLeft=Qe(y.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-ze(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(a,r){T.cssHooks[a+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[a+ne[t]+r]=i[t]||i[t-2]||i[0];return n}},"margin"!==a&&(T.cssHooks[a+r].set=ot)}),T.fn.extend({css:function(e,t){return R(this,function(e,t,n){var i,a,r={},s=0;if(Array.isArray(t)){for(i=We(e),a=t.length;s<a;s++)r[t[s]]=T.css(e,t[s],!1,i);return r}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,1<arguments.length)}}),(T.Tween=ct).prototype={constructor:ct,init:function(e,t,n,i,a,r){this.elem=e,this.prop=n,this.easing=a||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(T.cssNumber[n]?"":"px")},cur:function(){var e=ct.propHooks[this.prop];return e&&e.get?e.get(this):ct.propHooks._default.get(this)},run:function(e){var t,n=ct.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ct.propHooks._default.set(this),this}},ct.prototype.init.prototype=ct.prototype,ct.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[nt(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},ct.propHooks.scrollTop=ct.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=ct.prototype.init,T.fx.step={};var dt,pt,ht,ft,vt=/^(?:toggle|show|hide)$/,mt=/queueHooks$/;function gt(){pt&&(!1===S.hidden&&E.requestAnimationFrame?E.requestAnimationFrame(gt):E.setTimeout(gt,T.fx.interval),T.fx.tick())}function yt(){return E.setTimeout(function(){dt=void 0}),dt=Date.now()}function bt(e,t){var n,i=0,a={height:e};for(t=t?1:0;i<4;i+=2-t)a["margin"+(n=ne[i])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function xt(e,t,n){for(var i,a=(wt.tweeners[t]||[]).concat(wt.tweeners["*"]),r=0,s=a.length;r<s;r++)if(i=a[r].call(n,t,e))return i}function wt(r,e,t){var n,s,i=0,a=wt.prefilters.length,o=T.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=dt||yt(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),i=0,a=u.tweens.length;i<a;i++)u.tweens[i].run(n);return o.notifyWith(r,[u,n,t]),n<1&&a?t:(a||o.notifyWith(r,[u,1,0]),o.resolveWith(r,[u]),!1)},u=o.promise({elem:r,props:T.extend({},e),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},t),originalProperties:e,originalOptions:t,startTime:dt||yt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=T.Tween(r,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)u.tweens[t].run(1);return e?(o.notifyWith(r,[u,1,0]),o.resolveWith(r,[u,e])):o.rejectWith(r,[u,e]),this}}),c=u.props;for(!function(e,t){var n,i,a,r,s;for(n in e)if(a=t[i=Y(n)],r=e[n],Array.isArray(r)&&(a=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(s=T.cssHooks[i])&&"expand"in s)for(n in r=s.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=a);else t[i]=a}(c,u.opts.specialEasing);i<a;i++)if(n=wt.prefilters[i].call(u,r,c,u.opts))return b(n.stop)&&(T._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return T.map(c,xt,u),b(u.opts.start)&&u.opts.start.call(r,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),T.fx.timer(T.extend(l,{elem:r,anim:u,queue:u.opts.queue})),u}T.Animation=T.extend(wt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return oe(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,a=(e=b(e)?(t=e,["*"]):e.match(I)).length;i<a;i++)n=e[i],wt.tweeners[n]=wt.tweeners[n]||[],wt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,a,r,s,o,l,u,c,d="width"in t||"height"in t,p=this,h={},f=e.style,v=e.nodeType&&se(e),m=U.get(e,"fxshow");for(i in n.queue||(null==(s=T._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,p.always(function(){p.always(function(){s.unqueued--,T.queue(e,"fx").length||s.empty.fire()})})),t)if(a=t[i],vt.test(a)){if(delete t[i],r=r||"toggle"===a,a===(v?"hide":"show")){if("show"!==a||!m||void 0===m[i])continue;v=!0}h[i]=m&&m[i]||T.style(e,i)}if((l=!T.isEmptyObject(t))||!T.isEmptyObject(h))for(i in d&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(u=m&&m.display)&&(u=U.get(e,"display")),"none"===(c=T.css(e,"display"))&&(u?c=u:(ue([e],!0),u=e.style.display||u,c=T.css(e,"display"),ue([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===T.css(e,"float")&&(l||(p.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,h)l||(m?"hidden"in m&&(v=m.hidden):m=U.access(e,"fxshow",{display:u}),r&&(m.hidden=!v),v&&ue([e],!0),p.done(function(){for(i in v||ue([e]),U.remove(e,"fxshow"),h)T.style(e,i,h[i])})),l=xt(v?m[i]:0,i,p),i in m||(m[i]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?wt.prefilters.unshift(e):wt.prefilters.push(e)}}),T.speed=function(e,t,n){var i=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return T.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in T.fx.speeds?i.duration=T.fx.speeds[i.duration]:i.duration=T.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(e,t,n,i){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function a(){var e=wt(this,T.extend({},t),s);(r||U.get(this,"finish"))&&e.stop(!0)}var r=T.isEmptyObject(t),s=T.speed(e,n,i);return a.finish=a,r||!1===s.queue?this.each(a):this.queue(s.queue,a)},stop:function(a,e,r){function s(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof a&&(r=e,e=a,a=void 0),e&&this.queue(a||"fx",[]),this.each(function(){var e=!0,t=null!=a&&a+"queueHooks",n=T.timers,i=U.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&mt.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=a&&n[t].queue!==a||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||T.dequeue(this,a)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=U.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],a=T.timers,r=n?n.length:0;for(t.finish=!0,T.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=a.length;e--;)a[e].elem===this&&a[e].queue===s&&(a[e].anim.stop(!0),a.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),T.each(["toggle","show","hide"],function(e,i){var a=T.fn[i];T.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?a.apply(this,arguments):this.animate(bt(i,!0),e,t,n)}}),T.each({slideDown:bt("show"),slideUp:bt("hide"),slideToggle:bt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){T.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),dt=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){pt||(pt=!0,gt())},T.fx.stop=function(){pt=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(i,e){return i=T.fx&&T.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=E.setTimeout(e,i);t.stop=function(){E.clearTimeout(n)}})},ht=S.createElement("input"),ft=S.createElement("select").appendChild(S.createElement("option")),ht.type="checkbox",y.checkOn=""!==ht.value,y.optSelected=ft.selected,(ht=S.createElement("input")).value="t",ht.type="radio",y.radioValue="t"===ht.value;var Ct,Et=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return R(this,T.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?T.prop(e,t,n):(1===r&&T.isXMLDoc(e)||(a=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?Ct:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(a&&"get"in a&&null!==(i=a.get(e,t)))&&null==(i=T.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&A(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,a=t&&t.match(I);if(a&&1===e.nodeType)for(;n=a[i++];)e.removeAttribute(n)}}),Ct={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var s=Et[t]||T.find.attr;Et[t]=function(e,t,n){var i,a,r=t.toLowerCase();return n||(a=Et[r],Et[r]=i,i=null!=s(e,t,n)?r:null,Et[r]=a),i}});var St=/^(?:input|select|textarea|button)$/i,Tt=/^(?:a|area)$/i;function kt(e){return(e.match(I)||[]).join(" ")}function At(e){return e.getAttribute&&e.getAttribute("class")||""}function Mt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(I)||[]}T.fn.extend({prop:function(e,t){return R(this,T.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[T.propFix[e]||e]})}}),T.extend({prop:function(e,t,n){var i,a,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&T.isXMLDoc(e)||(t=T.propFix[t]||t,a=T.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(i=a.set(e,n,t))?i:e[t]=n:a&&"get"in a&&null!==(i=a.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):St.test(e.nodeName)||Tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(t){var e,n,i,a,r,s,o,l=0;if(b(t))return this.each(function(e){T(this).addClass(t.call(this,e,At(this)))});if((e=Mt(t)).length)for(;n=this[l++];)if(a=At(n),i=1===n.nodeType&&" "+kt(a)+" "){for(s=0;r=e[s++];)i.indexOf(" "+r+" ")<0&&(i+=r+" ");a!==(o=kt(i))&&n.setAttribute("class",o)}return this},removeClass:function(t){var e,n,i,a,r,s,o,l=0;if(b(t))return this.each(function(e){T(this).removeClass(t.call(this,e,At(this)))});if(!arguments.length)return this.attr("class","");if((e=Mt(t)).length)for(;n=this[l++];)if(a=At(n),i=1===n.nodeType&&" "+kt(a)+" "){for(s=0;r=e[s++];)for(;-1<i.indexOf(" "+r+" ");)i=i.replace(" "+r+" "," ");a!==(o=kt(i))&&n.setAttribute("class",o)}return this},toggleClass:function(a,t){var r=typeof a,s="string"==r||Array.isArray(a);return"boolean"==typeof t&&s?t?this.addClass(a):this.removeClass(a):b(a)?this.each(function(e){T(this).toggleClass(a.call(this,e,At(this),t),t)}):this.each(function(){var e,t,n,i;if(s)for(t=0,n=T(this),i=Mt(a);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==a&&"boolean"!=r||((e=At(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==a&&U.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+kt(At(t))+" ").indexOf(i))return!0;return!1}});var Pt=/\r/g;T.fn.extend({val:function(n){var i,e,a,t=this[0];return arguments.length?(a=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=a?n.call(this,e,T(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=T.map(t,function(e){return null==e?"":e+""})),(i=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=T.valHooks[t.type]||T.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(Pt,""):null==e?"":e:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:kt(T.text(e))}},select:{get:function(e){for(var t,n,i=e.options,a=e.selectedIndex,r="select-one"===e.type,s=r?null:[],o=r?a+1:i.length,l=a<0?o:r?a:0;l<o;l++)if(((n=i[l]).selected||l===a)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(t=T(n).val(),r)return t;s.push(t)}return s},set:function(e,t){for(var n,i,a=e.options,r=T.makeArray(t),s=a.length;s--;)((i=a[s]).selected=-1<T.inArray(T.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<T.inArray(T(e).val(),t)}},y.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),y.focusin="onfocusin"in E;function $t(e){e.stopPropagation()}var Dt=/^(?:focusinfocus|focusoutblur)$/;T.extend(T.event,{trigger:function(e,t,n,i){var a,r,s,o,l,u,c,d=[n||S],p=g.call(e,"type")?e.type:e,h=g.call(e,"namespace")?e.namespace.split("."):[],f=c=r=n=n||S;if(3!==n.nodeType&&8!==n.nodeType&&!Dt.test(p+T.event.triggered)&&(-1<p.indexOf(".")&&(p=(h=p.split(".")).shift(),h.sort()),o=p.indexOf(":")<0&&"on"+p,(e=e[T.expando]?e:new T.Event(p,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=h.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:T.makeArray(t,[e]),u=T.event.special[p]||{},i||!u.trigger||!1!==u.trigger.apply(n,t))){if(!i&&!u.noBubble&&!v(n)){for(s=u.delegateType||p,Dt.test(s+p)||(f=f.parentNode);f;f=f.parentNode)d.push(f),r=f;r===(n.ownerDocument||S)&&d.push(r.defaultView||r.parentWindow||E)}for(a=0;(f=d[a++])&&!e.isPropagationStopped();)c=f,e.type=1<a?s:u.bindType||p,(l=(U.get(f,"events")||Object.create(null))[e.type]&&U.get(f,"handle"))&&l.apply(f,t),(l=o&&f[o])&&l.apply&&W(f)&&(e.result=l.apply(f,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),t)||!W(n)||o&&b(n[p])&&!v(n)&&((r=n[o])&&(n[o]=null),T.event.triggered=p,e.isPropagationStopped()&&c.addEventListener(p,$t),n[p](),e.isPropagationStopped()&&c.removeEventListener(p,$t),T.event.triggered=void 0,r&&(n[o]=r)),e.result}},simulate:function(e,t,n){var i=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(i,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),y.focusin||T.each({focus:"focusin",blur:"focusout"},function(n,i){function a(e){T.event.simulate(i,e.target,T.event.fix(e))}T.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,i);t||e.addEventListener(n,a,!0),U.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=U.access(e,i)-1;t?U.access(e,i,t):(e.removeEventListener(n,a,!0),U.remove(e,i))}}});var _t=E.location,Ft={guid:Date.now()},Lt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new E.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var It=/\[\]$/,Ot=/\r?\n/g,zt=/^(?:submit|button|image|reset|file)$/i,Bt=/^(?:input|select|textarea|keygen)/i;T.param=function(e,t){function n(e,t){var n=b(t)?t():t;a[a.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,a=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,a,r){var t;if(Array.isArray(e))T.each(e,function(e,t){a||It.test(i)?r(i,t):n(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,a,r)});else if(a||"object"!==w(e))r(i,e);else for(t in e)n(i+"["+t+"]",e[t],a,r)}(i,e[i],t,n);return a.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Bt.test(this.nodeName)&&!zt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(Ot,"\r\n")}}):{name:t.name,value:n.replace(Ot,"\r\n")}}).get()}});var jt=/%20/g,Nt=/#.*$/,Ht=/([?&])_=[^&]*/,Rt=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:GET|HEAD)$/,Vt=/^\/\//,Xt={},Yt={},Wt="*/".concat("*"),Gt=S.createElement("a");function Ut(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,a=e.toLowerCase().match(I)||[];if(b(t))for(;n=a[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function Kt(t,a,r,s){var o={},l=t===Yt;function u(e){var i;return o[e]=!0,T.each(t[e]||[],function(e,t){var n=t(a,r,s);return"string"!=typeof n||l||o[n]?l?!(i=n):void 0:(a.dataTypes.unshift(n),u(n),!1)}),i}return u(a.dataTypes[0])||!o["*"]&&u("*")}function Zt(e,t){var n,i,a=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:i=i||{})[n]=t[n]);return i&&T.extend(!0,e,i),e}Gt.href=_t.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_t.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_t.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Zt(Zt(e,T.ajaxSettings),t):Zt(T.ajaxSettings,e)},ajaxPrefilter:Ut(Xt),ajaxTransport:Ut(Yt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var c,d,p,n,h,i,f,v,a,r,m=T.ajaxSetup({},t),g=m.context||m,y=m.context&&(g.nodeType||g.jquery)?T(g):T.event,b=T.Deferred(),x=T.Callbacks("once memory"),w=m.statusCode||{},s={},o={},l="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(f){if(!n)for(n={};t=Rt.exec(p);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return f?p:null},setRequestHeader:function(e,t){return null==f&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==f&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(f)C.always(e[C.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||l;return c&&c.abort(t),u(0,t),this}};if(b.promise(C),m.url=((e||m.url||_t.href)+"").replace(Vt,_t.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(I)||[""],null==m.crossDomain){i=S.createElement("a");try{i.href=m.url,i.href=i.href,m.crossDomain=Gt.protocol+"//"+Gt.host!=i.protocol+"//"+i.host}catch(e){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=T.param(m.data,m.traditional)),Kt(Xt,m,t,C),f)return C;for(a in(v=T.event&&m.global)&&0==T.active++&&T.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!qt.test(m.type),d=m.url.replace(Nt,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(jt,"+")):(r=m.url.slice(d.length),m.data&&(m.processData||"string"==typeof m.data)&&(d+=(Lt.test(d)?"&":"?")+m.data,delete m.data),!1===m.cache&&(d=d.replace(Ht,"$1"),r=(Lt.test(d)?"&":"?")+"_="+Ft.guid+++r),m.url=d+r),m.ifModified&&(T.lastModified[d]&&C.setRequestHeader("If-Modified-Since",T.lastModified[d]),T.etag[d]&&C.setRequestHeader("If-None-Match",T.etag[d])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&C.setRequestHeader("Content-Type",m.contentType),C.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+Wt+"; q=0.01":""):m.accepts["*"]),m.headers)C.setRequestHeader(a,m.headers[a]);if(m.beforeSend&&(!1===m.beforeSend.call(g,C,m)||f))return C.abort();if(l="abort",x.add(m.complete),C.done(m.success),C.fail(m.error),c=Kt(Yt,m,t,C)){if(C.readyState=1,v&&y.trigger("ajaxSend",[C,m]),f)return C;m.async&&0<m.timeout&&(h=E.setTimeout(function(){C.abort("timeout")},m.timeout));try{f=!1,c.send(s,u)}catch(e){if(f)throw e;u(-1,e)}}else u(-1,"No Transport");function u(e,t,n,i){var a,r,s,o,l,u=t;f||(f=!0,h&&E.clearTimeout(h),c=void 0,p=i||"",C.readyState=0<e?4:0,a=200<=e&&e<300||304===e,n&&(o=function(e,t,n){for(var i,a,r,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(a in o)if(o[a]&&o[a].test(i)){l.unshift(a);break}if(l[0]in n)r=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){r=a;break}s=s||a}r=r||s}if(r)return r!==l[0]&&l.unshift(r),n[r]}(m,C,n)),!a&&-1<T.inArray("script",m.dataTypes)&&(m.converters["text script"]=function(){}),o=function(e,t,n,i){var a,r,s,o,l,u={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(r=c.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=c.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(s=u[l+" "+r]||u["* "+r]))for(a in u)if((o=a.split(" "))[1]===r&&(s=u[l+" "+o[0]]||u["* "+o[0]])){!0===s?s=u[a]:!0!==u[a]&&(r=o[0],c.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(m,o,C,a),a?(m.ifModified&&((l=C.getResponseHeader("Last-Modified"))&&(T.lastModified[d]=l),(l=C.getResponseHeader("etag"))&&(T.etag[d]=l)),204===e||"HEAD"===m.type?u="nocontent":304===e?u="notmodified":(u=o.state,r=o.data,a=!(s=o.error))):(s=u,!e&&u||(u="error",e<0&&(e=0))),C.status=e,C.statusText=(t||u)+"",a?b.resolveWith(g,[r,u,C]):b.rejectWith(g,[C,u,s]),C.statusCode(w),w=void 0,v&&y.trigger(a?"ajaxSuccess":"ajaxError",[C,m,a?r:s]),x.fireWith(g,[C,u]),v&&(y.trigger("ajaxComplete",[C,m]),--T.active||T.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],function(e,a){T[a]=function(e,t,n,i){return b(t)&&(i=i||n,n=t,t=void 0),T.ajax(T.extend({url:e,type:a,dataType:i,data:t,success:n},T.isPlainObject(e)&&e))}}),T.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),T._evalUrl=function(e,t,n){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t,n)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){T(this).wrapInner(n.call(this,e))}):this.each(function(){var e=T(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){T(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new E.XMLHttpRequest}catch(e){}};var Qt={0:200,1223:204},Jt=T.ajaxSettings.xhr();y.cors=!!Jt&&"withCredentials"in Jt,y.ajax=Jt=!!Jt,T.ajaxTransport(function(a){var r,s;if(y.cors||Jt&&!a.crossDomain)return{send:function(e,t){var n,i=a.xhr();if(i.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(n in a.xhrFields)i[n]=a.xhrFields[n];for(n in a.mimeType&&i.overrideMimeType&&i.overrideMimeType(a.mimeType),a.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Qt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),s=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&E.setTimeout(function(){r&&s()})},r=r("abort");try{i.send(a.hasContent&&a.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),T.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),T.ajaxTransport("script",function(n){var i,a;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=T("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",a=function(e){i.remove(),a=null,e&&t("error"===e.type?404:200,e.type)}),S.head.appendChild(i[0])},abort:function(){a&&a()}}});var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||T.expando+"_"+Ft.guid++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",function(e,t,n){var i,a,r,s=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(nn,"$1"+i):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||T.error(i+" was not called"),r[0]},e.dataTypes[0]="json",a=E[i],E[i]=function(){r=arguments},n.always(function(){void 0===a?T(E).removeProp(i):E[i]=a,e[i]&&(e.jsonpCallback=t.jsonpCallback,tn.push(i)),r&&b(a)&&a(r[0]),r=a=void 0}),"script"}),y.createHTMLDocument=((en=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((i=(t=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,t.head.appendChild(i)):t=S),r=!n&&[],(a=M.exec(e))?[t.createElement(a[1])]:(a=be([e],t,r),r&&r.length&&T(r).remove(),T.merge([],a.childNodes)));var i,a,r},T.fn.load=function(e,t,n){var i,a,r,s=this,o=e.indexOf(" ");return-1<o&&(i=kt(e.slice(o)),e=e.slice(0,o)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),0<s.length&&T.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){r=arguments,s.html(i?T("<div>").append(T.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},T.expr.pseudos.animated=function(t){return T.grep(T.timers,function(e){return t===e.elem}).length},T.offset={setOffset:function(e,t,n){var i,a,r,s,o,l,u=T.css(e,"position"),c=T(e),d={};"static"===u&&(e.style.position="relative"),o=c.offset(),r=T.css(e,"top"),l=T.css(e,"left"),a=("absolute"===u||"fixed"===u)&&-1<(r+l).indexOf("auto")?(s=(i=c.position()).top,i.left):(s=parseFloat(r)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,T.extend({},o))),null!=t.top&&(d.top=t.top-o.top+s),null!=t.left&&(d.left=t.left-o.left+a),"using"in t?t.using.call(e,d):("number"==typeof d.top&&(d.top+="px"),"number"==typeof d.left&&(d.left+="px"),c.css(d))}},T.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){T.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],a={top:0,left:0};if("fixed"===T.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((a=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),a.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-T.css(i,"marginTop",!0),left:t.left-a.left-T.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||ie})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,a){var r="pageYOffset"===a;T.fn[t]=function(e){return R(this,function(e,t,n){var i;return v(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n?i?i[a]:e[t]:void(i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n)},t,e,arguments.length)}}),T.each(["top","left"],function(e,n){T.cssHooks[n]=Qe(y.pixelPosition,function(e,t){if(t)return t=Ze(e,n),Ye.test(t)?T(e).position()[n]+"px":t})}),T.each({Height:"height",Width:"width"},function(s,o){T.each({padding:"inner"+s,content:o,"":"outer"+s},function(i,r){T.fn[r]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),a=i||(!0===e||!0===t?"margin":"border");return R(this,function(e,t,n){var i;return v(e)?0===r.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?T.css(e,t,a):T.style(e,t,n,a)},o,n?e:void 0,n)}})}),T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){T.fn[t]=function(e){return this.on(t,e)}}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){T.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var an=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;T.proxy=function(e,t){var n,i,a;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return i=o.call(arguments,2),(a=function(){return e.apply(t||this,i.concat(o.call(arguments)))}).guid=e.guid=e.guid||T.guid++,a},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=A,T.isFunction=b,T.isWindow=v,T.camelCase=Y,T.type=w,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},T.trim=function(e){return null==e?"":(e+"").replace(an,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var rn=E.jQuery,sn=E.$;return T.noConflict=function(e){return E.$===T&&(E.$=sn),e&&E.jQuery===T&&(E.jQuery=rn),T},void 0===e&&(E.jQuery=E.$=T),T}),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function e(){return(e=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}function i(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function r(t,n){void 0===t&&(t={}),void 0===n&&(n={}),Object.keys(n).forEach(function(e){void 0===t[e]?t[e]=n[e]:i(n[e])&&i(t[e])&&0<Object.keys(n[e]).length&&r(t[e],n[e])})}var t={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function w(){var e="undefined"!=typeof document?document:{};return r(e,t),e}var n={document:t,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function se(){var e="undefined"!=typeof window?window:{};return r(e,n),e}function s(e){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t){return(o=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t,n){return(l=function(){if("undefined"!=typeof Reflect&&Reflect.construct&&!Reflect.construct.sham){if("function"==typeof Proxy)return 1;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),1}catch(e){return}}}()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var a=new(Function.bind.apply(e,i));return n&&o(a,n.prototype),a}).apply(null,arguments)}function u(e){var i="function"==typeof Map?new Map:void 0;return(u=function(e){if(null===e||(t=e,-1===Function.toString.call(t).indexOf("[native code]")))return e;var t;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==i){if(i.has(e))return i.get(e);i.set(e,n)}function n(){return l(e,arguments,s(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),o(n,e)})(e)}var c=function(a){var e,t;function n(e){var t,n,i=a.call.apply(a,[this].concat(e))||this;return t=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(i),n=t.__proto__,Object.defineProperty(t,"__proto__",{get:function(){return n},set:function(e){n.__proto__=e}}),i}return t=a,(e=n).prototype=Object.create(t.prototype),(e.prototype.constructor=e).__proto__=t,n}(u(Array));function d(e){void 0===e&&(e=[]);var t=[];return e.forEach(function(e){Array.isArray(e)?t.push.apply(t,d(e)):t.push(e)}),t}function p(e,t){return Array.prototype.filter.call(e,t)}function _(e,t){var n=se(),i=w(),a=[];if(!t&&e instanceof c)return e;if(!e)return new c(a);if("string"==typeof e){var r=e.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){var s="div";0===r.indexOf("<li")&&(s="ul"),0===r.indexOf("<tr")&&(s="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(s="tr"),0===r.indexOf("<tbody")&&(s="table"),0===r.indexOf("<option")&&(s="select");var o=i.createElement(s);o.innerHTML=r;for(var l=0;l<o.childNodes.length;l+=1)a.push(o.childNodes[l])}else a=function(e,t){if("string"!=typeof e)return[e];for(var n=[],i=t.querySelectorAll(e),a=0;a<i.length;a+=1)n.push(i[a]);return n}(e.trim(),t||i)}else if(e.nodeType||e===n||e===i)a.push(e);else if(Array.isArray(e)){if(e instanceof c)return e;a=e}return new c(function(e){for(var t=[],n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(a))}_.fn=c.prototype;var h,m,f,v={addClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=d(t.map(function(e){return e.split(" ")}));return this.forEach(function(e){var t;(t=e.classList).add.apply(t,i)}),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=d(t.map(function(e){return e.split(" ")}));return this.forEach(function(e){var t;(t=e.classList).remove.apply(t,i)}),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=d(t.map(function(e){return e.split(" ")}));return 0<p(this,function(t){return 0<i.filter(function(e){return t.classList.contains(e)}).length}).length},toggleClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=d(t.map(function(e){return e.split(" ")}));this.forEach(function(t){i.forEach(function(e){t.classList.toggle(e)})})},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(var i in e)this[n][i]=e[i],this[n].setAttribute(i,e[i]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transition="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],r=t[1],s=t[2],a=t[3];function o(e){var t=e.target;if(t){var n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),_(t).is(r))s.apply(t,n);else for(var i=_(t).parents(),a=0;a<i.length;a+=1)_(i[a]).is(r)&&s.apply(i[a],n)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),s.apply(this,t)}"function"==typeof t[1]&&(i=t[0],s=t[1],a=t[2],r=void 0),a=a||!1;for(var u,c=i.split(" "),d=0;d<this.length;d+=1){var p=this[d];if(r)for(u=0;u<c.length;u+=1){var h=c[u];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[h]||(p.dom7LiveListeners[h]=[]),p.dom7LiveListeners[h].push({listener:s,proxyListener:o}),p.addEventListener(h,o,a)}else for(u=0;u<c.length;u+=1){var f=c[u];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[f]||(p.dom7Listeners[f]=[]),p.dom7Listeners[f].push({listener:s,proxyListener:l}),p.addEventListener(f,l,a)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],a=t[1],r=t[2],s=t[3];"function"==typeof t[1]&&(i=t[0],r=t[1],s=t[2],a=void 0),s=s||!1;for(var o=i.split(" "),l=0;l<o.length;l+=1)for(var u=o[l],c=0;c<this.length;c+=1){var d=this[c],p=void 0;if(!a&&d.dom7Listeners?p=d.dom7Listeners[u]:a&&d.dom7LiveListeners&&(p=d.dom7LiveListeners[u]),p&&p.length)for(var h=p.length-1;0<=h;--h){var f=p[h];(!r||f.listener!==r)&&!(r&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===r)&&r||(d.removeEventListener(u,f.proxyListener,s),p.splice(h,1))}}return this},trigger:function(){for(var e=se(),t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];for(var a=n[0].split(" "),r=n[1],s=0;s<a.length;s+=1)for(var o=a[s],l=0;l<this.length;l+=1){var u,c=this[l];e.CustomEvent&&(u=new e.CustomEvent(o,{detail:r,bubbles:!0,cancelable:!0}),c.dom7EventData=n.filter(function(e,t){return 0<t}),c.dispatchEvent(u),c.dom7EventData=[],delete c.dom7EventData)}return this},transitionEnd:function(n){var i=this;return n&&i.on("transitionend",function e(t){t.target===this&&(n.call(this,t),i.off("transitionend",e))}),this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=se();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(0<this.length){var e=se(),t=w(),n=this[0],i=n.getBoundingClientRect(),a=t.body,r=n.clientTop||a.clientTop||0,s=n.clientLeft||a.clientLeft||0,o=n===e?e.scrollY:n.scrollTop,l=n===e?e.scrollX:n.scrollLeft;return{top:i.top+o-r,left:i.left+l-s}}return null},css:function(e,t){var n,i=se();if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(var a in e)this[n].style[a]=e[a];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this},each:function(n){return n&&this.forEach(function(e,t){n.apply(e,[e,t])}),this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,n,i=se(),a=w(),r=this[0];if(!r||void 0===e)return!1;if("string"==typeof e){if(r.matches)return r.matches(e);if(r.webkitMatchesSelector)return r.webkitMatchesSelector(e);if(r.msMatchesSelector)return r.msMatchesSelector(e);for(t=_(e),n=0;n<t.length;n+=1)if(t[n]===r)return!0;return!1}if(e===a)return r===a;if(e===i)return r===i;if(e.nodeType||e instanceof c){for(t=e.nodeType?[e]:e,n=0;n<t.length;n+=1)if(t[n]===r)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(t-1<e)return _([]);if(e<0){var n=t+e;return n<0?_([]):_([this[n]])}return _([this[e]])},append:function(){for(var e,t=w(),n=0;n<arguments.length;n+=1){e=n<0||arguments.length<=n?void 0:arguments[n];for(var i=0;i<this.length;i+=1)if("string"==typeof e){var a=t.createElement("div");for(a.innerHTML=e;a.firstChild;)this[i].appendChild(a.firstChild)}else if(e instanceof c)for(var r=0;r<e.length;r+=1)this[i].appendChild(e[r]);else this[i].appendChild(e)}return this},prepend:function(e){for(var t,n=w(),i=0;i<this.length;i+=1)if("string"==typeof e){var a=n.createElement("div");for(a.innerHTML=e,t=a.childNodes.length-1;0<=t;--t)this[i].insertBefore(a.childNodes[t],this[i].childNodes[0])}else if(e instanceof c)for(t=0;t<e.length;t+=1)this[i].insertBefore(e[t],this[i].childNodes[0]);else this[i].insertBefore(e,this[i].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&_(this[0].nextElementSibling).is(e)?_([this[0].nextElementSibling]):_([]):this[0].nextElementSibling?_([this[0].nextElementSibling]):_([]):_([])},nextAll:function(e){var t=[],n=this[0];if(!n)return _([]);for(;n.nextElementSibling;){var i=n.nextElementSibling;(!e||_(i).is(e))&&t.push(i),n=i}return _(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&_(t.previousElementSibling).is(e)?_([t.previousElementSibling]):_([]):t.previousElementSibling?_([t.previousElementSibling]):_([])}return _([])},prevAll:function(e){var t=[],n=this[0];if(!n)return _([]);for(;n.previousElementSibling;){var i=n.previousElementSibling;(!e||_(i).is(e))&&t.push(i),n=i}return _(t)},parent:function(e){for(var t=[],n=0;n<this.length;n+=1)null===this[n].parentNode||e&&!_(this[n].parentNode).is(e)||t.push(this[n].parentNode);return _(t)},parents:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].parentNode;i;)e&&!_(i).is(e)||t.push(i),i=i.parentNode;return _(t)},closest:function(e){var t=this;return void 0===e?_([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].querySelectorAll(e),a=0;a<i.length;a+=1)t.push(i[a]);return _(t)},children:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].children,a=0;a<i.length;a+=1)e&&!_(i[a]).is(e)||t.push(i[a]);return _(t)},filter:function(e){return _(p(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function L(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function I(){return Date.now()}function g(e,t){void 0===t&&(t="x");var n,i,a,r=se(),s=r.getComputedStyle(e,null);return r.WebKitCSSMatrix?(6<(i=s.transform||s.webkitTransform).split(",").length&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),a=new r.WebKitCSSMatrix("none"===i?"":i)):n=(a=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=r.WebKitCSSMatrix?a.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=r.WebKitCSSMatrix?a.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),i||0}function y(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object}function oe(e){for(var t=Object(arguments.length<=0?void 0:e),n=1;n<arguments.length;n+=1){var i=n<0||arguments.length<=n?void 0:arguments[n];if(null!=i)for(var a=Object.keys(Object(i)),r=0,s=a.length;r<s;r+=1){var o=a[r],l=Object.getOwnPropertyDescriptor(i,o);void 0!==l&&l.enumerable&&(y(t[o])&&y(i[o])?oe(t[o],i[o]):!y(t[o])&&y(i[o])?(t[o]={},oe(t[o],i[o])):t[o]=i[o])}}return t}function b(n,i){Object.keys(i).forEach(function(t){y(i[t])&&Object.keys(i[t]).forEach(function(e){"function"==typeof i[t][e]&&(i[t][e]=i[t][e].bind(n))}),n[t]=i[t]})}function x(){var n,e;return h||(n=se(),e=w(),h={touch:!!("ontouchstart"in n||n.DocumentTouch&&e instanceof n.DocumentTouch),pointerEvents:!!n.PointerEvent&&"maxTouchPoints"in n.navigator&&0<=n.navigator.maxTouchPoints,observer:"MutationObserver"in n||"WebkitMutationObserver"in n,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});n.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in n}),h}function C(e){var t,n,i,a,r,s,o,l,u,c,d,p,h,f,v;return void 0===e&&(e={}),m||(n=(void 0===(t=e)?{}:t).userAgent,i=x(),a=se(),r=a.navigator.platform,s=n||a.navigator.userAgent,o={ios:!1,android:!1},l=a.screen.width,u=a.screen.height,c=s.match(/(Android);?[\s\/]+([\d.]+)?/),d=s.match(/(iPad).*OS\s([\d_]+)/),p=s.match(/(iPod)(.*OS\s([\d_]+))?/),h=!d&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===r,v="MacIntel"===r,!d&&v&&i.touch&&0<=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768"].indexOf(l+"x"+u)&&(d=(d=s.match(/(Version)\/([\d.]+)/))||[0,1,"13_0_0"],v=!1),c&&!f&&(o.os="android",o.android=!0),(d||h||p)&&(o.os="ios",o.ios=!0),m=o),m}function E(){var e,t;return f||(t=se(),f={isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:0<=(e=t.navigator.userAgent.toLowerCase()).indexOf("safari")&&e.indexOf("chrome")<0&&e.indexOf("android")<0,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}),f}function S(){var e,t,n,i=this,a=i.params,r=i.el;r&&0===r.offsetWidth||(a.breakpoints&&i.setBreakpoint(),e=i.allowSlideNext,t=i.allowSlidePrev,n=i.snapGrid,i.allowSlideNext=!0,i.allowSlidePrev=!0,i.updateSize(),i.updateSlides(),i.updateSlidesClasses(),("auto"===a.slidesPerView||1<a.slidesPerView)&&i.isEnd&&!i.isBeginning&&!i.params.centeredSlides?i.slideTo(i.slides.length-1,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0),i.autoplay&&i.autoplay.running&&i.autoplay.paused&&i.autoplay.run(),i.allowSlidePrev=t,i.allowSlideNext=e,i.params.watchOverflow&&n!==i.snapGrid&&i.checkOverflow())}Object.keys(v).forEach(function(e){_.fn[e]=v[e]});var T=!1;function k(){}var A={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1},M={modular:{useParams:function(n){var i=this;i.modules&&Object.keys(i.modules).forEach(function(e){var t=i.modules[e];t.params&&oe(n,t.params)})},useModules:function(i){void 0===i&&(i={});var a=this;a.modules&&Object.keys(a.modules).forEach(function(e){var t=a.modules[e],n=i[e]||{};t.on&&a.on&&Object.keys(t.on).forEach(function(e){a.on(e,t.on[e])}),t.create&&t.create.bind(a)(n)})}},eventsEmitter:{on:function(e,t,n){var i=this;if("function"!=typeof t)return i;var a=n?"unshift":"push";return e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][a](t)}),i},once:function(i,a,e){var r=this;if("function"!=typeof a)return r;function s(){r.off(i,s),s.__emitterProxy&&delete s.__emitterProxy;for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];a.apply(r,t)}return s.__emitterProxy=a,r.on(i,s,e)},onAny:function(e,t){if("function"!=typeof e)return this;var n=t?"unshift":"push";return this.eventsAnyListeners.indexOf(e)<0&&this.eventsAnyListeners[n](e),this},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var n=t.eventsAnyListeners.indexOf(e);return 0<=n&&t.eventsAnyListeners.splice(n,1),t},off:function(e,i){var a=this;return a.eventsListeners&&e.split(" ").forEach(function(n){void 0===i?a.eventsListeners[n]=[]:a.eventsListeners[n]&&a.eventsListeners[n].forEach(function(e,t){(e===i||e.__emitterProxy&&e.__emitterProxy===i)&&a.eventsListeners[n].splice(t,1)})}),a},emit:function(){var e,n,i,a=this;if(!a.eventsListeners)return a;for(var t=arguments.length,r=new Array(t),s=0;s<t;s++)r[s]=arguments[s];return i="string"==typeof r[0]||Array.isArray(r[0])?(e=r[0],n=r.slice(1,r.length),a):(e=r[0].events,n=r[0].data,r[0].context||a),n.unshift(i),(Array.isArray(e)?e:e.split(" ")).forEach(function(e){var t;a.eventsListeners&&a.eventsListeners[e]&&(t=[],a.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(i,n)}))}),a}},update:{updateSize:function(){var e=this,t=e.$el,n=void 0!==e.params.width&&null!==e.params.width?e.params.width:t[0].clientWidth,i=void 0!==e.params.height&&null!==e.params.width?e.params.height:t[0].clientHeight;0===n&&e.isHorizontal()||0===i&&e.isVertical()||(n=n-parseInt(t.css("padding-left")||0,10)-parseInt(t.css("padding-right")||0,10),i=i-parseInt(t.css("padding-top")||0,10)-parseInt(t.css("padding-bottom")||0,10),Number.isNaN(n)&&(n=0),Number.isNaN(i)&&(i=0),oe(e,{width:n,height:i,size:e.isHorizontal()?n:i}))},updateSlides:function(){var e=this,t=se(),n=e.params,i=e.$wrapperEl,a=e.size,r=e.rtlTranslate,s=e.wrongRTL,o=e.virtual&&n.virtual.enabled,l=o?e.virtual.slides.length:e.slides.length,u=i.children("."+e.params.slideClass),c=o?e.virtual.slides.length:u.length,d=[],p=[],h=[];function f(e,t){return!n.cssMode||t!==u.length-1}var v=n.slidesOffsetBefore;"function"==typeof v&&(v=n.slidesOffsetBefore.call(e));var m=n.slidesOffsetAfter;"function"==typeof m&&(m=n.slidesOffsetAfter.call(e));var g,y=e.snapGrid.length,b=e.snapGrid.length,x=n.spaceBetween,w=-v,C=0,E=0;if(void 0!==a){"string"==typeof x&&0<=x.indexOf("%")&&(x=parseFloat(x.replace("%",""))/100*a),e.virtualSize=-x,r?u.css({marginLeft:"",marginTop:""}):u.css({marginRight:"",marginBottom:""}),1<n.slidesPerColumn&&(g=Math.floor(c/n.slidesPerColumn)===c/e.params.slidesPerColumn?c:Math.ceil(c/n.slidesPerColumn)*n.slidesPerColumn,"auto"!==n.slidesPerView&&"row"===n.slidesPerColumnFill&&(g=Math.max(g,n.slidesPerView*n.slidesPerColumn)));for(var S,T,k,A,M,P=n.slidesPerColumn,$=g/P,D=Math.floor(c/n.slidesPerColumn),_=0;_<c;_+=1){G=0;var F,L,I,O,z,B,j,N,H,R,q,V,X,Y,W,G,U,K,Z,Q,J,ee,te=u.eq(_);1<n.slidesPerColumn&&(O=z=B=void 0,"row"===n.slidesPerColumnFill&&1<n.slidesPerGroup?(F=Math.floor(_/(n.slidesPerGroup*n.slidesPerColumn)),L=_-n.slidesPerColumn*n.slidesPerGroup*F,I=0===F?n.slidesPerGroup:Math.min(Math.ceil((c-F*P*n.slidesPerGroup)/P),n.slidesPerGroup),B=(z=L-(O=Math.floor(L/I))*I+F*n.slidesPerGroup)+O*g/P,te.css({"-webkit-box-ordinal-group":B,"-moz-box-ordinal-group":B,"-ms-flex-order":B,"-webkit-order":B,order:B})):"column"===n.slidesPerColumnFill?(O=_-(z=Math.floor(_/P))*P,(D<z||z===D&&O===P-1)&&P<=(O+=1)&&(O=0,z+=1)):z=_-(O=Math.floor(_/$))*$,te.css("margin-"+(e.isHorizontal()?"top":"left"),0!==O&&n.spaceBetween&&n.spaceBetween+"px")),"none"!==te.css("display")&&("auto"===n.slidesPerView?(j=t.getComputedStyle(te[0],null),N=te[0].style.transform,H=te[0].style.webkitTransform,N&&(te[0].style.transform="none"),H&&(te[0].style.webkitTransform="none"),G=n.roundLengths?e.isHorizontal()?te.outerWidth(!0):te.outerHeight(!0):e.isHorizontal()?(R=parseFloat(j.getPropertyValue("width")||0),q=parseFloat(j.getPropertyValue("padding-left")||0),V=parseFloat(j.getPropertyValue("padding-right")||0),X=parseFloat(j.getPropertyValue("margin-left")||0),Y=parseFloat(j.getPropertyValue("margin-right")||0),(W=j.getPropertyValue("box-sizing"))&&"border-box"===W?R+X+Y:R+q+V+X+Y):(U=parseFloat(j.getPropertyValue("height")||0),K=parseFloat(j.getPropertyValue("padding-top")||0),Z=parseFloat(j.getPropertyValue("padding-bottom")||0),Q=parseFloat(j.getPropertyValue("margin-top")||0),J=parseFloat(j.getPropertyValue("margin-bottom")||0),(ee=j.getPropertyValue("box-sizing"))&&"border-box"===ee?U+Q+J:U+K+Z+Q+J),N&&(te[0].style.transform=N),H&&(te[0].style.webkitTransform=H),n.roundLengths&&(G=Math.floor(G))):(G=(a-(n.slidesPerView-1)*x)/n.slidesPerView,n.roundLengths&&(G=Math.floor(G)),u[_]&&(e.isHorizontal()?u[_].style.width=G+"px":u[_].style.height=G+"px")),u[_]&&(u[_].swiperSlideSize=G),h.push(G),n.centeredSlides?(w=w+G/2+C/2+x,0===C&&0!==_&&(w=w-a/2-x),0===_&&(w=w-a/2-x),Math.abs(w)<.001&&(w=0),n.roundLengths&&(w=Math.floor(w)),E%n.slidesPerGroup==0&&d.push(w),p.push(w)):(n.roundLengths&&(w=Math.floor(w)),(E-Math.min(e.params.slidesPerGroupSkip,E))%e.params.slidesPerGroup==0&&d.push(w),p.push(w),w=w+G+x),e.virtualSize+=G+x,C=G,E+=1)}if(e.virtualSize=Math.max(e.virtualSize,a)+m,r&&s&&("slide"===n.effect||"coverflow"===n.effect)&&i.css({width:e.virtualSize+n.spaceBetween+"px"}),n.setWrapperSize&&(e.isHorizontal()?i.css({width:e.virtualSize+n.spaceBetween+"px"}):i.css({height:e.virtualSize+n.spaceBetween+"px"})),1<n.slidesPerColumn&&(e.virtualSize=(G+n.spaceBetween)*g,e.virtualSize=Math.ceil(e.virtualSize/n.slidesPerColumn)-n.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+n.spaceBetween+"px"}):i.css({height:e.virtualSize+n.spaceBetween+"px"}),n.centeredSlides)){S=[];for(var ne=0;ne<d.length;ne+=1){var ie=d[ne];n.roundLengths&&(ie=Math.floor(ie)),d[ne]<e.virtualSize+d[0]&&S.push(ie)}d=S}if(!n.centeredSlides){S=[];for(var ae=0;ae<d.length;ae+=1){var re=d[ae];n.roundLengths&&(re=Math.floor(re)),d[ae]<=e.virtualSize-a&&S.push(re)}d=S,1<Math.floor(e.virtualSize-a)-Math.floor(d[d.length-1])&&d.push(e.virtualSize-a)}0===d.length&&(d=[0]),0!==n.spaceBetween&&(e.isHorizontal()?r?u.filter(f).css({marginLeft:x+"px"}):u.filter(f).css({marginRight:x+"px"}):u.filter(f).css({marginBottom:x+"px"})),n.centeredSlides&&n.centeredSlidesBounds&&(T=0,h.forEach(function(e){T+=e+(n.spaceBetween?n.spaceBetween:0)}),k=(T-=n.spaceBetween)-a,d=d.map(function(e){return e<0?-v:k<e?k+m:e})),n.centerInsufficientSlides&&(A=0,h.forEach(function(e){A+=e+(n.spaceBetween?n.spaceBetween:0)}),(A-=n.spaceBetween)<a&&(M=(a-A)/2,d.forEach(function(e,t){d[t]=e-M}),p.forEach(function(e,t){p[t]=e+M}))),oe(e,{slides:u,snapGrid:d,slidesGrid:p,slidesSizesGrid:h}),c!==l&&e.emit("slidesLengthChange"),d.length!==y&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),p.length!==b&&e.emit("slidesGridLengthChange"),(n.watchSlidesProgress||n.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,n,i=this,a=[],r=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&1<i.params.slidesPerView)if(i.params.centeredSlides)i.visibleSlides.each(function(e){a.push(e)});else for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var s=i.activeIndex+t;if(s>i.slides.length)break;a.push(i.slides.eq(s)[0])}else a.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<a.length;t+=1){void 0!==a[t]&&(r=r<(n=a[t].offsetHeight)?n:r)}r&&i.$wrapperEl.css("height",r+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,n=t.params,i=t.slides,a=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var r=a?e:-e;i.removeClass(n.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<i.length;s+=1){var o,l,u=i[s],c=(r+(n.centeredSlides?t.minTranslate():0)-u.swiperSlideOffset)/(u.swiperSlideSize+n.spaceBetween);(n.watchSlidesVisibility||n.centeredSlides&&n.autoHeight)&&(l=(o=-(r-u.swiperSlideOffset))+t.slidesSizesGrid[s],(0<=o&&o<t.size-1||1<l&&l<=t.size||o<=0&&l>=t.size)&&(t.visibleSlides.push(u),t.visibleSlidesIndexes.push(s),i.eq(s).addClass(n.slideVisibleClass))),u.progress=a?-c:c}t.visibleSlides=_(t.visibleSlides)}},updateProgress:function(e){var t,n=this;void 0===e&&(t=n.rtlTranslate?-1:1,e=n&&n.translate&&n.translate*t||0);var i=n.params,a=n.maxTranslate()-n.minTranslate(),r=n.progress,s=n.isBeginning,o=s,l=u=n.isEnd,u=0==a?s=!(r=0):(s=(r=(e-n.minTranslate())/a)<=0,1<=r);oe(n,{progress:r,isBeginning:s,isEnd:u}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&n.updateSlidesProgress(e),s&&!o&&n.emit("reachBeginning toEdge"),u&&!l&&n.emit("reachEnd toEdge"),(o&&!s||l&&!u)&&n.emit("fromEdge"),n.emit("progress",r)},updateSlidesClasses:function(){var e,t=this,n=t.slides,i=t.params,a=t.$wrapperEl,r=t.activeIndex,s=t.realIndex,o=t.virtual&&i.virtual.enabled;n.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+r+'"]'):n.eq(r)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?a.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass):a.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass));var l=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=n.eq(0)).addClass(i.slideNextClass);var u=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===u.length&&(u=n.eq(-1)).addClass(i.slidePrevClass),i.loop&&(l.hasClass(i.slideDuplicateClass)?a.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):a.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),u.hasClass(i.slideDuplicateClass)?a.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+u.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):a.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+u.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,n,i,a=this,r=a.rtlTranslate?a.translate:-a.translate,s=a.slidesGrid,o=a.snapGrid,l=a.params,u=a.activeIndex,c=a.realIndex,d=a.snapIndex,p=e;if(void 0===p){for(var h=0;h<s.length;h+=1)void 0!==s[h+1]?r>=s[h]&&r<s[h+1]-(s[h+1]-s[h])/2?p=h:r>=s[h]&&r<s[h+1]&&(p=h+1):r>=s[h]&&(p=h);l.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}(n=0<=o.indexOf(r)?o.indexOf(r):(t=Math.min(l.slidesPerGroupSkip,p))+Math.floor((p-t)/l.slidesPerGroup))>=o.length&&(n=o.length-1),p!==u?(i=parseInt(a.slides.eq(p).attr("data-swiper-slide-index")||p,10),oe(a,{snapIndex:n,realIndex:i,previousIndex:u,activeIndex:p}),a.emit("activeIndexChange"),a.emit("snapIndexChange"),c!==i&&a.emit("realIndexChange"),(a.initialized||a.params.runCallbacksOnInit)&&a.emit("slideChange")):n!==d&&(a.snapIndex=n,a.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,n=t.params,i=_(e.target).closest("."+n.slideClass)[0],a=!1;if(i)for(var r=0;r<t.slides.length;r+=1)t.slides[r]===i&&(a=!0);if(!i||!a)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(_(i).attr("data-swiper-slide-index"),10):t.clickedIndex=_(i).index(),n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,n=this.rtlTranslate,i=this.translate,a=this.$wrapperEl;if(t.virtualTranslate)return n?-i:i;if(t.cssMode)return i;var r=g(a[0],e);return n&&(r=-r),r||0},setTranslate:function(e,t){var n=this,i=n.rtlTranslate,a=n.params,r=n.$wrapperEl,s=n.wrapperEl,o=n.progress,l=0,u=0;n.isHorizontal()?l=i?-e:e:u=e,a.roundLengths&&(l=Math.floor(l),u=Math.floor(u)),a.cssMode?s[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-l:-u:a.virtualTranslate||r.transform("translate3d("+l+"px, "+u+"px, 0px)"),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?l:u;var c=n.maxTranslate()-n.minTranslate();(0==c?0:(e-n.minTranslate())/c)!==o&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,n,i,a){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),void 0===i&&(i=!0);var r=this,s=r.params,o=r.wrapperEl;if(r.animating&&s.preventInteractionOnTransition)return!1;var l=r.minTranslate(),u=r.maxTranslate(),c=i&&l<e?l:i&&e<u?u:e;if(r.updateProgress(c),s.cssMode){var d,p=r.isHorizontal();return 0!==t&&o.scrollTo?o.scrollTo(((d={})[p?"left":"top"]=-c,d.behavior="smooth",d)):o[p?"scrollLeft":"scrollTop"]=-c,!0}return 0===t?(r.setTransition(0),r.setTranslate(c),n&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(c),n&&(r.emit("beforeTransitionStart",t,a),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,n&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var n=this,i=n.activeIndex,a=n.params,r=n.previousIndex;if(!a.cssMode){a.autoHeight&&n.updateAutoHeight();var s=(s=t)||(r<i?"next":i<r?"prev":"reset");if(n.emit("transitionStart"),e&&i!==r){if("reset"===s)return void n.emit("slideResetTransitionStart");n.emit("slideChangeTransitionStart"),"next"===s?n.emit("slideNextTransitionStart"):n.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var n=this,i=n.activeIndex,a=n.previousIndex,r=n.params;if(n.animating=!1,!r.cssMode){n.setTransition(0);var s=(s=t)||(a<i?"next":i<a?"prev":"reset");if(n.emit("transitionEnd"),e&&i!==a){if("reset"===s)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===s?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(e,t,n,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0);var a=this,r=e;r<0&&(r=0);var s=a.params,o=a.snapGrid,l=a.slidesGrid,u=a.previousIndex,c=a.activeIndex,d=a.rtlTranslate,p=a.wrapperEl;if(a.animating&&s.preventInteractionOnTransition)return!1;var h=Math.min(a.params.slidesPerGroupSkip,r),f=h+Math.floor((r-h)/a.params.slidesPerGroup);f>=o.length&&(f=o.length-1),(c||s.initialSlide||0)===(u||0)&&n&&a.emit("beforeSlideChangeStart");var v,m=-o[f];if(a.updateProgress(m),s.normalizeSlideIndex)for(var g=0;g<l.length;g+=1)-Math.floor(100*m)>=Math.floor(100*l[g])&&(r=g);if(a.initialized&&r!==c){if(!a.allowSlideNext&&m<a.translate&&m<a.minTranslate())return!1;if(!a.allowSlidePrev&&m>a.translate&&m>a.maxTranslate()&&(c||0)!==r)return!1}if(v=c<r?"next":r<c?"prev":"reset",d&&-m===a.translate||!d&&m===a.translate)return a.updateActiveIndex(r),s.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),"slide"!==s.effect&&a.setTranslate(m),"reset"!==v&&(a.transitionStart(n,v),a.transitionEnd(n,v)),!1;if(s.cssMode){var y,b=a.isHorizontal(),x=-m;return d&&(x=p.scrollWidth-p.offsetWidth-x),0!==t&&p.scrollTo?p.scrollTo(((y={})[b?"left":"top"]=x,y.behavior="smooth",y)):p[b?"scrollLeft":"scrollTop"]=x,!0}return 0===t?(a.setTransition(0),a.setTranslate(m),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,i),a.transitionStart(n,v),a.transitionEnd(n,v)):(a.setTransition(t),a.setTranslate(m),a.updateActiveIndex(r),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,i),a.transitionStart(n,v),a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(n,v))}),a.$wrapperEl[0].addEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,n,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0);var a=e;return this.params.loop&&(a+=this.loopedSlides),this.slideTo(a,t,n,i)},slideNext:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,a=i.params,r=i.animating,s=i.activeIndex<a.slidesPerGroupSkip?1:a.slidesPerGroup;if(a.loop){if(r&&a.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}return i.slideTo(i.activeIndex+s,e,t,n)},slidePrev:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,a=i.params,r=i.animating,s=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(a.loop){if(r&&a.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function u(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,d=u(l?i.translate:-i.translate),p=s.map(u),h=(s[p.indexOf(d)],s[p.indexOf(d)-1]);return void 0===h&&a.cssMode&&s.forEach(function(e){!h&&e<=d&&(h=e)}),void 0!==h&&(c=o.indexOf(h))<0&&(c=i.activeIndex-1),i.slideTo(c,e,t,n)},slideReset:function(e,t,n){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e,t,n,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);var a,r,s=this,o=s.activeIndex,l=Math.min(s.params.slidesPerGroupSkip,o),u=l+Math.floor((o-l)/s.params.slidesPerGroup),c=s.rtlTranslate?s.translate:-s.translate;return c>=s.snapGrid[u]?(a=s.snapGrid[u],(s.snapGrid[u+1]-a)*i<c-a&&(o+=s.params.slidesPerGroup)):c-(r=s.snapGrid[u-1])<=(s.snapGrid[u]-r)*i&&(o-=s.params.slidesPerGroup),o=Math.max(o,0),o=Math.min(o,s.slidesGrid.length-1),s.slideTo(o,e,t,n)},slideToClickedSlide:function(){var e,t=this,n=t.params,i=t.$wrapperEl,a="auto"===n.slidesPerView?t.slidesPerViewDynamic():n.slidesPerView,r=t.clickedIndex;if(n.loop){if(t.animating)return;e=parseInt(_(t.clickedSlide).attr("data-swiper-slide-index"),10),n.centeredSlides?r<t.loopedSlides-a/2||r>t.slides.length-t.loopedSlides+a/2?(t.loopFix(),r=i.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),L(function(){t.slideTo(r)})):t.slideTo(r):r>t.slides.length-a?(t.loopFix(),r=i.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),L(function(){t.slideTo(r)})):t.slideTo(r)}else t.slideTo(r)}},loop:{loopCreate:function(){var i=this,e=w(),t=i.params,n=i.$wrapperEl;n.children("."+t.slideClass+"."+t.slideDuplicateClass).remove();var a=n.children("."+t.slideClass);if(t.loopFillGroupWithBlank){var r=t.slidesPerGroup-a.length%t.slidesPerGroup;if(r!==t.slidesPerGroup){for(var s=0;s<r;s+=1){var o=_(e.createElement("div")).addClass(t.slideClass+" "+t.slideBlankClass);n.append(o)}a=n.children("."+t.slideClass)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=a.length),i.loopedSlides=Math.ceil(parseFloat(t.loopedSlides||t.slidesPerView,10)),i.loopedSlides+=t.loopAdditionalSlides,i.loopedSlides>a.length&&(i.loopedSlides=a.length);var l=[],u=[];a.each(function(e,t){var n=_(e);t<i.loopedSlides&&u.push(e),t<a.length&&t>=a.length-i.loopedSlides&&l.push(e),n.attr("data-swiper-slide-index",t)});for(var c=0;c<u.length;c+=1)n.append(_(u[c].cloneNode(!0)).addClass(t.slideDuplicateClass));for(var d=l.length-1;0<=d;--d)n.prepend(_(l[d].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t=e.activeIndex,n=e.slides,i=e.loopedSlides,a=e.allowSlidePrev,r=e.allowSlideNext,s=e.snapGrid,o=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var l,u=-s[t]-e.getTranslate();t<i?(l=n.length-3*i+t,l+=i,e.slideTo(l,0,!1,!0)&&0!=u&&e.setTranslate((o?-e.translate:e.translate)-u)):t>=n.length-i&&(l=-n.length+t+i,l+=i,e.slideTo(l,0,!1,!0)&&0!=u&&e.setTranslate((o?-e.translate:e.translate)-u)),e.allowSlidePrev=a,e.allowSlideNext=r,e.emit("loopFix")},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,n=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),n.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t,n=this;n.support.touch||!n.params.simulateTouch||n.params.watchOverflow&&n.isLocked||n.params.cssMode||((t=n.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor="")}},manipulation:{appendSlide:function(e){var t=this,n=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var a=0;a<e.length;a+=1)e[a]&&n.append(e[a]);else n.append(e);i.loop&&t.loopCreate(),i.observer&&t.support.observer||t.update()},prependSlide:function(e){var t=this,n=t.params,i=t.$wrapperEl,a=t.activeIndex;n.loop&&t.loopDestroy();var r=a+1;if("object"==typeof e&&"length"in e){for(var s=0;s<e.length;s+=1)e[s]&&i.prepend(e[s]);r=a+e.length}else i.prepend(e);n.loop&&t.loopCreate(),n.observer&&t.support.observer||t.update(),t.slideTo(r,0,!1)},addSlide:function(e,t){var n=this,i=n.$wrapperEl,a=n.params,r=n.activeIndex;a.loop&&(r-=n.loopedSlides,n.loopDestroy(),n.slides=i.children("."+a.slideClass));var s=n.slides.length;if(e<=0)n.prependSlide(t);else if(s<=e)n.appendSlide(t);else{for(var o=e<r?r+1:r,l=[],u=s-1;e<=u;--u){var c=n.slides.eq(u);c.remove(),l.unshift(c)}if("object"==typeof t&&"length"in t){for(var d=0;d<t.length;d+=1)t[d]&&i.append(t[d]);o=e<r?r+t.length:r}else i.append(t);for(var p=0;p<l.length;p+=1)i.append(l[p]);a.loop&&n.loopCreate(),a.observer&&n.support.observer||n.update(),a.loop?n.slideTo(o+n.loopedSlides,0,!1):n.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,n=t.params,i=t.$wrapperEl,a=t.activeIndex;n.loop&&(a-=t.loopedSlides,t.loopDestroy(),t.slides=i.children("."+n.slideClass));var r,s=a;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)r=e[o],t.slides[r]&&t.slides.eq(r).remove(),r<s&&--s;s=Math.max(s,0)}else r=e,t.slides[r]&&t.slides.eq(r).remove(),r<s&&--s,s=Math.max(s,0);n.loop&&t.loopCreate(),n.observer&&t.support.observer||t.update(),n.loop?t.slideTo(s+t.loopedSlides,0,!1):t.slideTo(s,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=w(),n=e.params,i=e.touchEvents,a=e.el,r=e.wrapperEl,s=e.device,o=e.support;e.onTouchStart=function(e){var t,n,i,a,r,s,o,l,u=this,c=w(),d=se(),p=u.touchEventsData,h=u.params,f=u.touches;u.animating&&h.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),n=_(t.target),"wrapper"===h.touchEventsTarget&&!n.closest(u.wrapperEl).length||(p.isTouchEvent="touchstart"===t.type,!p.isTouchEvent&&"which"in t&&3===t.which||!p.isTouchEvent&&"button"in t&&0<t.button||p.isTouched&&p.isMoved||(h.noSwiping&&n.closest(h.noSwipingSelector?h.noSwipingSelector:"."+h.noSwipingClass)[0]?u.allowClick=!0:h.swipeHandler&&!n.closest(h.swipeHandler)[0]||(f.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,f.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY,i=f.currentX,a=f.currentY,r=h.edgeSwipeDetection||h.iOSEdgeSwipeDetection,s=h.edgeSwipeThreshold||h.iOSEdgeSwipeThreshold,r&&(i<=s||i>=d.screen.width-s)||(oe(p,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),f.startX=i,f.startY=a,p.touchStartTime=I(),u.allowClick=!0,u.updateSize(),u.swipeDirection=void 0,0<h.threshold&&(p.allowThresholdMove=!1),"touchstart"!==t.type&&(o=!0,n.is(p.formElements)&&(o=!1),c.activeElement&&_(c.activeElement).is(p.formElements)&&c.activeElement!==n[0]&&c.activeElement.blur(),l=o&&u.allowTouchMove&&h.touchStartPreventDefault,(h.touchStartForcePreventDefault||l)&&t.preventDefault()),u.emit("touchStart",t))))))}.bind(e),e.onTouchMove=function(e){var t=w(),n=this,i=n.touchEventsData,a=n.params,r=n.touches,s=n.rtlTranslate,o=e;if(o.originalEvent&&(o=o.originalEvent),i.isTouched){if(!i.isTouchEvent||"touchmove"===o.type){var l="touchmove"===o.type&&o.targetTouches&&(o.targetTouches[0]||o.changedTouches[0]),u="touchmove"===o.type?l.pageX:o.pageX,c="touchmove"===o.type?l.pageY:o.pageY;if(o.preventedByNestedSwiper)return r.startX=u,void(r.startY=c);if(!n.allowTouchMove)return n.allowClick=!1,void(i.isTouched&&(oe(r,{startX:u,startY:c,currentX:u,currentY:c}),i.touchStartTime=I()));if(i.isTouchEvent&&a.touchReleaseOnEdges&&!a.loop)if(n.isVertical()){if(c<r.startY&&n.translate<=n.maxTranslate()||c>r.startY&&n.translate>=n.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(u<r.startX&&n.translate<=n.maxTranslate()||u>r.startX&&n.translate>=n.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&o.target===t.activeElement&&_(o.target).is(i.formElements))return i.isMoved=!0,void(n.allowClick=!1);if(i.allowTouchCallbacks&&n.emit("touchMove",o),!(o.targetTouches&&1<o.targetTouches.length)){r.currentX=u,r.currentY=c;var d,p=r.currentX-r.startX,h=r.currentY-r.startY;if(!(n.params.threshold&&Math.sqrt(Math.pow(p,2)+Math.pow(h,2))<n.params.threshold))if(void 0===i.isScrolling&&(n.isHorizontal()&&r.currentY===r.startY||n.isVertical()&&r.currentX===r.startX?i.isScrolling=!1:25<=p*p+h*h&&(d=180*Math.atan2(Math.abs(h),Math.abs(p))/Math.PI,i.isScrolling=n.isHorizontal()?d>a.touchAngle:90-d>a.touchAngle)),i.isScrolling&&n.emit("touchMoveOpposite",o),void 0===i.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){n.allowClick=!1,!a.cssMode&&o.cancelable&&o.preventDefault(),a.touchMoveStopPropagation&&!a.nested&&o.stopPropagation(),i.isMoved||(a.loop&&n.loopFix(),i.startTranslate=n.getTranslate(),n.setTransition(0),n.animating&&n.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!a.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",o)),n.emit("sliderMove",o),i.isMoved=!0;var f=n.isHorizontal()?p:h;r.diff=f,f*=a.touchRatio,s&&(f=-f),n.swipeDirection=0<f?"prev":"next",i.currentTranslate=f+i.startTranslate;var v=!0,m=a.resistanceRatio;if(a.touchReleaseOnEdges&&(m=0),0<f&&i.currentTranslate>n.minTranslate()?(v=!1,a.resistance&&(i.currentTranslate=n.minTranslate()-1+Math.pow(-n.minTranslate()+i.startTranslate+f,m))):f<0&&i.currentTranslate<n.maxTranslate()&&(v=!1,a.resistance&&(i.currentTranslate=n.maxTranslate()+1-Math.pow(n.maxTranslate()-i.startTranslate-f,m))),v&&(o.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),0<a.threshold){if(!(Math.abs(f)>a.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,i.currentTranslate=i.startTranslate,void(r.diff=n.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}a.followFinger&&!a.cssMode&&((a.freeMode||a.watchSlidesProgress||a.watchSlidesVisibility)&&(n.updateActiveIndex(),n.updateSlidesClasses()),a.freeMode&&(0===i.velocities.length&&i.velocities.push({position:r[n.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:r[n.isHorizontal()?"currentX":"currentY"],time:I()})),n.updateProgress(i.currentTranslate),n.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&n.emit("touchMoveOpposite",o)}.bind(e),e.onTouchEnd=function(e){var t=this,n=t.touchEventsData,i=t.params,a=t.touches,r=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,u=e;if(u.originalEvent&&(u=u.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",u),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&i.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);i.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,d,p,h,f,v=I(),m=v-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(u),t.emit("tap click",u),m<300&&v-n.lastClickTime<300&&t.emit("doubleTap doubleClick",u)),n.lastClickTime=I(),L(function(){t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||0===a.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,c=i.followFinger?r?t.translate:-t.translate:-n.currentTranslate,!i.cssMode)if(i.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){1<n.velocities.length?(d=n.velocities.pop(),p=n.velocities.pop(),h=d.position-p.position,f=d.time-p.time,t.velocity=h/f,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(150<f||300<I()-d.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=i.freeModeMomentumVelocityRatio,n.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;r&&(b=-b);var x,w,C,E,S=!1,T=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(b<t.maxTranslate())i.freeModeMomentumBounce?(b+t.maxTranslate()<-T&&(b=t.maxTranslate()-T),x=t.maxTranslate(),S=!0,n.allowMomentumBounce=!0):b=t.maxTranslate(),i.loop&&i.centeredSlides&&(w=!0);else if(b>t.minTranslate())i.freeModeMomentumBounce?(b-t.minTranslate()>T&&(b=t.minTranslate()+T),x=t.minTranslate(),S=!0,n.allowMomentumBounce=!0):b=t.minTranslate(),i.loop&&i.centeredSlides&&(w=!0);else if(i.freeModeSticky){for(var k,A=0;A<l.length;A+=1)if(l[A]>-b){k=A;break}b=-(b=Math.abs(l[k]-b)<Math.abs(l[k-1]-b)||"next"===t.swipeDirection?l[k]:l[k-1])}if(w&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)g=r?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),i.freeModeSticky&&(g=(C=Math.abs((r?-b:b)-t.translate))<(E=t.slidesSizesGrid[t.activeIndex])?i.speed:C<2*E?1.5*i.speed:2.5*i.speed);else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&S?(t.updateProgress(x),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),setTimeout(function(){t.setTranslate(x),s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()})},0))})):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();(!i.freeModeMomentum||m>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var M=0,P=t.slidesSizesGrid[0],$=0;$<o.length;$+=$<i.slidesPerGroupSkip?1:i.slidesPerGroup){var D=$<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[$+D]?c>=o[$]&&c<o[$+D]&&(P=o[(M=$)+D]-o[$]):c>=o[$]&&(M=$,P=o[o.length-1]-o[o.length-2])}var _=(c-o[M])/P,F=M<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(m>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(_>=i.longSwipesRatio?t.slideTo(M+F):t.slideTo(M)),"prev"===t.swipeDirection&&(_>1-i.longSwipesRatio?t.slideTo(M+F):t.slideTo(M))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);t.navigation&&(u.target===t.navigation.nextEl||u.target===t.navigation.prevEl)?u.target===t.navigation.nextEl?t.slideTo(M+F):t.slideTo(M):("next"===t.swipeDirection&&t.slideTo(M+F),"prev"===t.swipeDirection&&t.slideTo(M))}}}.bind(e),n.cssMode&&(e.onScroll=function(){var e=this,t=e.wrapperEl,n=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=n?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var i=e.maxTranslate()-e.minTranslate();(0==i?0:(e.translate-e.minTranslate())/i)!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}.bind(e)),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var l,u=!!n.nested;!o.touch&&o.pointerEvents?(a.addEventListener(i.start,e.onTouchStart,!1),t.addEventListener(i.move,e.onTouchMove,u),t.addEventListener(i.end,e.onTouchEnd,!1)):(o.touch&&(l=!("touchstart"!==i.start||!o.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1},a.addEventListener(i.start,e.onTouchStart,l),a.addEventListener(i.move,e.onTouchMove,o.passiveListener?{passive:!1,capture:u}:u),a.addEventListener(i.end,e.onTouchEnd,l),i.cancel&&a.addEventListener(i.cancel,e.onTouchEnd,l),T||(t.addEventListener("touchstart",k),T=!0)),(n.simulateTouch&&!s.ios&&!s.android||n.simulateTouch&&!o.touch&&s.ios)&&(a.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,u),t.addEventListener("mouseup",e.onTouchEnd,!1))),(n.preventClicks||n.preventClicksPropagation)&&a.addEventListener("click",e.onClick,!0),n.cssMode&&r.addEventListener("scroll",e.onScroll),n.updateOnWindowResize?e.on(s.ios||s.android?"resize orientationchange observerUpdate":"resize observerUpdate",S,!0):e.on("observerUpdate",S,!0)},detachEvents:function(){var e,t=this,n=w(),i=t.params,a=t.touchEvents,r=t.el,s=t.wrapperEl,o=t.device,l=t.support,u=!!i.nested;!l.touch&&l.pointerEvents?(r.removeEventListener(a.start,t.onTouchStart,!1),n.removeEventListener(a.move,t.onTouchMove,u),n.removeEventListener(a.end,t.onTouchEnd,!1)):(l.touch&&(e=!("onTouchStart"!==a.start||!l.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1},r.removeEventListener(a.start,t.onTouchStart,e),r.removeEventListener(a.move,t.onTouchMove,u),r.removeEventListener(a.end,t.onTouchEnd,e),a.cancel&&r.removeEventListener(a.cancel,t.onTouchEnd,e)),(i.simulateTouch&&!o.ios&&!o.android||i.simulateTouch&&!l.touch&&o.ios)&&(r.removeEventListener("mousedown",t.onTouchStart,!1),n.removeEventListener("mousemove",t.onTouchMove,u),n.removeEventListener("mouseup",t.onTouchEnd,!1))),(i.preventClicks||i.preventClicksPropagation)&&r.removeEventListener("click",t.onClick,!0),i.cssMode&&s.removeEventListener("scroll",t.onScroll),t.off(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",S)}},breakpoints:{setBreakpoint:function(){var e,n,t,i,a,r,s,o=this,l=o.activeIndex,u=o.initialized,c=o.loopedSlides,d=void 0===c?0:c,p=o.params,h=o.$el,f=p.breakpoints;!f||f&&0===Object.keys(f).length||(e=o.getBreakpoint(f))&&o.currentBreakpoint!==e&&((n=e in f?f[e]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach(function(e){var t=n[e];void 0!==t&&(n[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),t=n||o.originalParams,i=1<p.slidesPerColumn,a=1<t.slidesPerColumn,i&&!a?(h.removeClass(p.containerModifierClass+"multirow "+p.containerModifierClass+"multirow-column"),o.emitContainerClasses()):!i&&a&&(h.addClass(p.containerModifierClass+"multirow"),"column"===t.slidesPerColumnFill&&h.addClass(p.containerModifierClass+"multirow-column"),o.emitContainerClasses()),r=t.direction&&t.direction!==p.direction,s=p.loop&&(t.slidesPerView!==p.slidesPerView||r),r&&u&&o.changeDirection(),oe(o.params,t),oe(o,{allowTouchMove:o.params.allowTouchMove,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev}),o.currentBreakpoint=e,s&&u&&(o.loopDestroy(),o.loopCreate(),o.updateSlides(),o.slideTo(l-d+o.loopedSlides,0,!1)),o.emit("breakpoint",t))},getBreakpoint:function(e){var n=se();if(e){var t=!1,i=Object.keys(e).map(function(e){if("string"!=typeof e||0!==e.indexOf("@"))return{value:e,point:e};var t=parseFloat(e.substr(1));return{value:n.innerHeight*t,point:e}});i.sort(function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)});for(var a=0;a<i.length;a+=1){var r=i[a],s=r.point;r.value<=n.innerWidth&&(t=s)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,n=e.isLocked,i=0<e.slides.length&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&i?e.isLocked=i<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,n!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),n&&n!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e=this,t=e.classNames,n=e.params,i=e.rtl,a=e.$el,r=e.device,s=[];s.push("initialized"),s.push(n.direction),n.freeMode&&s.push("free-mode"),n.autoHeight&&s.push("autoheight"),i&&s.push("rtl"),1<n.slidesPerColumn&&(s.push("multirow"),"column"===n.slidesPerColumnFill&&s.push("multirow-column")),r.android&&s.push("android"),r.ios&&s.push("ios"),n.cssMode&&s.push("css-mode"),s.forEach(function(e){t.push(n.containerModifierClass+e)}),a.addClass(t.join(" ")),e.emitContainerClasses()},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" ")),this.emitContainerClasses()}},images:{loadImage:function(e,t,n,i,a,r){var s,o=se();function l(){r&&r()}!(_(e).parent("picture")[0]||e.complete&&a)&&t?((s=new o.Image).onload=l,s.onerror=l,i&&(s.sizes=i),n&&(s.srcset=n),t&&(s.src=t)):l()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var n=0;n<e.imagesToLoad.length;n+=1){var i=e.imagesToLoad[n];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},P={},$=function(){function p(){for(var a,e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];a=oe({},a=(a=1===t.length&&t[0].constructor&&t[0].constructor===Object?t[0]:(s=t[0],t[1]))||{}),s&&!a.el&&(a.el=s);var r=this;r.support=x(),r.device=C({userAgent:a.userAgent}),r.browser=E(),r.eventsListeners={},r.eventsAnyListeners=[],Object.keys(M).forEach(function(t){Object.keys(M[t]).forEach(function(e){p.prototype[e]||(p.prototype[e]=M[t][e])})}),void 0===r.modules&&(r.modules={}),Object.keys(r.modules).forEach(function(e){var t=r.modules[e];if(t.params){var n=Object.keys(t.params)[0],i=t.params[n];if("object"!=typeof i||null===i)return;if(!(n in a&&"enabled"in i))return;!0===a[n]&&(a[n]={enabled:!0}),"object"!=typeof a[n]||"enabled"in a[n]||(a[n].enabled=!0),a[n]||(a[n]={enabled:!1})}});var i=oe({},A);r.useParams(i),r.params=oe({},i,P,a),r.originalParams=oe({},r.params),r.passedParams=oe({},a),r.params&&r.params.on&&Object.keys(r.params.on).forEach(function(e){r.on(e,r.params.on[e])});var s,o,l,u,c=(r.$=_)(r.params.el);if(s=c[0]){if(1<c.length){var d=[];return c.each(function(e){var t=oe({},a,{el:e});d.push(new p(t))}),d}return s.swiper=r,s&&s.shadowRoot&&s.shadowRoot.querySelector?(o=_(s.shadowRoot.querySelector("."+r.params.wrapperClass))).children=function(e){return c.children(e)}:o=c.children("."+r.params.wrapperClass),oe(r,{$el:c,el:s,$wrapperEl:o,wrapperEl:o[0],classNames:[],slides:_(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===r.params.direction},isVertical:function(){return"vertical"===r.params.direction},rtl:"rtl"===s.dir.toLowerCase()||"rtl"===c.css("direction"),rtlTranslate:"horizontal"===r.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===o.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend","touchcancel"],u=["mousedown","mousemove","mouseup"],r.support.pointerEvents&&(u=["pointerdown","pointermove","pointerup"]),r.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},r.touchEventsDesktop={start:u[0],move:u[1],end:u[2]},r.support.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:I(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.useModules(),r.emit("_swiper"),r.params.init&&r.init(),r}}var e,t,n,i=p.prototype;return i.emitContainerClasses=function(){var e,t=this;t.params._emitClasses&&t.el&&(e=t.el.className.split(" ").filter(function(e){return 0===e.indexOf("swiper-container")||0===e.indexOf(t.params.containerModifierClass)}),t.emit("_containerClasses",e.join(" ")))},i.emitSlidesClasses=function(){var n=this;n.params._emitClasses&&n.el&&n.slides.each(function(e){var t=e.className.split(" ").filter(function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(n.params.slideClass)});n.emit("_slideClass",e,t.join(" "))})},i.slidesPerViewDynamic=function(){var e=this,t=e.params,n=e.slides,i=e.slidesGrid,a=e.size,r=e.activeIndex,s=1;if(t.centeredSlides){for(var o,l=n[r].swiperSlideSize,u=r+1;u<n.length;u+=1)n[u]&&!o&&(s+=1,a<(l+=n[u].swiperSlideSize)&&(o=!0));for(var c=r-1;0<=c;--c)n[c]&&!o&&(s+=1,a<(l+=n[c].swiperSlideSize)&&(o=!0))}else for(var d=r+1;d<n.length;d+=1)i[d]-i[r]<a&&(s+=1);return s},i.update=function(){var e,t,n=this;function i(){var e=n.rtlTranslate?-1*n.translate:n.translate,t=Math.min(Math.max(e,n.maxTranslate()),n.minTranslate());n.setTranslate(t),n.updateActiveIndex(),n.updateSlidesClasses()}n&&!n.destroyed&&(e=n.snapGrid,(t=n.params).breakpoints&&n.setBreakpoint(),n.updateSize(),n.updateSlides(),n.updateProgress(),n.updateSlidesClasses(),n.params.freeMode?(i(),n.params.autoHeight&&n.updateAutoHeight()):(("auto"===n.params.slidesPerView||1<n.params.slidesPerView)&&n.isEnd&&!n.params.centeredSlides?n.slideTo(n.slides.length-1,0,!1,!0):n.slideTo(n.activeIndex,0,!1,!0))||i(),t.watchOverflow&&e!==n.snapGrid&&n.checkOverflow(),n.emit("update"))},i.changeDirection=function(t,e){void 0===e&&(e=!0);var n=this,i=n.params.direction;return(t=t||("horizontal"===i?"vertical":"horizontal"))===i||"horizontal"!==t&&"vertical"!==t||(n.$el.removeClass(""+n.params.containerModifierClass+i).addClass(""+n.params.containerModifierClass+t),n.emitContainerClasses(),n.params.direction=t,n.slides.each(function(e){"vertical"===t?e.style.width="":e.style.height=""}),n.emit("changeDirection"),e&&n.update()),n},i.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},i.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var n,i=this,a=i.params,r=i.$el,s=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),a.loop&&i.loopDestroy(),t&&(i.removeClasses(),r.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([a.slideVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(function(e){i.off(e)}),!1!==e&&(i.$el[0].swiper=null,n=i,Object.keys(n).forEach(function(e){try{n[e]=null}catch(e){}try{delete n[e]}catch(e){}})),i.destroyed=!0),null},p.extendDefaults=function(e){oe(P,e)},p.installModule=function(e){p.prototype.modules||(p.prototype.modules={});var t=e.name||Object.keys(p.prototype.modules).length+"_"+I();p.prototype.modules[t]=e},p.use=function(e){return Array.isArray(e)?e.forEach(function(e){return p.installModule(e)}):p.installModule(e),p},e=p,n=[{key:"extendedDefaults",get:function(){return P}},{key:"defaults",get:function(){return A}}],(t=null)&&a(e.prototype,t),n&&a(e,n),p}(),D={name:"resize",create:function(){var e=this;oe(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=se();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=se();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}},F={attach:function(e,t){void 0===t&&(t={});var n=se(),i=this,a=new(n.MutationObserver||n.WebkitMutationObserver)(function(e){var t;1!==e.length?(t=function(){i.emit("observerUpdate",e[0])},n.requestAnimationFrame?n.requestAnimationFrame(t):n.setTimeout(t,0)):i.emit("observerUpdate",e[0])});a.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(a)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),n=0;n<t.length;n+=1)e.observer.attach(t[n]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},O={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){b(this,{observer:e(e({},F),{},{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}},z={update:function(e){var t=this,n=t.params,i=n.slidesPerView,a=n.slidesPerGroup,r=n.centeredSlides,s=t.params.virtual,o=s.addSlidesBefore,l=s.addSlidesAfter,u=t.virtual,c=u.from,d=u.to,p=u.slides,h=u.slidesGrid,f=u.renderSlide,v=u.offset;t.updateActiveIndex();var m,g=t.activeIndex||0,y=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",b=r?(m=Math.floor(i/2)+a+l,Math.floor(i/2)+a+o):(m=i+(a-1)+l,a+o),x=Math.max((g||0)-b,0),w=Math.min((g||0)+m,p.length-1),C=(t.slidesGrid[x]||0)-(t.slidesGrid[0]||0);function E(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(oe(t.virtual,{from:x,to:w,offset:C,slidesGrid:t.slidesGrid}),c===x&&d===w&&!e)return t.slidesGrid!==h&&C!==v&&t.slides.css(y,C+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:C,from:x,to:w,slides:function(){for(var e=[],t=x;t<=w;t+=1)e.push(p[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&E());var S=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var k=c;k<=d;k+=1)(k<x||w<k)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+k+'"]').remove();for(var A=0;A<p.length;A+=1)x<=A&&A<=w&&(void 0===d||e?T.push(A):(d<A&&T.push(A),A<c&&S.push(A)));T.forEach(function(e){t.$wrapperEl.append(f(p[e],e))}),S.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(p[e],e))}),t.$wrapperEl.children(".swiper-slide").css(y,C+"px"),E()},renderSlide:function(e,t){var n=this,i=n.params.virtual;if(i.cache&&n.virtual.cache[t])return n.virtual.cache[t];var a=i.renderSlide?_(i.renderSlide.call(n,e,t)):_('<div class="'+n.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return a.attr("data-swiper-slide-index")||a.attr("data-swiper-slide-index",t),i.cache&&(n.virtual.cache[t]=a),a},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var i,a,t=this,n=t.activeIndex,r=n+1,s=1;if(Array.isArray(e)){for(var o=0;o<e.length;o+=1)e[o]&&t.virtual.slides.unshift(e[o]);r=n+e.length,s=e.length}else t.virtual.slides.unshift(e);t.params.virtual.cache&&(i=t.virtual.cache,a={},Object.keys(i).forEach(function(e){var t=i[e],n=t.attr("data-swiper-slide-index");n&&t.attr("data-swiper-slide-index",parseInt(n,10)+1),a[parseInt(e,10)+s]=t}),t.virtual.cache=a),t.virtual.update(!0),t.slideTo(r,0)},removeSlide:function(e){var t=this;if(null!=e){var n=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<n&&--n,n=Math.max(n,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<n&&--n,n=Math.max(n,0);t.virtual.update(!0),t.slideTo(n,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},B={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){b(this,{virtual:e(e({},z),{},{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){var t;e.params.virtual.enabled&&(e.classNames.push(e.params.containerModifierClass+"virtual"),t={watchSlidesProgress:!0},oe(e.params,t),oe(e.originalParams,t),e.params.initialSlide||e.virtual.update())},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},j={handle:function(e){var t=this,n=se(),i=w(),a=t.rtlTranslate,r=e;r.originalEvent&&(r=r.originalEvent);var s=r.keyCode||r.charCode,o=t.params.keyboard.pageUpDown,l=o&&33===s,u=o&&34===s,c=37===s,d=39===s,p=38===s,h=40===s;if(!t.allowSlideNext&&(t.isHorizontal()&&d||t.isVertical()&&h||u))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&c||t.isVertical()&&p||l))return!1;if(!(r.shiftKey||r.altKey||r.ctrlKey||r.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(l||u||c||d||p||h)){var f=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var v=n.innerWidth,m=n.innerHeight,g=t.$el.offset();a&&(g.left-=t.$el[0].scrollLeft);for(var y=[[g.left,g.top],[g.left+t.width,g.top],[g.left,g.top+t.height],[g.left+t.width,g.top+t.height]],b=0;b<y.length;b+=1){var x=y[b];0<=x[0]&&x[0]<=v&&0<=x[1]&&x[1]<=m&&(f=!0)}if(!f)return}t.isHorizontal()?((l||u||c||d)&&(r.preventDefault?r.preventDefault():r.returnValue=!1),((u||d)&&!a||(l||c)&&a)&&t.slideNext(),((l||c)&&!a||(u||d)&&a)&&t.slidePrev()):((l||u||p||h)&&(r.preventDefault?r.preventDefault():r.returnValue=!1),(u||h)&&t.slideNext(),(l||p)&&t.slidePrev()),t.emit("keyPress",s)}},enable:function(){var e=w();this.keyboard.enabled||(_(e).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){var e=w();this.keyboard.enabled&&(_(e).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},N={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){b(this,{keyboard:e({enabled:!1},j)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}};var H={lastScrollTime:I(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){var e,t,n,i;return-1<se().navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":(t=w(),(i=(n="onwheel")in t)||((e=t.createElement("div")).setAttribute(n,"return;"),i="function"==typeof e[n]),!i&&t.implementation&&t.implementation.hasFeature&&!0!==t.implementation.hasFeature("","")&&(i=t.implementation.hasFeature("Events.wheel","3.0")),i?"wheel":"mousewheel")},normalize:function(e){var t=0,n=0,i=0,a=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,a=10*n,"deltaY"in e&&(a=e.deltaY),"deltaX"in e&&(i=e.deltaX),e.shiftKey&&!i&&(i=a,a=0),(i||a)&&e.deltaMode&&(1===e.deltaMode?(i*=40,a*=40):(i*=800,a*=800)),i&&!t&&(t=i<1?-1:1),a&&!n&&(n=a<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:a}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,n=this,i=n.params.mousewheel;n.params.cssMode&&t.preventDefault();var a=n.$el;if("container"!==n.params.mousewheel.eventsTarget&&(a=_(n.params.mousewheel.eventsTarget)),!n.mouseEntered&&!a[0].contains(t.target)&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var r=0,s=n.rtlTranslate?-1:1,o=H.normalize(t);if(i.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;r=-o.pixelX*s}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;r=-o.pixelY}else r=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*s:-o.pixelY;if(0===r)return!0;if(i.invert&&(r=-r),n.params.freeMode){var l={time:I(),delta:Math.abs(r),direction:Math.sign(r)},u=n.mousewheel.lastEventBeforeSnap,c=u&&l.time<u.time+500&&l.delta<=u.delta&&l.direction===u.direction;if(!c){n.mousewheel.lastEventBeforeSnap=void 0,n.params.loop&&n.loopFix();var d,p,h,f,v=n.getTranslate()+r*i.sensitivity,m=n.isBeginning,g=n.isEnd;if(v>=n.minTranslate()&&(v=n.minTranslate()),v<=n.maxTranslate()&&(v=n.maxTranslate()),n.setTransition(0),n.setTranslate(v),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!m&&n.isBeginning||!g&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky&&(clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=void 0,15<=(d=n.mousewheel.recentWheelEvents).length&&d.shift(),p=d.length?d[d.length-1]:void 0,h=d[0],d.push(l),p&&(l.delta>p.delta||l.direction!==p.direction)?d.splice(0):15<=d.length&&l.time-h.time<500&&1<=h.delta-l.delta&&l.delta<=6&&(f=0<r?.8:.2,n.mousewheel.lastEventBeforeSnap=l,d.splice(0),n.mousewheel.timeout=L(function(){n.slideToClosest(n.params.speed,!0,void 0,f)},0)),n.mousewheel.timeout||(n.mousewheel.timeout=L(function(){n.mousewheel.lastEventBeforeSnap=l,d.splice(0),n.slideToClosest(n.params.speed,!0,void 0,.5)},500))),c||n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.autoplay.stop(),v===n.minTranslate()||v===n.maxTranslate())return!0}}else{var y={time:I(),delta:Math.abs(r),direction:Math.sign(r),raw:e},b=n.mousewheel.recentWheelEvents;2<=b.length&&b.shift();var x=b.length?b[b.length-1]:void 0;if(b.push(y),(!x||y.direction!==x.direction||y.delta>x.delta||y.time>x.time+150)&&n.mousewheel.animateSlider(y),n.mousewheel.releaseScroll(y))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,n=se();return 6<=e.delta&&I()-t.mousewheel.lastScrollTime<60||(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new n.Date).getTime(),!1)},releaseScroll:function(e){var t=this,n=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&n.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&n.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=H.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var n=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(n=_(e.params.mousewheel.eventsTarget)),n.on("mouseenter",e.mousewheel.handleMouseEnter),n.on("mouseleave",e.mousewheel.handleMouseLeave),n.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this,t=H.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var n=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(n=_(e.params.mousewheel.eventsTarget)),n.off(t,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},R={update:function(){var e,t,n,i=this,a=i.params.navigation;i.params.loop||(t=(e=i.navigation).$nextEl,(n=e.$prevEl)&&0<n.length&&(i.isBeginning?n.addClass(a.disabledClass):n.removeClass(a.disabledClass),n[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](a.lockClass)),t&&0<t.length&&(i.isEnd?t.addClass(a.disabledClass):t.removeClass(a.disabledClass),t[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](a.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,n=this,i=n.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=_(i.nextEl),n.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===n.$el.find(i.nextEl).length&&(e=n.$el.find(i.nextEl))),i.prevEl&&(t=_(i.prevEl),n.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===n.$el.find(i.prevEl).length&&(t=n.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",n.navigation.onNextClick),t&&0<t.length&&t.on("click",n.navigation.onPrevClick),oe(n.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,n=t.$nextEl,i=t.$prevEl;n&&n.length&&(n.off("click",e.navigation.onNextClick),n.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},q={update:function(){var e=this,t=e.rtl,i=e.params.pagination;if(i.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a,n,r,s,o,l=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,u=e.pagination.$el,c=e.params.loop?Math.ceil((l-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((a=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>l-1-2*e.loopedSlides&&(a-=l-2*e.loopedSlides),c-1<a&&(a-=c),a<0&&"bullets"!==e.params.paginationType&&(a=c+a)):a=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var d,p,h,f,v,m,g=e.pagination.bullets;if(i.dynamicBullets&&(e.pagination.bulletSize=g.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),u.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),1<i.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=a-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),d=a-e.pagination.dynamicBulletIndex,h=((p=d+(Math.min(g.length,i.dynamicMainBullets)-1))+d)/2),g.removeClass(i.bulletActiveClass+" "+i.bulletActiveClass+"-next "+i.bulletActiveClass+"-next-next "+i.bulletActiveClass+"-prev "+i.bulletActiveClass+"-prev-prev "+i.bulletActiveClass+"-main"),1<u.length)g.each(function(e){var t=_(e),n=t.index();n===a&&t.addClass(i.bulletActiveClass),i.dynamicBullets&&(d<=n&&n<=p&&t.addClass(i.bulletActiveClass+"-main"),n===d&&t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),n===p&&t.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))});else{var y=g.eq(a),b=y.index();if(y.addClass(i.bulletActiveClass),i.dynamicBullets){for(var x=g.eq(d),w=g.eq(p),C=d;C<=p;C+=1)g.eq(C).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(b>=g.length-i.dynamicMainBullets){for(var E=i.dynamicMainBullets;0<=E;--E)g.eq(g.length-E).addClass(i.bulletActiveClass+"-main");g.eq(g.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else x.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),w.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else x.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),w.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}i.dynamicBullets&&(f=Math.min(g.length,i.dynamicMainBullets+4),v=(e.pagination.bulletSize*f-e.pagination.bulletSize)/2-h*e.pagination.bulletSize,m=t?"right":"left",g.css(e.isHorizontal()?m:"top",v+"px"))}"fraction"===i.type&&(u.find("."+i.currentClass).text(i.formatFractionCurrent(a+1)),u.find("."+i.totalClass).text(i.formatFractionTotal(c))),"progressbar"===i.type&&(n=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical",r=(a+1)/c,o=s=1,"horizontal"===n?s=r:o=r,u.find("."+i.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+s+") scaleY("+o+")").transition(e.params.speed)),"custom"===i.type&&i.renderCustom?(u.html(i.renderCustom(e,a+1,c)),e.emit("paginationRender",u[0])):e.emit("paginationUpdate",u[0]),u[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,a="";if("bullets"===t.type){for(var r=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,s=0;s<r;s+=1)t.renderBullet?a+=t.renderBullet.call(e,s,t.bulletClass):a+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(a),e.pagination.bullets=i.find("."+t.bulletClass)}"fraction"===t.type&&(a=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(a)),"progressbar"===t.type&&(a=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(a)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e,n=this,t=n.params.pagination;!t.el||0!==(e=_(t.el)).length&&(n.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&(e=n.$el.find(t.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),n.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click","."+t.bulletClass,function(e){e.preventDefault();var t=_(this).index()*n.params.slidesPerGroup;n.params.loop&&(t+=n.loopedSlides),n.slideTo(t)}),oe(n.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this,n=t.params.pagination;n.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length&&((e=t.pagination.$el).removeClass(n.hiddenClass),e.removeClass(n.modifierClass+n.type),t.pagination.bullets&&t.pagination.bullets.removeClass(n.bulletActiveClass),n.clickable&&e.off("click","."+n.bulletClass))}},V={setTranslate:function(){var e,t,n,i,a,r,s,o,l,u,c=this;c.params.scrollbar.el&&c.scrollbar.el&&(e=c.scrollbar,t=c.rtlTranslate,n=c.progress,i=e.dragSize,a=e.trackSize,r=e.$dragEl,s=e.$el,o=c.params.scrollbar,u=(a-(l=i))*n,t?0<(u=-u)?(l=i-u,u=0):a<-u+i&&(l=a+u):u<0?(l=i+u,u=0):a<u+i&&(l=a-u),c.isHorizontal()?(r.transform("translate3d("+u+"px, 0, 0)"),r[0].style.width=l+"px"):(r.transform("translate3d(0px, "+u+"px, 0)"),r[0].style.height=l+"px"),o.hide&&(clearTimeout(c.scrollbar.timeout),s[0].style.opacity=1,c.scrollbar.timeout=setTimeout(function(){s[0].style.opacity=0,s.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,n,i,a,r,s,o=this;o.params.scrollbar.el&&o.scrollbar.el&&(t=(e=o.scrollbar).$dragEl,n=e.$el,t[0].style.width="",t[0].style.height="",i=o.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,r=(a=o.size/o.virtualSize)*(i/o.size),s="auto"===o.params.scrollbar.dragSize?i*a:parseInt(o.params.scrollbar.dragSize,10),o.isHorizontal()?t[0].style.width=s+"px":t[0].style.height=s+"px",n[0].style.display=1<=a?"none":"",o.params.scrollbar.hide&&(n[0].style.opacity=0),oe(e,{trackSize:i,divider:a,moveDivider:r,dragSize:s}),e.$el[o.params.watchOverflow&&o.isLocked?"addClass":"removeClass"](o.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t=this,n=t.scrollbar,i=t.rtlTranslate,a=n.$el,r=n.dragSize,s=n.trackSize,o=n.dragStartPos,l=(n.getPointerPosition(e)-a.offset()[t.isHorizontal()?"left":"top"]-(null!==o?o:r/2))/(s-r);l=Math.max(Math.min(l,1),0),i&&(l=1-l);var u=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*l;t.updateProgress(u),t.setTranslate(u),t.updateActiveIndex(),t.updateSlidesClasses()},onDragStart:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar,a=t.$wrapperEl,r=i.$el,s=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===s[0]||e.target===s?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),a.transition(100),s.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),r.transition(0),n.hide&&r.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,n=this.$wrapperEl,i=t.$el,a=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),n.transition(0),i.transition(0),a.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar,a=t.$wrapperEl,r=i.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),a.transition("")),n.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=L(function(){r.css("opacity",0),r.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),n.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e,t,n,i,a,r,s,o,l,u=this;u.params.scrollbar.el&&(e=w(),t=u.scrollbar,n=u.touchEventsTouch,i=u.touchEventsDesktop,a=u.params,r=u.support,s=t.$el[0],o=!(!r.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},l=!(!r.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1},r.touch?(s.addEventListener(n.start,u.scrollbar.onDragStart,o),s.addEventListener(n.move,u.scrollbar.onDragMove,o),s.addEventListener(n.end,u.scrollbar.onDragEnd,l)):(s.addEventListener(i.start,u.scrollbar.onDragStart,o),e.addEventListener(i.move,u.scrollbar.onDragMove,o),e.addEventListener(i.end,u.scrollbar.onDragEnd,l)))},disableDraggable:function(){var e,t,n,i,a,r,s,o,l,u=this;u.params.scrollbar.el&&(e=w(),t=u.scrollbar,n=u.touchEventsTouch,i=u.touchEventsDesktop,a=u.params,r=u.support,s=t.$el[0],o=!(!r.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},l=!(!r.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1},r.touch?(s.removeEventListener(n.start,u.scrollbar.onDragStart,o),s.removeEventListener(n.move,u.scrollbar.onDragMove,o),s.removeEventListener(n.end,u.scrollbar.onDragEnd,l)):(s.removeEventListener(i.start,u.scrollbar.onDragStart,o),e.removeEventListener(i.move,u.scrollbar.onDragMove,o),e.removeEventListener(i.end,u.scrollbar.onDragEnd,l)))},init:function(){var e,t,n,i,a,r=this;r.params.scrollbar.el&&(e=r.scrollbar,t=r.$el,i=_((n=r.params.scrollbar).el),r.params.uniqueNavElements&&"string"==typeof n.el&&1<i.length&&1===t.find(n.el).length&&(i=t.find(n.el)),0===(a=i.find("."+r.params.scrollbar.dragClass)).length&&(a=_('<div class="'+r.params.scrollbar.dragClass+'"></div>'),i.append(a)),oe(e,{$el:i,el:i[0],$dragEl:a,dragEl:a[0]}),n.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},X={setTransform:function(e,t){var n,i,a=this.rtl,r=_(e),s=a?-1:1,o=r.attr("data-swiper-parallax")||"0",l=r.attr("data-swiper-parallax-x"),u=r.attr("data-swiper-parallax-y"),c=r.attr("data-swiper-parallax-scale"),d=r.attr("data-swiper-parallax-opacity");l||u?(l=l||"0",u=u||"0"):this.isHorizontal()?(l=o,u="0"):(u=o,l="0"),l=0<=l.indexOf("%")?parseInt(l,10)*t*s+"%":l*t*s+"px",u=0<=u.indexOf("%")?parseInt(u,10)*t+"%":u*t+"px",null!=d&&(n=d-(d-1)*(1-Math.abs(t)),r[0].style.opacity=n),null==c?r.transform("translate3d("+l+", "+u+", 0px)"):(i=c-(c-1)*(1-Math.abs(t)),r.transform("translate3d("+l+", "+u+", 0px) scale("+i+")"))},setTranslate:function(){var i=this,e=i.$el,t=i.slides,a=i.progress,r=i.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){i.parallax.setTransform(e,a)}),t.each(function(e,t){var n=e.progress;1<i.params.slidesPerGroup&&"auto"!==i.params.slidesPerView&&(n+=Math.ceil(t/2)-a*(r.length-1)),n=Math.min(Math.max(n,-1),1),_(e).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){i.parallax.setTransform(e,n)})})},setTransition:function(i){void 0===i&&(i=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e){var t=_(e),n=parseInt(t.attr("data-swiper-parallax-duration"),10)||i;0===i&&(n=0),t.transition(n)})}},Y={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,a=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(a-n,2))},onGestureStart:function(e){var t=this.support,n=this.params.zoom,i=this.zoom,a=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!t.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,a.scaleStart=Y.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=_(e.target).closest("."+this.params.slideClass),0===a.$slideEl.length&&(a.$slideEl=this.slides.eq(this.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+n.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl&&a.$imageEl.transition(0),this.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange:function(e){var t=this.support,n=this.params.zoom,i=this.zoom,a=i.gesture;if(!t.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,a.scaleMove=Y.getDistanceBetweenTouches(e)}a.$imageEl&&0!==a.$imageEl.length?(t.gestures?i.scale=e.scale*i.currentScale:i.scale=a.scaleMove/a.scaleStart*i.currentScale,i.scale>a.maxRatio&&(i.scale=a.maxRatio-1+Math.pow(i.scale-a.maxRatio+1,.5)),i.scale<n.minRatio&&(i.scale=n.minRatio+1-Math.pow(n.minRatio-i.scale+1,.5)),a.$imageEl.transform("translate3d(0,0,0) scale("+i.scale+")")):"gesturechange"===e.type&&i.onGestureStart(e)},onGestureEnd:function(e){var t=this.device,n=this.support,i=this.params.zoom,a=this.zoom,r=a.gesture;if(!n.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!t.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}r.$imageEl&&0!==r.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,r.maxRatio),i.minRatio),r.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(r.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,n=this.zoom,i=n.gesture,a=n.image;i.$imageEl&&0!==i.$imageEl.length&&(a.isTouched||(t.android&&e.cancelable&&e.preventDefault(),a.isTouched=!0,a.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,a.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this.zoom,n=t.gesture,i=t.image,a=t.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(this.allowClick=!1,i.isTouched&&n.$slideEl)){i.isMoved||(i.width=n.$imageEl[0].offsetWidth,i.height=n.$imageEl[0].offsetHeight,i.startX=g(n.$imageWrapEl[0],"x")||0,i.startY=g(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),this.rtl&&(i.startX=-i.startX,i.startY=-i.startY));var r=i.width*t.scale,s=i.height*t.scale;if(!(r<n.slideWidth&&s<n.slideHeight)){if(i.minX=Math.min(n.slideWidth/2-r/2,0),i.maxX=-i.minX,i.minY=Math.min(n.slideHeight/2-s/2,0),i.maxY=-i.minY,i.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!i.isMoved&&!t.isScaling){if(this.isHorizontal()&&(Math.floor(i.minX)===Math.floor(i.startX)&&i.touchesCurrent.x<i.touchesStart.x||Math.floor(i.maxX)===Math.floor(i.startX)&&i.touchesCurrent.x>i.touchesStart.x))return void(i.isTouched=!1);if(!this.isHorizontal()&&(Math.floor(i.minY)===Math.floor(i.startY)&&i.touchesCurrent.y<i.touchesStart.y||Math.floor(i.maxY)===Math.floor(i.startY)&&i.touchesCurrent.y>i.touchesStart.y))return void(i.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),i.isMoved=!0,i.currentX=i.touchesCurrent.x-i.touchesStart.x+i.startX,i.currentY=i.touchesCurrent.y-i.touchesStart.y+i.startY,i.currentX<i.minX&&(i.currentX=i.minX+1-Math.pow(i.minX-i.currentX+1,.8)),i.currentX>i.maxX&&(i.currentX=i.maxX-1+Math.pow(i.currentX-i.maxX+1,.8)),i.currentY<i.minY&&(i.currentY=i.minY+1-Math.pow(i.minY-i.currentY+1,.8)),i.currentY>i.maxY&&(i.currentY=i.maxY-1+Math.pow(i.currentY-i.maxY+1,.8)),a.prevPositionX||(a.prevPositionX=i.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=i.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(i.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(i.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(i.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(i.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=i.touchesCurrent.x,a.prevPositionY=i.touchesCurrent.y,a.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,n=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;var a=300,r=300,s=i.x*a,o=n.currentX+s,l=i.y*r,u=n.currentY+l;0!==i.x&&(a=Math.abs((o-n.currentX)/i.x)),0!==i.y&&(r=Math.abs((u-n.currentY)/i.y));var c=Math.max(a,r);n.currentX=o,n.currentY=u;var d=n.width*e.scale,p=n.height*e.scale;n.minX=Math.min(t.slideWidth/2-d/2,0),n.maxX=-n.minX,n.minY=Math.min(t.slideHeight/2-p/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),t.$imageWrapEl.transition(c).transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl&&t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl&&t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,n,i,a,r,s,o,l,u,c,d,p,h,f,v,m,g=this.zoom,y=this.params.zoom,b=g.gesture,x=g.image;b.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?b.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):b.$slideEl=this.slides.eq(this.activeIndex),b.$imageEl=b.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),b.$imageWrapEl=b.$imageEl.parent("."+y.containerClass)),b.$imageEl&&0!==b.$imageEl.length&&(b.$slideEl.addClass(""+y.zoomedSlideClass),n=void 0===x.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=x.touchesStart.x,x.touchesStart.y),g.scale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,g.currentScale=b.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(v=b.$slideEl[0].offsetWidth,m=b.$slideEl[0].offsetHeight,i=b.$slideEl.offset().left+v/2-t,a=b.$slideEl.offset().top+m/2-n,o=b.$imageEl[0].offsetWidth,l=b.$imageEl[0].offsetHeight,u=o*g.scale,c=l*g.scale,h=-(d=Math.min(v/2-u/2,0)),f=-(p=Math.min(m/2-c/2,0)),(r=i*g.scale)<d&&(r=d),h<r&&(r=h),(s=a*g.scale)<p&&(s=p),f<s&&(s=f)):s=r=0,b.$imageWrapEl.transition(300).transform("translate3d("+r+"px, "+s+"px,0)"),b.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+g.scale+")"))},out:function(){var e=this.zoom,t=this.params.zoom,n=e.gesture;n.$slideEl||(this.params.virtual&&this.params.virtual.enabled&&this.virtual?n.$slideEl=this.$wrapperEl.children("."+this.params.slideActiveClass):n.$slideEl=this.slides.eq(this.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+t.containerClass)),n.$imageEl&&0!==n.$imageEl.length&&(e.scale=1,e.currentScale=1,n.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),n.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),n.$slideEl.removeClass(""+t.zoomedSlideClass),n.$slideEl=void 0)},toggleGestures:function(e){var t=this.zoom,n=t.slideSelector,i=t.passiveListener;this.$wrapperEl[e]("gesturestart",n,t.onGestureStart,i),this.$wrapperEl[e]("gesturechange",n,t.onGestureChange,i),this.$wrapperEl[e]("gestureend",n,t.onGestureEnd,i)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures("on"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures("off"))},enable:function(){var e,t,n,i=this,a=i.support,r=i.zoom;r.enabled||(r.enabled=!0,e=!("touchstart"!==i.touchEvents.start||!a.passiveListener||!i.params.passiveListeners)&&{passive:!0,capture:!1},t=!a.passiveListener||{passive:!1,capture:!0},n="."+i.params.slideClass,i.zoom.passiveListener=e,i.zoom.slideSelector=n,a.gestures?(i.$wrapperEl.on(i.touchEvents.start,i.zoom.enableGestures,e),i.$wrapperEl.on(i.touchEvents.end,i.zoom.disableGestures,e)):"touchstart"===i.touchEvents.start&&(i.$wrapperEl.on(i.touchEvents.start,n,r.onGestureStart,e),i.$wrapperEl.on(i.touchEvents.move,n,r.onGestureChange,t),i.$wrapperEl.on(i.touchEvents.end,n,r.onGestureEnd,e),i.touchEvents.cancel&&i.$wrapperEl.on(i.touchEvents.cancel,n,r.onGestureEnd,e)),i.$wrapperEl.on(i.touchEvents.move,"."+i.params.zoom.containerClass,r.onTouchMove,t))},disable:function(){var e,t,n,i,a=this,r=a.zoom;r.enabled&&(e=a.support,a.zoom.enabled=!1,t=!("touchstart"!==a.touchEvents.start||!e.passiveListener||!a.params.passiveListeners)&&{passive:!0,capture:!1},n=!e.passiveListener||{passive:!1,capture:!0},i="."+a.params.slideClass,e.gestures?(a.$wrapperEl.off(a.touchEvents.start,a.zoom.enableGestures,t),a.$wrapperEl.off(a.touchEvents.end,a.zoom.disableGestures,t)):"touchstart"===a.touchEvents.start&&(a.$wrapperEl.off(a.touchEvents.start,i,r.onGestureStart,t),a.$wrapperEl.off(a.touchEvents.move,i,r.onGestureChange,n),a.$wrapperEl.off(a.touchEvents.end,i,r.onGestureEnd,t),a.touchEvents.cancel&&a.$wrapperEl.off(a.touchEvents.cancel,i,r.onGestureEnd,t)),a.$wrapperEl.off(a.touchEvents.move,"."+a.params.zoom.containerClass,r.onTouchMove,n))}},W={loadInSlide:function(e,u){void 0===u&&(u=!0);var c,t,d=this,p=d.params.lazy;void 0!==e&&0!==d.slides.length&&(t=(c=d.virtual&&d.params.virtual.enabled?d.$wrapperEl.children("."+d.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):d.slides.eq(e)).find("."+p.elementClass+":not(."+p.loadedClass+"):not(."+p.loadingClass+")"),!c.hasClass(p.elementClass)||c.hasClass(p.loadedClass)||c.hasClass(p.loadingClass)||t.push(c[0]),0!==t.length&&t.each(function(e){var i=_(e);i.addClass(p.loadingClass);var a=i.attr("data-background"),r=i.attr("data-src"),s=i.attr("data-srcset"),o=i.attr("data-sizes"),l=i.parent("picture");d.loadImage(i[0],r||a,s,o,!1,function(){var e,t,n;null==d||!d||d&&!d.params||d.destroyed||(a?(i.css("background-image",'url("'+a+'")'),i.removeAttr("data-background")):(s&&(i.attr("srcset",s),i.removeAttr("data-srcset")),o&&(i.attr("sizes",o),i.removeAttr("data-sizes")),l.length&&l.children("source").each(function(e){var t=_(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))}),r&&(i.attr("src",r),i.removeAttr("data-src"))),i.addClass(p.loadedClass).removeClass(p.loadingClass),c.find("."+p.preloaderClass).remove(),d.params.loop&&u&&(e=c.attr("data-swiper-slide-index"),c.hasClass(d.params.slideDuplicateClass)?(t=d.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+d.params.slideDuplicateClass+")"),d.lazy.loadInSlide(t.index(),!1)):(n=d.$wrapperEl.children("."+d.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]'),d.lazy.loadInSlide(n.index(),!1))),d.emit("lazyImageReady",c[0],i[0]),d.params.autoHeight&&d.updateAutoHeight())}),d.emit("lazyImageLoad",c[0],i[0])}))},load:function(){var n=this,t=n.$wrapperEl,i=n.params,a=n.slides,e=n.activeIndex,r=n.virtual&&i.virtual.enabled,s=i.lazy,o=i.slidesPerView;function l(e){if(r){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(a[e])return 1}function u(e){return r?_(e).attr("data-swiper-slide-index"):_(e).index()}if("auto"===o&&(o=0),n.lazy.initialImageLoaded||(n.lazy.initialImageLoaded=!0),n.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each(function(e){var t=r?_(e).attr("data-swiper-slide-index"):_(e).index();n.lazy.loadInSlide(t)});else if(1<o)for(var c=e;c<e+o;c+=1)l(c)&&n.lazy.loadInSlide(c);else n.lazy.loadInSlide(e);if(s.loadPrevNext)if(1<o||s.loadPrevNextAmount&&1<s.loadPrevNextAmount){for(var d=s.loadPrevNextAmount,p=o,h=Math.min(e+p+Math.max(d,p),a.length),f=Math.max(e-Math.max(p,d),0),v=e+o;v<h;v+=1)l(v)&&n.lazy.loadInSlide(v);for(var m=f;m<e;m+=1)l(m)&&n.lazy.loadInSlide(m)}else{var g=t.children("."+i.slideNextClass);0<g.length&&n.lazy.loadInSlide(u(g));var y=t.children("."+i.slidePrevClass);0<y.length&&n.lazy.loadInSlide(u(y))}}},G={LinearSpline:function(e,t){var n,i,a,r,s,o=function(e,t){for(i=-1,n=e.length;1<n-i;)e[a=n+i>>1]<=t?i=a:n=a;return n};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=o(this.x,e),r=s-1,(e-this.x[r])*(this.y[s]-this.y[r])/(this.x[s]-this.x[r])+this.y[r]):0},this},getInterpolateFunction:function(e){this.controller.spline||(this.controller.spline=this.params.loop?new G.LinearSpline(this.slidesGrid,e.slidesGrid):new G.LinearSpline(this.snapGrid,e.snapGrid))},setTranslate:function(e,t){var n,i,a=this,r=a.controller.control,s=a.constructor;function o(e){var t=a.rtlTranslate?-a.translate:a.translate;"slide"===a.params.controller.by&&(a.controller.getInterpolateFunction(e),i=-a.controller.spline.interpolate(-t)),i&&"container"!==a.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(a.maxTranslate()-a.minTranslate()),i=(t-a.minTranslate())*n+e.minTranslate()),a.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,a),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(r))for(var l=0;l<r.length;l+=1)r[l]!==t&&r[l]instanceof s&&o(r[l]);else r instanceof s&&t!==r&&o(r)},setTransition:function(t,e){var n,i=this,a=i.constructor,r=i.controller.control;function s(e){e.setTransition(t,i),0!==t&&(e.transitionStart(),e.params.autoHeight&&L(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){r&&(e.params.loop&&"slide"===i.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(r))for(n=0;n<r.length;n+=1)r[n]!==e&&r[n]instanceof a&&s(r[n]);else r instanceof a&&e!==r&&s(r)}},U={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t,n=this,i=n.params.a11y;13===e.keyCode&&(t=_(e.target),n.navigation&&n.navigation.$nextEl&&t.is(n.navigation.$nextEl)&&(n.isEnd&&!n.params.loop||n.slideNext(),n.isEnd?n.a11y.notify(i.lastSlideMessage):n.a11y.notify(i.nextSlideMessage)),n.navigation&&n.navigation.$prevEl&&t.is(n.navigation.$prevEl)&&(n.isBeginning&&!n.params.loop||n.slidePrev(),n.isBeginning?n.a11y.notify(i.firstSlideMessage):n.a11y.notify(i.prevSlideMessage)),n.pagination&&t.is("."+n.params.pagination.bulletClass)&&t[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,n,i=this;!i.params.loop&&i.navigation&&(t=(e=i.navigation).$nextEl,(n=e.$prevEl)&&0<n.length&&(i.isBeginning?(i.a11y.disableEl(n),i.a11y.makeElNotFocusable(n)):(i.a11y.enableEl(n),i.a11y.makeElFocusable(n))),t&&0<t.length&&(i.isEnd?(i.a11y.disableEl(t),i.a11y.makeElNotFocusable(t)):(i.a11y.enableEl(t),i.a11y.makeElFocusable(t))))},updatePagination:function(){var n=this,i=n.params.a11y;n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.bullets.each(function(e){var t=_(e);n.a11y.makeElFocusable(t),n.a11y.addElRole(t,"button"),n.a11y.addElLabel(t,i.paginationBulletMessage.replace(/\{\{index\}\}/,t.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,n,i=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(n=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,i.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),n&&(e.a11y.makeElFocusable(n),e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,i.prevSlideMessage),n.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e,t,n=this;n.a11y.liveRegion&&0<n.a11y.liveRegion.length&&n.a11y.liveRegion.remove(),n.navigation&&n.navigation.$nextEl&&(e=n.navigation.$nextEl),n.navigation&&n.navigation.$prevEl&&(t=n.navigation.$prevEl),e&&e.off("keydown",n.a11y.onEnterKey),t&&t.off("keydown",n.a11y.onEnterKey),n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.$el.off("keydown","."+n.params.pagination.bulletClass,n.a11y.onEnterKey)}},K={init:function(){var e=se();if(this.params.history){if(!e.history||!e.history.pushState)return this.params.history.enabled=!1,void(this.params.hashNavigation.enabled=!0);var t=this.history;t.initialized=!0,t.paths=K.getPathValues(this.params.url),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,this.params.runCallbacksOnInit),this.params.history.replaceState||e.addEventListener("popstate",this.history.setHistoryPopState))}},destroy:function(){var e=se();this.params.history.replaceState||e.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=K.getPathValues(this.params.url),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(e){var t=se(),n=e?new URL(e):t.location,i=n.pathname.slice(1).split("/").filter(function(e){return""!==e}),a=i.length;return{key:i[a-2],value:i[a-1]}},setHistory:function(e,t){var n,i,a,r,s=se();this.history.initialized&&this.params.history.enabled&&(n=this.params.url?new URL(this.params.url):s.location,i=this.slides.eq(t),a=K.slugify(i.attr("data-history")),n.pathname.includes(e)||(a=e+"/"+a),(r=s.history.state)&&r.value===a||(this.params.history.replaceState?s.history.replaceState({value:a},null,a):s.history.pushState({value:a},null,a)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){if(t)for(var i=0,a=this.slides.length;i<a;i+=1){var r,s=this.slides.eq(i);K.slugify(s.attr("data-history"))!==t||s.hasClass(this.params.slideDuplicateClass)||(r=s.index(),this.slideTo(r,e,n))}else this.slideTo(0,e,n)}},Z={onHashCange:function(){var e=w();this.emit("hashChange");var t=e.location.hash.replace("#","");if(t!==this.slides.eq(this.activeIndex).attr("data-hash")){var n=this.$wrapperEl.children("."+this.params.slideClass+'[data-hash="'+t+'"]').index();if(void 0===n)return;this.slideTo(n)}},setHash:function(){var e,t,n=se(),i=w();this.hashNavigation.initialized&&this.params.hashNavigation.enabled&&(this.params.hashNavigation.replaceState&&n.history&&n.history.replaceState?n.history.replaceState(null,null,"#"+this.slides.eq(this.activeIndex).attr("data-hash")||""):(t=(e=this.slides.eq(this.activeIndex)).attr("data-hash")||e.attr("data-history"),i.location.hash=t||""),this.emit("hashSet"))},init:function(){var e=this,t=w(),n=se();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var i=t.location.hash.replace("#","");if(i)for(var a=0,r=e.slides.length;a<r;a+=1){var s,o=e.slides.eq(a);(o.attr("data-hash")||o.attr("data-history"))!==i||o.hasClass(e.params.slideDuplicateClass)||(s=o.index(),e.slideTo(s,0,e.params.runCallbacksOnInit,!0))}e.params.hashNavigation.watchState&&_(n).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){var e=se();this.params.hashNavigation.watchState&&_(e).off("hashchange",this.hashNavigation.onHashCange)}},Q={run:function(){var e=this,t=e.slides.eq(e.activeIndex),n=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(n=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=L(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),e.params.cssMode&&e.autoplay.running&&e.autoplay.run()},n)},start:function(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop:function(){return!!this.autoplay.running&&(void 0!==this.autoplay.timeout&&(this.autoplay.timeout&&(clearTimeout(this.autoplay.timeout),this.autoplay.timeout=void 0),this.autoplay.running=!1,this.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=w();"hidden"===e.visibilityState&&this.autoplay.running&&this.autoplay.pause(),"visible"===e.visibilityState&&this.autoplay.paused&&(this.autoplay.run(),this.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},J={setTranslate:function(){for(var e=this.slides,t=0;t<e.length;t+=1){var n=this.slides.eq(t),i=-n[0].swiperSlideOffset;this.params.virtualTranslate||(i-=this.translate);var a=0;this.isHorizontal()||(a=i,i=0);var r=this.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:r}).transform("translate3d("+i+"px, "+a+"px, 0px)")}},setTransition:function(e){var n,i=this,t=i.slides,a=i.$wrapperEl;t.transition(e),i.params.virtualTranslate&&0!==e&&(n=!1,t.transitionEnd(function(){if(!n&&i&&!i.destroyed){n=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)a.trigger(e[t])}}))}},ee={setTranslate:function(){var e,t=this,n=t.$el,i=t.$wrapperEl,a=t.slides,r=t.width,s=t.height,o=t.rtlTranslate,l=t.size,u=t.browser,c=t.params.cubeEffect,d=t.isHorizontal(),p=t.virtual&&t.params.virtual.enabled,h=0;c.shadow&&(d?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=_('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:r+"px"})):0===(e=n.find(".swiper-cube-shadow")).length&&(e=_('<div class="swiper-cube-shadow"></div>'),n.append(e)));for(var f,v,m,g,y,b=0;b<a.length;b+=1){var x=a.eq(b),w=b;p&&(w=parseInt(x.attr("data-swiper-slide-index"),10));var C=90*w,E=Math.floor(C/360);o&&(C=-C,E=Math.floor(-C/360));var S=Math.max(Math.min(x[0].progress,1),-1),T=0,k=0,A=0;w%4==0?(T=4*-E*l,A=0):(w-1)%4==0?(T=0,A=4*-E*l):(w-2)%4==0?(T=l+4*E*l,A=l):(w-3)%4==0&&(T=-l,A=3*l+4*l*E),o&&(T=-T),d||(k=T,T=0);var M,P,$="rotateX("+(d?0:-C)+"deg) rotateY("+(d?C:0)+"deg) translate3d("+T+"px, "+k+"px, "+A+"px)";S<=1&&-1<S&&(h=o?90*-w-90*S:90*w+90*S),x.transform($),c.slideShadows&&(M=d?x.find(".swiper-slide-shadow-left"):x.find(".swiper-slide-shadow-top"),P=d?x.find(".swiper-slide-shadow-right"):x.find(".swiper-slide-shadow-bottom"),0===M.length&&(M=_('<div class="swiper-slide-shadow-'+(d?"left":"top")+'"></div>'),x.append(M)),0===P.length&&(P=_('<div class="swiper-slide-shadow-'+(d?"right":"bottom")+'"></div>'),x.append(P)),M.length&&(M[0].style.opacity=Math.max(-S,0)),P.length&&(P[0].style.opacity=Math.max(S,0)))}i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),c.shadow&&(d?e.transform("translate3d(0px, "+(r/2+c.shadowOffset)+"px, "+-r/2+"px) rotateX(90deg) rotateZ(0deg) scale("+c.shadowScale+")"):(f=Math.abs(h)-90*Math.floor(Math.abs(h)/90),v=1.5-(Math.sin(2*f*Math.PI/360)/2+Math.cos(2*f*Math.PI/360)/2),m=c.shadowScale,g=c.shadowScale/v,y=c.shadowOffset,e.transform("scale3d("+m+", 1, "+g+") translate3d(0px, "+(s/2+y)+"px, "+-s/2/g+"px) rotateX(-90deg)")));var D=u.isSafari||u.isWebView?-l/2:0;i.transform("translate3d(0px,0,"+D+"px) rotateX("+(t.isHorizontal()?0:h)+"deg) rotateY("+(t.isHorizontal()?-h:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},te={setTranslate:function(){for(var e=this.slides,t=this.rtlTranslate,n=0;n<e.length;n+=1){var i=e.eq(n),a=i[0].progress;this.params.flipEffect.limitRotation&&(a=Math.max(Math.min(i[0].progress,1),-1));var r,s,o=-180*a,l=0,u=-i[0].swiperSlideOffset,c=0;this.isHorizontal()?t&&(o=-o):(c=u,l=-o,o=u=0),i[0].style.zIndex=-Math.abs(Math.round(a))+e.length,this.params.flipEffect.slideShadows&&(r=this.isHorizontal()?i.find(".swiper-slide-shadow-left"):i.find(".swiper-slide-shadow-top"),s=this.isHorizontal()?i.find(".swiper-slide-shadow-right"):i.find(".swiper-slide-shadow-bottom"),0===r.length&&(r=_('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"left":"top")+'"></div>'),i.append(r)),0===s.length&&(s=_('<div class="swiper-slide-shadow-'+(this.isHorizontal()?"right":"bottom")+'"></div>'),i.append(s)),r.length&&(r[0].style.opacity=Math.max(-a,0)),s.length&&(s[0].style.opacity=Math.max(a,0))),i.transform("translate3d("+u+"px, "+c+"px, 0px) rotateX("+l+"deg) rotateY("+o+"deg)")}},setTransition:function(e){var n,i=this,t=i.slides,a=i.activeIndex,r=i.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),i.params.virtualTranslate&&0!==e&&(n=!1,t.eq(a).transitionEnd(function(){if(!n&&i&&!i.destroyed){n=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)r.trigger(e[t])}}))}},ne={setTranslate:function(){for(var e=this.width,t=this.height,n=this.slides,i=this.slidesSizesGrid,a=this.params.coverflowEffect,r=this.isHorizontal(),s=this.translate,o=r?e/2-s:t/2-s,l=r?a.rotate:-a.rotate,u=a.depth,c=0,d=n.length;c<d;c+=1){var p=n.eq(c),h=i[c],f=(o-p[0].swiperSlideOffset-h/2)/h*a.modifier,v=r?l*f:0,m=r?0:l*f,g=-u*Math.abs(f),y=a.stretch;"string"==typeof y&&-1!==y.indexOf("%")&&(y=parseFloat(a.stretch)/100*h);var b=r?0:y*f,x=r?y*f:0,w=1-(1-a.scale)*Math.abs(f);Math.abs(x)<.001&&(x=0),Math.abs(b)<.001&&(b=0),Math.abs(g)<.001&&(g=0),Math.abs(v)<.001&&(v=0),Math.abs(m)<.001&&(m=0),Math.abs(w)<.001&&(w=0);var C,E,S="translate3d("+x+"px,"+b+"px,"+g+"px)  rotateX("+m+"deg) rotateY("+v+"deg) scale("+w+")";p.transform(S),p[0].style.zIndex=1-Math.abs(Math.round(f)),a.slideShadows&&(C=r?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),E=r?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom"),0===C.length&&(C=_('<div class="swiper-slide-shadow-'+(r?"left":"top")+'"></div>'),p.append(C)),0===E.length&&(E=_('<div class="swiper-slide-shadow-'+(r?"right":"bottom")+'"></div>'),p.append(E)),C.length&&(C[0].style.opacity=0<f?f:0),E.length&&(E[0].style.opacity=0<-f?-f:0))}},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},ie={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var n=e.constructor;return t.swiper instanceof n?(e.thumbs.swiper=t.swiper,oe(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),oe(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):y(t.swiper)&&(e.thumbs.swiper=new n(oe({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e,t,n,i,a,r,s=this,o=s.thumbs.swiper;o&&(e=o.clickedIndex,(t=o.clickedSlide)&&_(t).hasClass(s.params.thumbs.slideThumbActiveClass)||null!=e&&(r=o.params.loop?parseInt(_(o.clickedSlide).attr("data-swiper-slide-index"),10):e,s.params.loop&&(n=s.activeIndex,s.slides.eq(n).hasClass(s.params.slideDuplicateClass)&&(s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft,n=s.activeIndex),i=s.slides.eq(n).prevAll('[data-swiper-slide-index="'+r+'"]').eq(0).index(),a=s.slides.eq(n).nextAll('[data-swiper-slide-index="'+r+'"]').eq(0).index(),r=void 0===i||void 0!==a&&a-n<n-i?a:i),s.slideTo(r)))},update:function(e){var t=this,n=t.thumbs.swiper;if(n){var i,a,r,s,o,l="auto"===n.params.slidesPerView?n.slidesPerViewDynamic():n.params.slidesPerView,u=t.params.thumbs.autoScrollOffset,c=u&&!n.params.loop;t.realIndex===n.realIndex&&!c||(i=n.activeIndex,o=n.params.loop?(n.slides.eq(i).hasClass(n.params.slideDuplicateClass)&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,i=n.activeIndex),a=n.slides.eq(i).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),r=n.slides.eq(i).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),s=void 0===a?r:void 0===r?a:r-i==i-a?i:r-i<i-a?r:a,t.activeIndex>t.previousIndex?"next":"prev"):(s=t.realIndex)>t.previousIndex?"next":"prev",c&&(s+="next"===o?u:-1*u),n.visibleSlidesIndexes&&n.visibleSlidesIndexes.indexOf(s)<0&&(n.params.centeredSlides?s=i<s?s-Math.floor(l/2)+1:s+Math.floor(l/2)-1:i<s&&(s=s-l+1),n.slideTo(s,e?0:void 0)));var d=1,p=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(d=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(d=1),d=Math.floor(d),n.slides.removeClass(p),n.params.loop||n.params.virtual&&n.params.virtual.enabled)for(var h=0;h<d;h+=1)n.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+h)+'"]').addClass(p);else for(var f=0;f<d;f+=1)n.slides.eq(t.realIndex+f).addClass(p)}}},ae=[D,O,B,N,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container"}},create:function(){b(this,{mousewheel:{enabled:!1,lastScrollTime:I(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:H.enable,disable:H.disable,handle:H.handle,handleMouseEnter:H.handleMouseEnter,handleMouseLeave:H.handleMouseLeave,animateSlider:H.animateSlider,releaseScroll:H.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){b(this,{navigation:e({},R)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var n,i=e.navigation,a=i.$nextEl,r=i.$prevEl;!e.params.navigation.hideOnClick||_(t.target).is(r)||_(t.target).is(a)||(a?n=a.hasClass(e.params.navigation.hiddenClass):r&&(n=r.hasClass(e.params.navigation.hiddenClass)),!0===n?e.emit("navigationShow"):e.emit("navigationHide"),a&&a.toggleClass(e.params.navigation.hiddenClass),r&&r.toggleClass(e.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){b(this,{pagination:e({dynamicBulletIndex:0},q)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&0<e.pagination.$el.length&&!_(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){b(this,{scrollbar:e({isTouched:!1,timeout:null,dragTimeout:null},V)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){b(this,{parallax:e({},X)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var i=this;b(i,{zoom:e({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},Y)});var a=1;Object.defineProperty(i.zoom,"scale",{get:function(){return a},set:function(e){var t,n;a!==e&&(t=i.zoom.gesture.$imageEl?i.zoom.gesture.$imageEl[0]:void 0,n=i.zoom.gesture.$slideEl?i.zoom.gesture.$slideEl[0]:void 0,i.emit("zoomChange",e,t,n)),a=e}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){b(this,{lazy:e({initialImageLoaded:!1},W)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(e){e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(!e.params.lazy.loadOnTransitionStart&&(e.params.lazy.loadOnTransitionStart||e.lazy.initialImageLoaded)||e.lazy.load())},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){b(this,{controller:e({control:this.params.controller.control},G)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,n){e.controller.control&&e.controller.setTranslate(t,n)},setTransition:function(e,t,n){e.controller.control&&e.controller.setTransition(t,n)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){b(this,{a11y:e(e({},U),{},{liveRegion:_('<span class="'+this.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')})})},on:{init:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){b(this,{history:e({},K)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){b(this,{hashNavigation:e({initialized:!1},Z)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){b(this,{autoplay:e(e({},Q),{},{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),w().addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,n){e.autoplay.running&&(n||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),w().removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){b(this,{fadeEffect:e({},J)})},on:{beforeInit:function(e){var t;"fade"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"fade"),t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},oe(e.params,t),oe(e.originalParams,t))},setTranslate:function(e){"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){"fade"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){b(this,{cubeEffect:e({},ee)})},on:{beforeInit:function(e){var t;"cube"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d"),t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0},oe(e.params,t),oe(e.originalParams,t))},setTranslate:function(e){"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){"cube"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){b(this,{flipEffect:e({},te)})},on:{beforeInit:function(e){var t;"flip"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d"),t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},oe(e.params,t),oe(e.originalParams,t))},setTranslate:function(e){"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){"flip"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){b(this,{coverflowEffect:e({},ne)})},on:{beforeInit:function(e){"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){"coverflow"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){b(this,{thumbs:e({swiper:null,initialized:!1},ie)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var n=e.thumbs.swiper;n&&n.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return $.use(ae),$}),function(l,d,v,m){"use strict";var e,a,r,s,p,t,u,h,c,i,n,o,f,g;function y(e,t){var n,i,a,r=[],s=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},e&&e.data&&(t=c(e.data.options,t)),n=t.$target||v(e.currentTarget).trigger("blur"),(a=v.fancybox.getInstance())&&a.$trigger&&a.$trigger.is(n)||(r=t.selector?v(t.selector):(i=n.attr("data-fancybox")||"")?(r=e.data?e.data.items:[]).length?r.filter('[data-fancybox="'+i+'"]'):v('[data-fancybox="'+i+'"]'):[n],(s=v(r).index(n))<0&&(s=0),(a=v.fancybox.open(r,t,s)).$trigger=n))}l.console=l.console||{info:function(e){}},v&&(v.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:v.noop,beforeLoad:v.noop,afterLoad:v.noop,beforeShow:v.noop,afterShow:v.noop,beforeClose:v.noop,afterClose:v.noop,onActivate:v.noop,onDeactivate:v.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},a=v(l),r=v(d),s=0,p=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},u=function(){var e,t=d.createElement("fakeelement"),n={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in n)if(t.style[e]!==m)return n[e];return"transitionend"}(),h=function(e){return e&&e.length&&e[0].offsetHeight},c=function(e,t){var n=v.extend(!0,{},e,t);return v.each(t,function(e,t){v.isArray(t)&&(n[e]=t)}),n},i=function(e,t,n){var i=this;i.opts=c({index:n},v.fancybox.defaults),v.isPlainObject(t)&&(i.opts=c(i.opts,t)),v.fancybox.isMobile&&(i.opts=c(i.opts,i.opts.mobile)),i.id=i.opts.id||++s,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(e),i.group.length&&i.init()},v.extend(i.prototype,{init:function(){var t,n,i=this,a=i.group[i.currIndex].opts;a.closeExisting&&v.fancybox.close(!0),v("body").addClass("fancybox-active"),!v.fancybox.getInstance()&&!1!==a.hideScrollbar&&!v.fancybox.isMobile&&d.body.scrollHeight>l.innerHeight&&(v("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-d.documentElement.clientWidth)+"px;}</style>"),v("body").addClass("compensate-for-scrollbar")),n="",v.each(a.buttons,function(e,t){n+=a.btnTpl[t]||""}),t=v(i.translate(i,a.baseTpl.replace("{{buttons}}",n).replace("{{arrows}}",a.btnTpl.arrowLeft+a.btnTpl.arrowRight))).attr("id","fancybox-container-"+i.id).addClass(a.baseClass).data("FancyBox",i).appendTo(a.parentEl),i.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){i.$refs[e]=t.find(".fancybox-"+e)}),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(e,t){var n=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){return n[t]===m?e:n[t]})},addContent:function(e){var t,u=this,n=v.makeArray(e);v.each(n,function(e,t){var n,i,a,r,s,o={},l={};v.isPlainObject(t)?l=(o=t).opts||t:"object"===v.type(t)&&v(t).length?(l=(n=v(t)).data()||{},(l=v.extend(!0,{},l,l.options)).$orig=n,o.src=u.opts.src||l.src||n.attr("href"),o.type||o.src||(o.type="inline",o.src=t)):o={type:"html",src:t+""},o.opts=v.extend(!0,{},u.opts,l),v.isArray(l.buttons)&&(o.opts.buttons=l.buttons),v.fancybox.isMobile&&o.opts.mobile&&(o.opts=c(o.opts,o.opts.mobile)),i=o.type||o.opts.type,r=o.src||"",!i&&r&&((a=r.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(i="video",o.opts.video.format||(o.opts.video.format="video/"+("ogv"===a[1]?"ogg":a[1]))):r.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?i="image":r.match(/\.(pdf)((\?|#).*)?$/i)?(i="iframe",o=v.extend(!0,o,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===r.charAt(0)&&(i="inline")),i?o.type=i:u.trigger("objectNeedsType",o),o.contentType||(o.contentType=-1<v.inArray(o.type,["html","inline","ajax"])?"html":o.type),o.index=u.group.length,"auto"==o.opts.smallBtn&&(o.opts.smallBtn=-1<v.inArray(o.type,["html","inline","ajax"])),"auto"===o.opts.toolbar&&(o.opts.toolbar=!o.opts.smallBtn),o.$thumb=o.opts.$thumb||null,o.opts.$trigger&&o.index===u.opts.index&&(o.$thumb=o.opts.$trigger.find("img:first"),o.$thumb.length&&(o.opts.$orig=o.opts.$trigger)),o.$thumb&&o.$thumb.length||!o.opts.$orig||(o.$thumb=o.opts.$orig.find("img:first")),o.$thumb&&!o.$thumb.length&&(o.$thumb=null),o.thumb=o.opts.thumb||(o.$thumb?o.$thumb[0].src:null),"function"===v.type(o.opts.caption)&&(o.opts.caption=o.opts.caption.apply(t,[u,o])),"function"===v.type(u.opts.caption)&&(o.opts.caption=u.opts.caption.apply(t,[u,o])),o.opts.caption instanceof v||(o.opts.caption=o.opts.caption===m?"":o.opts.caption+""),"ajax"===o.type&&1<(s=r.split(/\s+/,2)).length&&(o.src=s.shift(),o.opts.filter=s.shift()),o.opts.modal&&(o.opts=v.extend(!0,o.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),u.group.push(o)}),Object.keys(u.slides).length&&(u.updateControls(),(t=u.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),a.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(i.requestId&&t(i.requestId),i.requestId=p(function(){i.update(e)})):(i.current&&"iframe"===i.current.type&&i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update(e)},v.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(e){var t=(v.fancybox?v.fancybox.getInstance():null).current,n=e.keyCode||e.which;if(9!=n){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||v(e.target).is("input,textarea,video,audio,select")))return 8===n||27===n?(e.preventDefault(),void i.close(e)):37===n||38===n?(e.preventDefault(),void i.previous()):39===n||40===n?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,n)}else t.opts.trapFocus&&i.focus(e)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=l.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){a.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,i){var t,n,a,r,s,o,l,u,c,d=this,p=d.group.length;if(!(d.isDragging||d.isClosing||d.isAnimating&&d.firstRun)){if(e=parseInt(e,10),!(a=d.current?d.current.opts.loop:d.opts.loop)&&(e<0||p<=e))return!1;if(t=d.firstRun=!Object.keys(d.slides).length,s=d.current,d.prevIndex=d.currIndex,d.prevPos=d.currPos,r=d.createSlide(e),1<p&&((a||r.index<p-1)&&d.createSlide(e+1),(a||0<r.index)&&d.createSlide(e-1)),d.current=r,d.currIndex=r.index,d.currPos=r.pos,d.trigger("beforeShow",t),d.updateControls(),r.forcedDuration=m,v.isNumeric(i)?r.forcedDuration=i:i=r.opts[t?"animationDuration":"transitionDuration"],i=parseInt(i,10),n=d.isMoved(r),r.$slide.addClass("fancybox-slide--current"),t)return r.opts.animationEffect&&i&&d.$refs.container.css("transition-duration",i+"ms"),d.$refs.container.addClass("fancybox-is-open").trigger("focus"),d.loadSlide(r),void d.preload("image");o=v.fancybox.getTranslate(s.$slide),l=v.fancybox.getTranslate(d.$refs.stage),v.each(d.slides,function(e,t){v.fancybox.stop(t.$slide,!0)}),s.pos!==r.pos&&(s.isComplete=!1),s.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),n?(c=o.left-(s.pos*o.width+s.pos*s.opts.gutter),v.each(d.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var n=t.pos*o.width+t.pos*t.opts.gutter;v.fancybox.setTranslate(t.$slide,{top:0,left:n-l.left+c}),t.pos!==r.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>r.pos?"next":"previous")),h(t.$slide),v.fancybox.animate(t.$slide,{top:0,left:(t.pos-r.pos)*o.width+(t.pos-r.pos)*t.opts.gutter},i,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===d.currPos&&d.complete()})})):i&&r.opts.transitionEffect&&(u="fancybox-animated fancybox-fx-"+r.opts.transitionEffect,s.$slide.addClass("fancybox-slide--"+(s.pos>r.pos?"next":"previous")),v.fancybox.animate(s.$slide,u,i,function(){s.$slide.removeClass(u).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),r.isLoaded?d.revealContent(r):d.loadSlide(r),d.preload("image")}},createSlide:function(e){var t,n=this,i=e%n.group.length;return i=i<0?n.group.length+i:i,!n.slides[e]&&n.group[i]&&(t=v('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[e]=v.extend(!0,{},n.group[i],{pos:e,$slide:t,isLoaded:!1}),n.updateSlide(n.slides[e])),n.slides[e]},scaleToActual:function(e,t,n){var i,a,r,s,o,l=this,u=l.current,c=u.$content,d=v.fancybox.getTranslate(u.$slide).width,p=v.fancybox.getTranslate(u.$slide).height,h=u.width,f=u.height;l.isAnimating||l.isMoved()||!c||"image"!=u.type||!u.isLoaded||u.hasError||(l.isAnimating=!0,v.fancybox.stop(c),e=e===m?.5*d:e,t=t===m?.5*p:t,(i=v.fancybox.getTranslate(c)).top-=v.fancybox.getTranslate(u.$slide).top,i.left-=v.fancybox.getTranslate(u.$slide).left,s=h/i.width,o=f/i.height,a=.5*d-.5*h,r=.5*p-.5*f,d<h&&(0<(a=i.left*s-(e*s-e))&&(a=0),a<d-h&&(a=d-h)),p<f&&(0<(r=i.top*o-(t*o-t))&&(r=0),r<p-f&&(r=p-f)),l.updateCursor(h,f),v.fancybox.animate(c,{top:r,left:a,scaleX:s,scaleY:o},n||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,n=this,i=n.current,a=i.$content;n.isAnimating||n.isMoved()||!a||"image"!=i.type||!i.isLoaded||i.hasError||(n.isAnimating=!0,v.fancybox.stop(a),t=n.getFitPos(i),n.updateCursor(t.width,t.height),v.fancybox.animate(a,{top:t.top,left:t.left,scaleX:t.width/a.width(),scaleY:t.height/a.height()},e||366,function(){n.isAnimating=!1}))},getFitPos:function(e){var t,n,i,a,r=e.$content,s=e.$slide,o=e.width||e.opts.width,l=e.height||e.opts.height,u={};return!!(e.isLoaded&&r&&r.length)&&(t=v.fancybox.getTranslate(this.$refs.stage).width,n=v.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(s.css("paddingLeft"))+parseFloat(s.css("paddingRight"))+parseFloat(r.css("marginLeft"))+parseFloat(r.css("marginRight")),n-=parseFloat(s.css("paddingTop"))+parseFloat(s.css("paddingBottom"))+parseFloat(r.css("marginTop"))+parseFloat(r.css("marginBottom")),o&&l||(o=t,l=n),t-.5<(o*=i=Math.min(1,t/o,n/l))&&(o=t),n-.5<(l*=i)&&(l=n),"image"===e.type?(u.top=Math.floor(.5*(n-l))+parseFloat(s.css("paddingTop")),u.left=Math.floor(.5*(t-o))+parseFloat(s.css("paddingLeft"))):"video"===e.contentType&&(o/(a=e.opts.width&&e.opts.height?o/l:e.opts.ratio||16/9)<l?l=o/a:l*a<o&&(o=l*a)),u.width=o,u.height=l,u)},update:function(n){var i=this;v.each(i.slides,function(e,t){i.updateSlide(t,n)})},updateSlide:function(e,t){var n=this,i=e&&e.$content,a=e.width||e.opts.width,r=e.height||e.opts.height,s=e.$slide;n.adjustCaption(e),i&&(a||r||"video"===e.contentType)&&!e.hasError&&(v.fancybox.stop(i),v.fancybox.setTranslate(i,n.getFitPos(e)),e.pos===n.currPos&&(n.isAnimating=!1,n.updateCursor())),n.adjustLayout(e),s.length&&(s.trigger("refresh"),e.pos===n.currPos&&n.$refs.toolbar.add(n.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",s.get(0).scrollHeight>s.get(0).clientHeight)),n.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,n=t.current,i=n.$slide;!t.isClosing&&n&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),v.fancybox.animate(i,{top:0,left:0,opacity:1},e===m?0:e,function(){i.css({transform:"",opacity:""}),n.isComplete||t.complete()},!1))},isMoved:function(e){var t,n,i=e||this.current;return!!i&&(n=v.fancybox.getTranslate(this.$refs.stage),t=v.fancybox.getTranslate(i.$slide),!i.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-n.top)||.5<Math.abs(t.left-n.left)))},updateCursor:function(e,t){var n,i,a=this.current,r=this.$refs.container;a&&!this.isClosing&&this.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),i=!!(n=this.canPan(e,t))||this.isZoomable(),r.toggleClass("fancybox-is-zoomable",i),v("[data-fancybox-zoom]").prop("disabled",!i),n?r.addClass("fancybox-can-pan"):i&&("zoom"===a.opts.clickContent||v.isFunction(a.opts.clickContent)&&"zoom"==a.opts.clickContent(a))?r.addClass("fancybox-can-zoomIn"):a.opts.touch&&(a.opts.touch.vertical||1<this.group.length)&&"video"!==a.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var n=!1,i=this.current,a=i.$content;return e!==m&&t!==m?n=e<i.width&&t<i.height:a&&(n=(n=v.fancybox.getTranslate(a)).width<i.width&&n.height<i.height),n},canPan:function(e,t){var n=this.current,i=null,a=!1;return"image"===n.type&&(n.isComplete||e&&t)&&!n.hasError&&(a=this.getFitPos(n),e!==m&&t!==m?i={width:e,height:t}:n.isComplete&&(i=v.fancybox.getTranslate(n.$content)),i&&a&&(a=1.5<Math.abs(i.width-a.width)||1.5<Math.abs(i.height-a.height))),a},loadSlide:function(n){var e,t,i,a=this;if(!n.isLoading&&!n.isLoaded){if(!(n.isLoading=!0)===a.trigger("beforeLoad",n))return n.isLoading=!1;switch(e=n.type,(t=n.$slide).off("refresh").trigger("onReset").addClass(n.opts.slideClass),e){case"image":a.setImage(n);break;case"iframe":a.setIframe(n);break;case"html":a.setContent(n,n.src||n.content);break;case"video":a.setContent(n,n.opts.video.tpl.replace(/\{\{src\}\}/gi,n.src).replace("{{format}}",n.opts.videoFormat||n.opts.video.format||"").replace("{{poster}}",n.thumb||""));break;case"inline":v(n.src).length?a.setContent(n,v(n.src)):a.setError(n);break;case"ajax":a.showLoading(n),i=v.ajax(v.extend({},n.opts.ajax.settings,{url:n.src,success:function(e,t){"success"===t&&a.setContent(n,e)},error:function(e,t){e&&"abort"!==t&&a.setError(n)}})),t.one("onReset",function(){i.abort()});break;default:a.setError(n)}return!0}},setImage:function(t){var e,n=this;setTimeout(function(){var e=t.$image;n.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||n.showLoading(t)},50),n.checkSrcset(t),t.$content=v('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=d.createElement("img")).onerror=function(){v(this).remove(),t.$ghost=null},e.onload=function(){n.afterLoad(t)},t.$ghost=v(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),n.setBigImage(t)},checkSrcset:function(e){var t,n,i,a,r=e.opts.srcset||e.opts.image.srcset;if(r){i=l.devicePixelRatio||1,a=l.innerWidth*i,(n=r.split(",").map(function(e){var i={};return e.trim().split(/\s+/).forEach(function(e,t){var n=parseInt(e.substring(0,e.length-1),10);if(0===t)return i.url=e;n&&(i.value=n,i.postfix=e[e.length-1])}),i})).sort(function(e,t){return e.value-t.value});for(var s=0;s<n.length;s++){var o=n[s];if("w"===o.postfix&&o.value>=a||"x"===o.postfix&&o.value>=i){t=o;break}}!t&&n.length&&(t=n[n.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=r)}},setBigImage:function(t){var n=this,e=d.createElement("img"),i=v(e);t.$image=i.one("error",function(){n.setError(t)}).one("load",function(){var e;t.$ghost||(n.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),n.afterLoad(t)),n.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<a.width()/a.height()?"100":Math.round(t.width/t.height*100))+"vw"),i.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!n.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),n.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&i.naturalWidth&&i.naturalHeight?i.trigger("load"):e.error&&i.trigger("error")},resolveImageSlideSize:function(e,t,n){var i=parseInt(e.opts.width,10),a=parseInt(e.opts.height,10);e.width=t,e.height=n,0<i&&(e.width=i,e.height=Math.floor(i*n/t)),0<a&&(e.width=Math.floor(a*t/n),e.height=a)},setIframe:function(a){var r,t=this,s=a.opts.iframe,o=a.$slide;a.$content=v('<div class="fancybox-content'+(s.preload?" fancybox-is-hidden":"")+'"></div>').css(s.css).appendTo(o),o.addClass("fancybox-slide--"+a.contentType),a.$iframe=r=v(s.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(s.attr).appendTo(a.$content),s.preload?(t.showLoading(a),r.on("load.fb error.fb",function(e){this.isReady=1,a.$slide.trigger("refresh"),t.afterLoad(a)}),o.on("refresh.fb",function(){var e,t=a.$content,n=s.css.width,i=s.css.height;if(1===r[0].isReady){try{e=r.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(o.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),n===m&&(n=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",n||"").css("max-width",""),i===m&&(i=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",i||""),o.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(a),r.attr("src",a.src),o.one("onReset",function(){try{v(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}v(this).off("refresh.fb").empty(),a.isLoaded=!1,a.isRevealed=!1})},setContent:function(e,t){var n;this.isClosing||(this.hideLoading(e),e.$content&&v.fancybox.stop(e.$content),e.$slide.empty(),(n=t)&&n.hasOwnProperty&&n instanceof v&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=v("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===v.type(t)&&(t=v("<div>").append(v.trim(t)).contents()),e.opts.filter&&(t=v("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){v(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(v(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),v(t).appendTo(e.$slide),v(t).is("video,audio")&&(v(t).addClass("fancybox-video"),v(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||v(t).attr("width"),e.opts.height=e.opts.height||v(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=v(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){this.isClosing||(e.isLoading=!1,e.isLoaded=!0,this.trigger("afterLoad",e),this.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=v(this.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&v('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),this.adjustCaption(e),this.adjustLayout(e),e.pos===this.currPos&&this.updateCursor(),this.revealContent(e))},adjustCaption:function(e){var t,n=e||this.current,i=n.opts.caption,a=n.opts.preventCaptionOverlap,r=this.$refs.caption,s=!1;r.toggleClass("fancybox-caption--separate",a),a&&i&&i.length&&(n.pos!==this.currPos?((t=r.clone().appendTo(r.parent())).children().eq(0).empty().html(i),s=t.outerHeight(!0),t.empty().remove()):this.$caption&&(s=this.$caption.outerHeight(!0)),n.$slide.css("padding-bottom",s||""))},adjustLayout:function(e){var t,n,i,a,r=e||this.current;r.isLoaded&&!0!==r.opts.disableLayoutFix&&(r.$content.css("margin-bottom",""),r.$content.outerHeight()>r.$slide.height()+.5&&(i=r.$slide[0].style["padding-bottom"],a=r.$slide.css("padding-bottom"),0<parseFloat(a)&&(t=r.$slide[0].scrollHeight,r.$slide.css("padding-bottom",0),Math.abs(t-r.$slide[0].scrollHeight)<1&&(n=a),r.$slide.css("padding-bottom",i))),r.$content.css("margin-bottom",n))},revealContent:function(e){var t,n,i,a,r=this,s=e.$slide,o=!1,l=!1,u=r.isMoved(e),c=e.isRevealed;return e.isRevealed=!0,t=e.opts[r.firstRun?"animationEffect":"transitionEffect"],i=e.opts[r.firstRun?"animationDuration":"transitionDuration"],i=parseInt(e.forcedDuration===m?i:e.forcedDuration,10),!u&&e.pos===r.currPos&&i||(t=!1),"zoom"===t&&(e.pos===r.currPos&&i&&"image"===e.type&&!e.hasError&&(l=r.getThumbPos(e))?o=r.getFitPos(e):t="fade"),"zoom"===t?(r.isAnimating=!0,o.scaleX=o.width/l.width,o.scaleY=o.height/l.height,"auto"==(a=e.opts.zoomOpacity)&&(a=.1<Math.abs(e.width/e.height-l.width/l.height)),a&&(l.opacity=.1,o.opacity=1),v.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),h(e.$content),void v.fancybox.animate(e.$content,o,i,function(){r.isAnimating=!1,r.complete()})):(r.updateSlide(e),t?(v.fancybox.stop(s),n="fancybox-slide--"+(e.pos>=r.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,s.addClass(n).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),h(s),"image"!==e.type&&e.$content.hide().show(0),void v.fancybox.animate(s,"fancybox-slide--current",i,function(){s.removeClass(n).css({transform:"",opacity:""}),e.pos===r.currPos&&r.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),c||!u||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===r.currPos&&r.complete())))},getThumbPos:function(e){var t,n,i,a,r,s,o,l,u,c=e.$thumb;return!!(c&&(o=c[0])&&o.ownerDocument===d&&(v(".fancybox-container").css("pointer-events","none"),l={x:o.getBoundingClientRect().left+o.offsetWidth/2,y:o.getBoundingClientRect().top+o.offsetHeight/2},u=d.elementFromPoint(l.x,l.y)===o,v(".fancybox-container").css("pointer-events",""),u))&&(n=v.fancybox.getTranslate(c),i=parseFloat(c.css("border-top-width")||0),a=parseFloat(c.css("border-right-width")||0),r=parseFloat(c.css("border-bottom-width")||0),s=parseFloat(c.css("border-left-width")||0),t={top:n.top+i,left:n.left+s,width:n.width-a-s,height:n.height-i-r,scaleX:1,scaleY:1},0<n.width&&0<n.height&&t)},complete:function(){var e,n=this,t=n.current,i={};!n.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),n.preload("inline"),h(t.$slide),t.$slide.addClass("fancybox-slide--complete"),v.each(n.slides,function(e,t){t.pos>=n.currPos-1&&t.pos<=n.currPos+1?i[t.pos]=t:t&&(v.fancybox.stop(t.$slide),t.$slide.off().remove())}),n.slides=i),n.isAnimating=!1,n.updateCursor(),n.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),n.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):n.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,n;this.group.length<2||(n=this.slides[this.currPos+1],(t=this.slides[this.currPos-1])&&t.type===e&&this.loadSlide(t),n&&n.type===e&&this.loadSlide(n))},focus:function(e,t){var n,i,a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");this.isClosing||((n=(n=!e&&this.current&&this.current.isComplete?this.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):this.$refs.container.find("*:visible")).filter(a).filter(function(){return"hidden"!==v(this).css("visibility")&&!v(this).hasClass("disabled")})).length?(i=n.index(d.activeElement),e&&e.shiftKey?(i<0||0==i)&&(e.preventDefault(),n.eq(n.length-1).trigger("focus")):(i<0||i==n.length-1)&&(e&&e.preventDefault(),n.eq(0).trigger("focus"))):this.$refs.container.trigger("focus"))},activate:function(){var t=this;v(".fancybox-container").each(function(){var e=v(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function n(){c.cleanUp(e)}var i,a,r,s,o,l,u,c=this,d=c.current;return!c.isClosing&&(!(c.isClosing=!0)===c.trigger("beforeClose",e)?(c.isClosing=!1,p(function(){c.update()}),!1):(c.removeEvents(),r=d.$content,i=d.opts.animationEffect,a=v.isNumeric(t)?t:i?d.opts.animationDuration:0,d.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?v.fancybox.stop(d.$slide):i=!1,d.$slide.siblings().trigger("onReset").remove(),a&&c.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",a+"ms"),c.hideLoading(d),c.hideControls(!0),c.updateCursor(),"zoom"!==i||r&&a&&"image"===d.type&&!c.isMoved()&&!d.hasError&&(u=c.getThumbPos(d))||(i="fade"),"zoom"===i?(v.fancybox.stop(r),l={top:(s=v.fancybox.getTranslate(r)).top,left:s.left,scaleX:s.width/u.width,scaleY:s.height/u.height,width:u.width,height:u.height},"auto"==(o=d.opts.zoomOpacity)&&(o=.1<Math.abs(d.width/d.height-u.width/u.height)),o&&(u.opacity=0),v.fancybox.setTranslate(r,l),h(r),v.fancybox.animate(r,u,a,n)):i&&a?v.fancybox.animate(d.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,a,n):!0===e?setTimeout(n,a):n(),!0))},cleanUp:function(e){var t,n,i,a=this.current.opts.$orig;this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",e),this.current.opts.backFocus&&(a&&a.length&&a.is(":visible")||(a=this.$trigger),a&&a.length&&(n=l.scrollX,i=l.scrollY,a.trigger("focus"),v("html, body").scrollTop(i).scrollLeft(n))),this.current=null,(t=v.fancybox.getInstance())?t.activate():(v("body").removeClass("fancybox-active compensate-for-scrollbar"),v("#fancybox-style-noscroll").remove())},trigger:function(e,t){var n,i=Array.prototype.slice.call(arguments,1),a=t&&t.opts?t:this.current;if(a?i.unshift(a):a=this,i.unshift(this),v.isFunction(a.opts[e])&&(n=a.opts[e].apply(a,i)),!1===n)return n;"afterClose"!==e&&this.$refs?this.$refs.container.trigger(e+".fb",i):r.trigger(e+".fb",i)},updateControls:function(){var e=this,t=e.current,n=t.index,i=e.$refs.container,a=e.$refs.caption,r=t.opts.caption;t.$slide.trigger("refresh"),r&&r.length?(e.$caption=a).children().eq(0).html(r):e.$caption=null,e.hasHiddenControls||e.isIdle||e.showControls(),i.find("[data-fancybox-count]").html(e.group.length),i.find("[data-fancybox-index]").html(n+1),i.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&n<=0),i.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&n>=e.group.length-1),"image"===t.type?i.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&i.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),v(d.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this.current?this.current.opts:this.opts,t=this.$refs.container;this.hasHiddenControls=!1,this.idleSecondsCounter=0,t.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&1<this.group.length)).toggleClass("fancybox-show-caption",!!this.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&1<this.group.length)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),v.fancybox={version:"3.5.7",defaults:e,getInstance:function(e){var t=v('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),n=Array.prototype.slice.call(arguments,1);return t instanceof i&&("string"===v.type(e)?t[e].apply(t,n):"function"===v.type(e)&&e.apply(t,n),t)},open:function(e,t,n){return new i(e,t,n)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(n=d.createElement("div"),l.getComputedStyle&&l.getComputedStyle(n)&&l.getComputedStyle(n).getPropertyValue("transform")&&!(d.documentMode&&d.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var n="",i={};if(e&&t)return t.left===m&&t.top===m||(n=(t.left===m?e.position().left:t.left)+"px, "+(t.top===m?e.position().top:t.top)+"px",n=this.use3d?"translate3d("+n+", 0px)":"translate("+n+")"),t.scaleX!==m&&t.scaleY!==m?n+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==m&&(n+=" scaleX("+t.scaleX+")"),n.length&&(i.transform=n),t.opacity!==m&&(i.opacity=t.opacity),t.width!==m&&(i.width=t.width),t.height!==m&&(i.height=t.height),e.css(i)},animate:function(t,n,i,a,r){var s,o=this;v.isFunction(i)&&(a=i,i=null),o.stop(t),s=o.getTranslate(t),t.on(u,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(o.stop(t),v.isNumeric(i)&&t.css("transition-duration",""),v.isPlainObject(n)?n.scaleX!==m&&n.scaleY!==m&&o.setTranslate(t,{top:n.top,left:n.left,width:s.width*n.scaleX,height:s.height*n.scaleY,scaleX:1,scaleY:1}):!0!==r&&t.removeClass(n),v.isFunction(a)&&a(e))}),v.isNumeric(i)&&t.css("transition-duration",i+"ms"),v.isPlainObject(n)?(n.scaleX!==m&&n.scaleY!==m&&(delete n.width,delete n.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),v.fancybox.setTranslate(t,n)):t.addClass(n),t.data("timer",setTimeout(function(){t.trigger(u)},i+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(u),e.off(u).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},v.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?v("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},y),this},r.on("click.fb-start","[data-fancybox]",y),r.on("click.fb-start","[data-fancybox-trigger]",function(e){v('[data-fancybox="'+v(this).attr("data-fancybox-trigger")+'"]').eq(v(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:v(this)})}),o=".fancybox-button",f="fancybox-focus",g=null,r.on("mousedown mouseup focus blur",o,function(e){switch(e.type){case"mousedown":g=v(this);break;case"mouseup":g=null;break;case"focusin":v(o).removeClass(f),v(this).is(g)||v(this).is("[disabled]")||v(this).addClass(f);break;case"focusout":v(o).removeClass(f)}})))}(window,document,jQuery),function(h){"use strict";function f(n,e,t){if(n)return t=t||"","object"===h.type(t)&&(t=h.param(t,!0)),h.each(e,function(e,t){n=n.replace("$"+e,t||"")}),t.length&&(n+=(0<n.indexOf("?")?"&":"?")+t),n}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};h(document).on("objectNeedsType.fb",function(e,t,a){var r,s,o,l,u,c,d=a.src||"",p=!1,n=h.extend(!0,{},i,a.opts.media);h.each(n,function(e,t){if(s=d.match(t.matcher)){if(p=t.type,c=e,u={},t.paramPlace&&s[t.paramPlace]){"?"==(l=s[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var n=0;n<l.length;++n){var i=l[n].split("=",2);2==i.length&&(u[i[0]]=decodeURIComponent(i[1].replace(/\+/g," ")))}}return o=h.extend(!0,{},t.params,a.opts[e],u),d="function"===h.type(t.url)?t.url.call(this,s,o,a):f(t.url,s,o),r="function"===h.type(t.thumb)?t.thumb.call(this,s,o,a):f(t.thumb,s),"youtube"===e?d=d.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,n,i){return"&start="+((n?60*parseInt(n,10):0)+parseInt(i,10))}):"vimeo"===e&&(d=d.replace("&%23","#")),!1}}),p?(a.opts.thumb||a.opts.$thumb&&a.opts.$thumb.length||(a.opts.thumb=r),"iframe"===p&&(a.opts=h.extend(!0,a.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),h.extend(a,{type:p,src:d,origSrc:a.src,contentSource:c,contentType:"image"===p?"image":"gmap_place"==c||"gmap_search"==c?"map":"video"})):d&&(a.type=a.opts.defaultType)});var a={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,n=this;this[e].loaded?setTimeout(function(){n.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){n[e].loaded=!0,n.done(e)}:t.onload=function(){n[e].loaded=!0,n.done(e)},document.body.appendChild(t))},done:function(e){var t,n;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=h.fancybox.getInstance())&&(n=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(n.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(n).on("ended",function(){t.next()}))}};h(document).on({"afterShow.fb":function(e,t,n){1<t.group.length&&("youtube"===n.contentSource||"vimeo"===n.contentSource)&&a.load(n.contentSource)}})}(jQuery),function(v,l,m){"use strict";function c(e){var t=[];for(var n in e=(e=e.originalEvent||e||v.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[n].pageX?t.push({x:e[n].pageX,y:e[n].pageY}):e[n].clientX&&t.push({x:e[n].clientX,y:e[n].clientY});return t}function g(e,t,n){return t&&e?"x"===n?e.x-t.x:"y"===n?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function u(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||m.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,n=e[0].attributes,i=n.length;t<i;t++)if("data-fancybox-"===n[t].nodeName.substr(0,14))return 1}function d(e){for(var t,n,i,a,r,s=!1;t=e.get(0),r=a=i=n=void 0,n=v.getComputedStyle(t)["overflow-y"],i=v.getComputedStyle(t)["overflow-x"],a=("scroll"===n||"auto"===n)&&t.scrollHeight>t.clientHeight,r=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth,!(s=a||r)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return s}function n(e){this.instance=e,this.$bg=e.$refs.bg,this.$stage=e.$refs.stage,this.$container=e.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",m.proxy(this,"ontouchstart"))}var y=v.requestAnimationFrame||v.webkitRequestAnimationFrame||v.mozRequestAnimationFrame||v.oRequestAnimationFrame||function(e){return v.setTimeout(e,1e3/60)},b=v.cancelAnimationFrame||v.webkitCancelAnimationFrame||v.mozCancelAnimationFrame||v.oCancelAnimationFrame||function(e){v.clearTimeout(e)};n.prototype.destroy=function(){this.$container.off(".fb.touch"),m(l).off(".fb.touch"),this.requestId&&(b(this.requestId),this.requestId=null),this.tapped&&(clearTimeout(this.tapped),this.tapped=null)},n.prototype.ontouchstart=function(e){var t=this,n=m(e.target),i=t.instance,a=i.current,r=a.$slide,s=a.$content,o="touchstart"==e.type;if(o&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&r.length&&n.length&&!u(n)&&!u(n.parent())&&(n.is("img")||!(e.originalEvent.clientX>n[0].clientWidth+n.offset().left))){if(!a||i.isAnimating||a.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=c(e),t.startPoints.length&&(a.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=n,t.$content=s,t.opts=a.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=i.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(r[0].clientWidth),t.canvasHeight=Math.round(r[0].clientHeight),t.contentLastPos=null,t.contentStartPos=m.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=m.fancybox.getTranslate(r),t.stagePos=m.fancybox.getTranslate(i.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,m(l).off(".fb.touch").on(o?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",m.proxy(t,"ontouchend")).on(o?"touchmove.fb.touch":"mousemove.fb.touch",m.proxy(t,"ontouchmove")),m.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(n.is(t.$stage)||t.$stage.find(n).length)||(n.is(".fancybox-image")&&e.preventDefault(),m.fancybox.isMobile&&n.parents(".fancybox-caption").length))&&(t.isScrollable=d(n)||d(n.parent()),m.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!a.hasError||(t.canPan?(m.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===a.type&&(a.isLoaded||a.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,m.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-m(v).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-m(v).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=g(t.startPoints[0],t.startPoints[1]))))}},n.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},n.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=c(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=g(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=g(t.newPoints[0],t.startPoints[0],"y"),t.distance=g(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},n.prototype.onSwipe=function(e){var t,a=this,r=a.instance,n=a.isSwiping,i=a.sliderStartPos.left||0;if(!0!==n)"x"==n&&(0<a.distanceX&&(a.instance.group.length<2||0===a.instance.current.index&&!a.instance.current.opts.loop)?i+=Math.pow(a.distanceX,.8):a.distanceX<0&&(a.instance.group.length<2||a.instance.current.index===a.instance.group.length-1&&!a.instance.current.opts.loop)?i-=Math.pow(-a.distanceX,.8):i+=a.distanceX),a.sliderLastPos={top:"x"==n?0:a.sliderStartPos.top+a.distanceY,left:i},a.requestId&&(b(a.requestId),a.requestId=null),a.requestId=y(function(){a.sliderLastPos&&(m.each(a.instance.slides,function(e,t){var n=t.pos-a.instance.currPos;m.fancybox.setTranslate(t.$slide,{top:a.sliderLastPos.top,left:a.sliderLastPos.left+n*a.canvasWidth+n*t.opts.gutter})}),a.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(a.distance)){if(a.canTap=!1,r.group.length<2&&a.opts.vertical?a.isSwiping="y":r.isDragging||!1===a.opts.vertical||"auto"===a.opts.vertical&&800<m(v).width()?a.isSwiping="x":(t=Math.abs(180*Math.atan2(a.distanceY,a.distanceX)/Math.PI),a.isSwiping=45<t&&t<135?"y":"x"),"y"===a.isSwiping&&m.fancybox.isMobile&&a.isScrollable)return void(a.isScrolling=!0);r.isDragging=a.isSwiping,a.startPoints=a.newPoints,m.each(r.slides,function(e,t){var n,i;m.fancybox.stop(t.$slide),n=m.fancybox.getTranslate(t.$slide),i=m.fancybox.getTranslate(r.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===r.current.pos&&(a.sliderStartPos.top=n.top-i.top,a.sliderStartPos.left=n.left-i.left),m.fancybox.setTranslate(t.$slide,{top:n.top-i.top,left:n.left-i.left})}),r.SlideShow&&r.SlideShow.isActive&&r.SlideShow.stop()}},n.prototype.onPan=function(){var e=this;g(e.newPoints[0],e.realPoints[0])<(m.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&b(e.requestId),e.requestId=y(function(){m.fancybox.setTranslate(e.$content,e.contentLastPos)}))},n.prototype.limitMovement=function(){var e=this.canvasWidth,t=this.canvasHeight,n=this.distanceX,i=this.distanceY,a=this.contentStartPos,r=a.left,s=a.top,o=a.width,l=a.height,u=e<o?r+n:r,c=s+i,d=Math.max(0,.5*e-.5*o),p=Math.max(0,.5*t-.5*l),h=Math.min(e-o,.5*e-.5*o),f=Math.min(t-l,.5*t-.5*l);return 0<n&&d<u&&(u=d-1+Math.pow(-d+r+n,.8)||0),n<0&&u<h&&(u=h+1-Math.pow(h-r-n,.8)||0),0<i&&p<c&&(c=p-1+Math.pow(-p+s+i,.8)||0),i<0&&c<f&&(c=f+1-Math.pow(f-s-i,.8)||0),{top:c,left:u}},n.prototype.limitPosition=function(e,t,n,i){var a=this.canvasWidth,r=this.canvasHeight;return e=a<n?(e=0<e?0:e)<a-n?a-n:e:Math.max(0,a/2-n/2),{top:t=r<i?(t=0<t?0:t)<r-i?r-i:t:Math.max(0,r/2-i/2),left:e}},n.prototype.onZoom=function(){var e=this,t=e.contentStartPos,n=t.width,i=t.height,a=t.left,r=t.top,s=g(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,o=Math.floor(n*s),l=Math.floor(i*s),u=(n-o)*e.percentageOfImageAtPinchPointX,c=(i-l)*e.percentageOfImageAtPinchPointY,d=(e.newPoints[0].x+e.newPoints[1].x)/2-m(v).scrollLeft(),p=(e.newPoints[0].y+e.newPoints[1].y)/2-m(v).scrollTop(),h=d-e.centerPointStartX,f={top:r+(c+(p-e.centerPointStartY)),left:a+(u+h),scaleX:s,scaleY:s};e.canTap=!1,e.newWidth=o,e.newHeight=l,e.contentLastPos=f,e.requestId&&b(e.requestId),e.requestId=y(function(){m.fancybox.setTranslate(e.$content,e.contentLastPos)})},n.prototype.ontouchend=function(e){var t=this,n=t.isSwiping,i=t.isPanning,a=t.isZooming,r=t.isScrolling;if(t.endPoints=c(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),m(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(b(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,i?t.endPanning():a?t.endZooming():t.endSwiping(n,r)},n.prototype.endSwiping=function(e,t){var n=this,i=!1,a=n.instance.group.length,r=Math.abs(n.distanceX),s="x"==e&&1<a&&(130<n.dMs&&10<r||50<r);n.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(n.distanceY)?(m.fancybox.animate(n.instance.current.$slide,{top:n.sliderStartPos.top+n.distanceY+150*n.velocityY,opacity:0},200),i=n.instance.close(!0,250)):s&&0<n.distanceX?i=n.instance.previous(300):s&&n.distanceX<0&&(i=n.instance.next(300)),!1!==i||"x"!=e&&"y"!=e||n.instance.centerSlide(200),n.$container.removeClass("fancybox-is-sliding")},n.prototype.endPanning=function(){var e,t,n,i=this;i.contentLastPos&&(t=!1===i.opts.momentum||350<i.dMs?(e=i.contentLastPos.left,i.contentLastPos.top):(e=i.contentLastPos.left+500*i.velocityX,i.contentLastPos.top+500*i.velocityY),(n=i.limitPosition(e,t,i.contentStartPos.width,i.contentStartPos.height)).width=i.contentStartPos.width,n.height=i.contentStartPos.height,m.fancybox.animate(i.$content,n,366))},n.prototype.endZooming=function(){var e,t,n,i,a=this,r=a.instance.current,s=a.newWidth,o=a.newHeight;a.contentLastPos&&(e=a.contentLastPos.left,i={top:t=a.contentLastPos.top,left:e,width:s,height:o,scaleX:1,scaleY:1},m.fancybox.setTranslate(a.$content,i),s<a.canvasWidth&&o<a.canvasHeight?a.instance.scaleToFit(150):s>r.width||o>r.height?a.instance.scaleToActual(a.centerPointStartX,a.centerPointStartY,150):(n=a.limitPosition(e,t,s,o),m.fancybox.animate(a.$content,n,150)))},n.prototype.onTap=function(n){function e(e){var t=s.opts[e];if(m.isFunction(t)&&(t=t.apply(r,[s,n])),t)switch(t){case"close":r.close(i.startEvent);break;case"toggleControls":r.toggleControls();break;case"next":r.next();break;case"nextOrClose":1<r.group.length?r.next():r.close(i.startEvent);break;case"zoom":"image"==s.type&&(s.isLoaded||s.$ghost)&&(r.canPan()?r.scaleToFit():r.isScaledDown()?r.scaleToActual(l,u):r.group.length<2&&r.close(i.startEvent))}}var t,i=this,a=m(n.target),r=i.instance,s=r.current,o=n&&c(n)||i.startPoints,l=o[0]?o[0].x-m(v).scrollLeft()-i.stagePos.left:0,u=o[0]?o[0].y-m(v).scrollTop()-i.stagePos.top:0;if((!n.originalEvent||2!=n.originalEvent.button)&&(a.is("img")||!(l>a[0].clientWidth+a.offset().left))){if(a.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(a.is(".fancybox-slide"))t="Slide";else{if(!r.current.$content||!r.current.$content.find(a).addBack().filter(a).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,50<Math.abs(l-i.tapX)||50<Math.abs(u-i.tapY))return this;e("dblclick"+t)}else i.tapX=l,i.tapY=u,s.opts["dblclick"+t]&&s.opts["dblclick"+t]!==s.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,r.isAnimating||e("click"+t)},500):e("click"+t);return this}},m(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new n(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(s,o){"use strict";o.extend(!0,o.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function n(e){this.instance=e,this.init()}o.extend(n.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,n=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!n?e.$button.hide():n.progress&&(e.$progress=o('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this.instance,n=t.current;n&&(!0===e||n.opts.loop||t.currIndex<t.group.length-1)?this.isActive&&"video"!==n.contentType&&(this.$progress&&o.fancybox.animate(this.$progress.show(),{scaleX:1},n.opts.slideShow.speed),this.timer=setTimeout(function(){t.current.opts.loop||t.current.index!=t.group.length-1?t.next():t.jumpTo(0)},n.opts.slideShow.speed)):(this.stop(),t.idleSecondsCounter=0,t.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this.instance.current;e&&(this.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.isActive=!0,e.isComplete&&this.set(!0),this.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this.instance.current;this.clear(),this.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1,this.instance.trigger("onSlideShowChange",!1),this.$progress&&this.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),o(s).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new n(t))},"beforeShow.fb":function(e,t,n,i){var a=t&&t.SlideShow;i?a&&n.opts.slideShow.autoStart&&a.start():a&&a.isActive&&a.clear()},"afterShow.fb":function(e,t,n){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(e,t,n,i,a){var r=t&&t.SlideShow;!r||!n.opts.slideShow||80!==a&&32!==a||o(s.activeElement).is("button,a,input")||(i.preventDefault(),r.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var n=t&&t.SlideShow;n&&n.stop()}}),o(s).on("visibilitychange",function(){var e=o.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(s.hidden?t.clear():t.set())})}(document,jQuery),function(r,n){"use strict";var i,a=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},n=0;n<e.length;n++){var i=e[n];if(i&&i[1]in r){for(var a=0;a<i.length;a++)t[e[0][a]]=i[a];return t}}return!1}();a&&(i={request:function(e){(e=e||r.documentElement)[a.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){r[a.exitFullscreen]()},toggle:function(e){e=e||r.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(r[a.fullscreenElement])},enabled:function(){return Boolean(r[a.fullscreenEnabled])}},n.extend(!0,n.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),n(r).on(a.fullscreenchange,function(){var e=i.isFullscreen(),t=n.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.isAnimating=!1,t.update(!0,!0,0),t.isComplete||t.complete()),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),n(r).on({"onInit.fb":function(e,t){a?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,n,i,a){t&&t.FullScreen&&70===a&&(i.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(e,r){"use strict";var s="fancybox-thumbs",o=s+"-active";r.fancybox.defaults=r.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},r.fancybox.defaults);function i(e){this.init(e)}r.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,n=e.group,i=0;t.instance=e,t.opts=n[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var a=0,r=n.length;a<r&&(n[a].thumb&&i++,!(1<i));a++);1<i&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var n,e=this,t=e.instance,i=e.opts.parentEl,a=[];e.$grid||(e.$grid=r('<div class="'+s+" "+s+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(i).addBack().filter(i)),e.$grid.on("click","a",function(){t.jumpTo(r(this).attr("data-index"))})),e.$list||(e.$list=r('<div class="'+s+'__list">').appendTo(e.$grid)),r.each(t.group,function(e,t){(n=t.thumb)||"image"!==t.type||(n=t.src),a.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(n&&n.length?' style="background-image:url('+n+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=a.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,n,i=this.$list,a=this.$grid;this.instance.current&&(n=(t=i.children().removeClass(o).filter('[data-index="'+this.instance.current.index+'"]').addClass(o)).position(),"y"===this.opts.axis&&(n.top<0||n.top>i.height()-t.outerHeight())?i.stop().animate({scrollTop:i.scrollTop()+n.top},e):"x"===this.opts.axis&&(n.left<a.scrollLeft()||n.left>a.scrollLeft()+(a.width()-t.outerWidth()))&&i.parent().stop().animate({scrollLeft:n.left},e))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),r(e).on({"onInit.fb":function(e,t){var n;t&&!t.Thumbs&&(n=new i(t)).isActive&&!0===n.opts.autoStart&&n.show()},"beforeShow.fb":function(e,t,n,i){var a=t&&t.Thumbs;a&&a.isVisible&&a.focus(i?0:250)},"afterKeydown.fb":function(e,t,n,i,a){var r=t&&t.Thumbs;r&&r.isActive&&71===a&&(i.preventDefault(),r.toggle())},"beforeClose.fb":function(e,t){var n=t&&t.Thumbs;n&&n.isVisible&&!1!==n.opts.hideOnClose&&n.$grid.hide()}})}(document,jQuery),function(e,r){"use strict";r.extend(!0,r.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),r(e).on("click","[data-fancybox-share]",function(){var e,t,n,i=r.fancybox.getInstance(),a=i.current||null;a&&("function"===r.type(a.opts.share.url)&&(e=a.opts.share.url.apply(a,[i,a])),t=a.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===a.type?encodeURIComponent(a.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return n[e]}))).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),r.fancybox.open({src:i.translate(i,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){i.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(r,s,a){"use strict";function o(){var e=r.location.hash.substr(1),t=e.split("-"),n=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:n<1?1:n,gallery:t.join("-")}}function t(e){""!==e.gallery&&a("[data-fancybox='"+a.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function l(e){var t,n;return!!e&&(""!==(n=(t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&n)}a.escapeSelector||(a.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),a(function(){!1!==a.fancybox.defaults.hash&&(a(s).on({"onInit.fb":function(e,t){var n,i;!1!==t.group[t.currIndex].opts.hash&&(n=o(),(i=l(t))&&n.gallery&&i==n.gallery&&(t.currIndex=n.index-1))},"beforeShow.fb":function(e,t,n,i){var a;n&&!1!==n.opts.hash&&(a=l(t))&&(t.currentHash=a+(1<t.group.length?"-"+(n.index+1):""),r.location.hash!=="#"+t.currentHash&&(i&&!t.origHash&&(t.origHash=r.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in r.history?(r.history[i?"pushState":"replaceState"]({},s.title,r.location.pathname+r.location.search+"#"+t.currentHash),i&&(t.hasCreatedHistory=!0)):r.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,n){n&&!1!==n.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?r.history.back():t.currentHash&&("replaceState"in r.history?r.history.replaceState({},s.title,r.location.pathname+r.location.search+(t.origHash||"")):r.location.hash=t.origHash),t.currentHash=null)}}),a(r).on("hashchange.fb",function(){var e=o(),i=null;a.each(a(".fancybox-container").get().reverse(),function(e,t){var n=a(t).data("FancyBox");if(n&&n.currentHash)return i=n,!1}),i?i.currentHash===e.gallery+"-"+e.index||1===e.index&&i.currentHash==e.gallery||(i.currentHash=null,i.close()):""!==e.gallery&&t(e)}),setTimeout(function(){a.fancybox.getInstance()||t(o())},50))})}(window,document,jQuery),function(e,t){"use strict";var a=(new Date).getTime();t(e).on({"onInit.fb":function(e,i,t){i.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=i.current,n=(new Date).getTime();i.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,n-a<250||(a=n,i[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).IMask={})}(this,function(e){"use strict";var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function n(e,t){return e(t={exports:{}},t.exports),t.exports}function i(e){return e&&e.Math==Math&&e}function a(e){try{return!!e()}catch(e){return!0}}function r(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}function p(e){if(null==e)throw TypeError("Can't call method on "+e);return e}function c(e){return x(p(e))}function s(e){return"object"==typeof e?null!==e:"function"==typeof e}function o(e,t){if(!s(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!s(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!s(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!s(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}function d(e,t){return w.call(e,t)}function l(e){if(!s(e))throw TypeError(String(e)+" is not an object");return e}function h(t,n){try{P(f,t,n)}catch(e){f[t]=n}return n}var f=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof t&&t)||Function("return this")(),v=!a(function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}),u={}.propertyIsEnumerable,m=Object.getOwnPropertyDescriptor,g={f:m&&!u.call({1:2},1)?function(e){var t=m(this,e);return!!t&&t.enumerable}:u},y={}.toString,b="".split,x=a(function(){return!Object("z").propertyIsEnumerable(0)})?function(e){return"String"==(t=e,y.call(t).slice(8,-1))?b.call(e,""):Object(e);var t}:Object,w={}.hasOwnProperty,C=f.document,E=s(C)&&s(C.createElement),S=!v&&!a(function(){return 7!=Object.defineProperty(E?C.createElement("div"):{},"a",{get:function(){return 7}}).a}),T=Object.getOwnPropertyDescriptor,k={f:v?T:function(e,t){if(e=c(e),t=o(t,!0),S)try{return T(e,t)}catch(e){}if(d(e,t))return r(!g.f.call(e,t),e[t])}},A=Object.defineProperty,M={f:v?A:function(e,t,n){if(l(e),t=o(t,!0),l(n),S)try{return A(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},P=v?function(e,t,n){return M.f(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e},$="__core-js_shared__",D=f[$]||h($,{}),_=Function.toString;"function"!=typeof D.inspectSource&&(D.inspectSource=function(e){return _.call(e)});var F,L,I,O,z,B,j,N,H,R,q=D.inspectSource,V=f.WeakMap,X="function"==typeof V&&/native code/.test(q(V)),Y=n(function(e){(e.exports=function(e,t){return D[e]||(D[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.4",mode:"global",copyright:"Â© 2020 Denis Pushkarev (zloirock.ru)"})}),W=0,G=Math.random(),U=Y("keys"),K={},Z=f.WeakMap;j=X?(F=new Z,L=F.get,I=F.has,O=F.set,z=function(e,t){return O.call(F,e,t),t},B=function(e){return L.call(F,e)||{}},function(e){return I.call(F,e)}):(N=U[H="state"]||(U[H]=(R=H,"Symbol("+String(void 0===R?"":R)+")_"+(++W+G).toString(36))),K[N]=!0,z=function(e,t){return P(e,N,t),t},B=function(e){return d(e,N)?e[N]:{}},function(e){return d(e,N)});function Q(e){return"function"==typeof e?e:void 0}function J(e,t){return arguments.length<2?Q(le[e])||Q(f[e]):le[e]&&le[e][t]||f[e]&&f[e][t]}function ee(e){return isNaN(e=+e)?0:(0<e?ce:ue)(e)}function te(e){return 0<e?de(ee(e),9007199254740991):0}function ne(u){return function(e,t,n){var i,a,r,s=c(e),o=te(s.length),l=(i=o,(a=ee(n))<0?pe(a+i,0):he(a,i));if(u&&t!=t){for(;l<o;)if((r=s[l++])!=r)return!0}else for(;l<o;l++)if((u||l in s)&&s[l]===t)return u||l||0;return!u&&-1}}function ie(e,t){var n,i=c(e),a=0,r=[];for(n in i)!d(K,n)&&d(i,n)&&r.push(n);for(;t.length>a;)d(i,n=t[a++])&&(~fe(r,n)||r.push(n));return r}function ae(e,t){var n=Ce[we(e)];return n==Se||n!=Ee&&("function"==typeof t?a(t):!!t)}function re(e,t){var n,i,a,r,s=e.target,o=e.global,l=e.stat,u=o?f:l?f[s]||h(s,{}):(f[s]||{}).prototype;if(u)for(n in t){if(a=t[n],i=e.noTargetGet?(r=ke(u,n))&&r.value:u[n],!Te(o?n:s+(l?".":"#")+n,e.forced)&&void 0!==i){if(typeof a==typeof i)continue;!function(e,t){for(var n=be(t),i=M.f,a=k.f,r=0;r<n.length;r++){var s=n[r];d(e,s)||i(e,s,a(t,s))}}(a,i)}(e.sham||i&&i.sham)&&P(a,"sham",!0),oe(u,n,a,e)}}var se={set:z,get:B,has:j,enforce:function(e){return j(e)?B(e):z(e,{})},getterFor:function(n){return function(e){var t;if(!s(e)||(t=B(e)).type!==n)throw TypeError("Incompatible receiver, "+n+" required");return t}}},oe=n(function(e){var t=se.get,o=se.enforce,l=String(String).split("String");(e.exports=function(e,t,n,i){var a=!!i&&!!i.unsafe,r=!!i&&!!i.enumerable,s=!!i&&!!i.noTargetGet;"function"==typeof n&&("string"!=typeof t||d(n,"name")||P(n,"name",t),o(n).source=l.join("string"==typeof t?t:"")),e!==f?(a?!s&&e[t]&&(r=!0):delete e[t],r?e[t]=n:P(e,t,n)):r?e[t]=n:h(t,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&t(this).source||q(this)})}),le=f,ue=Math.ceil,ce=Math.floor,de=Math.min,pe=Math.max,he=Math.min,fe={includes:ne(!0),indexOf:ne(!1)}.indexOf,ve=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],me=ve.concat("length","prototype"),ge={f:Object.getOwnPropertyNames||function(e){return ie(e,me)}},ye={f:Object.getOwnPropertySymbols},be=J("Reflect","ownKeys")||function(e){var t=ge.f(l(e)),n=ye.f;return n?t.concat(n(e)):t},xe=/#|\.prototype\./,we=ae.normalize=function(e){return String(e).replace(xe,".").toLowerCase()},Ce=ae.data={},Ee=ae.NATIVE="N",Se=ae.POLYFILL="P",Te=ae,ke=k.f,Ae=Object.keys||function(e){return ie(e,ve)},Me=Object.assign,Pe=Object.defineProperty,$e=!Me||a(function(){if(v&&1!==Me({b:1},Me(Pe({},"a",{enumerable:!0,get:function(){Pe(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return 1;var e={},t={},n=Symbol(),i="abcdefghijklmnopqrst";return e[n]=7,i.split("").forEach(function(e){t[e]=e}),7!=Me({},e)[n]||Ae(Me({},t)).join("")!=i})?function(e,t){for(var n=Object(p(e)),i=arguments.length,a=1,r=ye.f,s=g.f;a<i;)for(var o,l=x(arguments[a++]),u=r?Ae(l).concat(r(l)):Ae(l),c=u.length,d=0;d<c;)o=u[d++],v&&!s.call(l,o)||(n[o]=l[o]);return n}:Me;re({target:"Object",stat:!0,forced:Object.assign!==$e},{assign:$e});function De(u){return function(e,t,n){var i,a,r=String(p(e)),s=r.length,o=void 0===n?" ":String(n),l=te(t);return l<=s||""==o?r:(i=l-s,(a=_e.call(o,Fe(i/o.length))).length>i&&(a=a.slice(0,i)),u?r+a:a+r)}}var _e="".repeat||function(e){var t=String(p(this)),n="",i=ee(e);if(i<0||i==1/0)throw RangeError("Wrong number of repetitions");for(;0<i;(i>>>=1)&&(t+=t))1&i&&(n+=t);return n},Fe=Math.ceil,Le={start:De(!1),end:De(!0)},Ie=J("navigator","userAgent")||"",Oe=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(Ie),ze=Le.end;re({target:"String",proto:!0,forced:Oe},{padEnd:function(e,t){return ze(this,e,1<arguments.length?t:void 0)}});var Be=Le.start;function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ne(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function He(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function Re(e,t,n){return t&&He(e.prototype,t),n&&He(e,n),e}function qe(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Xe(e,t)}function Ve(e){return(Ve=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xe(e,t){return(Xe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ye(e,t){if(null==e)return{};var n,i=function(e,t){if(null==e)return{};for(var n,i={},a=Object.keys(e),r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(e),r=0;r<a.length;r++)n=a[r],0<=t.indexOf(n)||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n]);return i}function We(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Ge(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=Ve(e)););return e}function Ue(e,t,n){return(Ue="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var i=Ge(e,t);if(i){var a=Object.getOwnPropertyDescriptor(i,t);return a.get?a.get.call(n):a.value}})(e,t,n||e)}function Ke(e,t,n,i){return(Ke="undefined"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,t,n,i){var a,r,s,o,l=Ge(e,t);if(l){if((a=Object.getOwnPropertyDescriptor(l,t)).set)return a.set.call(i,n),!0;if(!a.writable)return!1}if(a=Object.getOwnPropertyDescriptor(i,t)){if(!a.writable)return!1;a.value=n,Object.defineProperty(i,t,a)}else o=n,(s=t)in(r=i)?Object.defineProperty(r,s,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[s]=o;return!0})(e,t,n,i)}function Ze(e,t,n,i,a){if(!Ke(e,t,n,i||e)&&a)throw new Error("failed to set property");return n}function Qe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],i=!0,a=!1,r=void 0;try{for(var s,o=e[Symbol.iterator]();!(i=(s=o.next()).done)&&(n.push(s.value),!t||n.length!==t);i=!0);}catch(e){a=!0,r=e}finally{try{i||null==o.return||o.return()}finally{if(a)throw r}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Je(e){return"string"==typeof e||e instanceof String}re({target:"String",proto:!0,forced:Oe},{padStart:function(e,t){return Be(this,e,1<arguments.length?t:void 0)}}),re({target:"String",proto:!0},{repeat:_e}),re({global:!0},{globalThis:f});var et="NONE",tt="LEFT",nt="FORCE_LEFT",it="RIGHT",at="FORCE_RIGHT";function rt(e){return e.replace(/([.*+?^=!:${}()|[\]/\\])/g,"\\$1")}var st=function(){function a(e,t,n,i){for(Ne(this,a),this.value=e,this.cursorPos=t,this.oldValue=n,this.oldSelection=i;this.value.slice(0,this.startChangePos)!==this.oldValue.slice(0,this.startChangePos);)--this.oldSelection.start}return Re(a,[{key:"startChangePos",get:function(){return Math.min(this.cursorPos,this.oldSelection.start)}},{key:"insertedCount",get:function(){return this.cursorPos-this.startChangePos}},{key:"inserted",get:function(){return this.value.substr(this.startChangePos,this.insertedCount)}},{key:"removedCount",get:function(){return Math.max(this.oldSelection.end-this.startChangePos||this.oldValue.length-this.value.length,0)}},{key:"removed",get:function(){return this.oldValue.substr(this.startChangePos,this.removedCount)}},{key:"head",get:function(){return this.value.substring(0,this.startChangePos)}},{key:"tail",get:function(){return this.value.substring(this.startChangePos+this.insertedCount)}},{key:"removeDirection",get:function(){return!this.removedCount||this.insertedCount?et:this.oldSelection.end===this.cursorPos||this.oldSelection.start===this.cursorPos?it:tt}}]),a}(),ot=function(){function t(e){Ne(this,t),Object.assign(this,{inserted:"",rawInserted:"",skip:!1,tailShift:0},e)}return Re(t,[{key:"aggregate",value:function(e){return this.rawInserted+=e.rawInserted,this.skip=this.skip||e.skip,this.inserted+=e.inserted,this.tailShift+=e.tailShift,this}},{key:"offset",get:function(){return this.tailShift+this.inserted.length}}]),t}(),lt=function(){function i(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,n=2<arguments.length?arguments[2]:void 0;Ne(this,i),this.value=e,this.from=t,this.stop=n}return Re(i,[{key:"toString",value:function(){return this.value}},{key:"extend",value:function(e){this.value+=String(e)}},{key:"appendTo",value:function(e){return e.append(this.toString(),{tail:!0}).aggregate(e._appendPlaceholder())}},{key:"shiftBefore",value:function(e){if(this.from>=e||!this.value.length)return"";var t=this.value[0];return this.value=this.value.slice(1),t}},{key:"state",get:function(){return{value:this.value,from:this.from,stop:this.stop}},set:function(e){Object.assign(this,e)}}]),i}();function ut(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};return new ut.InputMask(e,t)}var ct=function(){function t(e){Ne(this,t),this._value="",this._update(Object.assign({},t.DEFAULTS,{},e)),this.isInitialized=!0}return Re(t,[{key:"updateOptions",value:function(e){Object.keys(e).length&&this.withValueRefresh(this._update.bind(this,e))}},{key:"_update",value:function(e){Object.assign(this,e)}},{key:"reset",value:function(){this._value=""}},{key:"resolve",value:function(e){return this.reset(),this.append(e,{input:!0},""),this.doCommit(),this.value}},{key:"nearestInputPos",value:function(e){return e}},{key:"extractInput",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this.value.length;return this.value.slice(n,i)}},{key:"extractTail",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this.value.length;return new lt(this.extractInput(n,i),n)}},{key:"appendTail",value:function(e){return Je(e)&&(e=new lt(String(e))),e.appendTo(this)}},{key:"_appendCharRaw",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};return(e=this.doPrepare(e,n))?(this._value+=e,new ot({inserted:e,rawInserted:e})):new ot}},{key:"_appendChar",value:function(e,t,n){var i,a,r,s,o=1<arguments.length&&void 0!==t?t:{},l=2<arguments.length?n:void 0,u=this.state,c=this._appendCharRaw(e,o);return c.inserted&&((s=!1!==this.doValidate(o))&&null!=l&&(a=this.state,this.overwrite&&(i=l.state,l.shiftBefore(this.value.length)),(s=(r=this.appendTail(l)).rawInserted===l.toString())&&r.inserted&&(this.state=a)),s||(c=new ot,this.state=u,l&&i&&(l.state=i))),c}},{key:"_appendPlaceholder",value:function(){return new ot}},{key:"append",value:function(e,t,n){if(!Je(e))throw new Error("value should be string");var i=new ot,a=Je(n)?new lt(String(n)):n;t.tail&&(t._beforeTailState=this.state);for(var r=0;r<e.length;++r)i.aggregate(this._appendChar(e[r],t,a));return null!=a&&(i.tailShift+=this.appendTail(a).tailShift),i}},{key:"remove",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this.value.length;return this._value=this.value.slice(0,n)+this.value.slice(i),new ot}},{key:"withValueRefresh",value:function(e){if(this._refreshing||!this.isInitialized)return e();this._refreshing=!0;var t=this.rawInputValue,n=this.value,i=e();return this.rawInputValue=t,this.value!==n&&0===n.indexOf(this.value)&&this.append(n.slice(this.value.length),{},""),delete this._refreshing,i}},{key:"runIsolated",value:function(e){if(this._isolated||!this.isInitialized)return e(this);this._isolated=!0;var t=this.state,n=e(this);return this.state=t,delete this._isolated,n}},{key:"doPrepare",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};return this.prepare?this.prepare(e,this,n):e}},{key:"doValidate",value:function(e){return(!this.validate||this.validate(this.value,this,e))&&(!this.parent||this.parent.doValidate(e))}},{key:"doCommit",value:function(){this.commit&&this.commit(this.value,this)}},{key:"doFormat",value:function(e){return this.format?this.format(e,this):e}},{key:"doParse",value:function(e){return this.parse?this.parse(e,this):e}},{key:"splice",value:function(e,t,n,i){var a=e+t,r=this.extractTail(a),s=this.nearestInputPos(e,i);return new ot({tailShift:s-e}).aggregate(this.remove(s)).aggregate(this.append(n,{input:!0},r))}},{key:"state",get:function(){return{_value:this.value}},set:function(e){this._value=e._value}},{key:"value",get:function(){return this._value},set:function(e){this.resolve(e)}},{key:"unmaskedValue",get:function(){return this.value},set:function(e){this.reset(),this.append(e,{},""),this.doCommit()}},{key:"typedValue",get:function(){return this.doParse(this.value)},set:function(e){this.value=this.doFormat(e)}},{key:"rawInputValue",get:function(){return this.extractInput(0,this.value.length,{raw:!0})},set:function(e){this.reset(),this.append(e,{raw:!0},""),this.doCommit()}},{key:"isComplete",get:function(){return!0}}]),t}();function dt(e){if(null==e)throw new Error("mask property should be defined");return e instanceof RegExp?ut.MaskedRegExp:Je(e)?ut.MaskedPattern:e instanceof Date||e===Date?ut.MaskedDate:e instanceof Number||"number"==typeof e||e===Number?ut.MaskedNumber:Array.isArray(e)||e===Array?ut.MaskedDynamic:ut.Masked&&e.prototype instanceof ut.Masked?e:e instanceof Function?ut.MaskedFunction:e instanceof ut.Masked?e.constructor:(console.warn("Mask not found for mask",e),ut.Masked)}function pt(e){if(ut.Masked&&e instanceof ut.Masked)return e;var t=(e=Object.assign({},e)).mask;if(ut.Masked&&t instanceof ut.Masked)return t;var n=dt(t);if(!n)throw new Error("Masked class is not found for provided mask, appropriate module needs to be import manually before creating mask.");return new n(e)}ct.DEFAULTS={format:function(e){return e},parse:function(e){return e}},ut.Masked=ct,ut.createMask=pt;var ht={0:/\d/,a:/[\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,"*":/./},ft=function(){function i(e){Ne(this,i);var t=e.mask,n=Ye(e,["mask"]);this.masked=pt({mask:t}),Object.assign(this,n)}return Re(i,[{key:"reset",value:function(){this._isFilled=!1,this.masked.reset()}},{key:"remove",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this.value.length;return 0===n&&1<=i?(this._isFilled=!1,this.masked.remove(n,i)):new ot}},{key:"_appendChar",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};if(this._isFilled)return new ot;var i=this.masked.state,a=this.masked._appendChar(e,n);return a.inserted&&!1===this.doValidate(n)&&(a.inserted=a.rawInserted="",this.masked.state=i),a.inserted||this.isOptional||this.lazy||n.input||(a.inserted=this.placeholderChar),a.skip=!a.inserted&&!this.isOptional,this._isFilled=Boolean(a.inserted),a}},{key:"append",value:function(){var e;return(e=this.masked).append.apply(e,arguments)}},{key:"_appendPlaceholder",value:function(){var e=new ot;return this._isFilled||this.isOptional||(this._isFilled=!0,e.inserted=this.placeholderChar),e}},{key:"extractTail",value:function(){var e;return(e=this.masked).extractTail.apply(e,arguments)}},{key:"appendTail",value:function(){var e;return(e=this.masked).appendTail.apply(e,arguments)}},{key:"extractInput",value:function(e,t,n){var i=0<arguments.length&&void 0!==e?e:0,a=1<arguments.length&&void 0!==t?t:this.value.length,r=2<arguments.length?n:void 0;return this.masked.extractInput(i,a,r)}},{key:"nearestInputPos",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:et,i=this.value.length,a=Math.min(Math.max(e,0),i);switch(n){case tt:case nt:return this.isComplete?a:0;case it:case at:return this.isComplete?a:i;case et:default:return a}}},{key:"doValidate",value:function(){var e,t;return(e=this.masked).doValidate.apply(e,arguments)&&(!this.parent||(t=this.parent).doValidate.apply(t,arguments))}},{key:"doCommit",value:function(){this.masked.doCommit()}},{key:"value",get:function(){return this.masked.value||(this._isFilled&&!this.isOptional?this.placeholderChar:"")}},{key:"unmaskedValue",get:function(){return this.masked.unmaskedValue}},{key:"isComplete",get:function(){return Boolean(this.masked.value)||this.isOptional}},{key:"state",get:function(){return{masked:this.masked.state,_isFilled:this._isFilled}},set:function(e){this.masked.state=e.masked,this._isFilled=e._isFilled}}]),i}(),vt=function(){function t(e){Ne(this,t),Object.assign(this,e),this._value=""}return Re(t,[{key:"reset",value:function(){this._isRawInput=!1,this._value=""}},{key:"remove",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this._value.length;return this._value=this._value.slice(0,n)+this._value.slice(i),this._value||(this._isRawInput=!1),new ot}},{key:"nearestInputPos",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:et,i=this._value.length;switch(n){case tt:case nt:return 0;case et:case it:case at:default:return i}}},{key:"extractInput",value:function(e,t,n){var i=0<arguments.length&&void 0!==e?e:0,a=1<arguments.length&&void 0!==t?t:this._value.length;return(2<arguments.length&&void 0!==n?n:{}).raw&&this._isRawInput&&this._value.slice(i,a)||""}},{key:"_appendChar",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{},i=new ot;if(this._value)return i;var a=this.char===e[0]&&(this.isUnmasking||n.input||n.raw)&&!n.tail;return a&&(i.rawInserted=this.char),this._value=i.inserted=this.char,this._isRawInput=a&&(n.raw||n.input),i}},{key:"_appendPlaceholder",value:function(){var e=new ot;return this._value||(this._value=e.inserted=this.char),e}},{key:"extractTail",value:function(e,t){1<arguments.length&&void 0!==t||this.value.length;return new lt("")}},{key:"appendTail",value:function(e){return Je(e)&&(e=new lt(String(e))),e.appendTo(this)}},{key:"append",value:function(e,t,n){var i=this._appendChar(e,t);return null!=n&&(i.tailShift+=this.appendTail(n).tailShift),i}},{key:"doCommit",value:function(){}},{key:"value",get:function(){return this._value}},{key:"unmaskedValue",get:function(){return this.isUnmasking?this.value:""}},{key:"isComplete",get:function(){return!0}},{key:"state",get:function(){return{_value:this._value,_isRawInput:this._isRawInput}},set:function(e){Object.assign(this,e)}}]),t}(),mt=function(){function u(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:[],t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;Ne(this,u),this.chunks=e,this.from=t}return Re(u,[{key:"toString",value:function(){return this.chunks.map(String).join("")}},{key:"extend",value:function(e){if(String(e)){Je(e)&&(e=new lt(String(e)));var t,n=this.chunks[this.chunks.length-1],i=n&&(n.stop===e.stop||null==e.stop)&&e.from===n.from+n.toString().length;if(e instanceof lt)i?n.extend(e.toString()):this.chunks.push(e);else if(e instanceof u){if(null==e.stop)for(;e.chunks.length&&null==e.chunks[0].stop;)(t=e.chunks.shift()).from+=e.from,this.extend(t);e.toString()&&(e.stop=e.blockIndex,this.chunks.push(e))}}}},{key:"appendTo",value:function(e){if(!(e instanceof ut.MaskedPattern))return new lt(this.toString()).appendTo(e);for(var t=new ot,n=0;n<this.chunks.length&&!t.skip;++n){var i,a,r=this.chunks[n],s=e._mapPosToBlock(e.value.length),o=r.stop,l=void 0;null!=o&&(!s||s.index<=o)&&((r instanceof u||0<=e._stops.indexOf(o))&&t.aggregate(e._appendPlaceholder(o)),l=r instanceof u&&e._blocks[o]),l?((i=l.appendTail(r)).skip=!1,t.aggregate(i),e._value+=i.inserted,(a=r.toString().slice(i.rawInserted.length))&&t.aggregate(e.append(a,{tail:!0}))):t.aggregate(e.append(r.toString(),{tail:!0}))}return t}},{key:"shiftBefore",value:function(e){if(this.from>=e||!this.chunks.length)return"";for(var t=e-this.from,n=0;n<this.chunks.length;){var i=this.chunks[n],a=i.shiftBefore(t);if(i.toString()){if(!a)break;++n}else this.chunks.splice(n,1);if(a)return a}return""}},{key:"state",get:function(){return{chunks:this.chunks.map(function(e){return e.state}),from:this.from,stop:this.stop,blockIndex:this.blockIndex}},set:function(e){var t=e.chunks,n=Ye(e,["chunks"]);Object.assign(this,n),this.chunks=t.map(function(e){var t=new("chunks"in e?u:lt);return t.state=e,t})}}]),u}(),gt=function(){function e(){return Ne(this,e),We(this,Ve(e).apply(this,arguments))}return qe(e,ct),Re(e,[{key:"_update",value:function(t){t.mask&&(t.validate=function(e){return 0<=e.search(t.mask)}),Ue(Ve(e.prototype),"_update",this).call(this,t)}}]),e}();ut.MaskedRegExp=gt;var yt=function(){function u(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return Ne(this,u),e.definitions=Object.assign({},ht,e.definitions),We(this,Ve(u).call(this,Object.assign({},u.DEFAULTS,{},e)))}return qe(u,ct),Re(u,[{key:"_update",value:function(e){var t=0<arguments.length&&void 0!==e?e:{};t.definitions=Object.assign({},this.definitions,t.definitions),Ue(Ve(u.prototype),"_update",this).call(this,t),this._rebuildMask()}},{key:"_rebuildMask",value:function(){var a=this,e=this.definitions;this._blocks=[],this._stops=[],this._maskedBlocks={};var r=this.mask;if(r&&e)for(var t=!1,n=!1,s=0;s<r.length;++s){if(this.blocks)if("continue"===function(){var t=r.slice(s),e=Object.keys(a.blocks).filter(function(e){return 0===t.indexOf(e)});e.sort(function(e,t){return t.length-e.length});var n=e[0];if(n){var i=pt(Object.assign({parent:a,lazy:a.lazy,placeholderChar:a.placeholderChar,overwrite:a.overwrite},a.blocks[n]));return i&&(a._blocks.push(i),a._maskedBlocks[n]||(a._maskedBlocks[n]=[]),a._maskedBlocks[n].push(a._blocks.length-1)),s+=n.length-1,"continue"}}())continue;var i=r[s],o=i in e;if(i!==u.STOP_CHAR)if("{"!==i&&"}"!==i)if("["!==i&&"]"!==i){if(i===u.ESCAPE_CHAR){if(!(i=r[++s]))break;o=!1}var l=o?new ft({parent:this,lazy:this.lazy,placeholderChar:this.placeholderChar,mask:e[i],isOptional:n}):new vt({char:i,isUnmasking:t});this._blocks.push(l)}else n=!n;else t=!t;else this._stops.push(this._blocks.length)}}},{key:"reset",value:function(){Ue(Ve(u.prototype),"reset",this).call(this),this._blocks.forEach(function(e){return e.reset()})}},{key:"doCommit",value:function(){this._blocks.forEach(function(e){return e.doCommit()}),Ue(Ve(u.prototype),"doCommit",this).call(this)}},{key:"appendTail",value:function(e){return Ue(Ve(u.prototype),"appendTail",this).call(this,e).aggregate(this._appendPlaceholder())}},{key:"_appendCharRaw",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};e=this.doPrepare(e,n);var i=this._mapPosToBlock(this.value.length),a=new ot;if(!i)return a;for(var r=i.index;;++r){var s=this._blocks[r];if(!s)break;var o=s._appendChar(e,n),l=o.skip;if(a.aggregate(o),l||o.rawInserted)break}return a}},{key:"extractTail",value:function(e,t){var r=this,n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this.value.length,s=new mt;return n===i||this._forEachBlocksInRange(n,i,function(e,t,n,i){var a=e.extractTail(n,i);a.stop=r._findStopBefore(t),a.from=r._blockStartPos(t),a instanceof mt&&(a.blockIndex=t),s.extend(a)}),s}},{key:"extractInput",value:function(e,t,n){var i=0<arguments.length&&void 0!==e?e:0,a=1<arguments.length&&void 0!==t?t:this.value.length,r=2<arguments.length&&void 0!==n?n:{};if(i===a)return"";var s="";return this._forEachBlocksInRange(i,a,function(e,t,n,i){s+=e.extractInput(n,i,r)}),s}},{key:"_findStopBefore",value:function(e){for(var t,n=0;n<this._stops.length;++n){var i=this._stops[n];if(!(i<=e))break;t=i}return t}},{key:"_appendPlaceholder",value:function(i){var a=this,r=new ot;if(this.lazy&&null==i)return r;var e=this._mapPosToBlock(this.value.length);if(!e)return r;var t=e.index,n=null!=i?i:this._blocks.length;return this._blocks.slice(t,n).forEach(function(e){var t,n;e.lazy&&null==i||(t=null!=e._blocks?[e._blocks.length]:[],n=e._appendPlaceholder.apply(e,t),a._value+=n.inserted,r.aggregate(n))}),r}},{key:"_mapPosToBlock",value:function(e){for(var t="",n=0;n<this._blocks.length;++n){var i=this._blocks[n],a=t.length;if(e<=(t+=i.value).length)return{index:n,offset:e-a}}}},{key:"_blockStartPos",value:function(e){return this._blocks.slice(0,e).reduce(function(e,t){return e+t.value.length},0)}},{key:"_forEachBlocksInRange",value:function(e,t,n){var i=1<arguments.length&&void 0!==t?t:this.value.length,a=2<arguments.length?n:void 0,r=this._mapPosToBlock(e);if(r){var s=this._mapPosToBlock(i),o=s&&r.index===s.index,l=r.offset,u=s&&o?s.offset:this._blocks[r.index].value.length;if(a(this._blocks[r.index],r.index,l,u),s&&!o){for(var c=r.index+1;c<s.index;++c)a(this._blocks[c],c,0,this._blocks[c].value.length);a(this._blocks[s.index],s.index,0,s.offset)}}}},{key:"remove",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this.value.length,a=Ue(Ve(u.prototype),"remove",this).call(this,n,i);return this._forEachBlocksInRange(n,i,function(e,t,n,i){a.aggregate(e.remove(n,i))}),a}},{key:"nearestInputPos",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:et,i=this._mapPosToBlock(e)||{index:0,offset:0},a=i.offset,r=i.index,s=this._blocks[r];if(!s)return e;var o=a;0!==o&&o<s.value.length&&(o=s.nearestInputPos(a,function(e){switch(e){case tt:return nt;case it:return at;default:return e}}(n)));var l=o===s.value.length;if(!(0===o)&&!l)return this._blockStartPos(r)+o;var u=l?r+1:r;if(n===et){if(0<u){var c=u-1,d=this._blocks[c],p=d.nearestInputPos(0,et);if(!d.value.length||p!==d.value.length)return this._blockStartPos(u)}for(var h=u;h<this._blocks.length;++h){var f=this._blocks[h],v=f.nearestInputPos(0,et);if(!f.value.length||v!==f.value.length)return this._blockStartPos(h)+v}for(var m=u-1;0<=m;--m){var g=this._blocks[m],y=g.nearestInputPos(0,et);if(!g.value.length||y!==g.value.length)return this._blockStartPos(m)+g.value.length}return e}if(n===tt||n===nt){for(var b,x=u;x<this._blocks.length;++x)if(this._blocks[x].value){b=x;break}if(null!=b){var w=this._blocks[b],C=w.nearestInputPos(0,it);if(0===C&&w.unmaskedValue.length)return this._blockStartPos(b)+C}for(var E,S=-1,T=u-1;0<=T;--T){var k=this._blocks[T],A=k.nearestInputPos(k.value.length,nt);if(k.value&&0===A||(E=T),0!==A){if(A!==k.value.length)return this._blockStartPos(T)+A;S=T;break}}if(n===tt)for(var M=S+1;M<=Math.min(u,this._blocks.length-1);++M){var P=this._blocks[M],$=P.nearestInputPos(0,et),D=this._blockStartPos(M)+$;if(e<D)break;if($!==P.value.length)return D}if(0<=S)return this._blockStartPos(S)+this._blocks[S].value.length;if(n===nt||this.lazy&&!this.extractInput()&&!function(e){if(!e)return!1;var t=e.value;return!t||e.nearestInputPos(0,et)!==t.length}(this._blocks[u]))return 0;if(null!=E)return this._blockStartPos(E);for(var _=u;_<this._blocks.length;++_){var F=this._blocks[_],L=F.nearestInputPos(0,et);if(!F.value.length||L!==F.value.length)return this._blockStartPos(_)+L}return 0}if(n===it||n===at){for(var I,O,z=u;z<this._blocks.length;++z){var B=this._blocks[z],j=B.nearestInputPos(0,et);if(j!==B.value.length){O=this._blockStartPos(z)+j,I=z;break}}if(null!=I&&null!=O){for(var N=I;N<this._blocks.length;++N){var H=this._blocks[N],R=H.nearestInputPos(0,at);if(R!==H.value.length)return this._blockStartPos(N)+R}return n===at?this.value.length:O}for(var q=Math.min(u,this._blocks.length-1);0<=q;--q){var V=this._blocks[q],X=V.nearestInputPos(V.value.length,tt);if(0!==X){var Y=this._blockStartPos(q)+X;if(e<=Y)return Y;break}}}return e}},{key:"maskedBlock",value:function(e){return this.maskedBlocks(e)[0]}},{key:"maskedBlocks",value:function(e){var t=this,n=this._maskedBlocks[e];return n?n.map(function(e){return t._blocks[e]}):[]}},{key:"state",get:function(){return Object.assign({},Ue(Ve(u.prototype),"state",this),{_blocks:this._blocks.map(function(e){return e.state})})},set:function(e){var n=e._blocks,t=Ye(e,["_blocks"]);this._blocks.forEach(function(e,t){return e.state=n[t]}),Ze(Ve(u.prototype),"state",t,this,!0)}},{key:"isComplete",get:function(){return this._blocks.every(function(e){return e.isComplete})}},{key:"unmaskedValue",get:function(){return this._blocks.reduce(function(e,t){return e+t.unmaskedValue},"")},set:function(e){Ze(Ve(u.prototype),"unmaskedValue",e,this,!0)}},{key:"value",get:function(){return this._blocks.reduce(function(e,t){return e+t.value},"")},set:function(e){Ze(Ve(u.prototype),"value",e,this,!0)}}]),u}();yt.DEFAULTS={lazy:!0,placeholderChar:"_"},yt.STOP_CHAR="`",yt.ESCAPE_CHAR="\\",yt.InputDefinition=ft,yt.FixedDefinition=vt,ut.MaskedPattern=yt;var bt=function(){function p(){return Ne(this,p),We(this,Ve(p).apply(this,arguments))}return qe(p,yt),Re(p,[{key:"_update",value:function(e){e=Object.assign({to:this.to||0,from:this.from||0},e);var t=String(e.to).length;null!=e.maxLength&&(t=Math.max(t,e.maxLength)),e.maxLength=t;for(var n=String(e.from).padStart(t,"0"),i=String(e.to).padStart(t,"0"),a=0;a<i.length&&i[a]===n[a];)++a;e.mask=i.slice(0,a).replace(/0/g,"\\0")+"0".repeat(t-a),Ue(Ve(p.prototype),"_update",this).call(this,e)}},{key:"boundaries",value:function(e){var t="",n="",i=Qe(e.match(/^(\D*)(\d*)(\D*)/)||[],3),a=i[1],r=i[2];return r&&(t="0".repeat(a.length)+r,n="9".repeat(a.length)+r),[t=t.padEnd(this.maxLength,"0"),n=n.padEnd(this.maxLength,"9")]}},{key:"doPrepare",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};if(e=Ue(Ve(p.prototype),"doPrepare",this).call(this,e,n).replace(/\D/g,""),!this.autofix)return e;for(var i=String(this.from).padStart(this.maxLength,"0"),a=String(this.to).padStart(this.maxLength,"0"),r=this.value,s="",o=0;o<e.length;++o){var l=r+s+e[o],u=Qe(this.boundaries(l),2),c=u[0],d=u[1];Number(d)<this.from?s+=i[l.length-1]:Number(c)>this.to?s+=a[l.length-1]:s+=e[o]}return s}},{key:"doValidate",value:function(){var e,t=this.value;if(-1===t.search(/[^0]/)&&t.length<=this._matchFrom)return!0;for(var n=Qe(this.boundaries(t),2),i=n[0],a=n[1],r=arguments.length,s=new Array(r),o=0;o<r;o++)s[o]=arguments[o];return this.from<=Number(a)&&Number(i)<=this.to&&(e=Ue(Ve(p.prototype),"doValidate",this)).call.apply(e,[this].concat(s))}},{key:"_matchFrom",get:function(){return this.maxLength-String(this.from).length}},{key:"isComplete",get:function(){return Ue(Ve(p.prototype),"isComplete",this)&&Boolean(this.value)}}]),p}();ut.MaskedRange=bt;var xt=function(){function r(e){return Ne(this,r),We(this,Ve(r).call(this,Object.assign({},r.DEFAULTS,{},e)))}return qe(r,yt),Re(r,[{key:"_update",value:function(n){n.mask===Date&&delete n.mask,n.pattern&&(n.mask=n.pattern);var e=n.blocks;n.blocks=Object.assign({},r.GET_DEFAULT_BLOCKS()),n.min&&(n.blocks.Y.from=n.min.getFullYear()),n.max&&(n.blocks.Y.to=n.max.getFullYear()),n.min&&n.max&&n.blocks.Y.from===n.blocks.Y.to&&(n.blocks.m.from=n.min.getMonth()+1,n.blocks.m.to=n.max.getMonth()+1,n.blocks.m.from===n.blocks.m.to&&(n.blocks.d.from=n.min.getDate(),n.blocks.d.to=n.max.getDate())),Object.assign(n.blocks,e),Object.keys(n.blocks).forEach(function(e){var t=n.blocks[e];"autofix"in t||(t.autofix=n.autofix)}),Ue(Ve(r.prototype),"_update",this).call(this,n)}},{key:"doValidate",value:function(){for(var e,t=this.date,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return(e=Ue(Ve(r.prototype),"doValidate",this)).call.apply(e,[this].concat(i))&&(!this.isComplete||this.isDateExist(this.value)&&null!=t&&(null==this.min||this.min<=t)&&(null==this.max||t<=this.max))}},{key:"isDateExist",value:function(e){return 0<=this.format(this.parse(e,this),this).indexOf(e)}},{key:"date",get:function(){return this.typedValue},set:function(e){this.typedValue=e}},{key:"typedValue",get:function(){return this.isComplete?Ue(Ve(r.prototype),"typedValue",this):null},set:function(e){Ze(Ve(r.prototype),"typedValue",e,this,!0)}}]),r}();xt.DEFAULTS={pattern:"d{.}`m{.}`Y",format:function(e){return[String(e.getDate()).padStart(2,"0"),String(e.getMonth()+1).padStart(2,"0"),e.getFullYear()].join(".")},parse:function(e){var t=Qe(e.split("."),3),n=t[0],i=t[1],a=t[2];return new Date(a,i-1,n)}},xt.GET_DEFAULT_BLOCKS=function(){return{d:{mask:bt,from:1,to:31,maxLength:2},m:{mask:bt,from:1,to:12,maxLength:2},Y:{mask:bt,from:1900,to:9999}}},ut.MaskedDate=xt;var wt=function(){function e(){Ne(this,e)}return Re(e,[{key:"select",value:function(e,t){if(null!=e&&null!=t&&(e!==this.selectionStart||t!==this.selectionEnd))try{this._unsafeSelect(e,t)}catch(e){}}},{key:"_unsafeSelect",value:function(){}},{key:"bindEvents",value:function(){}},{key:"unbindEvents",value:function(){}},{key:"selectionStart",get:function(){var e;try{e=this._unsafeSelectionStart}catch(e){}return null!=e?e:this.value.length}},{key:"selectionEnd",get:function(){var e;try{e=this._unsafeSelectionEnd}catch(e){}return null!=e?e:this.value.length}},{key:"isActive",get:function(){return!1}}]),e}();ut.MaskElement=wt;var Ct=function(){function i(e){var t;return Ne(this,i),(t=We(this,Ve(i).call(this))).input=e,t._handlers={},t}return qe(i,wt),Re(i,[{key:"_unsafeSelect",value:function(e,t){this.input.setSelectionRange(e,t)}},{key:"bindEvents",value:function(t){var n=this;Object.keys(t).forEach(function(e){return n._toggleEventHandler(i.EVENTS_MAP[e],t[e])})}},{key:"unbindEvents",value:function(){var t=this;Object.keys(this._handlers).forEach(function(e){return t._toggleEventHandler(e)})}},{key:"_toggleEventHandler",value:function(e,t){this._handlers[e]&&(this.input.removeEventListener(e,this._handlers[e]),delete this._handlers[e]),t&&(this.input.addEventListener(e,t),this._handlers[e]=t)}},{key:"rootElement",get:function(){return this.input.getRootNode?this.input.getRootNode():document}},{key:"isActive",get:function(){return this.input===this.rootElement.activeElement}},{key:"_unsafeSelectionStart",get:function(){return this.input.selectionStart}},{key:"_unsafeSelectionEnd",get:function(){return this.input.selectionEnd}},{key:"value",get:function(){return this.input.value},set:function(e){this.input.value=e}}]),i}();Ct.EVENTS_MAP={selectionChange:"keydown",input:"input",drop:"drop",click:"click",focus:"focus",commit:"blur"},ut.HTMLMaskElement=Ct;var Et=function(){function e(){return Ne(this,e),We(this,Ve(e).apply(this,arguments))}return qe(e,Ct),Re(e,[{key:"_unsafeSelect",value:function(e,t){var n,i,a;this.rootElement.createRange&&((n=this.rootElement.createRange()).setStart(this.input.firstChild||this.input,e),n.setEnd(this.input.lastChild||this.input,t),(a=(i=this.rootElement).getSelection&&i.getSelection())&&(a.removeAllRanges(),a.addRange(n)))}},{key:"_unsafeSelectionStart",get:function(){var e=this.rootElement,t=e.getSelection&&e.getSelection();return t&&t.anchorOffset}},{key:"_unsafeSelectionEnd",get:function(){var e=this.rootElement,t=e.getSelection&&e.getSelection();return t&&this._unsafeSelectionStart+String(t).length}},{key:"value",get:function(){return this.input.textContent},set:function(e){this.input.textContent=e}}]),e}();ut.HTMLContenteditableMaskElement=Et;var St=function(){function n(e,t){Ne(this,n),this.el=e instanceof wt?e:new(e.isContentEditable&&"INPUT"!==e.tagName&&"TEXTAREA"!==e.tagName?Et:Ct)(e),this.masked=pt(t),this._listeners={},this._value="",this._unmaskedValue="",this._saveSelection=this._saveSelection.bind(this),this._onInput=this._onInput.bind(this),this._onChange=this._onChange.bind(this),this._onDrop=this._onDrop.bind(this),this._onFocus=this._onFocus.bind(this),this._onClick=this._onClick.bind(this),this.alignCursor=this.alignCursor.bind(this),this.alignCursorFriendly=this.alignCursorFriendly.bind(this),this._bindEvents(),this.updateValue(),this._onChange()}return Re(n,[{key:"maskEquals",value:function(e){return null==e||e===this.masked.mask||e===Date&&this.masked instanceof xt}},{key:"_bindEvents",value:function(){this.el.bindEvents({selectionChange:this._saveSelection,input:this._onInput,drop:this._onDrop,click:this._onClick,focus:this._onFocus,commit:this._onChange})}},{key:"_unbindEvents",value:function(){this.el&&this.el.unbindEvents()}},{key:"_fireEvent",value:function(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var a=this._listeners[e];a&&a.forEach(function(e){return e.apply(void 0,n)})}},{key:"_saveSelection",value:function(){this.value!==this.el.value&&console.warn("Element value was changed outside of mask. Syncronize mask using `mask.updateValue()` to work properly."),this._selection={start:this.selectionStart,end:this.cursorPos}}},{key:"updateValue",value:function(){this.masked.value=this.el.value,this._value=this.masked.value}},{key:"updateControl",value:function(){var e=this.masked.unmaskedValue,t=this.masked.value,n=this.unmaskedValue!==e||this.value!==t;this._unmaskedValue=e,this._value=t,this.el.value!==t&&(this.el.value=t),n&&this._fireChangeEvents()}},{key:"updateOptions",value:function(e){var t=e.mask,n=Ye(e,["mask"]),i=!this.maskEquals(t),a=!function e(t,n){if(n===t)return 1;var i=Array.isArray(n),a=Array.isArray(t);if(i&&a){if(n.length!=t.length)return;for(c=0;c<n.length;c++)if(!e(n[c],t[c]))return;return 1}if(i==a){if(n&&t&&"object"===je(n)&&"object"===je(t)){var r=n instanceof Date,s=t instanceof Date;if(r&&s)return n.getTime()==t.getTime();if(r!=s)return;var o=n instanceof RegExp,l=t instanceof RegExp;if(o&&l)return n.toString()==t.toString();if(o!=l)return;for(var u=Object.keys(n),c=0;c<u.length;c++)if(!Object.prototype.hasOwnProperty.call(t,u[c]))return;for(c=0;c<u.length;c++)if(!e(t[u[c]],n[u[c]]))return;return 1}return n&&t&&"function"==typeof n&&"function"==typeof t&&n.toString()===t.toString()}}(this.masked,n);i&&(this.mask=t),a&&this.masked.updateOptions(n),(i||a)&&this.updateControl()}},{key:"updateCursor",value:function(e){null!=e&&(this.cursorPos=e,this._delayUpdateCursor(e))}},{key:"_delayUpdateCursor",value:function(e){var t=this;this._abortUpdateCursor(),this._changingCursorPos=e,this._cursorChanging=setTimeout(function(){t.el&&(t.cursorPos=t._changingCursorPos,t._abortUpdateCursor())},10)}},{key:"_fireChangeEvents",value:function(){this._fireEvent("accept",this._inputEvent),this.masked.isComplete&&this._fireEvent("complete",this._inputEvent)}},{key:"_abortUpdateCursor",value:function(){this._cursorChanging&&(clearTimeout(this._cursorChanging),delete this._cursorChanging)}},{key:"alignCursor",value:function(){this.cursorPos=this.masked.nearestInputPos(this.cursorPos,tt)}},{key:"alignCursorFriendly",value:function(){this.selectionStart===this.cursorPos&&this.alignCursor()}},{key:"on",value:function(e,t){return this._listeners[e]||(this._listeners[e]=[]),this._listeners[e].push(t),this}},{key:"off",value:function(e,t){if(!this._listeners[e])return this;if(!t)return delete this._listeners[e],this;var n=this._listeners[e].indexOf(t);return 0<=n&&this._listeners[e].splice(n,1),this}},{key:"_onInput",value:function(e){if(this._inputEvent=e,this._abortUpdateCursor(),!this._selection)return this.updateValue();var t=new st(this.el.value,this.cursorPos,this.value,this._selection),n=this.masked.rawInputValue,i=this.masked.splice(t.startChangePos,t.removed.length,t.inserted,t.removeDirection).offset,a=n===this.masked.rawInputValue?t.removeDirection:et,r=this.masked.nearestInputPos(t.startChangePos+i,a);this.updateControl(),this.updateCursor(r),delete this._inputEvent}},{key:"_onChange",value:function(){this.value!==this.el.value&&this.updateValue(),this.masked.doCommit(),this.updateControl(),this._saveSelection()}},{key:"_onDrop",value:function(e){e.preventDefault(),e.stopPropagation()}},{key:"_onFocus",value:function(){this.alignCursorFriendly()}},{key:"_onClick",value:function(){this.alignCursorFriendly()}},{key:"destroy",value:function(){this._unbindEvents(),this._listeners.length=0,delete this.el}},{key:"mask",get:function(){return this.masked.mask},set:function(e){var t;this.maskEquals(e)||(e instanceof ut.Masked||this.masked.constructor!==dt(e)?((t=pt({mask:e})).unmaskedValue=this.masked.unmaskedValue,this.masked=t):this.masked.updateOptions({mask:e}))}},{key:"value",get:function(){return this._value},set:function(e){this.masked.value=e,this.updateControl(),this.alignCursor()}},{key:"unmaskedValue",get:function(){return this._unmaskedValue},set:function(e){this.masked.unmaskedValue=e,this.updateControl(),this.alignCursor()}},{key:"typedValue",get:function(){return this.masked.typedValue},set:function(e){this.masked.typedValue=e,this.updateControl(),this.alignCursor()}},{key:"selectionStart",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionStart}},{key:"cursorPos",get:function(){return this._cursorChanging?this._changingCursorPos:this.el.selectionEnd},set:function(e){this.el&&this.el.isActive&&(this.el.select(e,e),this._saveSelection())}}]),n}();ut.InputMask=St;var Tt=function(){function r(){return Ne(this,r),We(this,Ve(r).apply(this,arguments))}return qe(r,yt),Re(r,[{key:"_update",value:function(e){e.enum&&(e.mask="*".repeat(e.enum[0].length)),Ue(Ve(r.prototype),"_update",this).call(this,e)}},{key:"doValidate",value:function(){for(var e,t=this,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return this.enum.some(function(e){return 0<=e.indexOf(t.unmaskedValue)})&&(e=Ue(Ve(r.prototype),"doValidate",this)).call.apply(e,[this].concat(i))}}]),r}();ut.MaskedEnum=Tt;var kt=function(){function l(e){return Ne(this,l),We(this,Ve(l).call(this,Object.assign({},l.DEFAULTS,{},e)))}return qe(l,ct),Re(l,[{key:"_update",value:function(e){Ue(Ve(l.prototype),"_update",this).call(this,e),this._updateRegExps()}},{key:"_updateRegExps",value:function(){var e="^"+(this.allowNegative?"[+|\\-]?":""),t=(this.scale?"("+rt(this.radix)+"\\d{0,"+this.scale+"})?":"")+"$";this._numberRegExpInput=new RegExp(e+"(0|([1-9]+\\d*))?"+t),this._numberRegExp=new RegExp(e+"\\d*"+t),this._mapToRadixRegExp=new RegExp("["+this.mapToRadix.map(rt).join("")+"]","g"),this._thousandsSeparatorRegExp=new RegExp(rt(this.thousandsSeparator),"g")}},{key:"_removeThousandsSeparators",value:function(e){return e.replace(this._thousandsSeparatorRegExp,"")}},{key:"_insertThousandsSeparators",value:function(e){var t=e.split(this.radix);return t[0]=t[0].replace(/\B(?=(\d{3})+(?!\d))/g,this.thousandsSeparator),t.join(this.radix)}},{key:"doPrepare",value:function(e){for(var t,n=arguments.length,i=new Array(1<n?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];return(t=Ue(Ve(l.prototype),"doPrepare",this)).call.apply(t,[this,this._removeThousandsSeparators(e.replace(this._mapToRadixRegExp,this.radix))].concat(i))}},{key:"_separatorsCount",value:function(e,t){for(var n=1<arguments.length&&void 0!==t&&t,i=0,a=0;a<e;++a)this._value.indexOf(this.thousandsSeparator,a)===a&&(++i,n&&(e+=this.thousandsSeparator.length));return i}},{key:"_separatorsCountFromSlice",value:function(e){var t=0<arguments.length&&void 0!==e?e:this._value;return this._separatorsCount(this._removeThousandsSeparators(t).length,!0)}},{key:"extractInput",value:function(e,t,n){var i=0<arguments.length&&void 0!==e?e:0,a=1<arguments.length&&void 0!==t?t:this.value.length,r=2<arguments.length?n:void 0,s=Qe(this._adjustRangeWithSeparators(i,a),2),i=s[0],a=s[1];return this._removeThousandsSeparators(Ue(Ve(l.prototype),"extractInput",this).call(this,i,a,r))}},{key:"_appendCharRaw",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};if(!this.thousandsSeparator)return Ue(Ve(l.prototype),"_appendCharRaw",this).call(this,e,n);var i=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,a=this._separatorsCountFromSlice(i);this._value=this._removeThousandsSeparators(this.value);var r=Ue(Ve(l.prototype),"_appendCharRaw",this).call(this,e,n);this._value=this._insertThousandsSeparators(this._value);var s=n.tail&&n._beforeTailState?n._beforeTailState._value:this._value,o=this._separatorsCountFromSlice(s);return r.tailShift+=(o-a)*this.thousandsSeparator.length,r.skip=!r.rawInserted&&e===this.thousandsSeparator,r}},{key:"_findSeparatorAround",value:function(e){if(this.thousandsSeparator){var t=e-this.thousandsSeparator.length+1,n=this.value.indexOf(this.thousandsSeparator,t);if(n<=e)return n}return-1}},{key:"_adjustRangeWithSeparators",value:function(e,t){var n=this._findSeparatorAround(e);0<=n&&(e=n);var i=this._findSeparatorAround(t);return 0<=i&&(t=i+this.thousandsSeparator.length),[e,t]}},{key:"remove",value:function(e,t){var n=0<arguments.length&&void 0!==e?e:0,i=1<arguments.length&&void 0!==t?t:this.value.length,a=Qe(this._adjustRangeWithSeparators(n,i),2),n=a[0],i=a[1],r=this.value.slice(0,n),s=this.value.slice(i),o=this._separatorsCount(r.length);this._value=this._insertThousandsSeparators(this._removeThousandsSeparators(r+s));var l=this._separatorsCountFromSlice(r);return new ot({tailShift:(l-o)*this.thousandsSeparator.length})}},{key:"nearestInputPos",value:function(e,t){if(!this.thousandsSeparator)return e;switch(t){case et:case tt:case nt:var n=this._findSeparatorAround(e-1);if(0<=n){var i=n+this.thousandsSeparator.length;if(e<i||this.value.length<=i||t===nt)return n}break;case it:case at:var a=this._findSeparatorAround(e);if(0<=a)return a+this.thousandsSeparator.length}return e}},{key:"doValidate",value:function(e){var t,n=(e.input?this._numberRegExpInput:this._numberRegExp).test(this._removeThousandsSeparators(this.value));return n&&(t=this.number,n=n&&!isNaN(t)&&(null==this.min||0<=this.min||this.min<=this.number)&&(null==this.max||this.max<=0||this.number<=this.max)),n&&Ue(Ve(l.prototype),"doValidate",this).call(this,e)}},{key:"doCommit",value:function(){var e,t,n;this.value&&(t=e=this.number,null!=this.min&&(t=Math.max(t,this.min)),null!=this.max&&(t=Math.min(t,this.max)),t!==e&&(this.unmaskedValue=String(t)),n=this.value,this.normalizeZeros&&(n=this._normalizeZeros(n)),this.padFractionalZeros&&(n=this._padFractionalZeros(n)),this._value=n),Ue(Ve(l.prototype),"doCommit",this).call(this)}},{key:"_normalizeZeros",value:function(e){var t=this._removeThousandsSeparators(e).split(this.radix);return t[0]=t[0].replace(/^(\D*)(0*)(\d*)/,function(e,t,n,i){return t+i}),e.length&&!/\d$/.test(t[0])&&(t[0]=t[0]+"0"),1<t.length&&(t[1]=t[1].replace(/0*$/,""),t[1].length||(t.length=1)),this._insertThousandsSeparators(t.join(this.radix))}},{key:"_padFractionalZeros",value:function(e){if(!e)return e;var t=e.split(this.radix);return t.length<2&&t.push(""),t[1]=t[1].padEnd(this.scale,"0"),t.join(this.radix)}},{key:"unmaskedValue",get:function(){return this._removeThousandsSeparators(this._normalizeZeros(this.value)).replace(this.radix,".")},set:function(e){Ze(Ve(l.prototype),"unmaskedValue",e.replace(".",this.radix),this,!0)}},{key:"typedValue",get:function(){return Number(this.unmaskedValue)},set:function(e){Ze(Ve(l.prototype),"unmaskedValue",String(e),this,!0)}},{key:"number",get:function(){return this.typedValue},set:function(e){this.typedValue=e}},{key:"allowNegative",get:function(){return this.signed||null!=this.min&&this.min<0||null!=this.max&&this.max<0}}]),l}();kt.DEFAULTS={radix:",",thousandsSeparator:"",mapToRadix:["."],scale:2,signed:!1,normalizeZeros:!0,padFractionalZeros:!1},ut.MaskedNumber=kt;var At=function(){function t(){return Ne(this,t),We(this,Ve(t).apply(this,arguments))}return qe(t,ct),Re(t,[{key:"_update",value:function(e){e.mask&&(e.validate=e.mask),Ue(Ve(t.prototype),"_update",this).call(this,e)}}]),t}();ut.MaskedFunction=At;var Mt=function(){function r(e){var t;return Ne(this,r),(t=We(this,Ve(r).call(this,Object.assign({},r.DEFAULTS,{},e)))).currentMask=null,t}return qe(r,ct),Re(r,[{key:"_update",value:function(e){Ue(Ve(r.prototype),"_update",this).call(this,e),"mask"in e&&(this.compiledMasks=Array.isArray(e.mask)?e.mask.map(pt):[])}},{key:"_appendCharRaw",value:function(){var e,t=this._applyDispatch.apply(this,arguments);return this.currentMask&&t.aggregate((e=this.currentMask)._appendChar.apply(e,arguments)),t}},{key:"_applyDispatch",value:function(e,t){var n,i=0<arguments.length&&void 0!==e?e:"",a=1<arguments.length&&void 0!==t?t:{},r=a.tail&&null!=a._beforeTailState?a._beforeTailState._value:this.value,s=this.rawInputValue,o=a.tail&&null!=a._beforeTailState?a._beforeTailState._rawInputValue:s,l=s.slice(o.length),u=this.currentMask,c=new ot,d=u&&u.state;return this.currentMask=this.doDispatch(i,Object.assign({},a)),this.currentMask&&(this.currentMask!==u?(this.currentMask.reset(),n=this.currentMask.append(o,{raw:!0}),c.tailShift=n.inserted.length-r.length,l&&(c.tailShift+=this.currentMask.append(l,{raw:!0,tail:!0}).tailShift)):this.currentMask.state=d),c}},{key:"_appendPlaceholder",value:function(){var e=this._applyDispatch.apply(this,arguments);return this.currentMask&&e.aggregate(this.currentMask._appendPlaceholder()),e}},{key:"doDispatch",value:function(e,t){var n=1<arguments.length&&void 0!==t?t:{};return this.dispatch(e,this,n)}},{key:"doValidate",value:function(){for(var e,t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return(e=Ue(Ve(r.prototype),"doValidate",this)).call.apply(e,[this].concat(i))&&(!this.currentMask||(t=this.currentMask).doValidate.apply(t,i))}},{key:"reset",value:function(){this.currentMask&&this.currentMask.reset(),this.compiledMasks.forEach(function(e){return e.reset()})}},{key:"remove",value:function(){var e,t=new ot;return this.currentMask&&t.aggregate((e=this.currentMask).remove.apply(e,arguments)).aggregate(this._applyDispatch()),t}},{key:"extractInput",value:function(){var e;return this.currentMask?(e=this.currentMask).extractInput.apply(e,arguments):""}},{key:"extractTail",value:function(){for(var e,t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return this.currentMask?(e=this.currentMask).extractTail.apply(e,i):(t=Ue(Ve(r.prototype),"extractTail",this)).call.apply(t,[this].concat(i))}},{key:"doCommit",value:function(){this.currentMask&&this.currentMask.doCommit(),Ue(Ve(r.prototype),"doCommit",this).call(this)}},{key:"nearestInputPos",value:function(){for(var e,t,n=arguments.length,i=new Array(n),a=0;a<n;a++)i[a]=arguments[a];return this.currentMask?(e=this.currentMask).nearestInputPos.apply(e,i):(t=Ue(Ve(r.prototype),"nearestInputPos",this)).call.apply(t,[this].concat(i))}},{key:"value",get:function(){return this.currentMask?this.currentMask.value:""},set:function(e){Ze(Ve(r.prototype),"value",e,this,!0)}},{key:"unmaskedValue",get:function(){return this.currentMask?this.currentMask.unmaskedValue:""},set:function(e){Ze(Ve(r.prototype),"unmaskedValue",e,this,!0)}},{key:"typedValue",get:function(){return this.currentMask?this.currentMask.typedValue:""},set:function(e){var t=String(e);this.currentMask&&(this.currentMask.typedValue=e,t=this.currentMask.unmaskedValue),this.unmaskedValue=t}},{key:"isComplete",get:function(){return!!this.currentMask&&this.currentMask.isComplete}},{key:"state",get:function(){return Object.assign({},Ue(Ve(r.prototype),"state",this),{_rawInputValue:this.rawInputValue,compiledMasks:this.compiledMasks.map(function(e){return e.state}),currentMaskRef:this.currentMask,currentMask:this.currentMask&&this.currentMask.state})},set:function(e){var n=e.compiledMasks,t=e.currentMaskRef,i=e.currentMask,a=Ye(e,["compiledMasks","currentMaskRef","currentMask"]);this.compiledMasks.forEach(function(e,t){return e.state=n[t]}),null!=t&&(this.currentMask=t,this.currentMask.state=i),Ze(Ve(r.prototype),"state",a,this,!0)}},{key:"overwrite",get:function(){return this.currentMask?this.currentMask.overwrite:Ue(Ve(r.prototype),"overwrite",this)},set:function(){console.warn('"overwrite" option is not available in dynamic mask, use this option in siblings')}}]),r}();Mt.DEFAULTS={dispatch:function(n,e,i){if(e.compiledMasks.length){var a=e.rawInputValue,t=e.compiledMasks.map(function(e,t){return e.reset(),e.append(a,{raw:!0}),e.append(n,i),{weight:e.rawInputValue.length,index:t}});return t.sort(function(e,t){return t.weight-e.weight}),e.compiledMasks[t[0].index]}}},ut.MaskedDynamic=Mt;var Pt={MASKED:"value",UNMASKED:"unmaskedValue",TYPED:"typedValue"};function $t(e){var n=1<arguments.length&&void 0!==arguments[1]?arguments[1]:Pt.MASKED,i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:Pt.MASKED,a=pt(e);return function(t){return a.runIsolated(function(e){return e[n]=t,e[i]})}}function Dt(e){for(var t=arguments.length,n=new Array(1<t?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return $t.apply(void 0,n)(e)}ut.PIPE_TYPE=Pt,ut.createPipe=$t,ut.pipe=Dt;try{globalThis.IMask=ut}catch(e){}e.HTMLContenteditableMaskElement=Et,e.HTMLMaskElement=Ct,e.InputMask=St,e.MaskElement=wt,e.Masked=ct,e.MaskedDate=xt,e.MaskedDynamic=Mt,e.MaskedEnum=Tt,e.MaskedFunction=At,e.MaskedNumber=kt,e.MaskedPattern=yt,e.MaskedRange=bt,e.MaskedRegExp=gt,e.PIPE_TYPE=Pt,e.createMask=pt,e.createPipe=$t,e.default=ut,e.pipe=Dt,Object.defineProperty(e,"__esModule",{value:!0})}),window.Element&&!Element.prototype.closest&&(Element.prototype.closest=function(e){var t,n=(this.document||this.ownerDocument).querySelectorAll(e),i=this;do{for(t=n.length;0<=--t&&n.item(t)!==i;);}while(t<0&&(i=i.parentElement));return i}),function(){function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}"function"!=typeof window.CustomEvent&&(e.prototype=window.Event.prototype,window.CustomEvent=e)}(),function(){for(var r=0,e=["ms","moz","webkit","o"],t=0;t<e.length&&!window.requestAnimationFrame;++t)window.requestAnimationFrame=window[e[t]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[t]+"CancelAnimationFrame"]||window[e[t]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,t){var n=(new Date).getTime(),i=Math.max(0,16-(n-r)),a=window.setTimeout(function(){e(n+i)},i);return r=n+i,a}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}(),function(e,t){"function"==typeof define&&define.amd?define([],function(){return t(e)}):"object"==typeof exports?module.exports=t(e):e.SmoothScroll=t(e)}("undefined"!=typeof global?global:"undefined"!=typeof window?window:this,function(T){"use strict";function k(){var n={};return Array.prototype.forEach.call(arguments,function(e){for(var t in e){if(!e.hasOwnProperty(t))return;n[t]=e[t]}}),n}function s(e){"#"===e.charAt(0)&&(e=e.substr(1));for(var t,n=String(e),i=n.length,a=-1,r="",s=n.charCodeAt(0);++a<i;){if(0===(t=n.charCodeAt(a)))throw new InvalidCharacterError("Invalid character: the input contains U+0000.");r+=1<=t&&t<=31||127==t||0===a&&48<=t&&t<=57||1===a&&48<=t&&t<=57&&45===s?"\\"+t.toString(16)+" ":128<=t||45===t||95===t||48<=t&&t<=57||65<=t&&t<=90||97<=t&&t<=122?n.charAt(a):"\\"+n.charAt(a)}return"#"+r}function A(){return Math.max(document.body.scrollHeight,document.documentElement.scrollHeight,document.body.offsetHeight,document.documentElement.offsetHeight,document.body.clientHeight,document.documentElement.clientHeight)}function M(e,t,n){0===e&&document.body.focus(),n||(e.focus(),document.activeElement!==e&&(e.setAttribute("tabindex","-1"),e.focus(),e.style.outline="none"),T.scrollTo(0,t))}function P(e,t,n,i){var a;t.emitEvents&&"function"==typeof T.CustomEvent&&(a=new CustomEvent(e,{bubbles:!0,detail:{anchor:n,toggle:i}}),document.dispatchEvent(a))}var $={ignore:"[data-scroll-ignore]",header:null,topOnEmptyHash:!0,speed:500,speedAsDuration:!1,durationMax:null,durationMin:null,clip:!0,offset:0,easing:"easeInOutCubic",customEasing:null,updateURL:!0,popstate:!0,emitEvents:!0};return function(a,e){var w,r,C,E,S={cancelScroll:function(e){cancelAnimationFrame(E),E=null,e||P("scrollCancel",w)}};S.animateScroll=function(r,s,e){S.cancelScroll();var o,t,n,l,u,c,i,a,d,p,h,f,v,m,g,y=k(w||$,e||{}),b="[object Number]"===Object.prototype.toString.call(r),x=b||!r.tagName?null:r;(b||x)&&(o=T.pageYOffset,y.header&&!C&&(C=document.querySelector(y.header)),a=(g=C)?parseInt(T.getComputedStyle(g).height,10)+g.offsetTop:0,d=b?r:function(e,t,n,i){var a=0;if(e.offsetParent)for(;a+=e.offsetTop,e=e.offsetParent;);return a=Math.max(a-t-n,0),i&&(a=Math.min(a,A()-T.innerHeight)),a}(x,a,parseInt("function"==typeof y.offset?y.offset(r,s):y.offset,10),y.clip),p=d-o,h=A(),f=0,n=(t=y).speedAsDuration?t.speed:Math.abs(p/1e3*t.speed),v=t.durationMax&&n>t.durationMax?t.durationMax:t.durationMin&&n<t.durationMin?t.durationMin:parseInt(n,10),m=function(e){var t,n,i,a;f+=e-(l=l||e),c=o+p*(t=u=1<(u=0===v?0:f/v)?1:u,"easeInQuad"===y.easing&&(n=t*t),"easeOutQuad"===y.easing&&(n=t*(2-t)),"easeInOutQuad"===y.easing&&(n=t<.5?2*t*t:(4-2*t)*t-1),"easeInCubic"===y.easing&&(n=t*t*t),"easeOutCubic"===y.easing&&(n=--t*t*t+1),"easeInOutCubic"===y.easing&&(n=t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1),"easeInQuart"===y.easing&&(n=t*t*t*t),"easeOutQuart"===y.easing&&(n=1- --t*t*t*t),"easeInOutQuart"===y.easing&&(n=t<.5?8*t*t*t*t:1-8*--t*t*t*t),"easeInQuint"===y.easing&&(n=t*t*t*t*t),"easeOutQuint"===y.easing&&(n=1+--t*t*t*t*t),"easeInOutQuint"===y.easing&&(n=t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t),y.customEasing&&(n=y.customEasing(t)),n||t),T.scrollTo(0,Math.floor(c)),i=d,a=T.pageYOffset,c==i||a==i||(o<i&&T.innerHeight+a)>=h?(S.cancelScroll(!0),M(r,i,b),P("scrollStop",y,r,s),E=l=null):(E=T.requestAnimationFrame(m),l=e)},0===T.pageYOffset&&T.scrollTo(0,0),i=r,b||history.pushState&&y.updateURL&&history.pushState({smoothScroll:JSON.stringify(y),anchor:i.id},document.title,i===document.documentElement?"#top":"#"+i.id),"matchMedia"in T&&T.matchMedia("(prefers-reduced-motion)").matches?M(r,Math.floor(d),!1):(P("scrollStart",y,r,s),S.cancelScroll(!0),T.requestAnimationFrame(m)))};function t(e){if(!e.defaultPrevented&&!(0!==e.button||e.metaKey||e.ctrlKey||e.shiftKey)&&"closest"in e.target&&(r=e.target.closest(a))&&"a"===r.tagName.toLowerCase()&&!e.target.closest(w.ignore)&&r.hostname===T.location.hostname&&r.pathname===T.location.pathname&&/#/.test(r.href)){var t,n;try{t=s(decodeURIComponent(r.hash))}catch(e){t=s(r.hash)}if("#"===t){if(!w.topOnEmptyHash)return;n=document.documentElement}else n=document.querySelector(t);(n=n||"#top"!==t?n:document.documentElement)&&(e.preventDefault(),history.replaceState&&w.updateURL&&!history.state&&(i=(i=T.location.hash)||"",history.replaceState({smoothScroll:JSON.stringify(w),anchor:i||T.pageYOffset},document.title,i||T.location.href)),S.animateScroll(n,r))}var i}function n(e){var t;null!==history.state&&history.state.smoothScroll&&history.state.smoothScroll===JSON.stringify(w)&&("string"==typeof(t=history.state.anchor)&&t&&!(t=document.querySelector(s(history.state.anchor)))||S.animateScroll(t,null,{updateURL:!1}))}return S.destroy=function(){w&&(document.removeEventListener("click",t,!1),T.removeEventListener("popstate",n,!1),S.cancelScroll(),E=C=r=w=null)},function(){if(!("querySelector"in document&&"addEventListener"in T&&"requestAnimationFrame"in T&&"closest"in T.Element.prototype))throw"Smooth Scroll: This browser does not support the required JavaScript methods and browser APIs.";S.destroy(),w=k($,e||{}),C=w.header?document.querySelector(w.header):null,document.addEventListener("click",t,!1),w.updateURL&&w.popstate&&T.addEventListener("popstate",n,!1)}(),S}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9zc3Itd2luZG93L3Nzci13aW5kb3cuZXNtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2RvbTcvZG9tNy5lc20uanMiLCIuLi9zcmMvdXRpbHMvZG9tLmpzIiwiLi4vc3JjL3V0aWxzL2dldC1zdXBwb3J0LmpzIiwiLi4vc3JjL3V0aWxzL2dldC1kZXZpY2UuanMiLCIuLi9zcmMvdXRpbHMvZ2V0LWJyb3dzZXIuanMiLCIuLi9zcmMvdXRpbHMvdXRpbHMuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vblJlc2l6ZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvZXZlbnRzL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9jaGVjay1vdmVyZmxvdy9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvZGVmYXVsdHMuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2NvcmUtY2xhc3MuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL21vZHVsYXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2V2ZW50cy1lbWl0dGVyLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS91cGRhdGUvaW5kZXguanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTaXplLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc09mZnNldC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc1Byb2dyZXNzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlUHJvZ3Jlc3MuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNDbGFzc2VzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS91cGRhdGUvdXBkYXRlQWN0aXZlSW5kZXguanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3VwZGF0ZS91cGRhdGVDbGlja2VkU2xpZGUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3RyYW5zbGF0ZS9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL2dldFRyYW5zbGF0ZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL3NldFRyYW5zbGF0ZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL21pblRyYW5zbGF0ZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL21heFRyYW5zbGF0ZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvdHJhbnNsYXRlL3RyYW5zbGF0ZVRvLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL3NldFRyYW5zaXRpb24uanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvblN0YXJ0LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25FbmQuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3NsaWRlL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvTG9vcC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvc2xpZGUvc2xpZGVOZXh0LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVByZXYuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlUmVzZXQuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL3NsaWRlL3NsaWRlVG9DbG9zZXN0LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9zbGlkZS9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9sb29wL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9sb29wL2xvb3BDcmVhdGUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2xvb3AvbG9vcEZpeC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvbG9vcC9sb29wRGVzdHJveS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvZ3JhYi1jdXJzb3IvaW5kZXguanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3NldEdyYWJDdXJzb3IuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2dyYWItY3Vyc29yL3Vuc2V0R3JhYkN1cnNvci5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL2luZGV4LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vYXBwZW5kU2xpZGUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9wcmVwZW5kU2xpZGUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL21hbmlwdWxhdGlvbi9hZGRTbGlkZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvbWFuaXB1bGF0aW9uL3JlbW92ZVNsaWRlLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9tYW5pcHVsYXRpb24vcmVtb3ZlQWxsU2xpZGVzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaFN0YXJ0LmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25Ub3VjaE1vdmUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vblRvdWNoRW5kLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9ldmVudHMvb25TY3JvbGwuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2V2ZW50cy9vbkNsaWNrLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9icmVha3BvaW50cy9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvc2V0QnJlYWtwb2ludC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvYnJlYWtwb2ludHMvZ2V0QnJlYWtwb2ludC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvY2xhc3Nlcy9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvY2xhc3Nlcy9hZGRDbGFzc2VzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvY29yZS9jbGFzc2VzL3JlbW92ZUNsYXNzZXMuanMiLCIuLi9zcmMvY29tcG9uZW50cy9jb3JlL2ltYWdlcy9pbmRleC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL2xvYWRJbWFnZS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvcmUvaW1hZ2VzL3ByZWxvYWRJbWFnZXMuanMiLCIuLi9zcmMvbW9kdWxlcy9yZXNpemUvcmVzaXplLmpzIiwiLi4vc3JjL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy92aXJ0dWFsL3ZpcnR1YWwuanMiLCIuLi9zcmMvY29tcG9uZW50cy9rZXlib2FyZC9rZXlib2FyZC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL21vdXNld2hlZWwvbW91c2V3aGVlbC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5qcyIsIi4uL3NyYy9jb21wb25lbnRzL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5qcyIsIi4uL3NyYy9jb21wb25lbnRzL3Njcm9sbGJhci9zY3JvbGxiYXIuanMiLCIuLi9zcmMvY29tcG9uZW50cy9wYXJhbGxheC9wYXJhbGxheC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL3pvb20vem9vbS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2xhenkvbGF6eS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xsZXIvY29udHJvbGxlci5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2ExMXkvYTExeS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2hpc3RvcnkvaGlzdG9yeS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2hhc2gtbmF2aWdhdGlvbi9oYXNoLW5hdmlnYXRpb24uanMiLCIuLi9zcmMvY29tcG9uZW50cy9hdXRvcGxheS9hdXRvcGxheS5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2VmZmVjdC1mYWRlL2VmZmVjdC1mYWRlLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvZWZmZWN0LWN1YmUvZWZmZWN0LWN1YmUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9lZmZlY3QtZmxpcC9lZmZlY3QtZmxpcC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL2VmZmVjdC1jb3ZlcmZsb3cvZWZmZWN0LWNvdmVyZmxvdy5qcyIsIi4uL3NyYy9jb21wb25lbnRzL3RodW1icy90aHVtYnMuanMiLCIuLi9zcmMvc3dpcGVyLmpzIiwianF1ZXJ5LmZhbmN5Ym94LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1Zy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1lbmQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQuanMiLCIuLi9zcmMvY29yZS91dGlscy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiLCIuLi9zcmMvY29yZS9hY3Rpb24tZGV0YWlscy5qcyIsIi4uL3NyYy9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzIiwiLi4vc3JjL2NvcmUvY29udGludW91cy10YWlsLWRldGFpbHMuanMiLCIuLi9zcmMvY29yZS9ob2xkZXIuanMiLCIuLi9zcmMvbWFza2VkL2Jhc2UuanMiLCIuLi9zcmMvbWFza2VkL2ZhY3RvcnkuanMiLCIuLi9zcmMvbWFza2VkL3BhdHRlcm4vaW5wdXQtZGVmaW5pdGlvbi5qcyIsIi4uL3NyYy9tYXNrZWQvcGF0dGVybi9maXhlZC1kZWZpbml0aW9uLmpzIiwiLi4vc3JjL21hc2tlZC9wYXR0ZXJuL2NodW5rLXRhaWwtZGV0YWlscy5qcyIsIi4uL3NyYy9tYXNrZWQvcmVnZXhwLmpzIiwiLi4vc3JjL21hc2tlZC9wYXR0ZXJuLmpzIiwiLi4vc3JjL21hc2tlZC9yYW5nZS5qcyIsIi4uL3NyYy9tYXNrZWQvZGF0ZS5qcyIsIi4uL3NyYy9jb250cm9scy9tYXNrLWVsZW1lbnQuanMiLCIuLi9zcmMvY29udHJvbHMvaHRtbC1tYXNrLWVsZW1lbnQuanMiLCIuLi9zcmMvY29udHJvbHMvaHRtbC1jb250ZW50ZWRpdGFibGUtbWFzay1lbGVtZW50LmpzIiwiLi4vc3JjL2NvbnRyb2xzL2lucHV0LmpzIiwiLi4vc3JjL21hc2tlZC9lbnVtLmpzIiwiLi4vc3JjL21hc2tlZC9udW1iZXIuanMiLCIuLi9zcmMvbWFza2VkL2Z1bmN0aW9uLmpzIiwiLi4vc3JjL21hc2tlZC9keW5hbWljLmpzIiwiLi4vc3JjL21hc2tlZC9waXBlLmpzIiwic21vb3RoLXNjcm9sbC5wb2x5ZmlsbHMubWluLmpzIl0sIm5hbWVzIjpbImdsb2JhbCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJpc1dpbmRvdyIsIm9iaiIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNhbGwiLCJjb25jYXQiLCJhcHBseSIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm5vZGVUeXBlIiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwiaSIsInZhbCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwidmVyc2lvbiIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwibmFtZSIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwidGFyZ2V0IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJ1bmRlZmluZWQiLCJleHBhbmRvIiwiTWF0aCIsInJhbmRvbSIsInJlcGxhY2UiLCJpc1JlYWR5IiwiZXJyb3IiLCJtc2ciLCJub29wIiwicHJvdG8iLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsInZhbHVlIiwiZ3VpZCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic3BsaXQiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiZnVuZXNjYXBlIiwiZXNjYXBlIiwibm9uSGV4IiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInVubG9hZEhhbmRsZXIiLCJzZXREb2N1bWVudCIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwiRGF0ZSIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwiYSIsImIiLCJwb3AiLCJwdXNoTmF0aXZlIiwibGlzdCIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJhdHRyaWJ1dGVzIiwicHNldWRvcyIsInJ3aGl0ZXNwYWNlIiwiUmVnRXhwIiwicnRyaW0iLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyZGVzY2VuZCIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0Iiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiYWRkQ29tYmluYXRvciIsImRpc2FibGVkIiwibm9kZU5hbWUiLCJkaXIiLCJuZXh0IiwiY2hpbGROb2RlcyIsImUiLCJlbHMiLCJzZWVkIiwibSIsIm5pZCIsIm1hdGNoIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0Iiwib3duZXJEb2N1bWVudCIsImV4ZWMiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxc2FFcnJvciIsInJlbW92ZUF0dHJpYnV0ZSIsImtleXMiLCJjYWNoZSIsImtleSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJub3QiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwiaGFzIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwicm9vdCIsImZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiZW5hYmxlZCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImJ1dHRvbiIsIl9tYXRjaEluZGV4ZXMiLCJsdCIsImd0IiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJzdWJtaXQiLCJyZXNldCIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsInNldE1hdGNoZXJzIiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJieUVsZW1lbnQiLCJkaXJydW5zVW5pcXVlIiwiYnlTZXQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwibiIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwid2lubm93IiwicXVhbGlmaWVyIiwic2VsZiIsInJvb3RqUXVlcnkiLCJyZWFkeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJpbmRleCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50IiwicmV2ZXJzZSIsInJub3RodG1sd2hpdGUiLCJJZGVudGl0eSIsInYiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvYmplY3QiLCJfIiwiZmxhZyIsImZpcmUiLCJsb2NrZWQiLCJvbmNlIiwiZmlyZWQiLCJmaXJpbmciLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwibWVtb3J5Iiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwibWlnaHRUaHJvdyIsInRoYXQiLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwidXBkYXRlRnVuYyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJyZW1haW5pbmciLCJtYXN0ZXIiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImNvdW50IiwiZGVmZXIiLCJwbnVtIiwic291cmNlIiwicmNzc051bSIsImNzc0V4cGFuZCIsImlzQXR0YWNoZWQiLCJjb21wb3NlZCIsImdldFJvb3ROb2RlIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwic3R5bGUiLCJkaXNwbGF5IiwiY3NzIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImJvZHkiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJlbnVtZXJhYmxlIiwib3JpZ2luYWxFdmVudCIsIndyaXRhYmxlIiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInN3YXAiLCJvbGQiLCJwaXhlbFBvc2l0aW9uVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJzY3JvbGxib3hTaXplVmFsIiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsImNvbnRhaW5lciIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjb21wdXRlU3R5bGVUZXN0cyIsImRpdlN0eWxlIiwiY3NzVGV4dCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsIndpZHRoIiwicG9zaXRpb24iLCJvZmZzZXRXaWR0aCIsIm1lYXN1cmUiLCJyb3VuZCIsInBhcnNlRmxvYXQiLCJjdXJDU1MiLCJjb21wdXRlZCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsInBhcnNlSW50IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInByZWZpeCIsInN1ZmZpeCIsImV4cGFuZCIsImV4cGFuZGVkIiwicGFydHMiLCJwcm9wSG9va3MiLCJydW4iLCJwZXJjZW50IiwiZWFzZWQiLCJkdXJhdGlvbiIsInBvcyIsInN0ZXAiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJwIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsIm9wdCIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJiaW5kIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCIqIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJlZmlsdGVyIiwic3BlZWQiLCJzcGVlZHMiLCJmYWRlVG8iLCJ0byIsImFuaW1hdGUiLCJkb0FuaW1hdGlvbiIsIm9wdGFsbCIsImZpbmlzaCIsInN0b3BRdWV1ZSIsInRpbWVycyIsImNzc0ZuIiwic2xpZGVEb3duIiwic2xpZGVVcCIsInNsaWRlVG9nZ2xlIiwiZmFkZUluIiwiZmFkZU91dCIsImZhZGVUb2dnbGUiLCJzbG93IiwiZmFzdCIsImRlbGF5IiwidGltZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJwYXJhbSIsInRyYWRpdGlvbmFsIiwidmFsdWVPckZ1bmN0aW9uIiwicyIsImVuY29kZVVSSUNvbXBvbmVudCIsImJ1aWxkUGFyYW1zIiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRleHQgc2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwiMCIsIjEyMjMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJ0cmltIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJpc09iamVjdCIsInNzckRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiaW1wb3J0Tm9kZSIsImhvc3RuYW1lIiwib3JpZ2luIiwicGF0aG5hbWUiLCJzZWFyY2giLCJnZXREb2N1bWVudCIsInNzcldpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJnbyIsImJhY2siLCJDdXN0b21FdmVudCIsIkltYWdlIiwic2NyZWVuIiwibWF0Y2hNZWRpYSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZ2V0V2luZG93IiwiX2dldFByb3RvdHlwZU9mIiwibyIsIl9zZXRQcm90b3R5cGVPZiIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJDbGFzcyIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJzaGFtIiwiUHJveHkiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiaW5zdGFuY2UiLCJGdW5jdGlvbiIsIl93cmFwTmF0aXZlU3VwZXIiLCJfY2FjaGUiLCJNYXAiLCJXcmFwcGVyIiwiRG9tNyIsIl9BcnJheSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIml0ZW1zIiwiX3RoaXMiLCJSZWZlcmVuY2VFcnJvciIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJtYWtlUmVhY3RpdmUiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHNMb29zZSIsImFycmF5RmxhdCIsInJlcyIsImFycmF5RmlsdGVyIiwidG9DcmVhdGUiLCJ0ZW1wUGFyZW50IiwidW5pcXVlQXJyYXkiLCJhcnJheVVuaXF1ZSIsImRldmljZSIsImJyb3dzZXIiLCJNZXRob2RzIiwiX2xlbiIsImMiLCJmb3JFYWNoIiwiX2VsJGNsYXNzTGlzdCIsImNsYXNzTGlzdCIsIl9sZW4yIiwiX2tleTIiLCJfZWwkY2xhc3NMaXN0MiIsIl9sZW40IiwiX2tleTQiLCJfbGVuMyIsIl9rZXkzIiwiYXR0ck5hbWUiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwiX2xlbjUiLCJfa2V5NSIsImV2ZW50VHlwZSIsInRhcmdldFNlbGVjdG9yIiwibGlzdGVuZXIiLCJjYXB0dXJlIiwiaGFuZGxlTGl2ZUV2ZW50IiwiZXZlbnREYXRhIiwiX3BhcmVudHMiLCJrIiwiaGFuZGxlRXZlbnQiLCJfZXZlbnQiLCJkb203TGl2ZUxpc3RlbmVycyIsInByb3h5TGlzdGVuZXIiLCJkb203TGlzdGVuZXJzIiwiX2xlbjYiLCJfa2V5NiIsIl9sZW45IiwiX2tleTkiLCJkYXRhSW5kZXgiLCJkb203RXZlbnREYXRhIiwidHJhbnNpdGlvbkVuZCIsImRvbSIsImZpcmVDYWxsQmFjayIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsIl9zdHlsZXMiLCJvdXRlckhlaWdodCIsIl9zdHlsZXMyIiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsIl9wcm9wIiwiY29tcGFyZVdpdGgiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsInJldHVybkluZGV4IiwibmV3Q2hpbGQiLCJ0ZW1wRGl2IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dEVscyIsIl9uZXh0IiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXZFbHMiLCJfcHJldiIsIl9wYXJlbnQiLCJmb3VuZEVsZW1lbnRzIiwiZm91bmQiLCJuZXh0VGljayIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIm00MSIsIm00MiIsImlzT2JqZWN0JDEiLCJleHRlbmQkMSIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJuZXh0S2V5IiwiZGVzYyIsImJpbmRNb2R1bGVNZXRob2RzIiwic3ViS2V5IiwiZ2V0U3VwcG9ydCIsInRvdWNoIiwiRG9jdW1lbnRUb3VjaCIsInBvaW50ZXJFdmVudHMiLCJQb2ludGVyRXZlbnQiLCJvYnNlcnZlciIsInBhc3NpdmVMaXN0ZW5lciIsInN1cHBvcnRzUGFzc2l2ZSIsImdlc3R1cmVzIiwiZ2V0RGV2aWNlIiwib3ZlcnJpZGVzIiwiX3RlbXAiLCJwbGF0Zm9ybSIsInVhIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJhbmRyb2lkIiwiaXBhZCIsImlwb2QiLCJpcGhvbmUiLCJ3aW5kb3dzIiwibWFjb3MiLCJpb3MiLCJpUGFkU2NyZWVucyIsImdldEJyb3dzZXIiLCJpc0VkZ2UiLCJpc1NhZmFyaSIsImlzV2ViVmlldyIsIm9uUmVzaXplIiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInNuYXBHcmlkIiwic3dpcGVyIiwiYnJlYWtwb2ludHMiLCJpc0VuZCIsImlzQmVnaW5uaW5nIiwiY2VudGVyZWRTbGlkZXMiLCJwYXVzZWQiLCJtZXRob2ROYW1lIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiZGVmYXVsdHMiLCJkaXJlY3Rpb24iLCJ0b3VjaEV2ZW50c1RhcmdldCIsImluaXRpYWxTbGlkZSIsImNzc01vZGUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsInByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiIsImVkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImZyZWVNb2RlIiwiZnJlZU1vZGVNb21lbnR1bSIsImZyZWVNb2RlTW9tZW50dW1SYXRpbyIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2UiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW8iLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsImZyZWVNb2RlU3RpY2t5IiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJhdXRvSGVpZ2h0Iiwic2V0V3JhcHBlclNpemUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiZWZmZWN0Iiwic3BhY2VCZXR3ZWVuIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlckNvbHVtbiIsInNsaWRlc1BlckNvbHVtbkZpbGwiLCJzbGlkZXNQZXJHcm91cCIsInNsaWRlc1Blckdyb3VwU2tpcCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwic2xpZGVzT2Zmc2V0QmVmb3JlIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwid2F0Y2hPdmVyZmxvdyIsInJvdW5kTGVuZ3RocyIsInRvdWNoUmF0aW8iLCJ0b3VjaEFuZ2xlIiwic2ltdWxhdGVUb3VjaCIsInNob3J0U3dpcGVzIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsImxvbmdTd2lwZXNNcyIsImZvbGxvd0ZpbmdlciIsImFsbG93VG91Y2hNb3ZlIiwidGhyZXNob2xkIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwidW5pcXVlTmF2RWxlbWVudHMiLCJyZXNpc3RhbmNlIiwicmVzaXN0YW5jZVJhdGlvIiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsIndhdGNoU2xpZGVzVmlzaWJpbGl0eSIsImdyYWJDdXJzb3IiLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInByZWxvYWRJbWFnZXMiLCJ1cGRhdGVPbkltYWdlc1JlYWR5IiwibG9vcCIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwibG9vcGVkU2xpZGVzIiwibG9vcEZpbGxHcm91cFdpdGhCbGFuayIsImxvb3BQcmV2ZW50c1NsaWRlIiwic3dpcGVIYW5kbGVyIiwibm9Td2lwaW5nIiwibm9Td2lwaW5nQ2xhc3MiLCJub1N3aXBpbmdTZWxlY3RvciIsInBhc3NpdmVMaXN0ZW5lcnMiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwic2xpZGVDbGFzcyIsInNsaWRlQmxhbmtDbGFzcyIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwic2xpZGVWaXNpYmxlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwic2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MiLCJ3cmFwcGVyQ2xhc3MiLCJydW5DYWxsYmFja3NPbkluaXQiLCJfZW1pdENsYXNzZXMiLCJwcm90b3R5cGVzIiwibW9kdWxhciIsInVzZVBhcmFtcyIsImluc3RhbmNlUGFyYW1zIiwibW9kdWxlcyIsIm1vZHVsZU5hbWUiLCJ1c2VNb2R1bGVzIiwibW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtcyIsIm1vZHVsZUV2ZW50TmFtZSIsImV2ZW50c0VtaXR0ZXIiLCJwcmlvcml0eSIsIm9uY2VIYW5kbGVyIiwiX19lbWl0dGVyUHJveHkiLCJvbkFueSIsIm9mZkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsImV2ZW50c0xpc3RlbmVycyIsImV2ZW50SGFuZGxlciIsImVtaXQiLCJldmVudHNBcnJheSIsInVwZGF0ZSIsInVwZGF0ZVNpemUiLCIkZWwiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwiTnVtYmVyIiwic2l6ZSIsInVwZGF0ZVNsaWRlcyIsIiR3cmFwcGVyRWwiLCJzd2lwZXJTaXplIiwicnRsIiwicnRsVHJhbnNsYXRlIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlcyIsInNsaWRlc0xlbmd0aCIsInNsaWRlc0dyaWQiLCJzbGlkZXNTaXplc0dyaWQiLCJzbGlkZXNGb3JNYXJnaW4iLCJzbGlkZUVsIiwic2xpZGVJbmRleCIsIm9mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInByZXZpb3VzU25hcEdyaWRMZW5ndGgiLCJwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgiLCJzbGlkZVBvc2l0aW9uIiwicHJldlNsaWRlU2l6ZSIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwibmV3U2xpZGVzR3JpZCIsImFsbFNsaWRlc1NpemUiLCJtYXhTbmFwIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic2xpZGVzUGVyUm93IiwibnVtRnVsbENvbHVtbnMiLCJzbGlkZVNpemUiLCJncm91cEluZGV4Iiwic2xpZGVJbmRleEluR3JvdXAiLCJjb2x1bW5zSW5Hcm91cCIsInJvdyIsImNvbHVtbiIsIm5ld1NsaWRlT3JkZXJJbmRleCIsInNsaWRlU3R5bGVzIiwiY3VycmVudFRyYW5zZm9ybSIsImN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJveFNpemluZyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwic2xpZGUiLCItd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwIiwiLW1vei1ib3gtb3JkaW5hbC1ncm91cCIsIi1tcy1mbGV4LW9yZGVyIiwiLXdlYmtpdC1vcmRlciIsIndlYmtpdFRyYW5zZm9ybSIsInNsaWRlc0dyaWRJdGVtIiwiX2kyIiwic2xpZGVTaXplVmFsdWUiLCJzbmFwIiwiX2FsbFNsaWRlc1NpemUiLCJzbmFwSW5kZXgiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0IiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJ0cmFuc2xhdGUiLCJzd2lwZXJTbGlkZU9mZnNldCIsIm9mZnNldENlbnRlciIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsInNsaWRlUHJvZ3Jlc3MiLCJ1cGRhdGVQcm9ncmVzcyIsIm11bHRpcGxpZXIiLCJ0cmFuc2xhdGVzRGlmZiIsIm1pblRyYW5zbGF0ZSIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJhY3RpdmVTbGlkZSIsImFjdGl2ZUluZGV4IiwicmVhbEluZGV4IiwibmV4dFNsaWRlIiwicHJldlNsaWRlIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwic2xpZGVGb3VuZCIsImN1cnJlbnRUcmFuc2xhdGUiLCJzZXRUcmFuc2xhdGUiLCJieUNvbnRyb2xsZXIiLCJ3cmFwcGVyRWwiLCJ4IiwieSIsIm5ld1Byb2dyZXNzIiwibWF4VHJhbnNsYXRlIiwidHJhbnNsYXRlVG8iLCJydW5DYWxsYmFja3MiLCJ0cmFuc2xhdGVCb3VuZHMiLCJpbnRlcm5hbCIsIm5ld1RyYW5zbGF0ZSIsIl93cmFwcGVyRWwkc2Nyb2xsVG8iLCJpc0giLCJhbmltYXRpbmciLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJkZXN0cm95ZWQiLCJzZXRUcmFuc2l0aW9uIiwidHJhbnNpdGlvblN0YXJ0Iiwic2xpZGVUbyIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsInNsaWRlTmV4dCIsImluY3JlbWVudCIsImxvb3BGaXgiLCJzbGlkZVByZXYiLCJub3JtYWxpemUiLCJwcmV2SW5kZXgiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJzbGlkZVJlc2V0Iiwic2xpZGVUb0Nsb3Nlc3QiLCJjdXJyZW50U25hcCIsInNsaWRlVG9JbmRleCIsImNsaWNrZWRJbmRleCIsImxvb3BDcmVhdGUiLCJibGFua1NsaWRlc051bSIsImJsYW5rTm9kZSIsInByZXBlbmRTbGlkZXMiLCJhcHBlbmRTbGlkZXMiLCJsb29wRGVzdHJveSIsInNldEdyYWJDdXJzb3IiLCJtb3ZpbmciLCJ1bnNldEdyYWJDdXJzb3IiLCJtYW5pcHVsYXRpb24iLCJhcHBlbmRTbGlkZSIsInByZXBlbmRTbGlkZSIsImFkZFNsaWRlIiwiYWN0aXZlSW5kZXhCdWZmZXIiLCJiYXNlTGVuZ3RoIiwic2xpZGVzQnVmZmVyIiwiY3VycmVudFNsaWRlIiwicmVtb3ZlU2xpZGUiLCJzbGlkZXNJbmRleGVzIiwiaW5kZXhUb1JlbW92ZSIsInJlbW92ZUFsbFNsaWRlcyIsImF0dGFjaEV2ZW50cyIsInRvdWNoRXZlbnRzIiwiJHRhcmdldEVsIiwic3RhcnRYIiwic3RhcnRZIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJ0b3VjaEV2ZW50c0RhdGEiLCJpc1RvdWNoRXZlbnQiLCJpc01vdmVkIiwiY3VycmVudFgiLCJjdXJyZW50WSIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImlzVG91Y2hlZCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwiZm9ybUVsZW1lbnRzIiwib25Ub3VjaFN0YXJ0IiwidGFyZ2V0VG91Y2giLCJwcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciIsImRpZmZYIiwiZGlmZlkiLCJwb3ciLCJuZXN0ZWQiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwic3RhcnRUcmFuc2xhdGUiLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJ0b3VjaFN0YXJ0VGltZSIsIm9uVG91Y2hNb3ZlIiwiY3VycmVudFBvcyIsImxhc3RNb3ZlRXZlbnQiLCJ2ZWxvY2l0eUV2ZW50IiwiZGlzdGFuY2UiLCJ0b3VjaEVuZFRpbWUiLCJ0aW1lRGlmZiIsImFsbG93Q2xpY2siLCJzd2lwZURpcmVjdGlvbiIsIm1vbWVudHVtRHVyYXRpb24iLCJtb21lbnR1bURpc3RhbmNlIiwibmV3UG9zaXRpb24iLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwibmVlZHNMb29wRml4IiwibW92ZURpc3RhbmNlIiwiY3VycmVudFNsaWRlU2l6ZSIsImRvQm91bmNlIiwiYm91bmNlQW1vdW50IiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsInZlbG9jaXR5Iiwic3RvcEluZGV4IiwiZ3JvdXBTaXplIiwiX2luY3JlbWVudCIsInJhdGlvIiwicHJldkVsIiwibmV4dEVsIiwib25Ub3VjaEVuZCIsIm9uU2Nyb2xsIiwib25DbGljayIsInBhc3NpdmUiLCJjYW5jZWwiLCJkZXRhY2hFdmVudHMiLCJzZXRCcmVha3BvaW50IiwiYnJlYWtwb2ludCIsImJyZWFrcG9pbnRPbmx5UGFyYW1zIiwiYnJlYWtwb2ludFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImluaXRpYWxpemVkIiwiX3N3aXBlciRsb29wZWRTbGlkZXMiLCJwYXJhbVZhbHVlIiwib3JpZ2luYWxQYXJhbXMiLCJnZXRCcmVha3BvaW50IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsIl9wb2ludHMkaSIsImlubmVyV2lkdGgiLCJjaGVja092ZXJmbG93Iiwid2FzTG9ja2VkIiwiaXNMb2NrZWQiLCJsYXN0U2xpZGVQb3NpdGlvbiIsIm5hdmlnYXRpb24iLCJhZGRDbGFzc2VzIiwic3VmZml4ZXMiLCJyZW1vdmVDbGFzc2VzIiwiaW1hZ2VzIiwibG9hZEltYWdlIiwiaW1hZ2VFbCIsInNyY3NldCIsInNpemVzIiwiY2hlY2tGb3JDb21wbGV0ZSIsIm9uUmVhZHkiLCJleHRlbmRlZERlZmF1bHRzIiwiU3dpcGVyIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIm1vZHVsZVBhcmFtTmFtZSIsInN3aXBlclBhcmFtcyIsImV2ZW50TmFtZSIsImRlc2t0b3AiLCJzd2lwZXJzIiwiY29udGFpbmVyRWwiLCJuZXdQYXJhbXMiLCJwcmV2aW91c1RyYW5zbGF0ZSIsIm1vdmUiLCJ0b3VjaEV2ZW50c0Rlc2t0b3AiLCJsYXN0Q2xpY2tUaW1lIiwiY2xpY2tUaW1lb3V0IiwidmVsb2NpdGllcyIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsImVtaXRDb250YWluZXJDbGFzc2VzIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsInNwdiIsImJyZWFrTG9vcCIsInN3aXBlclNsaWRlU2l6ZSIsInRyYW5zbGF0ZVZhbHVlIiwidHJhbnNsYXRlZCIsImNoYW5nZURpcmVjdGlvbiIsIm5lZWRVcGRhdGUiLCJjdXJyZW50RGlyZWN0aW9uIiwibmV3RGlyZWN0aW9uIiwiZGVzdHJveSIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJkZWxldGVQcm9wcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJpbnN0YWxsTW9kdWxlIiwidXNlIiwiUmVzaXplIiwicmVzaXplIiwicmVzaXplSGFuZGxlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIk9ic2VydmVyIiwiYXR0YWNoIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmVyVXBkYXRlIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsIm9ic2VydmVQYXJlbnRzIiwiY29udGFpbmVyUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiT2JzZXJ2ZXIkMSIsIl9leHRlbmRzIiwib2JzZXJ2ZXJzIiwiVmlydHVhbCIsImZvcmNlIiwiX3N3aXBlciRwYXJhbXMiLCJfc3dpcGVyJHBhcmFtcyR2aXJ0dWEiLCJ2aXJ0dWFsIiwiYWRkU2xpZGVzQmVmb3JlIiwiYWRkU2xpZGVzQWZ0ZXIiLCJfc3dpcGVyJHZpcnR1YWwiLCJwcmV2aW91c0Zyb20iLCJmcm9tIiwicHJldmlvdXNUbyIsInByZXZpb3VzU2xpZGVzR3JpZCIsInJlbmRlclNsaWRlIiwicHJldmlvdXNPZmZzZXQiLCJzbGlkZXNBZnRlciIsInNsaWRlc0JlZm9yZSIsIm9uUmVuZGVyZWQiLCJyZW5kZXJFeHRlcm5hbCIsInNsaWRlc1RvUmVuZGVyIiwicmVuZGVyRXh0ZXJuYWxVcGRhdGUiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCIkc2xpZGVFbCIsIm51bWJlck9mTmV3U2xpZGVzIiwiY2FjaGVkSW5kZXgiLCIkY2FjaGVkRWwiLCJjYWNoZWRFbEluZGV4IiwiVmlydHVhbCQxIiwiYmVmb3JlSW5pdCIsIm92ZXJ3cml0ZVBhcmFtcyIsIktleWJvYXJkIiwia2MiLCJwYWdlVXBEb3duIiwiaXNQYWdlVXAiLCJpc1BhZ2VEb3duIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93VXAiLCJpc0Fycm93RG93biIsImluVmlldyIsIndpbmRvd1dpZHRoIiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJzd2lwZXJPZmZzZXQiLCJzd2lwZXJDb29yZCIsImVuYWJsZSIsIktleWJvYXJkJDEiLCJrZXlib2FyZCIsIm9ubHlJblZpZXdwb3J0IiwiTW91c2V3aGVlbCIsImxhc3RTY3JvbGxUaW1lIiwibGFzdEV2ZW50QmVmb3JlU25hcCIsInJlY2VudFdoZWVsRXZlbnRzIiwiZWxlbWVudCIsImlzU3VwcG9ydGVkIiwiaGFzRmVhdHVyZSIsInNYIiwic1kiLCJwWCIsInBZIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwiaGFuZGxlTW91c2VFbnRlciIsImhhbmRsZU1vdXNlTGVhdmUiLCJtb3VzZXdoZWVsIiwibW91c2VFbnRlcmVkIiwicmVsZWFzZU9uRWRnZXMiLCJydGxGYWN0b3IiLCJmb3JjZVRvQXhpcyIsIm5ld0V2ZW50IiwiaWdub3JlV2hlZWxFdmVudHMiLCJwcmV2RXZlbnQiLCJmaXJzdEV2ZW50Iiwic25hcFRvVGhyZXNob2xkIiwic2Vuc2l0aXZpdHkiLCJhdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uIiwiYW5pbWF0ZVNsaWRlciIsImdldFRpbWUiLCJyZWxlYXNlU2Nyb2xsIiwiTmF2aWdhdGlvbiIsIl9zd2lwZXIkbmF2aWdhdGlvbiIsIiRuZXh0RWwiLCIkcHJldkVsIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIl9zd2lwZXIkbmF2aWdhdGlvbjIiLCJQYWdpbmF0aW9uIiwicGFnaW5hdGlvbiIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwic2NhbGVYIiwic2NhbGVZIiwidG90YWwiLCJmaXJzdEluZGV4IiwibGFzdEluZGV4IiwibWlkSW5kZXgiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJidWxsZXRzIiwiZHluYW1pY0J1bGxldHMiLCJidWxsZXQiLCIkYnVsbGV0IiwiYnVsbGV0SW5kZXgiLCIkZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCIkbGFzdERpc3BsYXllZEJ1bGxldCIsImR5bmFtaWNNYWluQnVsbGV0cyIsImJ1bGxldFNpemUiLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwicmVuZGVyQ3VzdG9tIiwicmVuZGVyIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRFbGVtZW50IiwiYnVsbGV0Q2xhc3MiLCJyZW5kZXJGcmFjdGlvbiIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJyZW5kZXJQcm9ncmVzc2JhciIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwiY2xpY2thYmxlIiwiU2Nyb2xsYmFyIiwic2Nyb2xsYmFyIiwiZHJhZ1NpemUiLCJ0cmFja1NpemUiLCIkZHJhZ0VsIiwibmV3U2l6ZSIsIm5ld1BvcyIsImRpdmlkZXIiLCJtb3ZlRGl2aWRlciIsInZpcnR1YWxTaXplIiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwic2V0RHJhZ1Bvc2l0aW9uIiwiZHJhZ1N0YXJ0UG9zIiwicG9zaXRpb25SYXRpbyIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnTW92ZSIsIm9uRHJhZ0VuZCIsInNuYXBPblJlbGVhc2UiLCJlbmFibGVEcmFnZ2FibGUiLCJ0b3VjaEV2ZW50c1RvdWNoIiwiYWN0aXZlTGlzdGVuZXIiLCJkaXNhYmxlRHJhZ2dhYmxlIiwiJHN3aXBlckVsIiwiZHJhZ0NsYXNzIiwiZHJhZ0VsIiwiZHJhZ2dhYmxlIiwiUGFyYWxsYXgiLCJzZXRUcmFuc2Zvcm0iLCJjdXJyZW50T3BhY2l0eSIsImN1cnJlbnRTY2FsZSIsInBhcmFsbGF4RWwiLCIkcGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCJab29tIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyIsIngxIiwieTEiLCJ4MiIsInkyIiwib25HZXN0dXJlU3RhcnQiLCJnZXN0dXJlIiwiJGltYWdlRWwiLCJvbkdlc3R1cmVDaGFuZ2UiLCJzY2FsZVN0YXJ0IiwibWF4UmF0aW8iLCJvbkdlc3R1cmVFbmQiLCJmYWtlR2VzdHVyZVRvdWNoZWQiLCJmYWtlR2VzdHVyZU1vdmVkIiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJzbGlkZUhlaWdodCIsImlzU2NhbGluZyIsIm1pblgiLCJtYXhYIiwibWluWSIsIm1heFkiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJvblRyYW5zaXRpb25FbmQiLCIkaW1hZ2VXcmFwRWwiLCJpbiIsInRvdWNoWCIsInRvdWNoWSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiaW1hZ2VXaWR0aCIsImltYWdlSGVpZ2h0IiwidHJhbnNsYXRlTWluWCIsInRyYW5zbGF0ZU1pblkiLCJ0cmFuc2xhdGVNYXhYIiwidHJhbnNsYXRlTWF4WSIsInNsaWRlV2lkdGgiLCJvdXQiLCJ0b2dnbGVHZXN0dXJlcyIsInNsaWRlU2VsZWN0b3IiLCJlbmFibGVHZXN0dXJlcyIsImdlc3R1cmVzRW5hYmxlZCIsImRpc2FibGVHZXN0dXJlcyIsImFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUiLCJMYXp5IiwibG9hZEluU2xpZGUiLCJsb2FkSW5EdXBsaWNhdGUiLCIkaW1hZ2VzIiwibGF6eSIsImxvYWRpbmdDbGFzcyIsImJhY2tncm91bmQiLCIkcGljdHVyZUVsIiwic2xpZGVPcmlnaW5hbEluZGV4Iiwib3JpZ2luYWxTbGlkZSIsImR1cGxpY2F0ZWRTbGlkZSIsInNvdXJjZUVsIiwiJHNvdXJjZSIsInNsaWRlRXhpc3QiLCJpbml0aWFsSW1hZ2VMb2FkZWQiLCJsb2FkUHJldk5leHQiLCJhbW91bnQiLCJsb2FkUHJldk5leHRBbW91bnQiLCJtYXhJbmRleCIsIm1pbkluZGV4IiwiQ29udHJvbGxlciIsIkxpbmVhclNwbGluZSIsImd1ZXNzIiwiaTEiLCJpMyIsImJpbmFyeVNlYXJjaCIsImludGVycG9sYXRlIiwiZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbiIsInNwbGluZSIsIl9zZXRUcmFuc2xhdGUiLCJjb250cm9sbGVkVHJhbnNsYXRlIiwiY29udHJvbGxlZCIsImNvbnRyb2wiLCJzZXRDb250cm9sbGVkVHJhbnNsYXRlIiwiaW52ZXJzZSIsInNldENvbnRyb2xsZWRUcmFuc2l0aW9uIiwiQTExeSIsIm1ha2VFbEZvY3VzYWJsZSIsIm1ha2VFbE5vdEZvY3VzYWJsZSIsImFkZEVsUm9sZSIsInJvbGUiLCJhZGRFbExhYmVsIiwibGFiZWwiLCJkaXNhYmxlRWwiLCJlbmFibGVFbCIsIm9uRW50ZXJLZXkiLCJhMTF5Iiwibm90aWZpY2F0aW9uIiwibGl2ZVJlZ2lvbiIsInVwZGF0ZU5hdmlnYXRpb24iLCJ1cGRhdGVQYWdpbmF0aW9uIiwiYnVsbGV0RWwiLCIkYnVsbGV0RWwiLCJIaXN0b3J5Iiwic2V0SGlzdG9yeVBvcFN0YXRlIiwiZ2V0UGF0aFZhbHVlcyIsInVybE92ZXJyaWRlIiwiVVJMIiwicGF0aEFycmF5IiwicGFydCIsInNldEhpc3RvcnkiLCJjdXJyZW50U3RhdGUiLCJzbHVnaWZ5Iiwic2Nyb2xsVG9TbGlkZSIsInNsaWRlSGlzdG9yeSIsIkhhc2hOYXZpZ2F0aW9uIiwib25IYXNoQ2FuZ2UiLCJuZXdIYXNoIiwic2V0SGFzaCIsInNsaWRlSGFzaCIsIndhdGNoU3RhdGUiLCJBdXRvcGxheSIsIiRhY3RpdmVTbGlkZUVsIiwicmV2ZXJzZURpcmVjdGlvbiIsInN0b3BPbkxhc3RTbGlkZSIsInJ1bm5pbmciLCJwYXVzZSIsIndhaXRGb3JUcmFuc2l0aW9uIiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiRmFkZSIsInR4IiwidHkiLCJzbGlkZU9wYWNpdHkiLCJldmVudFRyaWdnZXJlZCIsInRyaWdnZXJFdmVudHMiLCJDdWJlIiwiJGN1YmVTaGFkb3dFbCIsInN3aXBlcldpZHRoIiwic3dpcGVySGVpZ2h0IiwiY3ViZUVmZmVjdCIsIndyYXBwZXJSb3RhdGUiLCJzaGFkb3ciLCJzaGFkb3dBbmdsZSIsInNjYWxlMSIsInNjYWxlMiIsInNsaWRlQW5nbGUiLCJ0eiIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwic2xpZGVTaGFkb3dzIiwiLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luIiwiLW1vei10cmFuc2Zvcm0tb3JpZ2luIiwiLW1zLXRyYW5zZm9ybS1vcmlnaW4iLCJ0cmFuc2Zvcm0tb3JpZ2luIiwic2hhZG93U2NhbGUiLCJzaGFkb3dPZmZzZXQiLCJ6RmFjdG9yIiwiRmxpcCIsImxpbWl0Um90YXRpb24iLCJyb3RhdGVZIiwicm90YXRlWCIsIkNvdmVyZmxvdyIsImNvdmVyZmxvd0VmZmVjdCIsImNlbnRlciIsInJvdGF0ZSIsIm9mZnNldE11bHRpcGxpZXIiLCJtb2RpZmllciIsInRyYW5zbGF0ZVoiLCJzdHJldGNoIiwiJHNoYWRvd0JlZm9yZUVsIiwiJHNoYWRvd0FmdGVyRWwiLCJzbGlkZVRyYW5zZm9ybSIsIlRodW1icyIsInRodW1ic1BhcmFtcyIsInRodW1icyIsIlN3aXBlckNsYXNzIiwib25UaHVtYkNsaWNrIiwiY2xpY2tlZFNsaWRlIiwiY3VycmVudEluZGV4IiwidGh1bWJzU3dpcGVyIiwic2xpZGVUaHVtYkFjdGl2ZUNsYXNzIiwiY3VycmVudFRodW1ic0luZGV4IiwicHJldlRodW1ic0luZGV4IiwibmV4dFRodW1ic0luZGV4IiwibmV3VGh1bWJzSW5kZXgiLCJhdXRvU2Nyb2xsT2Zmc2V0IiwidXNlT2Zmc2V0IiwidGh1bWJzVG9BY3RpdmF0ZSIsInRodW1iQWN0aXZlQ2xhc3MiLCJtdWx0aXBsZUFjdGl2ZVRodW1icyIsImNvbXBvbmVudHMiLCJldmVudHNUYXJnZXQiLCJoaWRlT25DbGljayIsImRpc2FibGVkQ2xhc3MiLCJoaWRkZW5DbGFzcyIsImxvY2tDbGFzcyIsInRvRWRnZSIsImZyb21FZGdlIiwiaXNIaWRkZW4iLCJfc3dpcGVyJG5hdmlnYXRpb24zIiwiZm9ybWF0RnJhY3Rpb25DdXJyZW50IiwibnVtYmVyIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsImJ1bGxldEFjdGl2ZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImNsaWNrYWJsZUNsYXNzIiwiZHluYW1pY0J1bGxldEluZGV4IiwiYWN0aXZlSW5kZXhDaGFuZ2UiLCJzbmFwSW5kZXhDaGFuZ2UiLCJzbGlkZXNMZW5ndGhDaGFuZ2UiLCJzbmFwR3JpZExlbmd0aENoYW5nZSIsImRyYWdUaW1lb3V0IiwicGFyYWxsYXgiLCJjb250YWluZXJDbGFzcyIsInpvb21lZFNsaWRlQ2xhc3MiLCJ0b3VjaGVzU3RhcnQiLCJ0b3VjaGVzQ3VycmVudCIsInRvdWNoU3RhcnQiLCJ0b3VjaEVuZCIsImRvdWJsZVRhcCIsInNsaWRlQ2hhbmdlIiwibG9hZE9uVHJhbnNpdGlvblN0YXJ0IiwiZWxlbWVudENsYXNzIiwibG9hZGVkQ2xhc3MiLCJwcmVsb2FkZXJDbGFzcyIsInNjcm9sbCIsInNjcm9sbGJhckRyYWdNb3ZlIiwiY29udHJvbGxlciIsImJ5Iiwibm90aWZpY2F0aW9uQ2xhc3MiLCJwcmV2U2xpZGVNZXNzYWdlIiwibmV4dFNsaWRlTWVzc2FnZSIsImZpcnN0U2xpZGVNZXNzYWdlIiwibGFzdFNsaWRlTWVzc2FnZSIsInBhZ2luYXRpb25CdWxsZXRNZXNzYWdlIiwicGFnaW5hdGlvblVwZGF0ZSIsImhhc2hOYXZpZ2F0aW9uIiwiYXV0b3BsYXkiLCJkaXNhYmxlT25JbnRlcmFjdGlvbiIsImJlZm9yZVRyYW5zaXRpb25TdGFydCIsInNsaWRlckZpcnN0TW92ZSIsImZhZGVFZmZlY3QiLCJjcm9zc0ZhZGUiLCJmbGlwRWZmZWN0IiwidGh1bWJzQ29udGFpbmVyQ2xhc3MiLCJiZWZvcmVEZXN0cm95IiwiJFciLCIkRCIsImNhbGxlZCIsInJlcXVlc3RBRnJhbWUiLCJjYW5jZWxBRnJhbWUiLCJmb3JjZVJlZHJhdyIsIm1lcmdlT3B0cyIsIkZhbmN5Qm94IiwiYnV0dG9uU3RyIiwiZm9jdXNTdHIiLCIkcHJlc3NlZCIsIl9ydW4iLCIkdGFyZ2V0IiwiZmFuY3lib3giLCJnZXRJbnN0YW5jZSIsIiR0cmlnZ2VyIiwiaW5mbyIsInN0dWZmIiwiY2xvc2VFeGlzdGluZyIsImd1dHRlciIsInByZXZlbnRDYXB0aW9uT3ZlcmxhcCIsImFycm93cyIsImluZm9iYXIiLCJzbWFsbEJ0biIsInRvb2xiYXIiLCJpZGxlVGltZSIsInByb3RlY3QiLCJtb2RhbCIsInByZWxvYWQiLCJpZnJhbWUiLCJ0cGwiLCJzY3JvbGxpbmciLCJ2aWRlbyIsImZvcm1hdCIsImF1dG9TdGFydCIsImRlZmF1bHRUeXBlIiwiYW5pbWF0aW9uRWZmZWN0IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ6b29tT3BhY2l0eSIsInRyYW5zaXRpb25FZmZlY3QiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJiYXNlQ2xhc3MiLCJiYXNlVHBsIiwic3Bpbm5lclRwbCIsImVycm9yVHBsIiwiYnRuVHBsIiwiZG93bmxvYWQiLCJjbG9zZSIsImFycm93TGVmdCIsImFycm93UmlnaHQiLCJwYXJlbnRFbCIsImhpZGVTY3JvbGxiYXIiLCJhdXRvRm9jdXMiLCJiYWNrRm9jdXMiLCJ0cmFwRm9jdXMiLCJmdWxsU2NyZWVuIiwidmVydGljYWwiLCJtb21lbnR1bSIsIm1lZGlhIiwic2xpZGVTaG93IiwiaGlkZU9uQ2xvc2UiLCJ3aGVlbCIsIm9uSW5pdCIsImJlZm9yZUxvYWQiLCJhZnRlckxvYWQiLCJiZWZvcmVTaG93IiwiYWZ0ZXJTaG93IiwiYmVmb3JlQ2xvc2UiLCJhZnRlckNsb3NlIiwib25BY3RpdmF0ZSIsIm9uRGVhY3RpdmF0ZSIsImNsaWNrQ29udGVudCIsImNsaWNrU2xpZGUiLCJjbGlja091dHNpZGUiLCJkYmxjbGlja0NvbnRlbnQiLCJkYmxjbGlja1NsaWRlIiwiZGJsY2xpY2tPdXRzaWRlIiwibW9iaWxlIiwiaTE4biIsImVuIiwiQ0xPU0UiLCJORVhUIiwiUFJFViIsIkVSUk9SIiwiUExBWV9TVEFSVCIsIlBMQVlfU1RPUCIsIkZVTExfU0NSRUVOIiwiVEhVTUJTIiwiRE9XTkxPQUQiLCJTSEFSRSIsIlpPT00iLCJkZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIiwib0NhbmNlbEFuaW1hdGlvbkZyYW1lIiwidHJhbnNpdGlvbnMiLCJPVHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uIiwib3B0czEiLCJvcHRzMiIsInJleiIsImlzTW9iaWxlIiwiY3VyckluZGV4IiwicHJldlBvcyIsImN1cnJQb3MiLCJmaXJzdFJ1biIsImdyb3VwIiwiYWRkQ29udGVudCIsIiRjb250YWluZXIiLCJmaXJzdEl0ZW1PcHRzIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50V2lkdGgiLCIkcmVmcyIsIml0ZW0iLCJhY3RpdmF0ZSIsImp1bXBUbyIsInN0ciIsIiRpdGVtIiwic3JjUGFydHMiLCIkb3JpZyIsImNoYXJBdCIsIiR0aHVtYiIsInRodW1iIiwidXBkYXRlQ29udHJvbHMiLCJpc0FjdGl2ZSIsImFkZEV2ZW50cyIsInJlbW92ZUV2ZW50cyIsInByZXZpb3VzIiwiaXNTY2FsZWREb3duIiwicmVxdWVzdElkIiwic3RhZ2UiLCJrZXljb2RlIiwiaWRsZVNlY29uZHNDb3VudGVyIiwiaXNJZGxlIiwic2hvd0NvbnRyb2xzIiwiaWRsZUludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJpc0RyYWdnaW5nIiwiaGlkZUNvbnRyb2xzIiwiY2xlYXJJbnRlcnZhbCIsInNsaWRlUG9zIiwic3RhZ2VQb3MiLCJncm91cExlbiIsImlzQ2xvc2luZyIsImlzQW5pbWF0aW5nIiwiY3JlYXRlU2xpZGUiLCJmb3JjZWREdXJhdGlvbiIsIiRzbGlkZSIsImxvYWRTbGlkZSIsImlzQ29tcGxldGUiLCJsZWZ0UG9zIiwiaXNMb2FkZWQiLCJyZXZlYWxDb250ZW50IiwidXBkYXRlU2xpZGUiLCJzY2FsZVRvQWN0dWFsIiwiaW1nUG9zIiwicG9zWCIsInBvc1kiLCIkY29udGVudCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwibmV3SW1nV2lkdGgiLCJuZXdJbWdIZWlnaHQiLCJoYXNFcnJvciIsInVwZGF0ZUN1cnNvciIsIlNsaWRlU2hvdyIsInNjYWxlVG9GaXQiLCJnZXRGaXRQb3MiLCJtYXhIZWlnaHQiLCJhc3BlY3RSYXRpbyIsIm1pbiIsImZsb29yIiwiYWRqdXN0Q2FwdGlvbiIsImFkanVzdExheW91dCIsImNsaWVudEhlaWdodCIsImNlbnRlclNsaWRlIiwiYWJzIiwibmV4dFdpZHRoIiwibmV4dEhlaWdodCIsImNhblBhbiIsImlzWm9vbWFibGUiLCJHdWVzdHVyZXMiLCJmaXRQb3MiLCJhamF4TG9hZCIsImlzTG9hZGluZyIsInNldEltYWdlIiwic2V0SWZyYW1lIiwic2V0Q29udGVudCIsInZpZGVvRm9ybWF0Iiwic2V0RXJyb3IiLCJzaG93TG9hZGluZyIsInRleHRTdGF0dXMiLCJnaG9zdCIsIiRpbWciLCIkaW1hZ2UiLCJjaGVja1NyY3NldCIsIiRnaG9zdCIsInNldEJpZ0ltYWdlIiwicHhSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJzdWJzdHJpbmciLCJwb3N0Zml4IiwiaW1nIiwicmVzb2x2ZUltYWdlU2xpZGVTaXplIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImhpZGVMb2FkaW5nIiwiaW1nV2lkdGgiLCJpbWdIZWlnaHQiLCIkaWZyYW1lIiwiJGJvZHkiLCJmcmFtZVdpZHRoIiwiZnJhbWVIZWlnaHQiLCJpZ25vcmUiLCJtYXgtd2lkdGgiLCJpc1JldmVhbGVkIiwiJHBsYWNlaG9sZGVyIiwiJHNtYWxsQnRuIiwiJHNwaW5uZXIiLCIkY2xvbmUiLCJwcmV2ZW50T3ZlcmxhcCIsIiRjYXB0aW9uIiwiY2FwdGlvbkgiLCJpbmxpbmVQYWRkaW5nIiwiYWN0dWFsUGFkZGluZyIsImRpc2FibGVMYXlvdXRGaXgiLCJlZmZlY3RDbGFzc05hbWUiLCJnZXRUaHVtYlBvcyIsInRodW1iUG9zIiwiYnR3IiwiYnJ3IiwiYmJ3IiwiYmx3IiwiZWxlbUNlbnRlciIsImVsZW1lbnRGcm9tUG9pbnQiLCJEb2N1bWVudCIsImV4aXRGdWxsc2NyZWVuIiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJmb2N1c2FibGVJdGVtcyIsImZvY3VzZWRJdGVtSW5kZXgiLCJmb2N1c2FibGVTdHIiLCJpc1Zpc2libGUiLCJkIiwiY2xlYW5VcCIsImRvbVJlY3QiLCIkZm9jdXMiLCJzY3JvbGxYIiwic2Nyb2xsWSIsImhhc0hpZGRlbkNvbnRyb2xzIiwiYW5kQ2FwdGlvbiIsInRvZ2dsZUNvbnRyb2xzIiwiY29tbWFuZCIsImFsbCIsInVzZTNkIiwiZG9jdW1lbnRNb2RlIiwibGVhdmVBbmltYXRpb25OYW1lIiwicHJvcGVydHlOYW1lIiwiY2FsbENhbGxiYWNrIiwieW91dHViZSIsImF1dG9oaWRlIiwiZnMiLCJyZWwiLCJoZCIsIndtb2RlIiwiZW5hYmxlanNhcGkiLCJodG1sNSIsInBhcmFtUGxhY2UiLCJ2aW1lbyIsInNob3dfdGl0bGUiLCJzaG93X2J5bGluZSIsInNob3dfcG9ydHJhaXQiLCJmdWxsc2NyZWVuIiwiaW5zdGFncmFtIiwiZ21hcF9wbGFjZSIsImdtYXBfc2VhcmNoIiwidXJsUGFyYW1zIiwicGFyYW1PYmoiLCJwcm92aWRlciIsInByb3ZpZGVyTmFtZSIsInByb3ZpZGVyT3B0cyIsImRlY29kZVVSSUNvbXBvbmVudCIsInAxIiwib3JpZ1NyYyIsImNvbnRlbnRTb3VyY2UiLCJWaWRlb0FQSUxvYWRlciIsImxvYWRpbmciLCJsb2FkZWQiLCJ2ZW5kb3IiLCJvbllvdVR1YmVJZnJhbWVBUElSZWFkeSIsIllUIiwiUGxheWVyIiwib25TdGF0ZUNoYW5nZSIsIlZpbWVvIiwiYWZ0ZXJTaG93LmZiIiwiZ2V0UG9pbnRlclhZIiwicG9pbnQyIiwicG9pbnQxIiwic3FydCIsImlzQ2xpY2thYmxlIiwib25jbGljayIsImF0dHMiLCJzdWJzdHIiLCJpc1Njcm9sbGFibGUiLCJob3Jpem9udGFsIiwic2Nyb2xsV2lkdGgiLCIkYmciLCJiZyIsIiRzdGFnZSIsInRhcHBlZCIsIm9udG91Y2hzdGFydCIsImlzVG91Y2hEZXZpY2UiLCJyZWFsUG9pbnRzIiwic3RhcnRQb2ludHMiLCJzdGFydEV2ZW50IiwiY2FuVGFwIiwiaXNQYW5uaW5nIiwiaXNTd2lwaW5nIiwiaXNab29taW5nIiwiZGlzdGFuY2VYIiwiZGlzdGFuY2VZIiwiY29udGVudExhc3RQb3MiLCJjb250ZW50U3RhcnRQb3MiLCJzbGlkZXJTdGFydFBvcyIsIm9uc2Nyb2xsIiwiY2VudGVyUG9pbnRTdGFydFgiLCJjZW50ZXJQb2ludFN0YXJ0WSIsInBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WCIsInBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WSIsInN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycyIsIm9udG91Y2htb3ZlIiwibmV3UG9pbnRzIiwib25Td2lwZSIsIm9uUGFuIiwib25ab29tIiwib250b3VjaGVuZCIsImFuZ2xlIiwic3dpcGluZyIsInNsaWRlckxhc3RQb3MiLCJhdGFuMiIsInRyYW5zaXRpb24tZHVyYXRpb24iLCJsaW1pdE1vdmVtZW50IiwiY3VycmVudE9mZnNldFgiLCJjdXJyZW50T2Zmc2V0WSIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRIZWlnaHQiLCJuZXdPZmZzZXRYIiwibmV3T2Zmc2V0WSIsIm1pblRyYW5zbGF0ZVgiLCJtaW5UcmFuc2xhdGVZIiwibWF4VHJhbnNsYXRlWCIsIm1heFRyYW5zbGF0ZVkiLCJsaW1pdFBvc2l0aW9uIiwibmV3V2lkdGgiLCJwaW5jaFJhdGlvIiwidHJhbnNsYXRlRnJvbVpvb21pbmdYIiwidHJhbnNsYXRlRnJvbVpvb21pbmdZIiwiY2VudGVyUG9pbnRFbmRYIiwiY2VudGVyUG9pbnRFbmRZIiwidHJhbnNsYXRlRnJvbVRyYW5zbGF0aW5nWCIsInBhbm5pbmciLCJ6b29taW5nIiwiZW5kUG9pbnRzIiwiZE1zIiwib25UYXAiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJlbmRQYW5uaW5nIiwiZW5kWm9vbWluZyIsImVuZFN3aXBpbmciLCJjYW5BZHZhbmNlIiwiYWN0aW9uIiwidGFwWCIsInRhcFkiLCJ3aGVyZSIsIiRidXR0b24iLCIkcHJvZ3Jlc3MiLCJpbm5lciIsImNsZWFyIiwib25Jbml0LmZiIiwiYmVmb3JlU2hvdy5mYiIsImFmdGVyS2V5ZG93bi5mYiIsImtleXByZXNzIiwiYmVmb3JlQ2xvc2UuZmIgb25EZWFjdGl2YXRlLmZiIiwiRnVsbFNjcmVlbiIsImZuTWFwIiwicmVxdWVzdCIsInJlcXVlc3RGdWxsc2NyZWVuIiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJleGl0IiwiaXNGdWxsc2NyZWVuIiwiQm9vbGVhbiIsImZ1bGxzY3JlZW5FbGVtZW50IiwiZnVsbHNjcmVlbkVuYWJsZWQiLCJmdWxsc2NyZWVuY2hhbmdlIiwiYmVmb3JlQ2xvc2UuZmIiLCJDTEFTU19BQ1RJVkUiLCJGYW5jeVRodW1icyIsIiRncmlkIiwiJGxpc3QiLCJzaGFyZSIsImN1cnJlbnRIYXNoIiwiZW50aXR5TWFwIiwiJiIsIjwiLCJcIiIsIiciLCIvIiwiYCIsIj0iLCJzaGFyZUluc3RhbmNlIiwic2hhcmVDdXJyZW50IiwicGFyc2VVcmwiLCJnYWxsZXJ5IiwidHJpZ2dlckZyb21VcmwiLCJnZXRHYWxsZXJ5SUQiLCJvcmlnSGFzaCIsImhhc2hUaW1lciIsInRpdGxlIiwiaGFzQ3JlYXRlZEhpc3RvcnkiLCJmYiIsImN1cnJUaW1lIiwiZGVsdGFZIiwiZGVsdGFYIiwiaXQiLCJiaXRtYXAiLCJJbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsIlBSRUZFUlJFRF9TVFJJTkciLCJ2YWx1ZU9mIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZ2xvYmFsXzEiLCJnbG9iYWxUaGlzIiwiY29tbW9uanNHbG9iYWwiLCJmYWlscyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJWIiwiZGVzY3JpcHRvciIsImNsYXNzb2YiLCJFWElTVFMiLCJkZXNjcmlwdG9ycyIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkRFU0NSSVBUT1JTIiwiTyIsIlAiLCJ0b0luZGV4ZWRPYmplY3QiLCJ0b1ByaW1pdGl2ZSIsImllOERvbURlZmluZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJBdHRyaWJ1dGVzIiwiYW5PYmplY3QiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsIlNIQVJFRCIsInNldEdsb2JhbCIsImZ1bmN0aW9uVG9TdHJpbmciLCJzdG9yZSIsImluc3BlY3RTb3VyY2UiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJTVEFURSIsIldlYWtNYXAiLCJtb2RlIiwiY29weXJpZ2h0Iiwic2hhcmVkIiwibmF0aXZlV2Vha01hcCIsIldlYWtNYXAkMSIsIm1ldGFkYXRhIiwiaGlkZGVuS2V5cyIsIm9iamVjdEhhcyIsImFGdW5jdGlvbiIsInZhcmlhYmxlIiwicGF0aCIsInRvSW50ZWdlciIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJpbnRlZ2VyIiwidG9MZW5ndGgiLCJuYW1lcyIsImlzRm9yY2VkIiwiZmVhdHVyZSIsImRldGVjdGlvbiIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJmb3JjZWQiLCJvd25LZXlzIiwiZiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJyZWRlZmluZSIsImhhcyQxIiwiZW5mb3JjZSIsImdldHRlckZvciIsIlRZUEUiLCJnZXRJbnRlcm5hbFN0YXRlIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJ1bnNhZmUiLCJpbmNsdWRlcyIsImVudW1CdWdLZXlzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiaGlkZGVuS2V5cyQxIiwiZ2V0QnVpbHRJbiIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJyZXBsYWNlbWVudCIsIk5BVElWRSIsIlBPTFlGSUxMIiwicmVxdWlyZSIsIm5hdGl2ZUFzc2lnbiIsImFzc2lnbiIsIkEiLCJCIiwic3ltYm9sIiwiYWxwaGFiZXQiLCJjaHIiLCJvYmplY3RLZXlzIiwiVCIsImFyZ3VtZW50c0xlbmd0aCIsIlMiLCJJU19FTkQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJyZXBlYXQiLCJJbmZpbml0eSIsIlJhbmdlRXJyb3IiLCIkcGFkRW5kIiwiV0VCS0lUX0JVRyIsInBhZEVuZCIsIiRwYWRTdGFydCIsImlzU3RyaW5nIiwicGFkU3RhcnQiLCJESVJFQ1RJT04iLCJlc2NhcGVSZWdFeHAiLCJBY3Rpb25EZXRhaWxzIiwiY3Vyc29yUG9zIiwib2xkVmFsdWUiLCJvbGRTZWxlY3Rpb24iLCJfY2xhc3NDYWxsQ2hlY2siLCJzdGFydENoYW5nZVBvcyIsImluc2VydGVkQ291bnQiLCJyZW1vdmVkQ291bnQiLCJDaGFuZ2VEZXRhaWxzIiwiZGV0YWlscyIsImluc2VydGVkIiwicmF3SW5zZXJ0ZWQiLCJ0YWlsU2hpZnQiLCJDb250aW51b3VzVGFpbERldGFpbHMiLCJ0YWlsIiwibWFza2VkIiwiYWdncmVnYXRlIiwiX2FwcGVuZFBsYWNlaG9sZGVyIiwic2hpZnRDaGFyIiwiSU1hc2siLCJJbnB1dE1hc2siLCJNYXNrZWQiLCJfdmFsdWUiLCJfdXBkYXRlIiwiREVGQVVMVFMiLCJpc0luaXRpYWxpemVkIiwid2l0aFZhbHVlUmVmcmVzaCIsImRvQ29tbWl0IiwiZnJvbVBvcyIsInRvUG9zIiwiZXh0cmFjdElucHV0IiwiZmxhZ3MiLCJkb1ByZXBhcmUiLCJjb25zaXN0ZW50VGFpbCIsImJlZm9yZVRhaWxTdGF0ZSIsInRhaWxEZXRhaWxzIiwiYXBwZW5kZWQiLCJjaGVja1RhaWwiLCJjb25zaXN0ZW50U3RhdGUiLCJfYXBwZW5kQ2hhclJhdyIsImRvVmFsaWRhdGUiLCJvdmVyd3JpdGUiLCJhcHBlbmRUYWlsIiwiY2kiLCJfYXBwZW5kQ2hhciIsIl9yZWZyZXNoaW5nIiwicmF3SW5wdXQiLCJyYXdJbnB1dFZhbHVlIiwiX2lzb2xhdGVkIiwicHJlcGFyZSIsInZhbGlkYXRlIiwiY29tbWl0IiwiZGVsZXRlQ291bnQiLCJyZW1vdmVEaXJlY3Rpb24iLCJ0YWlsUG9zIiwiZXh0cmFjdFRhaWwiLCJuZWFyZXN0SW5wdXRQb3MiLCJkb1BhcnNlIiwiZG9Gb3JtYXQiLCJtYXNrZWRDbGFzcyIsIm1hc2siLCJNYXNrZWRSZWdFeHAiLCJNYXNrZWRQYXR0ZXJuIiwiTWFza2VkRGF0ZSIsIk1hc2tlZE51bWJlciIsIk1hc2tlZER5bmFtaWMiLCJNYXNrZWRGdW5jdGlvbiIsImNyZWF0ZU1hc2siLCJNYXNrZWRDbGFzcyIsIkRFRkFVTFRfSU5QVVRfREVGSU5JVElPTlMiLCJQYXR0ZXJuSW5wdXREZWZpbml0aW9uIiwiYmxvY2tPcHRzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2lzRmlsbGVkIiwiaXNPcHRpb25hbCIsIl90aGlzJG1hc2tlZCIsIl90aGlzJG1hc2tlZDIiLCJfdGhpcyRtYXNrZWQzIiwibWF4UG9zIiwiYm91bmRQb3MiLCJfdGhpcyRtYXNrZWQ0IiwiX3RoaXMkcGFyZW50IiwicGxhY2Vob2xkZXJDaGFyIiwidW5tYXNrZWRWYWx1ZSIsIlBhdHRlcm5GaXhlZERlZmluaXRpb24iLCJfaXNSYXdJbnB1dCIsImlzUmVzb2x2ZWQiLCJpc1VubWFza2luZyIsIkNodW5rc1RhaWxEZXRhaWxzIiwiY2h1bmtzIiwidGFpbENodW5rIiwiZmlyc3RUYWlsQ2h1bmsiLCJsYXN0Q2h1bmsiLCJleHRlbmRMYXN0IiwicmVtYWluQ2hhcnMiLCJjaHVuayIsImxhc3RCbG9ja0l0ZXIiLCJjaHVua0Jsb2NrIiwiY2h1bmtTaGlmdFBvcyIsImJsb2NrSW5kZXgiLCJjc3RhdGUiLCJfZ2V0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfcmVidWlsZE1hc2siLCJkZWZzIiwiZGVmaW5pdGlvbnMiLCJfYmxvY2tzIiwiX3N0b3BzIiwiX21hc2tlZEJsb2NrcyIsInVubWFza2luZ0Jsb2NrIiwib3B0aW9uYWxCbG9jayIsImJsb2NrcyIsImJOYW1lcyIsImJOYW1lIiwibWFza2VkQmxvY2siLCJpc0lucHV0IiwiU1RPUF9DSEFSIiwiRVNDQVBFX0NIQVIiLCJkZWYiLCJibG9ja0l0ZXIiLCJfbWFwUG9zVG9CbG9jayIsImJpIiwiYmxvY2siLCJfYmxvY2siLCJibG9ja0RldGFpbHMiLCJfdGhpczIiLCJjaHVua1RhaWwiLCJfZm9yRWFjaEJsb2Nrc0luUmFuZ2UiLCJiRnJvbVBvcyIsImJUb1BvcyIsImJsb2NrQ2h1bmsiLCJfZmluZFN0b3BCZWZvcmUiLCJfYmxvY2tTdGFydFBvcyIsInN0b3BCZWZvcmUiLCJzaSIsInRvQmxvY2tJbmRleCIsIl90aGlzMyIsInN0YXJ0QmxvY2tJdGVyIiwic3RhcnRCbG9ja0luZGV4IiwiZW5kQmxvY2tJbmRleCIsImJEZXRhaWxzIiwiYWNjVmFsIiwiYmxvY2tTdGFydFBvcyIsInJlZHVjZSIsImZyb21CbG9ja0l0ZXIiLCJ0b0Jsb2NrSXRlciIsImlzU2FtZUJsb2NrIiwiZnJvbUJsb2NrU3RhcnRQb3MiLCJmcm9tQmxvY2tFbmRQb3MiLCJyZW1vdmVEZXRhaWxzIiwiYmVnaW5CbG9ja0RhdGEiLCJiZWdpbkJsb2NrT2Zmc2V0IiwiYmVnaW5CbG9ja0luZGV4IiwiYmVnaW5CbG9jayIsImJlZ2luQmxvY2tDdXJzb3JQb3MiLCJmb3JjZURpcmVjdGlvbiIsImN1cnNvckF0UmlnaHQiLCJzZWFyY2hCbG9ja0luZGV4IiwiYmxvY2tJbmRleEF0TGVmdCIsImJsb2NrQXRMZWZ0IiwiYmxvY2tJbnB1dFBvcyIsImJsb2NrQXRSaWdodCIsIl9ibG9ja0lucHV0UG9zIiwiX2JpIiwiZmlyc3RGaWxsZWRCbG9ja0luZGV4QXRSaWdodCIsIl9iaTIiLCJmaWxsZWRCbG9jayIsIl9ibG9ja0lucHV0UG9zMyIsImZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXgiLCJmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCIsIl9iaTMiLCJfYmxvY2tJbnB1dFBvczQiLCJfYmk0IiwiYmxvY2tBbGlnbmVkUG9zIiwiX2Jsb2NrSW5wdXRQb3M1IiwiX2JpNSIsIl9ibG9ja0lucHV0UG9zNiIsImZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleCIsImZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3MiLCJfYmk2IiwiX2JpNyIsIl9ibG9ja0lucHV0UG9zOCIsIl9iaTgiLCJhbGlnbmVkUG9zIiwiX2Jsb2NrSW5wdXRQb3M5IiwibWFza2VkQmxvY2tzIiwiX3RoaXM0IiwiaW5kaWNlcyIsImdpIiwibWFza2VkU3RhdGUiLCJfc2V0IiwiZXZlcnkiLCJNYXNrZWRSYW5nZSIsImZyb21TdHIiLCJ0b1N0ciIsInNhbWVDaGFyc0NvdW50IiwibWluc3RyIiwibWF4c3RyIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheSIsInBsYWNlaG9sZGVyIiwiYXV0b2ZpeCIsInByZXBTdHIiLCJuZXh0VmFsIiwiX3RoaXMkYm91bmRhcmllczIiLCJib3VuZGFyaWVzIiwiX2dldDIiLCJmaXJzdE5vblplcm8iLCJfbWF0Y2hGcm9tIiwiX3RoaXMkYm91bmRhcmllczQiLCJHRVRfREVGQVVMVF9CTE9DS1MiLCJiayIsImRhdGUiLCJpc0RhdGVFeGlzdCIsInR5cGVkVmFsdWUiLCJnZXRGdWxsWWVhciIsIl9zdHIkc3BsaXQyIiwiZGF5IiwibW9udGgiLCJ5ZWFyIiwiWSIsIk1hc2tFbGVtZW50Iiwic2VsZWN0aW9uRW5kIiwiX3Vuc2FmZVNlbGVjdCIsIkhUTUxNYXNrRWxlbWVudCIsIl9oYW5kbGVycyIsInNldFNlbGVjdGlvblJhbmdlIiwiX3RvZ2dsZUV2ZW50SGFuZGxlciIsInJvb3RFbGVtZW50Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25DaGFuZ2UiLCJkcm9wIiwiSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50IiwicmFuZ2UiLCJjcmVhdGVSYW5nZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsIl91bnNhZmVTZWxlY3Rpb25TdGFydCIsIl9saXN0ZW5lcnMiLCJfdW5tYXNrZWRWYWx1ZSIsIl9zYXZlU2VsZWN0aW9uIiwiX29uSW5wdXQiLCJfb25DaGFuZ2UiLCJfb25Ecm9wIiwiX29uRm9jdXMiLCJfb25DbGljayIsImFsaWduQ3Vyc29yIiwiYWxpZ25DdXJzb3JGcmllbmRseSIsIl9iaW5kRXZlbnRzIiwidXBkYXRlVmFsdWUiLCJiaW5kRXZlbnRzIiwidW5iaW5kRXZlbnRzIiwiZXYiLCJsaXN0ZW5lcnMiLCJfc2VsZWN0aW9uIiwibmV3VW5tYXNrZWRWYWx1ZSIsIm5ld1ZhbHVlIiwiaXNDaGFuZ2VkIiwiX2ZpcmVDaGFuZ2VFdmVudHMiLCJyZXN0T3B0cyIsInVwZGF0ZU1hc2siLCJtYXNrRXF1YWxzIiwidXBkYXRlT3B0cyIsIm9iamVjdEluY2x1ZGVzIiwiYXJyQSIsImFyckIiLCJfdHlwZW9mIiwiZGF0ZUEiLCJkYXRlQiIsInJlZ2V4cEEiLCJyZWdleHBCIiwidXBkYXRlT3B0aW9ucyIsInVwZGF0ZUNvbnRyb2wiLCJfZGVsYXlVcGRhdGVDdXJzb3IiLCJfYWJvcnRVcGRhdGVDdXJzb3IiLCJfY2hhbmdpbmdDdXJzb3JQb3MiLCJfY3Vyc29yQ2hhbmdpbmciLCJfZmlyZUV2ZW50IiwiX2lucHV0RXZlbnQiLCJoSW5kZXgiLCJvbGRSYXdWYWx1ZSIsIl91bmJpbmRFdmVudHMiLCJNYXNrZWRFbnVtIiwiZW51bSIsInNvbWUiLCJfdXBkYXRlUmVnRXhwcyIsImFsbG93TmVnYXRpdmUiLCJyYWRpeCIsIl9udW1iZXJSZWdFeHBJbnB1dCIsIl9udW1iZXJSZWdFeHAiLCJfbWFwVG9SYWRpeFJlZ0V4cCIsIm1hcFRvUmFkaXgiLCJfdGhvdXNhbmRzU2VwYXJhdG9yUmVnRXhwIiwidGhvdXNhbmRzU2VwYXJhdG9yIiwiX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMiLCJleHRlbmRPblNlcGFyYXRvcnMiLCJfc2VwYXJhdG9yc0NvdW50IiwiX3RoaXMkX2FkanVzdFJhbmdlV2l0MiIsIl9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzIiwicHJldkJlZm9yZVRhaWxWYWx1ZSIsInByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50IiwiX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZSIsImFwcGVuZERldGFpbHMiLCJfaW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyIsImJlZm9yZVRhaWxWYWx1ZSIsImJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQiLCJzZWFyY2hGcm9tIiwic2VwYXJhdG9yUG9zIiwic2VwYXJhdG9yQXJvdW5kRnJvbVBvcyIsIl9maW5kU2VwYXJhdG9yQXJvdW5kIiwic2VwYXJhdG9yQXJvdW5kVG9Qb3MiLCJfdGhpcyRfYWRqdXN0UmFuZ2VXaXQ0IiwidmFsdWVCZWZvcmVQb3MiLCJ2YWx1ZUFmdGVyUG9zIiwic2VwYXJhdG9yQXRMZWZ0UG9zIiwic2VwYXJhdG9yQXRMZWZ0RW5kUG9zIiwic2VwYXJhdG9yQXRSaWdodFBvcyIsInZhbGlkIiwicmVnZXhwIiwidmFsaWRudW0iLCJmb3JtYXR0ZWQiLCJub3JtYWxpemVaZXJvcyIsIl9ub3JtYWxpemVaZXJvcyIsInBhZEZyYWN0aW9uYWxaZXJvcyIsIl9wYWRGcmFjdGlvbmFsWmVyb3MiLCJzaWduIiwiemVyb3MiLCJzaWduZWQiLCJjdXJyZW50TWFzayIsImNvbXBpbGVkTWFza3MiLCJfdGhpcyRjdXJyZW50TWFzayIsIl9hcHBseURpc3BhdGNoIiwicHJldlZhbHVlQmVmb3JlVGFpbCIsImlucHV0VmFsdWUiLCJpbnNlcnRWYWx1ZSIsInRhaWxWYWx1ZSIsInByZXZNYXNrIiwicHJldk1hc2tTdGF0ZSIsImRvRGlzcGF0Y2giLCJfdGhpcyRjdXJyZW50TWFzazIiLCJfdGhpcyRjdXJyZW50TWFzazMiLCJfdGhpcyRjdXJyZW50TWFzazQiLCJfdGhpcyRjdXJyZW50TWFzazUiLCJfZ2V0MyIsIl90aGlzJGN1cnJlbnRNYXNrNiIsIl9nZXQ0IiwiX3Jhd0lucHV0VmFsdWUiLCJjdXJyZW50TWFza1JlZiIsIm1pIiwiaW5wdXRzIiwid2VpZ2h0IiwiaTIiLCJQSVBFX1RZUEUiLCJNQVNLRUQiLCJVTk1BU0tFRCIsIlRZUEVEIiwiY3JlYXRlUGlwZSIsInJ1bklzb2xhdGVkIiwicGlwZUFyZ3MiLCJFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImluaXRDdXN0b21FdmVudCIsInIiLCJTbW9vdGhTY3JvbGwiLCJNIiwiSSIsIkludmFsaWRDaGFyYWN0ZXJFcnJvciIsIkYiLCJvdXRsaW5lIiwiSCIsImVtaXRFdmVudHMiLCJhbmNob3IiLCJkaXNwYXRjaEV2ZW50IiwicSIsInRvcE9uRW1wdHlIYXNoIiwic3BlZWRBc0R1cmF0aW9uIiwiZHVyYXRpb25NYXgiLCJkdXJhdGlvbk1pbiIsImNsaXAiLCJjdXN0b21FYXNpbmciLCJ1cGRhdGVVUkwiLCJwb3BzdGF0ZSIsIkMiLCJhbmltYXRlU2Nyb2xsIiwiY2FuY2VsU2Nyb2xsIiwidSIsImciLCJFIiwidGFnTmFtZSIsIm9mZnNldFRvcCIsInNtb290aFNjcm9sbCIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6IkNBYUEsU0FBWUEsRUFBUUMsZ0JBSUksaUJBQVhDLFFBQWlELGlCQUFuQkEsT0FBT0MsUUFTaERELE9BQU9DLFFBQVVILEVBQU9JLFNBQ3ZCSCxFQUFTRCxHQUFRLEdBQ2pCLFNBQVVLLEdBQ1QsSUFBTUEsRUFBRUQsU0FDUCxNQUFNLElB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b0IsUUFBUTBJLEdBQUUsR0FBSW83RSxFQUFFOWpGLG9CQUFvQixXQUFXM0csR0FBRSxHQUFJMnJGLEVBQUVFLGVBQWUzZSxFQUFFK0UsRUFBRTNpRixFQUFFQyxFQUFFLE9BQWUsV0FBVyxLQUFLLGtCQUFrQi9KLFVBQVUscUJBQXFCaWxHLEdBQUcsMEJBQTBCQSxHQUFHLFlBQVlBLEVBQUVMLFFBQVFsaEcsV0FBVyxLQUFLLGlHQUFpR3lpRyxFQUFFNTFDLFVBQVV4bUQsRUFBRW03RixFQUFFUSxFQUFFOTRGLEdBQUcsSUFBSTYvRSxFQUFFMWlGLEVBQUVpTSxPQUFPaFcsU0FBU2d0QyxjQUFjampDLEVBQUVpTSxRQUFRLEtBQUtoVyxTQUFTaVEsaUJBQWlCLFFBQVE0WixHQUFFLEdBQUk5ZixFQUFFazhGLFdBQVdsOEYsRUFBRW04RixVQUFVakIsRUFBRWgxRixpQkFBaUIsV0FBV3VLLEdBQUUsR0FBblosR0FBMloyckYiLCJmaWxlIjoibGlicy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNS4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMC0wNS0wNFQyMjo0OVpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy41LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjVcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjAtMDMtMTRcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59O1xudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWRcblx0XHRcdG1hc3RlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRtYXN0ZXIucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIG1hc3Rlci5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBtYXN0ZXIucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggbWFzdGVyLnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cblx0d2hpY2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHR2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICYmIHJrZXlFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRyZXR1cm4gZXZlbnQuY2hhckNvZGUgIT0gbnVsbCA/IGV2ZW50LmNoYXJDb2RlIDogZXZlbnQua2V5Q29kZTtcblx0XHR9XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgcm1vdXNlRXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0aWYgKCBidXR0b24gJiAxICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiAyICkge1xuXHRcdFx0XHRyZXR1cm4gMztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBidXR0b24gJiA0ICkge1xuXHRcdFx0XHRyZXR1cm4gMjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LndoaWNoO1xuXHR9XG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4XCI7XG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0ICkgPiAzO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0XHQpWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHRcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJiBqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMudG9wID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRwcm9wcy50b3AgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0eXBlb2YgcHJvcHMubGVmdCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMubGVmdCArPSBcInB4XCI7XG5cdFx0XHR9XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sXG5cdFx0ZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggKCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIi8qKlxuICogU1NSIFdpbmRvdyAzLjAuMC1hbHBoYS40XG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMCwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogTWF5IDIwLCAyMDIwXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgICByZXR1cm4gKG9iaiAhPT0gbnVsbCAmJlxuICAgICAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAnY29uc3RydWN0b3InIGluIG9iaiAmJlxuICAgICAgICBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHsgdGFyZ2V0ID0ge307IH1cbiAgICBpZiAoc3JjID09PSB2b2lkIDApIHsgc3JjID0ge307IH1cbiAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJlxuICAgICAgICAgICAgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxudmFyIHNzckRvY3VtZW50ID0ge1xuICAgIGJvZHk6IHt9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgICBibHVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIG5vZGVOYW1lOiAnJyxcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgY3JlYXRlRXZlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRFdmVudDogZnVuY3Rpb24gKCkgeyB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgICAgICBzdHlsZToge30sXG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnROUzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICBpbXBvcnROb2RlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgICBleHRlbmQoZG9jLCBzc3JEb2N1bWVudCk7XG4gICAgcmV0dXJuIGRvYztcbn1cblxudmFyIHNzcldpbmRvdyA9IHtcbiAgICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gICAgbmF2aWdhdG9yOiB7XG4gICAgICAgIHVzZXJBZ2VudDogJycsXG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgaG9zdDogJycsXG4gICAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgICAgaHJlZjogJycsXG4gICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICBzZWFyY2g6ICcnLFxuICAgIH0sXG4gICAgaGlzdG9yeToge1xuICAgICAgICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICAgICAgcHVzaFN0YXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGdvOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgIGJhY2s6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICB9LFxuICAgIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkgeyB9LFxuICAgIGdldENvbXB1dGVkU3R5bGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgSW1hZ2U6IGZ1bmN0aW9uICgpIHsgfSxcbiAgICBEYXRlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgc2NyZWVuOiB7fSxcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgY2xlYXJUaW1lb3V0OiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgbWF0Y2hNZWRpYTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH0sXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWU6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgICB2YXIgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICAgIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGV4dGVuZCwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgc3NyRG9jdW1lbnQsIHNzcldpbmRvdyB9O1xuIiwiLyoqXG4gKiBEb203IDMuMC4wLWFscGhhLjdcbiAqIE1pbmltYWxpc3RpYyBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIERPTSBtYW5pcHVsYXRpb24sIHdpdGggYSBqUXVlcnktY29tcGF0aWJsZSBBUElcbiAqIGh0dHBzOi8vZnJhbWV3b3JrNy5pby9kb2NzL2RvbTcuaHRtbFxuICpcbiAqIENvcHlyaWdodCAyMDIwLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBKdWx5IDE0LCAyMDIwXG4gKi9cbmltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7XG4gIGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7XG5cbiAgdHJ5IHtcbiAgICBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7XG4gICAgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICB9IGVsc2Uge1xuICAgIF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgIHZhciBhID0gW251bGxdO1xuICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgICBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykge1xuICB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gICAgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzcztcblxuICAgIGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTtcblxuICAgICAgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gV3JhcHBlcigpIHtcbiAgICAgIHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IFdyYXBwZXIsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuZnVuY3Rpb24gbWFrZVJlYWN0aXZlKG9iaikge1xuICB2YXIgcHJvdG8gPSBvYmouX19wcm90b19fO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnX19wcm90b19fJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHByb3RvO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIHByb3RvLl9fcHJvdG9fXyA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBEb203ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQXJyYXkpIHtcbiAgX2luaGVyaXRzTG9vc2UoRG9tNywgX0FycmF5KTtcblxuICBmdW5jdGlvbiBEb203KGl0ZW1zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfQXJyYXkuY2FsbC5hcHBseShfQXJyYXksIFt0aGlzXS5jb25jYXQoaXRlbXMpKSB8fCB0aGlzO1xuICAgIG1ha2VSZWFjdGl2ZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIERvbTc7XG59KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihBcnJheSkpO1xuXG5mdW5jdGlvbiBhcnJheUZsYXQoYXJyKSB7XG4gIGlmIChhcnIgPT09IHZvaWQgMCkge1xuICAgIGFyciA9IFtdO1xuICB9XG5cbiAgdmFyIHJlcyA9IFtdO1xuICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYXJyYXlGbGF0KGVsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5wdXNoKGVsKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyLCBjYWxsYmFjaykge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFyciwgY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gYXJyYXlVbmlxdWUoYXJyKSB7XG4gIHZhciB1bmlxdWVBcnJheSA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHVuaXF1ZUFycmF5LmluZGV4T2YoYXJyW2ldKSA9PT0gLTEpIHVuaXF1ZUFycmF5LnB1c2goYXJyW2ldKTtcbiAgfVxuXG4gIHJldHVybiB1bmlxdWVBcnJheTtcbn1cbmZ1bmN0aW9uIHRvQ2FtZWxDYXNlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLSguKS9nLCBmdW5jdGlvbiAobWF0Y2gsIGdyb3VwKSB7XG4gICAgcmV0dXJuIGdyb3VwLnRvVXBwZXJDYXNlKCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBxc2Eoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gW3NlbGVjdG9yXTtcbiAgfVxuXG4gIHZhciBhID0gW107XG4gIHZhciByZXMgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgYS5wdXNoKHJlc1tpXSk7XG4gIH1cblxuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHZhciBhcnIgPSBbXTtcblxuICBpZiAoIWNvbnRleHQgJiYgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9XG5cbiAgaWYgKCFzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgRG9tNyhhcnIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgaHRtbCA9IHNlbGVjdG9yLnRyaW0oKTtcblxuICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgIHZhciB0b0NyZWF0ZSA9ICdkaXYnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPGxpJykgPT09IDApIHRvQ3JlYXRlID0gJ3VsJztcbiAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0cicpID09PSAwKSB0b0NyZWF0ZSA9ICd0Ym9keSc7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB0b0NyZWF0ZSA9ICd0cic7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGJvZHknKSA9PT0gMCkgdG9DcmVhdGUgPSAndGFibGUnO1xuICAgICAgaWYgKGh0bWwuaW5kZXhPZignPG9wdGlvbicpID09PSAwKSB0b0NyZWF0ZSA9ICdzZWxlY3QnO1xuICAgICAgdmFyIHRlbXBQYXJlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRvQ3JlYXRlKTtcbiAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2godGVtcFBhcmVudC5jaGlsZE5vZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXJyID0gcXNhKHNlbGVjdG9yLnRyaW0oKSwgY29udGV4dCB8fCBkb2N1bWVudCk7XG4gICAgfSAvLyBhcnIgPSBxc2Eoc2VsZWN0b3IsIGRvY3VtZW50KTtcblxuICB9IGVsc2UgaWYgKHNlbGVjdG9yLm5vZGVUeXBlIHx8IHNlbGVjdG9yID09PSB3aW5kb3cgfHwgc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgYXJyLnB1c2goc2VsZWN0b3IpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0b3IpKSB7XG4gICAgaWYgKHNlbGVjdG9yIGluc3RhbmNlb2YgRG9tNykgcmV0dXJuIHNlbGVjdG9yO1xuICAgIGFyciA9IHNlbGVjdG9yO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEb203KGFycmF5VW5pcXVlKGFycikpO1xufVxuXG4kLmZuID0gRG9tNy5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGFkZENsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc2VzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgX2VsJGNsYXNzTGlzdDtcblxuICAgIChfZWwkY2xhc3NMaXN0ID0gZWwuY2xhc3NMaXN0KS5hZGQuYXBwbHkoX2VsJGNsYXNzTGlzdCwgY2xhc3NOYW1lcyk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoKSB7XG4gIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIGNsYXNzZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWVzID0gYXJyYXlGbGF0KGNsYXNzZXMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMuc3BsaXQoJyAnKTtcbiAgfSkpO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgdmFyIF9lbCRjbGFzc0xpc3QyO1xuXG4gICAgKF9lbCRjbGFzc0xpc3QyID0gZWwuY2xhc3NMaXN0KS5yZW1vdmUuYXBwbHkoX2VsJGNsYXNzTGlzdDIsIGNsYXNzTmFtZXMpO1xuICB9KTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKCkge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzZXMgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBjbGFzc2VzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lcyA9IGFycmF5RmxhdChjbGFzc2VzLm1hcChmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiBjLnNwbGl0KCcgJyk7XG4gIH0pKTtcbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgIGNsYXNzTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzcygpIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgY2xhc3Nlc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICB9XG5cbiAgdmFyIGNsYXNzTmFtZXMgPSBhcnJheUZsYXQoY2xhc3Nlcy5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYy5zcGxpdCgnICcpO1xuICB9KSk7XG4gIHJldHVybiBhcnJheUZpbHRlcih0aGlzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgIH0pLmxlbmd0aCA+IDA7XG4gIH0pLmxlbmd0aCA+IDA7XG59XG5cbmZ1bmN0aW9uIGF0dHIoYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgYXR0clxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0gLy8gU2V0IGF0dHJzXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgLy8gU3RyaW5nXG4gICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRycywgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3RcbiAgICAgIGZvciAodmFyIGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgIHRoaXNbaV1bYXR0ck5hbWVdID0gYXR0cnNbYXR0ck5hbWVdO1xuICAgICAgICB0aGlzW2ldLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0cnNbYXR0ck5hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByb3AocHJvcHMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgcHJvcFxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXVtwcm9wc107XG4gIH0gZWxzZSB7XG4gICAgLy8gU2V0IHByb3BzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgdGhpc1tpXVtwcm9wc10gPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9iamVjdFxuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wcykge1xuICAgICAgICAgIHRoaXNbaV1bcHJvcE5hbWVdID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gIHZhciBlbDtcblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkOyAvLyBHZXQgdmFsdWVcblxuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGtleSBpbiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSB7XG4gICAgICByZXR1cm4gZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldO1xuICAgIH1cblxuICAgIHZhciBkYXRhS2V5ID0gZWwuZ2V0QXR0cmlidXRlKFwiZGF0YS1cIiArIGtleSk7XG5cbiAgICBpZiAoZGF0YUtleSkge1xuICAgICAgcmV0dXJuIGRhdGFLZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSAvLyBTZXQgdmFsdWVcblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGVsID0gdGhpc1tpXTtcbiAgICBpZiAoIWVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgPSB7fTtcbiAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiByZW1vdmVEYXRhKGtleSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldKSB7XG4gICAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSBudWxsO1xuICAgICAgZGVsZXRlIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0YXNldCgpIHtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgdmFyIGRhdGFzZXQgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gIGlmIChlbC5kYXRhc2V0KSB7XG4gICAgZm9yICh2YXIgZGF0YUtleSBpbiBlbC5kYXRhc2V0KSB7XG4gICAgICBkYXRhc2V0W2RhdGFLZXldID0gZWwuZGF0YXNldFtkYXRhS2V5XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgX2F0dHIgPSBlbC5hdHRyaWJ1dGVzW2ldO1xuXG4gICAgICBpZiAoX2F0dHIubmFtZS5pbmRleE9mKCdkYXRhLScpID49IDApIHtcbiAgICAgICAgZGF0YXNldFt0b0NhbWVsQ2FzZShfYXR0ci5uYW1lLnNwbGl0KCdkYXRhLScpWzFdKV0gPSBfYXR0ci52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0W2tleV0gPT09ICdmYWxzZScpIGRhdGFzZXRba2V5XSA9IGZhbHNlO2Vsc2UgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ3RydWUnKSBkYXRhc2V0W2tleV0gPSB0cnVlO2Vsc2UgaWYgKHBhcnNlRmxvYXQoZGF0YXNldFtrZXldKSA9PT0gZGF0YXNldFtrZXldICogMSkgZGF0YXNldFtrZXldICo9IDE7XG4gIH1cblxuICByZXR1cm4gZGF0YXNldDtcbn1cblxuZnVuY3Rpb24gdmFsKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gZ2V0IHZhbHVlXG4gICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICBpZiAoIWVsKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgaWYgKGVsLm11bHRpcGxlICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWwuc2VsZWN0ZWRPcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKGVsLnNlbGVjdGVkT3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsLnZhbHVlO1xuICB9IC8vIHNldCB2YWx1ZVxuXG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGVuZ3RoOyBfaSArPSAxKSB7XG4gICAgdmFyIF9lbCA9IHRoaXNbX2ldO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIF9lbC5tdWx0aXBsZSAmJiBfZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2VsLm9wdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgX2VsLm9wdGlvbnNbal0uc2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKF9lbC5vcHRpb25zW2pdLnZhbHVlKSA+PSAwO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBfZWwudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudmFsKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUudHJhbnNpdGlvbiA9IHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycgPyBkdXJhdGlvbiArIFwibXNcIiA6IGR1cmF0aW9uO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG9uKCkge1xuICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHtcbiAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gIH1cblxuICB2YXIgZXZlbnRUeXBlID0gYXJnc1swXSxcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICB2YXIgZXZlbnREYXRhID0gZS50YXJnZXQuZG9tN0V2ZW50RGF0YSB8fCBbXTtcblxuICAgIGlmIChldmVudERhdGEuaW5kZXhPZihlKSA8IDApIHtcbiAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgIH1cblxuICAgIGlmICgkKHRhcmdldCkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7ZWxzZSB7XG4gICAgICB2YXIgX3BhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cblxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBfcGFyZW50cy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICBpZiAoJChfcGFyZW50c1trXSkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseShfcGFyZW50c1trXSwgZXZlbnREYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVFdmVudChlKSB7XG4gICAgdmFyIGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG5cbiAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICBldmVudERhdGEudW5zaGlmdChlKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBldmVudERhdGEpO1xuICB9XG5cbiAgdmFyIGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuICB2YXIgajtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKCF0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgZXZlbnQgPSBldmVudHNbal07XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVycykgZWwuZG9tN0xpc3RlbmVycyA9IHt9O1xuICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdKSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGlzdGVuZXJzW2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlRXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGl2ZSBldmVudHNcbiAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIF9ldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVycykgZWwuZG9tN0xpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdKSBlbC5kb203TGl2ZUxpc3RlbmVyc1tfZXZlbnRdID0gW107XG5cbiAgICAgICAgZWwuZG9tN0xpdmVMaXN0ZW5lcnNbX2V2ZW50XS5wdXNoKHtcbiAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoX2V2ZW50LCBoYW5kbGVMaXZlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvZmYoKSB7XG4gIGZvciAodmFyIF9sZW42ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNiksIF9rZXk2ID0gMDsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykge1xuICAgIGFyZ3NbX2tleTZdID0gYXJndW1lbnRzW19rZXk2XTtcbiAgfVxuXG4gIHZhciBldmVudFR5cGUgPSBhcmdzWzBdLFxuICAgICAgdGFyZ2V0U2VsZWN0b3IgPSBhcmdzWzFdLFxuICAgICAgbGlzdGVuZXIgPSBhcmdzWzJdLFxuICAgICAgY2FwdHVyZSA9IGFyZ3NbM107XG5cbiAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRUeXBlID0gYXJnc1swXTtcbiAgICBsaXN0ZW5lciA9IGFyZ3NbMV07XG4gICAgY2FwdHVyZSA9IGFyZ3NbMl07XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoIWNhcHR1cmUpIGNhcHR1cmUgPSBmYWxzZTtcbiAgdmFyIGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuICAgICAgdmFyIGhhbmRsZXJzID0gdm9pZCAwO1xuXG4gICAgICBpZiAoIXRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF07XG4gICAgICB9XG5cbiAgICAgIGlmIChoYW5kbGVycyAmJiBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgayA9IGhhbmRsZXJzLmxlbmd0aCAtIDE7IGsgPj0gMDsgayAtPSAxKSB7XG4gICAgICAgICAgdmFyIGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcblxuICAgICAgICAgIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgJiYgaGFuZGxlci5saXN0ZW5lci5kb203cHJveHkgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBvbmNlKCkge1xuICB2YXIgZG9tID0gdGhpcztcblxuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjcpLCBfa2V5NyA9IDA7IF9rZXk3IDwgX2xlbjc7IF9rZXk3KyspIHtcbiAgICBhcmdzW19rZXk3XSA9IGFyZ3VtZW50c1tfa2V5N107XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gYXJnc1swXSxcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXSxcbiAgICAgIGxpc3RlbmVyID0gYXJnc1syXSxcbiAgICAgIGNhcHR1cmUgPSBhcmdzWzNdO1xuXG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGV2ZW50TmFtZSA9IGFyZ3NbMF07XG4gICAgbGlzdGVuZXIgPSBhcmdzWzFdO1xuICAgIGNhcHR1cmUgPSBhcmdzWzJdO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBldmVudEFyZ3MgPSBuZXcgQXJyYXkoX2xlbjgpLCBfa2V5OCA9IDA7IF9rZXk4IDwgX2xlbjg7IF9rZXk4KyspIHtcbiAgICAgIGV2ZW50QXJnc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdO1xuICAgIH1cblxuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50QXJncyk7XG4gICAgZG9tLm9mZihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG5cbiAgICBpZiAob25jZUhhbmRsZXIuZG9tN3Byb3h5KSB7XG4gICAgICBkZWxldGUgb25jZUhhbmRsZXIuZG9tN3Byb3h5O1xuICAgIH1cbiAgfVxuXG4gIG9uY2VIYW5kbGVyLmRvbTdwcm94eSA9IGxpc3RlbmVyO1xuICByZXR1cm4gZG9tLm9uKGV2ZW50TmFtZSwgdGFyZ2V0U2VsZWN0b3IsIG9uY2VIYW5kbGVyLCBjYXB0dXJlKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIF9sZW45ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOSksIF9rZXk5ID0gMDsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgIGFyZ3NbX2tleTldID0gYXJndW1lbnRzW19rZXk5XTtcbiAgfVxuXG4gIHZhciBldmVudHMgPSBhcmdzWzBdLnNwbGl0KCcgJyk7XG4gIHZhciBldmVudERhdGEgPSBhcmdzWzFdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuXG4gICAgICBpZiAod2luZG93LkN1c3RvbUV2ZW50KSB7XG4gICAgICAgIHZhciBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgZGV0YWlsOiBldmVudERhdGEsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gYXJncy5maWx0ZXIoZnVuY3Rpb24gKGRhdGEsIGRhdGFJbmRleCkge1xuICAgICAgICAgIHJldHVybiBkYXRhSW5kZXggPiAwO1xuICAgICAgICB9KTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICAgIGRlbGV0ZSBlbC5kb203RXZlbnREYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuXG4gIGlmIChjYWxsYmFjaykge1xuICAgIGRvbS5vbigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuXG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICBkb20ub2ZmKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9tLm9uKCdhbmltYXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHdpZHRoKCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgfVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmNzcygnd2lkdGgnKSk7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb3V0ZXJXaWR0aChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICB2YXIgX3N0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG5cbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoICsgcGFyc2VGbG9hdChfc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoX3N0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBoZWlnaHQoKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcblxuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuXG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLmNzcygnaGVpZ2h0JykpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG91dGVySGVpZ2h0KGluY2x1ZGVNYXJnaW5zKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICAgIHZhciBfc3R5bGVzMiA9IHRoaXMuc3R5bGVzKCk7XG5cbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoX3N0eWxlczIuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoX3N0eWxlczIuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWJvdHRvbScpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRIZWlnaHQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KCkge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICB2YXIgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgIHZhciBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICB2YXIgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gICAgdmFyIHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgICB2YXIgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcCxcbiAgICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzaG93KCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGVsID0gdGhpc1tpXTtcblxuICAgIGlmIChlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICB9XG5cbiAgICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAvLyBTdGlsbCBub3QgdmlzaWJsZVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHN0eWxlcygpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpO1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgaTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyAuY3NzKCd3aWR0aCcpXG4gICAgICBpZiAodGhpc1swXSkgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXNbMF0sIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyAuY3NzKHsgd2lkdGg6ICcxMDBweCcgfSlcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGZvciAodmFyIF9wcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXS5zdHlsZVtfcHJvcF0gPSBwcm9wc1tfcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIC8vIC5jc3MoJ3dpZHRoJywgJzEwMHB4JylcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wc10gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gIGlmICghY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpbmRleCkge1xuICAgIGNhbGxiYWNrLmFwcGx5KGVsLCBbZWwsIGluZGV4XSk7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrKSB7XG4gIHZhciByZXN1bHQgPSBhcnJheUZpbHRlcih0aGlzLCBjYWxsYmFjayk7XG4gIHJldHVybiAkKHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICBpZiAodHlwZW9mIGh0bWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVySFRNTCA6IG51bGw7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGlzW2ldLmlubmVySFRNTCA9IGh0bWw7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gdGV4dCh0ZXh0KSB7XG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpIDogbnVsbDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGlzKHNlbGVjdG9yKSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgdmFyIGNvbXBhcmVXaXRoO1xuICB2YXIgaTtcbiAgaWYgKCFlbCB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIGlmIChlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmIChlbC5tc01hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLm1zTWF0Y2hlc1NlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvbXBhcmVXaXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoY29tcGFyZVdpdGhbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc2VsZWN0b3IgPT09IGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGVsID09PSBkb2N1bWVudDtcbiAgfVxuXG4gIGlmIChzZWxlY3RvciA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIGVsID09PSB3aW5kb3c7XG4gIH1cblxuICBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgY29tcGFyZVdpdGggPSBzZWxlY3Rvci5ub2RlVHlwZSA/IFtzZWxlY3Rvcl0gOiBzZWxlY3RvcjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpbmRleCgpIHtcbiAgdmFyIGNoaWxkID0gdGhpc1swXTtcbiAgdmFyIGk7XG5cbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXEoaW5kZXgpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB0aGlzO1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG5cbiAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICB2YXIgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBpZiAocmV0dXJuSW5kZXggPCAwKSByZXR1cm4gJChbXSk7XG4gICAgcmV0dXJuICQoW3RoaXNbcmV0dXJuSW5kZXhdXSk7XG4gIH1cblxuICByZXR1cm4gJChbdGhpc1tpbmRleF1dKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKCkge1xuICB2YXIgbmV3Q2hpbGQ7XG4gIHZhciBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgZm9yICh2YXIgayA9IDA7IGsgPCBhcmd1bWVudHMubGVuZ3RoOyBrICs9IDEpIHtcbiAgICBuZXdDaGlsZCA9IGsgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gayA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1trXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcblxuICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZCh0ZW1wRGl2LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRUbyhwYXJlbnQpIHtcbiAgJChwYXJlbnQpLmFwcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmQobmV3Q2hpbGQpIHtcbiAgdmFyIGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgdmFyIGk7XG4gIHZhciBqO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0ZW1wRGl2LmlubmVySFRNTCA9IG5ld0NoaWxkO1xuXG4gICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUodGVtcERpdi5jaGlsZE5vZGVzW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGRbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5wcmVwZW5kKHRoaXMpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHNlbGVjdG9yKSB7XG4gIHZhciBiZWZvcmUgPSAkKHNlbGVjdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYmVmb3JlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYmVmb3JlWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGJlZm9yZVswXSk7XG4gICAgfSBlbHNlIGlmIChiZWZvcmUubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiZWZvcmUubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYmVmb3JlW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBiZWZvcmVbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnNlcnRBZnRlcihzZWxlY3Rvcikge1xuICB2YXIgYWZ0ZXIgPSAkKHNlbGVjdG9yKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYWZ0ZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICBhZnRlclswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBhZnRlclswXS5uZXh0U2libGluZyk7XG4gICAgfSBlbHNlIGlmIChhZnRlci5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFmdGVyLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFmdGVyW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBhZnRlcltqXS5uZXh0U2libGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG5leHQoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nICYmICQodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gJChbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoW10pO1xuICAgIH1cblxuICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykgcmV0dXJuICQoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuICQoW10pO1xuICB9XG5cbiAgcmV0dXJuICQoW10pO1xufVxuXG5mdW5jdGlvbiBuZXh0QWxsKHNlbGVjdG9yKSB7XG4gIHZhciBuZXh0RWxzID0gW107XG4gIHZhciBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiAkKFtdKTtcblxuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgdmFyIF9uZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKF9uZXh0KS5pcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChfbmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChfbmV4dCk7XG5cbiAgICBlbCA9IF9uZXh0O1xuICB9XG5cbiAgcmV0dXJuICQobmV4dEVscyk7XG59XG5cbmZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiAkKFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKFtdKTtcbiAgICB9XG5cbiAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgcmV0dXJuICQoW2VsLnByZXZpb3VzRWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gJChbXSk7XG4gIH1cblxuICByZXR1cm4gJChbXSk7XG59XG5cbmZ1bmN0aW9uIHByZXZBbGwoc2VsZWN0b3IpIHtcbiAgdmFyIHByZXZFbHMgPSBbXTtcbiAgdmFyIGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuICQoW10pO1xuXG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgdmFyIF9wcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAoJChfcHJldikuaXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2goX3ByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2goX3ByZXYpO1xuXG4gICAgZWwgPSBfcHJldjtcbiAgfVxuXG4gIHJldHVybiAkKHByZXZFbHMpO1xufVxuXG5mdW5jdGlvbiBzaWJsaW5ncyhzZWxlY3Rvcikge1xuICByZXR1cm4gdGhpcy5uZXh0QWxsKHNlbGVjdG9yKS5hZGQodGhpcy5wcmV2QWxsKHNlbGVjdG9yKSk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudChzZWxlY3Rvcikge1xuICB2YXIgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAkKHBhcmVudHMpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnRzKHNlbGVjdG9yKSB7XG4gIHZhciBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgX3BhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgd2hpbGUgKF9wYXJlbnQpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJChfcGFyZW50KS5pcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChfcGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaChfcGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgX3BhcmVudCA9IF9wYXJlbnQucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJChwYXJlbnRzKTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuICB2YXIgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiAkKFtdKTtcbiAgfVxuXG4gIGlmICghY2xvc2VzdC5pcyhzZWxlY3RvcikpIHtcbiAgICBjbG9zZXN0ID0gY2xvc2VzdC5wYXJlbnRzKHNlbGVjdG9yKS5lcSgwKTtcbiAgfVxuXG4gIHJldHVybiBjbG9zZXN0O1xufVxuXG5mdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gIHZhciBmb3VuZEVsZW1lbnRzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGZvdW5kID0gdGhpc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZm91bmQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQoZm91bmRFbGVtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKHNlbGVjdG9yKSB7XG4gIHZhciBjaGlsZHJlbiA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSB0aGlzW2ldLmNoaWxkcmVuO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yIHx8ICQoY2hpbGROb2Rlc1tqXSkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICQoY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUpIHRoaXNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzW2ldKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkZXRhY2goKSB7XG4gIHJldHVybiB0aGlzLnJlbW92ZSgpO1xufVxuXG5mdW5jdGlvbiBhZGQoKSB7XG4gIHZhciBkb20gPSB0aGlzO1xuICB2YXIgaTtcbiAgdmFyIGo7XG5cbiAgZm9yICh2YXIgX2xlbjEwID0gYXJndW1lbnRzLmxlbmd0aCwgZWxzID0gbmV3IEFycmF5KF9sZW4xMCksIF9rZXkxMCA9IDA7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHtcbiAgICBlbHNbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciB0b0FkZCA9ICQoZWxzW2ldKTtcblxuICAgIGZvciAoaiA9IDA7IGogPCB0b0FkZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZG9tLnB1c2godG9BZGRbal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb207XG59XG5cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgZWwgPSB0aGlzW2ldO1xuXG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGVsLmNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbC5jaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbC50ZXh0Q29udGVudCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxUbygpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgbGVmdCA9IGFyZ3NbMF0sXG4gICAgICB0b3AgPSBhcmdzWzFdLFxuICAgICAgZHVyYXRpb24gPSBhcmdzWzJdLFxuICAgICAgZWFzaW5nID0gYXJnc1szXSxcbiAgICAgIGNhbGxiYWNrID0gYXJnc1s0XTtcblxuICBpZiAoYXJncy5sZW5ndGggPT09IDQgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gZWFzaW5nO1xuICAgIGxlZnQgPSBhcmdzWzBdO1xuICAgIHRvcCA9IGFyZ3NbMV07XG4gICAgZHVyYXRpb24gPSBhcmdzWzJdO1xuICAgIGNhbGxiYWNrID0gYXJnc1szXTtcbiAgICBlYXNpbmcgPSBhcmdzWzRdO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICd1bmRlZmluZWQnKSBlYXNpbmcgPSAnc3dpbmcnO1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uIGFuaW1hdGUoKSB7XG4gICAgdmFyIGVsID0gdGhpcztcbiAgICB2YXIgY3VycmVudFRvcDtcbiAgICB2YXIgY3VycmVudExlZnQ7XG4gICAgdmFyIG1heFRvcDtcbiAgICB2YXIgbWF4TGVmdDtcbiAgICB2YXIgbmV3VG9wO1xuICAgIHZhciBuZXdMZWZ0O1xuICAgIHZhciBzY3JvbGxUb3A7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIHZhciBzY3JvbGxMZWZ0OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICB2YXIgYW5pbWF0ZVRvcCA9IHRvcCA+IDAgfHwgdG9wID09PSAwO1xuICAgIHZhciBhbmltYXRlTGVmdCA9IGxlZnQgPiAwIHx8IGxlZnQgPT09IDA7XG5cbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgfVxuXG4gICAgaWYgKGFuaW1hdGVUb3ApIHtcbiAgICAgIGN1cnJlbnRUb3AgPSBlbC5zY3JvbGxUb3A7XG5cbiAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuXG4gICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZHVyYXRpb24pIHJldHVybjtcblxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBtYXhUb3AgPSBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIG1heFRvcCksIDApO1xuICAgIH1cblxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgbWF4TGVmdCA9IGVsLnNjcm9sbFdpZHRoIC0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICBuZXdMZWZ0ID0gTWF0aC5tYXgoTWF0aC5taW4obGVmdCwgbWF4TGVmdCksIDApO1xuICAgIH1cblxuICAgIHZhciBzdGFydFRpbWUgPSBudWxsO1xuICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA9PT0gY3VycmVudFRvcCkgYW5pbWF0ZVRvcCA9IGZhbHNlO1xuICAgIGlmIChhbmltYXRlTGVmdCAmJiBuZXdMZWZ0ID09PSBjdXJyZW50TGVmdCkgYW5pbWF0ZUxlZnQgPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbmRlcih0aW1lKSB7XG4gICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgICAgdmFyIGVhc2VQcm9ncmVzcyA9IGVhc2luZyA9PT0gJ2xpbmVhcicgPyBwcm9ncmVzcyA6IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgICAgdmFyIGRvbmU7XG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgc2Nyb2xsVG9wID0gY3VycmVudFRvcCArIGVhc2VQcm9ncmVzcyAqIChuZXdUb3AgLSBjdXJyZW50VG9wKTtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgc2Nyb2xsTGVmdCA9IGN1cnJlbnRMZWZ0ICsgZWFzZVByb2dyZXNzICogKG5ld0xlZnQgLSBjdXJyZW50TGVmdCk7XG5cbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA+IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wID49IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCAmJiBuZXdUb3AgPCBjdXJyZW50VG9wICYmIHNjcm9sbFRvcCA8PSBuZXdUb3ApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gbmV3VG9wO1xuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPiBjdXJyZW50TGVmdCAmJiBzY3JvbGxMZWZ0ID49IG5ld0xlZnQpIHtcbiAgICAgICAgZWwuc2Nyb2xsTGVmdCA9IG5ld0xlZnQ7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA8IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPD0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0ZVRvcCkgZWwuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgaWYgKGFuaW1hdGVMZWZ0KSBlbC5zY3JvbGxMZWZ0ID0gc2Nyb2xsTGVmdDtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9XG5cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH0pO1xufSAvLyBzY3JvbGxUb3AodG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjaykge1xuXG5cbmZ1bmN0aW9uIHNjcm9sbFRvcCgpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgdmFyIHRvcCA9IGFyZ3NbMF0sXG4gICAgICBkdXJhdGlvbiA9IGFyZ3NbMV0sXG4gICAgICBlYXNpbmcgPSBhcmdzWzJdLFxuICAgICAgY2FsbGJhY2sgPSBhcmdzWzNdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdG9wID0gYXJnc1swXTtcbiAgICBkdXJhdGlvbiA9IGFyZ3NbMV07XG4gICAgY2FsbGJhY2sgPSBhcmdzWzJdO1xuICAgIGVhc2luZyA9IGFyZ3NbM107XG4gIH1cblxuICB2YXIgZG9tID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRvcCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsVG9wO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyh1bmRlZmluZWQsIHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBzY3JvbGxMZWZ0KCkge1xuICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICB2YXIgbGVmdCA9IGFyZ3NbMF0sXG4gICAgICBkdXJhdGlvbiA9IGFyZ3NbMV0sXG4gICAgICBlYXNpbmcgPSBhcmdzWzJdLFxuICAgICAgY2FsbGJhY2sgPSBhcmdzWzNdO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMyAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbGVmdCA9IGFyZ3NbMF07XG4gICAgZHVyYXRpb24gPSBhcmdzWzFdO1xuICAgIGNhbGxiYWNrID0gYXJnc1syXTtcbiAgICBlYXNpbmcgPSBhcmdzWzNdO1xuICB9XG5cbiAgdmFyIGRvbSA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiBsZWZ0ID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb20ubGVuZ3RoID4gMCkgcmV0dXJuIGRvbVswXS5zY3JvbGxMZWZ0O1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGRvbS5zY3JvbGxUbyhsZWZ0LCB1bmRlZmluZWQsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0ZShpbml0aWFsUHJvcHMsIGluaXRpYWxQYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICB2YXIgZWxzID0gdGhpcztcbiAgdmFyIGEgPSB7XG4gICAgcHJvcHM6IE9iamVjdC5hc3NpZ24oe30sIGluaXRpYWxQcm9wcyksXG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHtcbiAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICBlYXNpbmc6ICdzd2luZycgLy8gb3IgJ2xpbmVhcidcblxuICAgICAgLyogQ2FsbGJhY2tzXG4gICAgICBiZWdpbihlbGVtZW50cylcbiAgICAgIGNvbXBsZXRlKGVsZW1lbnRzKVxuICAgICAgcHJvZ3Jlc3MoZWxlbWVudHMsIGNvbXBsZXRlLCByZW1haW5pbmcsIHN0YXJ0LCB0d2VlblZhbHVlKVxuICAgICAgKi9cblxuICAgIH0sIGluaXRpYWxQYXJhbXMpLFxuICAgIGVsZW1lbnRzOiBlbHMsXG4gICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICBxdWU6IFtdLFxuICAgIGVhc2luZ1Byb2dyZXNzOiBmdW5jdGlvbiBlYXNpbmdQcm9ncmVzcyhlYXNpbmcsIHByb2dyZXNzKSB7XG4gICAgICBpZiAoZWFzaW5nID09PSAnc3dpbmcnKSB7XG4gICAgICAgIHJldHVybiAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlYXNpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGVhc2luZyhwcm9ncmVzcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9ncmVzcztcbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICBpZiAoYS5mcmFtZUlkKSB7XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhLmZyYW1lSWQpO1xuICAgICAgfVxuXG4gICAgICBhLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgYS5lbGVtZW50cy5lYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgICBhLnF1ZSA9IFtdO1xuICAgIH0sXG4gICAgZG9uZTogZnVuY3Rpb24gZG9uZShjb21wbGV0ZSkge1xuICAgICAgYS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBlbDtcbiAgICAgICAgZGVsZXRlIGVsZW1lbnQuZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNvbXBsZXRlKSBjb21wbGV0ZShlbHMpO1xuXG4gICAgICBpZiAoYS5xdWUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcXVlID0gYS5xdWUuc2hpZnQoKTtcbiAgICAgICAgYS5hbmltYXRlKHF1ZVswXSwgcXVlWzFdKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFuaW1hdGU6IGZ1bmN0aW9uIGFuaW1hdGUocHJvcHMsIHBhcmFtcykge1xuICAgICAgaWYgKGEuYW5pbWF0aW5nKSB7XG4gICAgICAgIGEucXVlLnB1c2goW3Byb3BzLCBwYXJhbXNdKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbGVtZW50cyA9IFtdOyAvLyBEZWZpbmUgJiBDYWNoZSBJbml0aWFscyAmIFVuaXRzXG5cbiAgICAgIGEuZWxlbWVudHMuZWFjaChmdW5jdGlvbiAoZWwsIGluZGV4KSB7XG4gICAgICAgIHZhciBpbml0aWFsRnVsbFZhbHVlO1xuICAgICAgICB2YXIgaW5pdGlhbFZhbHVlO1xuICAgICAgICB2YXIgdW5pdDtcbiAgICAgICAgdmFyIGZpbmFsVmFsdWU7XG4gICAgICAgIHZhciBmaW5hbEZ1bGxWYWx1ZTtcbiAgICAgICAgaWYgKCFlbC5kb203QW5pbWF0ZUluc3RhbmNlKSBhLmVsZW1lbnRzW2luZGV4XS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgICAgICAgZWxlbWVudHNbaW5kZXhdID0ge1xuICAgICAgICAgIGNvbnRhaW5lcjogZWxcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICBpbml0aWFsRnVsbFZhbHVlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcCkucmVwbGFjZSgnLCcsICcuJyk7XG4gICAgICAgICAgaW5pdGlhbFZhbHVlID0gcGFyc2VGbG9hdChpbml0aWFsRnVsbFZhbHVlKTtcbiAgICAgICAgICB1bml0ID0gaW5pdGlhbEZ1bGxWYWx1ZS5yZXBsYWNlKGluaXRpYWxWYWx1ZSwgJycpO1xuICAgICAgICAgIGZpbmFsVmFsdWUgPSBwYXJzZUZsb2F0KHByb3BzW3Byb3BdKTtcbiAgICAgICAgICBmaW5hbEZ1bGxWYWx1ZSA9IHByb3BzW3Byb3BdICsgdW5pdDtcbiAgICAgICAgICBlbGVtZW50c1tpbmRleF1bcHJvcF0gPSB7XG4gICAgICAgICAgICBpbml0aWFsRnVsbFZhbHVlOiBpbml0aWFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgaW5pdGlhbFZhbHVlOiBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICB1bml0OiB1bml0LFxuICAgICAgICAgICAgZmluYWxWYWx1ZTogZmluYWxWYWx1ZSxcbiAgICAgICAgICAgIGZpbmFsRnVsbFZhbHVlOiBmaW5hbEZ1bGxWYWx1ZSxcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZTogaW5pdGlhbFZhbHVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHZhciBzdGFydFRpbWUgPSBudWxsO1xuICAgICAgdmFyIHRpbWU7XG4gICAgICB2YXIgZWxlbWVudHNEb25lID0gMDtcbiAgICAgIHZhciBwcm9wc0RvbmUgPSAwO1xuICAgICAgdmFyIGRvbmU7XG4gICAgICB2YXIgYmVnYW4gPSBmYWxzZTtcbiAgICAgIGEuYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciBwcm9ncmVzcztcbiAgICAgICAgdmFyIGVhc2VQcm9ncmVzczsgLy8gbGV0IGVsO1xuXG4gICAgICAgIGlmICghYmVnYW4pIHtcbiAgICAgICAgICBiZWdhbiA9IHRydWU7XG4gICAgICAgICAgaWYgKHBhcmFtcy5iZWdpbikgcGFyYW1zLmJlZ2luKGVscyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3MpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBwYXJhbXMucHJvZ3Jlc3MoZWxzLCBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKSwgc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uIC0gdGltZSA8IDAgPyAwIDogc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uIC0gdGltZSwgc3RhcnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgZWwgPSBlbGVtZW50O1xuICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgICAgICAgIGVhc2VQcm9ncmVzcyA9IGEuZWFzaW5nUHJvZ3Jlc3MocGFyYW1zLmVhc2luZywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgdmFyIF9lbCRwcm9wID0gZWxbcHJvcF0sXG4gICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gX2VsJHByb3AuaW5pdGlhbFZhbHVlLFxuICAgICAgICAgICAgICAgIGZpbmFsVmFsdWUgPSBfZWwkcHJvcC5maW5hbFZhbHVlLFxuICAgICAgICAgICAgICAgIHVuaXQgPSBfZWwkcHJvcC51bml0O1xuICAgICAgICAgICAgZWxbcHJvcF0uY3VycmVudFZhbHVlID0gaW5pdGlhbFZhbHVlICsgZWFzZVByb2dyZXNzICogKGZpbmFsVmFsdWUgLSBpbml0aWFsVmFsdWUpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGVsW3Byb3BdLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgICAgICAgaWYgKGZpbmFsVmFsdWUgPiBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlID49IGZpbmFsVmFsdWUgfHwgZmluYWxWYWx1ZSA8IGluaXRpYWxWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPD0gZmluYWxWYWx1ZSkge1xuICAgICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBmaW5hbFZhbHVlICsgdW5pdDtcbiAgICAgICAgICAgICAgcHJvcHNEb25lICs9IDE7XG5cbiAgICAgICAgICAgICAgaWYgKHByb3BzRG9uZSA9PT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVsLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnRzRG9uZSArPSAxO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRzRG9uZSA9PT0gZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgYS5kb25lKHBhcmFtcy5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWwuY29udGFpbmVyLnN0eWxlW3Byb3BdID0gY3VycmVudFZhbHVlICsgdW5pdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChkb25lKSByZXR1cm47IC8vIFRoZW4gY2FsbFxuXG4gICAgICAgIGEuZnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIH1cblxuICAgICAgYS5mcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICB9O1xuXG4gIGlmIChhLmVsZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBlbHM7XG4gIH1cblxuICB2YXIgYW5pbWF0ZUluc3RhbmNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYS5lbGVtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGFuaW1hdGVJbnN0YW5jZSA9IGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICB9IGVsc2UgYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmICghYW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuXG4gIGlmIChpbml0aWFsUHJvcHMgPT09ICdzdG9wJykge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgYW5pbWF0ZUluc3RhbmNlLmFuaW1hdGUoYS5wcm9wcywgYS5wYXJhbXMpO1xuICB9XG5cbiAgcmV0dXJuIGVscztcbn1cblxuZnVuY3Rpb24gc3RvcCgpIHtcbiAgdmFyIGVscyA9IHRoaXM7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoZWxzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlLnN0b3AoKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIG5vVHJpZ2dlciA9ICdyZXNpemUgc2Nyb2xsJy5zcGxpdCgnICcpO1xuXG5mdW5jdGlvbiBzaG9ydGN1dChuYW1lKSB7XG4gIGZ1bmN0aW9uIGV2ZW50SGFuZGxlcigpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChub1RyaWdnZXIuaW5kZXhPZihuYW1lKSA8IDApIHtcbiAgICAgICAgICBpZiAobmFtZSBpbiB0aGlzW2ldKSB0aGlzW2ldW25hbWVdKCk7ZWxzZSB7XG4gICAgICAgICAgICAkKHRoaXNbaV0pLnRyaWdnZXIobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9uLmFwcGx5KHRoaXMsIFtuYW1lXS5jb25jYXQoYXJncykpO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50SGFuZGxlcjtcbn1cblxudmFyIGNsaWNrID0gc2hvcnRjdXQoJ2NsaWNrJyk7XG52YXIgYmx1ciA9IHNob3J0Y3V0KCdibHVyJyk7XG52YXIgZm9jdXMgPSBzaG9ydGN1dCgnZm9jdXMnKTtcbnZhciBmb2N1c2luID0gc2hvcnRjdXQoJ2ZvY3VzaW4nKTtcbnZhciBmb2N1c291dCA9IHNob3J0Y3V0KCdmb2N1c291dCcpO1xudmFyIGtleXVwID0gc2hvcnRjdXQoJ2tleXVwJyk7XG52YXIga2V5ZG93biA9IHNob3J0Y3V0KCdrZXlkb3duJyk7XG52YXIga2V5cHJlc3MgPSBzaG9ydGN1dCgna2V5cHJlc3MnKTtcbnZhciBzdWJtaXQgPSBzaG9ydGN1dCgnc3VibWl0Jyk7XG52YXIgY2hhbmdlID0gc2hvcnRjdXQoJ2NoYW5nZScpO1xudmFyIG1vdXNlZG93biA9IHNob3J0Y3V0KCdtb3VzZWRvd24nKTtcbnZhciBtb3VzZW1vdmUgPSBzaG9ydGN1dCgnbW91c2Vtb3ZlJyk7XG52YXIgbW91c2V1cCA9IHNob3J0Y3V0KCdtb3VzZXVwJyk7XG52YXIgbW91c2VlbnRlciA9IHNob3J0Y3V0KCdtb3VzZWVudGVyJyk7XG52YXIgbW91c2VsZWF2ZSA9IHNob3J0Y3V0KCdtb3VzZWxlYXZlJyk7XG52YXIgbW91c2VvdXQgPSBzaG9ydGN1dCgnbW91c2VvdXQnKTtcbnZhciBtb3VzZW92ZXIgPSBzaG9ydGN1dCgnbW91c2VvdmVyJyk7XG52YXIgdG91Y2hzdGFydCA9IHNob3J0Y3V0KCd0b3VjaHN0YXJ0Jyk7XG52YXIgdG91Y2hlbmQgPSBzaG9ydGN1dCgndG91Y2hlbmQnKTtcbnZhciB0b3VjaG1vdmUgPSBzaG9ydGN1dCgndG91Y2htb3ZlJyk7XG52YXIgcmVzaXplID0gc2hvcnRjdXQoJ3Jlc2l6ZScpO1xudmFyIHNjcm9sbCA9IHNob3J0Y3V0KCdzY3JvbGwnKTtcblxuZXhwb3J0IGRlZmF1bHQgJDtcbmV4cG9ydCB7ICQsIGFkZCwgYWRkQ2xhc3MsIGFuaW1hdGUsIGFuaW1hdGlvbkVuZCwgYXBwZW5kLCBhcHBlbmRUbywgYXR0ciwgYmx1ciwgY2hhbmdlLCBjaGlsZHJlbiwgY2xpY2ssIGNsb3Nlc3QsIGNzcywgZGF0YSwgZGF0YXNldCwgZGV0YWNoLCBlYWNoLCBlbXB0eSwgZXEsIGZpbHRlciwgZmluZCwgZm9jdXMsIGZvY3VzaW4sIGZvY3Vzb3V0LCBoYXNDbGFzcywgaGVpZ2h0LCBoaWRlLCBodG1sLCBpbmRleCwgaW5zZXJ0QWZ0ZXIsIGluc2VydEJlZm9yZSwgaXMsIGtleWRvd24sIGtleXByZXNzLCBrZXl1cCwgbW91c2Vkb3duLCBtb3VzZWVudGVyLCBtb3VzZWxlYXZlLCBtb3VzZW1vdmUsIG1vdXNlb3V0LCBtb3VzZW92ZXIsIG1vdXNldXAsIG5leHQsIG5leHRBbGwsIG9mZiwgb2Zmc2V0LCBvbiwgb25jZSwgb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGgsIHBhcmVudCwgcGFyZW50cywgcHJlcGVuZCwgcHJlcGVuZFRvLCBwcmV2LCBwcmV2QWxsLCBwcm9wLCByZW1vdmUsIHJlbW92ZUF0dHIsIHJlbW92ZUNsYXNzLCByZW1vdmVEYXRhLCByZXNpemUsIHNjcm9sbCwgc2Nyb2xsTGVmdCwgc2Nyb2xsVG8sIHNjcm9sbFRvcCwgc2hvdywgc2libGluZ3MsIHN0b3AsIHN0eWxlcywgc3VibWl0LCB0ZXh0LCB0b2dnbGVDbGFzcywgdG91Y2hlbmQsIHRvdWNobW92ZSwgdG91Y2hzdGFydCwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uLCB0cmFuc2l0aW9uRW5kLCB0cmlnZ2VyLCB2YWwsIHZhbHVlLCB3aWR0aCB9O1xuIiwiaW1wb3J0IHtcbiAgJCxcbiAgYWRkQ2xhc3MsXG4gIHJlbW92ZUNsYXNzLFxuICBoYXNDbGFzcyxcbiAgdG9nZ2xlQ2xhc3MsXG4gIGF0dHIsXG4gIHJlbW92ZUF0dHIsXG4gIHRyYW5zZm9ybSxcbiAgdHJhbnNpdGlvbixcbiAgb24sXG4gIG9mZixcbiAgdHJpZ2dlcixcbiAgdHJhbnNpdGlvbkVuZCxcbiAgb3V0ZXJXaWR0aCxcbiAgb3V0ZXJIZWlnaHQsXG4gIHN0eWxlcyxcbiAgb2Zmc2V0LFxuICBjc3MsXG4gIGVhY2gsXG4gIGh0bWwsXG4gIHRleHQsXG4gIGlzLFxuICBpbmRleCxcbiAgZXEsXG4gIGFwcGVuZCxcbiAgcHJlcGVuZCxcbiAgbmV4dCxcbiAgbmV4dEFsbCxcbiAgcHJldixcbiAgcHJldkFsbCxcbiAgcGFyZW50LFxuICBwYXJlbnRzLFxuICBjbG9zZXN0LFxuICBmaW5kLFxuICBjaGlsZHJlbixcbiAgZmlsdGVyLFxuICByZW1vdmUsXG59IGZyb20gJ2RvbTcnO1xuXG5jb25zdCBNZXRob2RzID0ge1xuICBhZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3MsXG4gIGhhc0NsYXNzLFxuICB0b2dnbGVDbGFzcyxcbiAgYXR0cixcbiAgcmVtb3ZlQXR0cixcbiAgdHJhbnNmb3JtLFxuICB0cmFuc2l0aW9uLFxuICBvbixcbiAgb2ZmLFxuICB0cmlnZ2VyLFxuICB0cmFuc2l0aW9uRW5kLFxuICBvdXRlcldpZHRoLFxuICBvdXRlckhlaWdodCxcbiAgc3R5bGVzLFxuICBvZmZzZXQsXG4gIGNzcyxcbiAgZWFjaCxcbiAgaHRtbCxcbiAgdGV4dCxcbiAgaXMsXG4gIGluZGV4LFxuICBlcSxcbiAgYXBwZW5kLFxuICBwcmVwZW5kLFxuICBuZXh0LFxuICBuZXh0QWxsLFxuICBwcmV2LFxuICBwcmV2QWxsLFxuICBwYXJlbnQsXG4gIHBhcmVudHMsXG4gIGNsb3Nlc3QsXG4gIGZpbmQsXG4gIGNoaWxkcmVuLFxuICBmaWx0ZXIsXG4gIHJlbW92ZSxcbn07XG5cbk9iamVjdC5rZXlzKE1ldGhvZHMpLmZvckVhY2goKG1ldGhvZE5hbWUpID0+IHtcbiAgJC5mblttZXRob2ROYW1lXSA9IE1ldGhvZHNbbWV0aG9kTmFtZV07XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgJDtcbiIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcblxubGV0IHN1cHBvcnQ7XG5cbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuXG4gIHJldHVybiB7XG4gICAgdG91Y2g6ICEhKFxuICAgICAgJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8XG4gICAgICAod2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaClcbiAgICApLFxuXG4gICAgcG9pbnRlckV2ZW50czpcbiAgICAgICEhd2luZG93LlBvaW50ZXJFdmVudCAmJlxuICAgICAgJ21heFRvdWNoUG9pbnRzJyBpbiB3aW5kb3cubmF2aWdhdG9yICYmXG4gICAgICB3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID49IDAsXG5cbiAgICBvYnNlcnZlcjogKGZ1bmN0aW9uIGNoZWNrT2JzZXJ2ZXIoKSB7XG4gICAgICByZXR1cm4gJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93O1xuICAgIH0pKCksXG5cbiAgICBwYXNzaXZlTGlzdGVuZXI6IChmdW5jdGlvbiBjaGVja1Bhc3NpdmVMaXN0ZW5lcigpIHtcbiAgICAgIGxldCBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUxpc3RlbmVyJywgbnVsbCwgb3B0cyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIE5vIHN1cHBvcnRcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfSkoKSxcblxuICAgIGdlc3R1cmVzOiAoZnVuY3Rpb24gY2hlY2tHZXN0dXJlcygpIHtcbiAgICAgIHJldHVybiAnb25nZXN0dXJlc3RhcnQnIGluIHdpbmRvdztcbiAgICB9KSgpLFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICBpZiAoIXN1cHBvcnQpIHtcbiAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgfVxuICByZXR1cm4gc3VwcG9ydDtcbn1cblxuZXhwb3J0IHsgZ2V0U3VwcG9ydCB9O1xuIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBnZXRTdXBwb3J0IH0gZnJvbSAnLi9nZXQtc3VwcG9ydCc7XG5cbmxldCBkZXZpY2U7XG5cbmZ1bmN0aW9uIGNhbGNEZXZpY2UoeyB1c2VyQWdlbnQgfSA9IHt9KSB7XG4gIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIGNvbnN0IHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlLFxuICB9O1xuXG4gIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG5cbiAgY29uc3QgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICBjb25zdCBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgY29uc3Qgd2luZG93cyA9IHBsYXRmb3JtID09PSAnV2luMzInO1xuICBsZXQgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJztcblxuICAvLyBpUGFkT3MgMTMgZml4XG4gIGNvbnN0IGlQYWRTY3JlZW5zID0gW1xuICAgICcxMDI0eDEzNjYnLFxuICAgICcxMzY2eDEwMjQnLFxuICAgICc4MzR4MTE5NCcsXG4gICAgJzExOTR4ODM0JyxcbiAgICAnODM0eDExMTInLFxuICAgICcxMTEyeDgzNCcsXG4gICAgJzc2OHgxMDI0JyxcbiAgICAnMTAyNHg3NjgnLFxuICBdO1xuICBpZiAoXG4gICAgIWlwYWQgJiZcbiAgICBtYWNvcyAmJlxuICAgIHN1cHBvcnQudG91Y2ggJiZcbiAgICBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwXG4gICkge1xuICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICBtYWNvcyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQW5kcm9pZFxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn1cblxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcyA9IHt9KSB7XG4gIGlmICghZGV2aWNlKSB7XG4gICAgZGV2aWNlID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICB9XG4gIHJldHVybiBkZXZpY2U7XG59XG5cbmV4cG9ydCB7IGdldERldmljZSB9O1xuIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5cbmxldCBicm93c2VyO1xuXG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzRWRnZTogISF3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZS9nKSxcbiAgICBpc1NhZmFyaTogaXNTYWZhcmkoKSxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG4gIHJldHVybiBicm93c2VyO1xufVxuXG5leHBvcnQgeyBnZXRCcm93c2VyIH07XG4iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkgPSAwKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzID0gJ3gnKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuXG4gIGNvbnN0IGN1clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuXG4gIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtXG4gICAgICAgIC5zcGxpdCgnLCAnKVxuICAgICAgICAubWFwKChhKSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKVxuICAgICAgICAuam9pbignLCAnKTtcbiAgICB9XG4gICAgLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9XG4gICAgICBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHxcbiAgICAgIGN1clN0eWxlLk9UcmFuc2Zvcm0gfHxcbiAgICAgIGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8XG4gICAgICBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fFxuICAgICAgY3VyU3R5bGUudHJhbnNmb3JtIHx8XG4gICAgICBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cblxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBvLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBleHRlbmQoLi4uYXJncykge1xuICBjb25zdCB0byA9IE9iamVjdChhcmdzWzBdKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbmV4dFNvdXJjZSA9IGFyZ3NbaV07XG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIGJpbmRNb2R1bGVNZXRob2RzKGluc3RhbmNlLCBvYmopIHtcbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoaXNPYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICBPYmplY3Qua2V5cyhvYmpba2V5XSkuZm9yRWFjaCgoc3ViS2V5KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV1bc3ViS2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9ialtrZXldW3N1YktleV0gPSBvYmpba2V5XVtzdWJLZXldLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaW5zdGFuY2Vba2V5XSA9IG9ialtrZXldO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgZGVsZXRlUHJvcHMsIG5leHRUaWNrLCBub3csIGdldFRyYW5zbGF0ZSwgaXNPYmplY3QsIGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMgfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHsgcGFyYW1zLCBlbCB9ID0gc3dpcGVyO1xuXG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9XG5cbiAgLy8gU2F2ZSBsb2Nrc1xuICBjb25zdCB7IGFsbG93U2xpZGVOZXh0LCBhbGxvd1NsaWRlUHJldiwgc25hcEdyaWQgfSA9IHN3aXBlcjtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuXG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBpZiAoXG4gICAgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJlxuICAgIHN3aXBlci5pc0VuZCAmJlxuICAgICFzd2lwZXIuaXNCZWdpbm5pbmcgJiZcbiAgICAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlc1xuICApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgfVxuXG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgfVxuICAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcblxuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5pbXBvcnQgb25Ub3VjaFN0YXJ0IGZyb20gJy4vb25Ub3VjaFN0YXJ0JztcbmltcG9ydCBvblRvdWNoTW92ZSBmcm9tICcuL29uVG91Y2hNb3ZlJztcbmltcG9ydCBvblRvdWNoRW5kIGZyb20gJy4vb25Ub3VjaEVuZCc7XG5pbXBvcnQgb25SZXNpemUgZnJvbSAnLi9vblJlc2l6ZSc7XG5pbXBvcnQgb25DbGljayBmcm9tICcuL29uQ2xpY2snO1xuaW1wb3J0IG9uU2Nyb2xsIGZyb20gJy4vb25TY3JvbGwnO1xuXG5sZXQgZHVtbXlFdmVudEF0dGFjaGVkID0gZmFsc2U7XG5mdW5jdGlvbiBkdW1teUV2ZW50TGlzdGVuZXIoKSB7fVxuXG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgeyBwYXJhbXMsIHRvdWNoRXZlbnRzLCBlbCwgd3JhcHBlckVsLCBkZXZpY2UsIHN1cHBvcnQgfSA9IHN3aXBlcjtcblxuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cblxuICBzd2lwZXIub25DbGljayA9IG9uQ2xpY2suYmluZChzd2lwZXIpO1xuXG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIGlmICghc3VwcG9ydC50b3VjaCAmJiBzdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzdXBwb3J0LnRvdWNoKSB7XG4gICAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPVxuICAgICAgICB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzXG4gICAgICAgICAgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH1cbiAgICAgICAgICA6IGZhbHNlO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIHRvdWNoRXZlbnRzLm1vdmUsXG4gICAgICAgIHN3aXBlci5vblRvdWNoTW92ZSxcbiAgICAgICAgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlIH0gOiBjYXB0dXJlLFxuICAgICAgKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5jYW5jZWwsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKCFkdW1teUV2ZW50QXR0YWNoZWQpIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7XG4gICAgICAgIGR1bW15RXZlbnRBdHRhY2hlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhZGV2aWNlLmlvcyAmJiAhZGV2aWNlLmFuZHJvaWQpIHx8XG4gICAgICAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIXN1cHBvcnQudG91Y2ggJiYgZGV2aWNlLmlvcylcbiAgICApIHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIGlmIChwYXJhbXMudXBkYXRlT25XaW5kb3dSZXNpemUpIHtcbiAgICBzd2lwZXIub24oXG4gICAgICBkZXZpY2UuaW9zIHx8IGRldmljZS5hbmRyb2lkXG4gICAgICAgID8gJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZSBvYnNlcnZlclVwZGF0ZSdcbiAgICAgICAgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJyxcbiAgICAgIG9uUmVzaXplLFxuICAgICAgdHJ1ZSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5vbignb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG5cbiAgY29uc3QgeyBwYXJhbXMsIHRvdWNoRXZlbnRzLCBlbCwgd3JhcHBlckVsLCBkZXZpY2UsIHN1cHBvcnQgfSA9IHN3aXBlcjtcblxuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuXG4gIC8vIFRvdWNoIEV2ZW50c1xuICBpZiAoIXN1cHBvcnQudG91Y2ggJiYgc3VwcG9ydC5wb2ludGVyRXZlbnRzKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3VwcG9ydC50b3VjaCkge1xuICAgICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID1cbiAgICAgICAgdG91Y2hFdmVudHMuc3RhcnQgPT09ICdvblRvdWNoU3RhcnQnICYmIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzXG4gICAgICAgICAgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH1cbiAgICAgICAgICA6IGZhbHNlO1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIGlmICh0b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5jYW5jZWwsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoXG4gICAgICAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIWRldmljZS5pb3MgJiYgIWRldmljZS5hbmRyb2lkKSB8fFxuICAgICAgKHBhcmFtcy5zaW11bGF0ZVRvdWNoICYmICFzdXBwb3J0LnRvdWNoICYmIGRldmljZS5pb3MpXG4gICAgKSB7XG4gICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3dpcGVyLm9uU2Nyb2xsKTtcbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIHN3aXBlci5vZmYoXG4gICAgZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZFxuICAgICAgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJ1xuICAgICAgOiAncmVzaXplIG9ic2VydmVyVXBkYXRlJyxcbiAgICBvblJlc2l6ZSxcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50cyxcbn07XG4iLCJmdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG4gIGNvbnN0IGxhc3RTbGlkZVBvc2l0aW9uID1cbiAgICBzd2lwZXIuc2xpZGVzLmxlbmd0aCA+IDAgJiZcbiAgICBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlICtcbiAgICAgIHBhcmFtcy5zcGFjZUJldHdlZW4gKiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKSArXG4gICAgICBzd2lwZXIuc2xpZGVzWzBdLm9mZnNldFdpZHRoICogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgJiYgcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyICYmIGxhc3RTbGlkZVBvc2l0aW9uKSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gbGFzdFNsaWRlUG9zaXRpb24gPD0gc3dpcGVyLnNpemU7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuXG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9ICFzd2lwZXIuaXNMb2NrZWQ7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG5cbiAgLy8gZXZlbnRzXG4gIGlmICh3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuXG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24pIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgY2hlY2tPdmVyZmxvdyB9O1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcblxuICAvLyBPdmVycmlkZXNcbiAgd2lkdGg6IG51bGwsXG4gIGhlaWdodDogbnVsbCxcblxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcblxuICAvLyBUbyBzdXBwb3J0IGlPUydzIHN3aXBlLXRvLWdvLWJhY2sgZ2VzdHVyZSAod2hlbiBiZWluZyB1c2VkIGluLWFwcCkuXG4gIGVkZ2VTd2lwZURldGVjdGlvbjogZmFsc2UsXG4gIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG5cbiAgLy8gRnJlZSBtb2RlXG4gIGZyZWVNb2RlOiBmYWxzZSxcbiAgZnJlZU1vZGVNb21lbnR1bTogdHJ1ZSxcbiAgZnJlZU1vZGVNb21lbnR1bVJhdGlvOiAxLFxuICBmcmVlTW9kZU1vbWVudHVtQm91bmNlOiB0cnVlLFxuICBmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gIGZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLFxuICBmcmVlTW9kZVN0aWNreTogZmFsc2UsXG4gIGZyZWVNb2RlTWluaW11bVZlbG9jaXR5OiAwLjAyLFxuXG4gIC8vIEF1dG9oZWlnaHRcbiAgYXV0b0hlaWdodDogZmFsc2UsXG5cbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuXG4gIC8vIEVmZmVjdHNcbiAgZWZmZWN0OiAnc2xpZGUnLCAvLyAnc2xpZGUnIG9yICdmYWRlJyBvciAnY3ViZScgb3IgJ2NvdmVyZmxvdycgb3IgJ2ZsaXAnXG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgYnJlYWtwb2ludHM6IHVuZGVmaW5lZCxcblxuICAvLyBTbGlkZXMgZ3JpZFxuICBzcGFjZUJldHdlZW46IDAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgc2xpZGVzUGVyQ29sdW1uRmlsbDogJ2NvbHVtbicsXG4gIHNsaWRlc1Blckdyb3VwOiAxLFxuICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLCAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IGZhbHNlLFxuXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuXG4gIC8vIFRvdWNoZXNcbiAgdG91Y2hSYXRpbzogMSxcbiAgdG91Y2hBbmdsZTogNDUsXG4gIHNpbXVsYXRlVG91Y2g6IHRydWUsXG4gIHNob3J0U3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzOiB0cnVlLFxuICBsb25nU3dpcGVzUmF0aW86IDAuNSxcbiAgbG9uZ1N3aXBlc01zOiAzMDAsXG4gIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgYWxsb3dUb3VjaE1vdmU6IHRydWUsXG4gIHRocmVzaG9sZDogMCxcbiAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiBmYWxzZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IGZhbHNlLFxuXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcblxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcblxuICAvLyBJbWFnZXNcbiAgcHJlbG9hZEltYWdlczogdHJ1ZSxcbiAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcblxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcGVkU2xpZGVzOiBudWxsLFxuICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcbiAgbG9vcFByZXZlbnRzU2xpZGU6IHRydWUsXG5cbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLCAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcblxuICAvLyBQYXNzaXZlIExpc3RlbmVyc1xuICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuXG4gIC8vIE5TXG4gIGNvbnRhaW5lck1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLScsIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVCbGFua0NsYXNzOiAnc3dpcGVyLXNsaWRlLWludmlzaWJsZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRHVwbGljYXRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlRHVwbGljYXRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1uZXh0JyxcbiAgc2xpZGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtcHJldicsXG4gIHNsaWRlRHVwbGljYXRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG5cbiAgLy8gSW50ZXJuYWxzXG4gIF9lbWl0Q2xhc3NlczogZmFsc2UsXG59O1xuIiwiLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3csIGRlbGV0ZVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydCB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1zdXBwb3J0JztcbmltcG9ydCB7IGdldERldmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1kZXZpY2UnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlciB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1icm93c2VyJztcblxuaW1wb3J0IG1vZHVsYXIgZnJvbSAnLi9tb2R1bGFyJztcbmltcG9ydCBldmVudHNFbWl0dGVyIGZyb20gJy4vZXZlbnRzLWVtaXR0ZXInO1xuXG5pbXBvcnQgdXBkYXRlIGZyb20gJy4vdXBkYXRlL2luZGV4JztcbmltcG9ydCB0cmFuc2xhdGUgZnJvbSAnLi90cmFuc2xhdGUvaW5kZXgnO1xuaW1wb3J0IHRyYW5zaXRpb24gZnJvbSAnLi90cmFuc2l0aW9uL2luZGV4JztcbmltcG9ydCBzbGlkZSBmcm9tICcuL3NsaWRlL2luZGV4JztcbmltcG9ydCBsb29wIGZyb20gJy4vbG9vcC9pbmRleCc7XG5pbXBvcnQgZ3JhYkN1cnNvciBmcm9tICcuL2dyYWItY3Vyc29yL2luZGV4JztcbmltcG9ydCBtYW5pcHVsYXRpb24gZnJvbSAnLi9tYW5pcHVsYXRpb24vaW5kZXgnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL2V2ZW50cy9pbmRleCc7XG5pbXBvcnQgYnJlYWtwb2ludHMgZnJvbSAnLi9icmVha3BvaW50cy9pbmRleCc7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL2NsYXNzZXMvaW5kZXgnO1xuaW1wb3J0IGltYWdlcyBmcm9tICcuL2ltYWdlcy9pbmRleCc7XG5pbXBvcnQgY2hlY2tPdmVyZmxvdyBmcm9tICcuL2NoZWNrLW92ZXJmbG93L2luZGV4JztcblxuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMnO1xuXG5jb25zdCBwcm90b3R5cGVzID0ge1xuICBtb2R1bGFyLFxuICBldmVudHNFbWl0dGVyLFxuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIG1hbmlwdWxhdGlvbixcbiAgZXZlbnRzLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdyxcbiAgY2xhc3NlcyxcbiAgaW1hZ2VzLFxufTtcblxuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuXG5jbGFzcyBTd2lwZXIge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG5cbiAgICBwYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgaWYgKGVsICYmICFwYXJhbXMuZWwpIHBhcmFtcy5lbCA9IGVsO1xuXG4gICAgLy8gU3dpcGVyIEluc3RhbmNlXG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHsgdXNlckFnZW50OiBwYXJhbXMudXNlckFnZW50IH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuXG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2goKHByb3RvdHlwZUdyb3VwKSA9PiB7XG4gICAgICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaCgocHJvdG9NZXRob2QpID0+IHtcbiAgICAgICAgaWYgKCFTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSkge1xuICAgICAgICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLm1vZHVsZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2lwZXIubW9kdWxlcyA9IHt9O1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIubW9kdWxlcykuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbW9kdWxlID0gc3dpcGVyLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhtb2R1bGUucGFyYW1zKVswXTtcbiAgICAgICAgY29uc3QgbW9kdWxlUGFyYW1zID0gbW9kdWxlLnBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHJldHVybjtcbiAgICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7IGVuYWJsZWQ6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKVxuICAgICAgICApIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cyk7XG4gICAgc3dpcGVyLnVzZVBhcmFtcyhzd2lwZXJQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIERvbSBsaWJcbiAgICBzd2lwZXIuJCA9ICQ7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgY29uc3QgJGVsID0gJChzd2lwZXIucGFyYW1zLmVsKTtcbiAgICBlbCA9ICRlbFswXTtcblxuICAgIGlmICghZWwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgaWYgKCRlbC5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBzd2lwZXJzID0gW107XG4gICAgICAkZWwuZWFjaCgoY29udGFpbmVyRWwpID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHsgZWw6IGNvbnRhaW5lckVsIH0pO1xuICAgICAgICBzd2lwZXJzLnB1c2gobmV3IFN3aXBlcihuZXdQYXJhbXMpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN3aXBlcnM7XG4gICAgfVxuXG4gICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuXG4gICAgLy8gRmluZCBXcmFwcGVyXG4gICAgbGV0ICR3cmFwcGVyRWw7XG4gICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAkd3JhcHBlckVsID0gJChlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzfWApKTtcbiAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAkd3JhcHBlckVsLmNoaWxkcmVuID0gKG9wdGlvbnMpID0+ICRlbC5jaGlsZHJlbihvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbCA9ICRlbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3N9YCk7XG4gICAgfVxuICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICAkZWwsXG4gICAgICBlbCxcbiAgICAgICR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG5cbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogJCgpLFxuICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICBzbmFwR3JpZDogW10sXG4gICAgICBzbGlkZXNTaXplc0dyaWQ6IFtdLFxuXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6XG4gICAgICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiZcbiAgICAgICAgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCAkZWwuY3NzKCdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6ICR3cmFwcGVyRWwuY3NzKCdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCcsXG5cbiAgICAgIC8vIEluZGV4ZXNcbiAgICAgIGFjdGl2ZUluZGV4OiAwLFxuICAgICAgcmVhbEluZGV4OiAwLFxuXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG5cbiAgICAgIC8vIFByb3BzXG4gICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICBhbmltYXRpbmc6IGZhbHNlLFxuXG4gICAgICAvLyBMb2Nrc1xuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcblxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50czogKGZ1bmN0aW9uIHRvdWNoRXZlbnRzKCkge1xuICAgICAgICBjb25zdCB0b3VjaCA9IFsndG91Y2hzdGFydCcsICd0b3VjaG1vdmUnLCAndG91Y2hlbmQnLCAndG91Y2hjYW5jZWwnXTtcbiAgICAgICAgbGV0IGRlc2t0b3AgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCddO1xuICAgICAgICBpZiAoc3dpcGVyLnN1cHBvcnQucG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c1RvdWNoID0ge1xuICAgICAgICAgIHN0YXJ0OiB0b3VjaFswXSxcbiAgICAgICAgICBtb3ZlOiB0b3VjaFsxXSxcbiAgICAgICAgICBlbmQ6IHRvdWNoWzJdLFxuICAgICAgICAgIGNhbmNlbDogdG91Y2hbM10sXG4gICAgICAgIH07XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7XG4gICAgICAgICAgc3RhcnQ6IGRlc2t0b3BbMF0sXG4gICAgICAgICAgbW92ZTogZGVza3RvcFsxXSxcbiAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoXG4gICAgICAgICAgPyBzd2lwZXIudG91Y2hFdmVudHNUb3VjaFxuICAgICAgICAgIDogc3dpcGVyLnRvdWNoRXZlbnRzRGVza3RvcDtcbiAgICAgIH0pKCksXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvcm1FbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgIGxhc3RDbGlja1RpbWU6IG5vdygpLFxuICAgICAgICBjbGlja1RpbWVvdXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICB2ZWxvY2l0aWVzOiBbXSxcbiAgICAgICAgYWxsb3dNb21lbnR1bUJvdW5jZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgIH0sXG5cbiAgICAgIC8vIENsaWNrc1xuICAgICAgYWxsb3dDbGljazogdHJ1ZSxcblxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG5cbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMCxcbiAgICAgIH0sXG5cbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMCxcbiAgICB9KTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHN3aXBlci51c2VNb2R1bGVzKCk7XG5cbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgLy8gSW5pdFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cblxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKChjbGFzc05hbWUpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXItY29udGFpbmVyJykgPT09IDAgfHxcbiAgICAgICAgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMFxuICAgICAgKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbGFzc2VzLmpvaW4oJyAnKSk7XG4gIH1cblxuICBlbWl0U2xpZGVzQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZXMuZWFjaCgoc2xpZGVFbCkgPT4ge1xuICAgICAgY29uc3QgY2xhc3NlcyA9IHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKChjbGFzc05hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHxcbiAgICAgICAgICBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpID09PSAwXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzZXMuam9pbignICcpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBwYXJhbXMsIHNsaWRlcywgc2xpZGVzR3JpZCwgc2l6ZTogc3dpcGVyU2l6ZSwgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcHY7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3QgeyBzbmFwR3JpZCwgcGFyYW1zIH0gPSBzd2lwZXI7XG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKFxuICAgICAgICBNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSxcbiAgICAgICAgc3dpcGVyLm1pblRyYW5zbGF0ZSgpLFxuICAgICAgKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zbGF0ZWQ7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJlxuICAgICAgICBzd2lwZXIuaXNFbmQgJiZcbiAgICAgICAgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgICAgICkge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbiB8fFxuICAgICAgKG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJylcbiAgICApIHtcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuXG4gICAgc3dpcGVyLiRlbFxuICAgICAgLnJlbW92ZUNsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YClcbiAgICAgIC5hZGRDbGFzcyhgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG5cbiAgICBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9IG5ld0RpcmVjdGlvbjtcblxuICAgIHN3aXBlci5zbGlkZXMuZWFjaCgoc2xpZGVFbCkgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3dpcGVyLmVtaXQoJ2NoYW5nZURpcmVjdGlvbicpO1xuICAgIGlmIChuZWVkVXBkYXRlKSBzd2lwZXIudXBkYXRlKCk7XG5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcblxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7XG5cbiAgICAvLyBTZXQgYnJlYWtwb2ludFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTtcblxuICAgIC8vIENyZWF0ZSBsb29wXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgc2l6ZVxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG5cbiAgICAvLyBVcGRhdGUgc2xpZGVzXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgIHN3aXBlci5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgfVxuXG4gICAgLy8gU2xpZGUgVG8gSW5pdGlhbCBTbGlkZVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKFxuICAgICAgICBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci5sb29wZWRTbGlkZXMsXG4gICAgICAgIDAsXG4gICAgICAgIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIC8vIEVtaXRcbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICB9XG5cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSA9IHRydWUsIGNsZWFuU3R5bGVzID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBwYXJhbXMsICRlbCwgJHdyYXBwZXJFbCwgc2xpZGVzIH0gPSBzd2lwZXI7XG5cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8vIERldGFjaCBldmVudHNcbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAvLyBEZXN0cm95IGxvb3BcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIENsZWFudXAgc3R5bGVzXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgJGVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAkd3JhcHBlckVsLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsXG4gICAgICAgICAgICAgIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLFxuICAgICAgICAgICAgICBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsXG4gICAgICAgICAgICAgIHBhcmFtcy5zbGlkZVByZXZDbGFzcyxcbiAgICAgICAgICAgIF0uam9pbignICcpLFxuICAgICAgICAgIClcbiAgICAgICAgICAucmVtb3ZlQXR0cignc3R5bGUnKVxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdkZXN0cm95Jyk7XG5cbiAgICAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcblxuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci4kZWxbMF0uc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG5cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG5cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cblxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2R1bGUpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUubW9kdWxlcykgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzID0ge307XG4gICAgY29uc3QgbmFtZSA9IG1vZHVsZS5uYW1lIHx8IGAke09iamVjdC5rZXlzKFN3aXBlci5wcm90b3R5cGUubW9kdWxlcykubGVuZ3RofV8ke25vdygpfWA7XG4gICAgU3dpcGVyLnByb3RvdHlwZS5tb2R1bGVzW25hbWVdID0gbW9kdWxlO1xuICB9XG5cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaCgobSkgPT4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXBlcjtcbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB1c2VQYXJhbXMoaW5zdGFuY2VQYXJhbXMpIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIC8vIEV4dGVuZCBwYXJhbXNcbiAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgIGV4dGVuZChpbnN0YW5jZVBhcmFtcywgbW9kdWxlLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgdXNlTW9kdWxlcyhtb2R1bGVzUGFyYW1zID0ge30pIHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXM7XG4gICAgaWYgKCFpbnN0YW5jZS5tb2R1bGVzKSByZXR1cm47XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIGNvbnN0IG1vZHVsZVBhcmFtcyA9IG1vZHVsZXNQYXJhbXNbbW9kdWxlTmFtZV0gfHwge307XG5cbiAgICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICAgIGlmIChtb2R1bGUub24gJiYgaW5zdGFuY2Uub24pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLm9uKS5mb3JFYWNoKChtb2R1bGVFdmVudE5hbWUpID0+IHtcbiAgICAgICAgICBpbnN0YW5jZS5vbihtb2R1bGVFdmVudE5hbWUsIG1vZHVsZS5vblttb2R1bGVFdmVudE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1vZHVsZSBjcmVhdGUgY2FsbGJhY2tcbiAgICAgIGlmIChtb2R1bGUuY3JlYXRlKSB7XG4gICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcblxuICBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG5cbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG5cbiAgb2ZmQW55KGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuXG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8XG4gICAgICAgICAgICAoZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG5cbiAgZW1pdCguLi5hcmdzKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgbGV0IGV2ZW50cztcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGV4dDtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcblxuICAgIGV2ZW50c0FycmF5LmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIpID0+IHtcbiAgICAgICAgICBoYW5kbGVycy5wdXNoKGV2ZW50SGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKChldmVudEhhbmRsZXIpID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxufTtcbiIsImltcG9ydCB1cGRhdGVTaXplIGZyb20gJy4vdXBkYXRlU2l6ZSc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzIGZyb20gJy4vdXBkYXRlU2xpZGVzJztcbmltcG9ydCB1cGRhdGVBdXRvSGVpZ2h0IGZyb20gJy4vdXBkYXRlQXV0b0hlaWdodCc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzT2Zmc2V0IGZyb20gJy4vdXBkYXRlU2xpZGVzT2Zmc2V0JztcbmltcG9ydCB1cGRhdGVTbGlkZXNQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVNsaWRlc1Byb2dyZXNzJztcbmltcG9ydCB1cGRhdGVQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVByb2dyZXNzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNDbGFzc2VzIGZyb20gJy4vdXBkYXRlU2xpZGVzQ2xhc3Nlcyc7XG5pbXBvcnQgdXBkYXRlQWN0aXZlSW5kZXggZnJvbSAnLi91cGRhdGVBY3RpdmVJbmRleCc7XG5pbXBvcnQgdXBkYXRlQ2xpY2tlZFNsaWRlIGZyb20gJy4vdXBkYXRlQ2xpY2tlZFNsaWRlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICB1cGRhdGVTaXplLFxuICB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzLFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlLFxufTtcbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCAkZWwgPSBzd2lwZXIuJGVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSAkZWxbMF0uY2xpZW50V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy53aWR0aCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKCh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHx8IChoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICB3aWR0aCA9XG4gICAgd2lkdGggLVxuICAgIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtXG4gICAgcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1yaWdodCcpIHx8IDAsIDEwKTtcbiAgaGVpZ2h0ID1cbiAgICBoZWlnaHQgLVxuICAgIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC1cbiAgICBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpIHx8IDAsIDEwKTtcblxuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG5cbiAgZXh0ZW5kKHN3aXBlciwge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodCxcbiAgfSk7XG59XG4iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICBjb25zdCB7ICR3cmFwcGVyRWwsIHNpemU6IHN3aXBlclNpemUsIHJ0bFRyYW5zbGF0ZTogcnRsLCB3cm9uZ1JUTCB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgY29uc3Qgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApO1xuICBjb25zdCBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgbGV0IHNuYXBHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc0dyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzU2l6ZXNHcmlkID0gW107XG5cbiAgZnVuY3Rpb24gc2xpZGVzRm9yTWFyZ2luKHNsaWRlRWwsIHNsaWRlSW5kZXgpIHtcbiAgICBpZiAoIXBhcmFtcy5jc3NNb2RlKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcbiAgaWYgKHR5cGVvZiBvZmZzZXRBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgfVxuXG4gIGNvbnN0IHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuXG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBsZXQgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gIGxldCBwcmV2U2xpZGVTaXplID0gMDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBzd2lwZXJTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gKHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwKSAqIHN3aXBlclNpemU7XG4gIH1cblxuICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuO1xuXG4gIC8vIHJlc2V0IG1hcmdpbnNcbiAgaWYgKHJ0bCkgc2xpZGVzLmNzcyh7IG1hcmdpbkxlZnQ6ICcnLCBtYXJnaW5Ub3A6ICcnIH0pO1xuICBlbHNlIHNsaWRlcy5jc3MoeyBtYXJnaW5SaWdodDogJycsIG1hcmdpbkJvdHRvbTogJycgfSk7XG5cbiAgbGV0IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgIGlmIChcbiAgICAgIE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09XG4gICAgICBzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1BlckNvbHVtblxuICAgICkge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IHNsaWRlc0xlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9XG4gICAgICAgIE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gICAgfVxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KFxuICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLFxuICAgICAgICBwYXJhbXMuc2xpZGVzUGVyVmlldyAqIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4sXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGMgc2xpZGVzXG4gIGxldCBzbGlkZVNpemU7XG4gIGNvbnN0IHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gIGNvbnN0IHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gIGNvbnN0IG51bUZ1bGxDb2x1bW5zID0gTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXMuZXEoaSk7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAvLyBTZXQgc2xpZGVzIG9yZGVyXG4gICAgICBsZXQgbmV3U2xpZGVPcmRlckluZGV4O1xuICAgICAgbGV0IGNvbHVtbjtcbiAgICAgIGxldCByb3c7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSk7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXhJbkdyb3VwID0gaSAtIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgICBjb25zdCBjb2x1bW5zSW5Hcm91cCA9XG4gICAgICAgICAgZ3JvdXBJbmRleCA9PT0gMFxuICAgICAgICAgICAgPyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBcbiAgICAgICAgICAgIDogTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgTWF0aC5jZWlsKFxuICAgICAgICAgICAgICAgICAgKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJDb2x1bW4gKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIC9cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyQ29sdW1uLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgcGFyYW1zLnNsaWRlc1Blckdyb3VwLFxuICAgICAgICAgICAgICApO1xuICAgICAgICByb3cgPSBNYXRoLmZsb29yKHNsaWRlSW5kZXhJbkdyb3VwIC8gY29sdW1uc0luR3JvdXApO1xuICAgICAgICBjb2x1bW4gPSBzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwICsgZ3JvdXBJbmRleCAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcblxuICAgICAgICBuZXdTbGlkZU9yZGVySW5kZXggPSBjb2x1bW4gKyAocm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cykgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgICAgIHNsaWRlLmNzcyh7XG4gICAgICAgICAgJy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICctd2Via2l0LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgICAgY29sdW1uID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgICAgcm93ID0gaSAtIGNvbHVtbiAqIHNsaWRlc1BlckNvbHVtbjtcbiAgICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IChjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gc2xpZGVzUGVyQ29sdW1uIC0gMSkpIHtcbiAgICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgICBpZiAocm93ID49IHNsaWRlc1BlckNvbHVtbikge1xuICAgICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICAgIGNvbHVtbiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTtcbiAgICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHNsaWRlc1BlclJvdztcbiAgICAgIH1cbiAgICAgIHNsaWRlLmNzcyhcbiAgICAgICAgYG1hcmdpbi0ke3N3aXBlci5pc0hvcml6b250YWwoKSA/ICd0b3AnIDogJ2xlZnQnfWAsXG4gICAgICAgIHJvdyAhPT0gMCAmJiBwYXJhbXMuc3BhY2VCZXR3ZWVuICYmIGAke3BhcmFtcy5zcGFjZUJldHdlZW59cHhgLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZVswXSwgbnVsbCk7XG4gICAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgY29uc3QgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICAgIHNsaWRlU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlLm91dGVyV2lkdGgodHJ1ZSkgOiBzbGlkZS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgY29uc3Qgd2lkdGggPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJykgfHwgMCk7XG4gICAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpIHx8IDApO1xuICAgICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpIHx8IDApO1xuICAgICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykgfHwgMCk7XG4gICAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpIHx8IDApO1xuICAgICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaGVpZ2h0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSB8fCAwKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nVG9wID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpIHx8IDApO1xuICAgICAgICAgIGNvbnN0IHBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykgfHwgMCk7XG4gICAgICAgICAgY29uc3QgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tdG9wJykgfHwgMCk7XG4gICAgICAgICAgY29uc3QgbWFyZ2luQm90dG9tID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykgfHwgMCk7XG4gICAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICAgIGlmIChib3hTaXppbmcgJiYgYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCcpIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIG1hcmdpblRvcCArIG1hcmdpbkJvdHRvbTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gaGVpZ2h0ICsgcGFkZGluZ1RvcCArIHBhZGRpbmdCb3R0b20gKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuXG4gICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUud2lkdGggPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS5oZWlnaHQgPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApXG4gICAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKFxuICAgICAgICAoaW5kZXggLSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpKSAlXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT1cbiAgICAgICAgMFxuICAgICAgKVxuICAgICAgICBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuXG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcblxuICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG5cbiAgICBpbmRleCArPSAxO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgbGV0IG5ld1NsaWRlc0dyaWQ7XG5cbiAgaWYgKHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICAkd3JhcHBlckVsLmNzcyh7IHdpZHRoOiBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVufXB4YCB9KTtcbiAgfVxuICBpZiAocGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSlcbiAgICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgICAgd2lkdGg6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgLFxuICAgICAgfSk7XG4gICAgZWxzZVxuICAgICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgICBoZWlnaHQ6IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgLFxuICAgICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9XG4gICAgICBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgLSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpXG4gICAgICAkd3JhcHBlckVsLmNzcyh7XG4gICAgICAgIHdpZHRoOiBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVufXB4YCxcbiAgICAgIH0pO1xuICAgIGVsc2VcbiAgICAgICR3cmFwcGVyRWwuY3NzKHtcbiAgICAgICAgaGVpZ2h0OiBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVufXB4YCxcbiAgICAgIH0pO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgICBpZiAoc25hcEdyaWRbaV0gPCBzd2lwZXIudmlydHVhbFNpemUgKyBzbmFwR3JpZFswXSkgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChcbiAgICAgIE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+XG4gICAgICAxXG4gICAgKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcblxuICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGlmIChydGwpIHNsaWRlcy5maWx0ZXIoc2xpZGVzRm9yTWFyZ2luKS5jc3MoeyBtYXJnaW5MZWZ0OiBgJHtzcGFjZUJldHdlZW59cHhgIH0pO1xuICAgICAgZWxzZSBzbGlkZXMuZmlsdGVyKHNsaWRlc0Zvck1hcmdpbikuY3NzKHsgbWFyZ2luUmlnaHQ6IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgfSBlbHNlIHNsaWRlcy5maWx0ZXIoc2xpZGVzRm9yTWFyZ2luKS5jc3MoeyBtYXJnaW5Cb3R0b206IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaCgoc2xpZGVTaXplVmFsdWUpID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKChzbmFwKSA9PiB7XG4gICAgICBpZiAoc25hcCA8IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaCgoc2xpZGVTaXplVmFsdWUpID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBzbGlkZXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBzbGlkZXNTaXplc0dyaWQsXG4gIH0pO1xuXG4gIGlmIChzbGlkZXNMZW5ndGggIT09IHByZXZpb3VzU2xpZGVzTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0xlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU25hcEdyaWRMZW5ndGgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIHN3aXBlci5lbWl0KCdzbmFwR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChzbGlkZXNHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBsZXQgbmV3SGVpZ2h0ID0gMDtcbiAgbGV0IGk7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICdudW1iZXInKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICB9IGVsc2UgaWYgKHNwZWVkID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gIH1cbiAgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMuZWFjaCgoc2xpZGUpID0+IHtcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KVswXSk7XG4gIH1cblxuICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgSGVpZ2h0XG4gIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpXG4gICAgICA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0XG4gICAgICA6IHNsaWRlc1tpXS5vZmZzZXRUb3A7XG4gIH1cbn1cbiIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSA9ICh0aGlzICYmIHRoaXMudHJhbnNsYXRlKSB8fCAwKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG5cbiAgY29uc3QgeyBzbGlkZXMsIHJ0bFRyYW5zbGF0ZTogcnRsIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHNsaWRlcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgaWYgKHR5cGVvZiBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQgPT09ICd1bmRlZmluZWQnKSBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG5cbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTtcblxuICAvLyBWaXNpYmxlIFNsaWRlc1xuICBzbGlkZXMucmVtb3ZlQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcblxuICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPVxuICAgICAgKG9mZnNldENlbnRlciArXG4gICAgICAgIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtXG4gICAgICAgIHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0KSAvXG4gICAgICAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkgfHwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkpIHtcbiAgICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCk7XG4gICAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgY29uc3QgaXNWaXNpYmxlID1cbiAgICAgICAgKHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEpIHx8XG4gICAgICAgIChzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplKSB8fFxuICAgICAgICAoc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplKTtcbiAgICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICBzbGlkZXMuZXEoaSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2xpZGUucHJvZ3Jlc3MgPSBydGwgPyAtc2xpZGVQcm9ncmVzcyA6IHNsaWRlUHJvZ3Jlc3M7XG4gIH1cbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSAkKHN3aXBlci52aXNpYmxlU2xpZGVzKTtcbn1cbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHRyYW5zbGF0ZSA9IChzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllcikgfHwgMDtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgbGV0IHsgcHJvZ3Jlc3MsIGlzQmVnaW5uaW5nLCBpc0VuZCB9ID0gc3dpcGVyO1xuICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgY29uc3Qgd2FzRW5kID0gaXNFbmQ7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBpc0JlZ2lubmluZyA9IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBwcm9ncmVzcyA+PSAxO1xuICB9XG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZCxcbiAgfSk7XG5cbiAgaWYgKFxuICAgIHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8XG4gICAgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSB8fFxuICAgIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpXG4gIClcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcpIHx8ICh3YXNFbmQgJiYgIWlzRW5kKSkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7IHNsaWRlcywgcGFyYW1zLCAkd3JhcHBlckVsLCBhY3RpdmVJbmRleCwgcmVhbEluZGV4IH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgc2xpZGVzLnJlbW92ZUNsYXNzKFxuICAgIGAke3BhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfSAke3BhcmFtcy5zbGlkZU5leHRDbGFzc30gJHtwYXJhbXMuc2xpZGVQcmV2Q2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzc31gLFxuICApO1xuXG4gIGxldCBhY3RpdmVTbGlkZTtcbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGFjdGl2ZVNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuZmluZChcbiAgICAgIGAuJHtwYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2FjdGl2ZUluZGV4fVwiXWAsXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZSA9IHNsaWRlcy5lcShhY3RpdmVJbmRleCk7XG4gIH1cblxuICAvLyBBY3RpdmUgY2xhc3Nlc1xuICBhY3RpdmVTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgLy8gRHVwbGljYXRlIHRvIGFsbCBsb29wZWQgc2xpZGVzXG4gICAgaWYgKGFjdGl2ZVNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oXG4gICAgICAgICAgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWAsXG4gICAgICAgIClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oXG4gICAgICAgICAgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWAsXG4gICAgICAgIClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gIH1cbiAgLy8gTmV4dCBTbGlkZVxuICBsZXQgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGVcbiAgICAubmV4dEFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YClcbiAgICAuZXEoMClcbiAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgaWYgKHBhcmFtcy5sb29wICYmIG5leHRTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZXEoMCk7XG4gICAgbmV4dFNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gIH1cbiAgLy8gUHJldiBTbGlkZVxuICBsZXQgcHJldlNsaWRlID0gYWN0aXZlU2xpZGVcbiAgICAucHJldkFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YClcbiAgICAuZXEoMClcbiAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgaWYgKHBhcmFtcy5sb29wICYmIHByZXZTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZXEoLTEpO1xuICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihcbiAgICAgICAgICBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtcbiAgICAgICAgICAgIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzXG4gICAgICAgICAgfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke25leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpfVwiXWAsXG4gICAgICAgIClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKFxuICAgICAgICAgIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtcbiAgICAgICAgICAgIHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzXG4gICAgICAgICAgfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7bmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYCxcbiAgICAgICAgKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9XG4gICAgaWYgKHByZXZTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKFxuICAgICAgICAgIGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke1xuICAgICAgICAgICAgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3NcbiAgICAgICAgICB9KVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYCxcbiAgICAgICAgKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oXG4gICAgICAgICAgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke1xuICAgICAgICAgICAgcGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3NcbiAgICAgICAgICB9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gLFxuICAgICAgICApXG4gICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn1cbiIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNsaWRlc0dyaWQsXG4gICAgc25hcEdyaWQsXG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleCxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiZcbiAgICAgICAgICB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMlxuICAgICAgICApIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBjb25zdCByZWFsSW5kZXggPSBwYXJzZUludChcbiAgICBzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LFxuICAgIDEwLFxuICApO1xuXG4gIGV4dGVuZChzd2lwZXIsIHtcbiAgICBzbmFwSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gIH0pO1xuICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn1cbiIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHNsaWRlID0gJChlLnRhcmdldCkuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YClbMF07XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludCgkKHNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSAkKHNsaWRlKS5pbmRleCgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChcbiAgICBwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJlxuICAgIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJlxuICAgIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleFxuICApIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgZ2V0VHJhbnNsYXRlIGZyb20gJy4vZ2V0VHJhbnNsYXRlJztcbmltcG9ydCBzZXRUcmFuc2xhdGUgZnJvbSAnLi9zZXRUcmFuc2xhdGUnO1xuaW1wb3J0IG1pblRyYW5zbGF0ZSBmcm9tICcuL21pblRyYW5zbGF0ZSc7XG5pbXBvcnQgbWF4VHJhbnNsYXRlIGZyb20gJy4vbWF4VHJhbnNsYXRlJztcbmltcG9ydCB0cmFuc2xhdGVUbyBmcm9tICcuL3RyYW5zbGF0ZVRvJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvLFxufTtcbiIsImltcG9ydCB7IGdldFRyYW5zbGF0ZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3dpcGVyVHJhbnNsYXRlKGF4aXMgPSB0aGlzLmlzSG9yaXpvbnRhbCgpID8gJ3gnIDogJ3knKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgY29uc3QgeyBwYXJhbXMsIHJ0bFRyYW5zbGF0ZTogcnRsLCB0cmFuc2xhdGUsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICByZXR1cm4gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcblxuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcnRsVHJhbnNsYXRlOiBydGwsIHBhcmFtcywgJHdyYXBwZXJFbCwgd3JhcHBlckVsLCBwcm9ncmVzcyB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG5cbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cblxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgJHdyYXBwZXJFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYCk7XG4gIH1cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2xhdGVUbyhcbiAgdHJhbnNsYXRlID0gMCxcbiAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCxcbiAgcnVuQ2FsbGJhY2tzID0gdHJ1ZSxcbiAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZSxcbiAgaW50ZXJuYWwsXG4pIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7IHBhcmFtcywgd3JhcHBlckVsIH0gPSBzd2lwZXI7XG5cbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO1xuICBlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtYXhUcmFuc2xhdGU7XG4gIGVsc2UgbmV3VHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3VHJhbnNsYXRlKTtcblxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAod3JhcHBlckVsLnNjcm9sbFRvKSB7XG4gICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IC1uZXdUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgIGlmICghc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kLFxuICAgICAgICAgICk7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCxcbiAgICAgICk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuIiwiaW1wb3J0IHNldFRyYW5zaXRpb24gZnJvbSAnLi9zZXRUcmFuc2l0aW9uJztcbmltcG9ydCB0cmFuc2l0aW9uU3RhcnQgZnJvbSAnLi90cmFuc2l0aW9uU3RhcnQnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnLi90cmFuc2l0aW9uRW5kJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmQsXG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgYWN0aXZlSW5kZXgsIHBhcmFtcywgcHJldmlvdXNJbmRleCB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuXG4gIGxldCBkaXIgPSBkaXJlY3Rpb247XG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO1xuICAgIGVsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO1xuICAgIGVsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgYWN0aXZlSW5kZXgsIHByZXZpb3VzSW5kZXgsIHBhcmFtcyB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztcbiAgICBlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztcbiAgICBlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cblxuICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25FbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvbkVuZCcpO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25FbmQnKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBzbGlkZVRvIGZyb20gJy4vc2xpZGVUbyc7XG5pbXBvcnQgc2xpZGVUb0xvb3AgZnJvbSAnLi9zbGlkZVRvTG9vcCc7XG5pbXBvcnQgc2xpZGVOZXh0IGZyb20gJy4vc2xpZGVOZXh0JztcbmltcG9ydCBzbGlkZVByZXYgZnJvbSAnLi9zbGlkZVByZXYnO1xuaW1wb3J0IHNsaWRlUmVzZXQgZnJvbSAnLi9zbGlkZVJlc2V0JztcbmltcG9ydCBzbGlkZVRvQ2xvc2VzdCBmcm9tICcuL3NsaWRlVG9DbG9zZXN0JztcbmltcG9ydCBzbGlkZVRvQ2xpY2tlZFNsaWRlIGZyb20gJy4vc2xpZGVUb0NsaWNrZWRTbGlkZSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2xpZGVUbyxcbiAgc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dCxcbiAgc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdCxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZSxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvKFxuICBpbmRleCA9IDAsXG4gIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsXG4gIHJ1bkNhbGxiYWNrcyA9IHRydWUsXG4gIGludGVybmFsLFxuKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG5cbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JhcHBlckVsLFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBzbGlkZUluZGV4KTtcbiAgbGV0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChzbGlkZUluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKChhY3RpdmVJbmRleCB8fCBwYXJhbXMuaW5pdGlhbFNsaWRlIHx8IDApID09PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCkgPj0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKSkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKFxuICAgICAgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJlxuICAgICAgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJlxuICAgICAgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiZcbiAgICAgIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiZcbiAgICAgIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKVxuICAgICkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGxldCBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztcbiAgZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7XG4gIGVsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkgfHwgKCFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAvLyBVcGRhdGUgSGVpZ2h0XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGxldCB0ID0gLXRyYW5zbGF0ZTtcbiAgICBpZiAocnRsKSB7XG4gICAgICB0ID0gd3JhcHBlckVsLnNjcm9sbFdpZHRoIC0gd3JhcHBlckVsLm9mZnNldFdpZHRoIC0gdDtcbiAgICB9XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAod3JhcHBlckVsLnNjcm9sbFRvKSB7XG4gICAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogdCxcbiAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvTG9vcChcbiAgaW5kZXggPSAwLFxuICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLFxuICBydW5DYWxsYmFja3MgPSB0cnVlLFxuICBpbnRlcm5hbCxcbikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgbmV3SW5kZXggPSBpbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIG5ld0luZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbiIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCBhbmltYXRpbmcgfSA9IHN3aXBlcjtcbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRlKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbiIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCBhbmltYXRpbmcsIHNuYXBHcmlkLCBzbGlkZXNHcmlkLCBydGxUcmFuc2xhdGUgfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkZSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgfVxuICBjb25zdCB0cmFuc2xhdGUgPSBydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWwpIHtcbiAgICBpZiAodmFsIDwgMCkgcmV0dXJuIC1NYXRoLmZsb29yKE1hdGguYWJzKHZhbCkpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gIH1cbiAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IG5vcm1hbGl6ZSh0cmFuc2xhdGUpO1xuICBjb25zdCBub3JtYWxpemVkU25hcEdyaWQgPSBzbmFwR3JpZC5tYXAoKHZhbCkgPT4gbm9ybWFsaXplKHZhbCkpO1xuXG4gIGNvbnN0IGN1cnJlbnRTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSldO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXApID0+IHtcbiAgICAgIGlmICghcHJldlNuYXAgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSBwcmV2U25hcCA9IHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgbGV0IHByZXZJbmRleDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbiIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG4iLCIvKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KFxuICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLFxuICBydW5DYWxsYmFja3MgPSB0cnVlLFxuICBpbnRlcm5hbCxcbiAgdGhyZXNob2xkID0gMC41LFxuKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcblxuICBpZiAodHJhbnNsYXRlID49IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIG9uIG9yIGFmdGVyIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGFmdGVyIGl0LlxuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgY29uc3QgbmV4dFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4ICsgMV07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICBjb25zdCBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBwcmV2U25hcCA8PSAoY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG4gIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxKTtcblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cbiIsImltcG9ydCAkIGZyb20gJy4uLy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBuZXh0VGljayB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyBwYXJhbXMsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcblxuICBjb25zdCBzbGlkZXNQZXJWaWV3ID1cbiAgICBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKFxuICAgICAgICBzbGlkZVRvSW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIC0gc2xpZGVzUGVyVmlldyAvIDIgfHxcbiAgICAgICAgc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICsgc2xpZGVzUGVyVmlldyAvIDJcbiAgICAgICkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKFxuICAgICAgICAgICAgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KWAsXG4gICAgICAgICAgKVxuICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgIC5pbmRleCgpO1xuXG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihcbiAgICAgICAgICBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYCxcbiAgICAgICAgKVxuICAgICAgICAuZXEoMClcbiAgICAgICAgLmluZGV4KCk7XG5cbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9XG59XG4iLCJpbXBvcnQgbG9vcENyZWF0ZSBmcm9tICcuL2xvb3BDcmVhdGUnO1xuaW1wb3J0IGxvb3BGaXggZnJvbSAnLi9sb29wRml4JztcbmltcG9ydCBsb29wRGVzdHJveSBmcm9tICcuL2xvb3BEZXN0cm95JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb29wQ3JlYXRlLFxuICBsb29wRml4LFxuICBsb29wRGVzdHJveSxcbn07XG4iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcENyZWF0ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAvLyBSZW1vdmUgZHVwbGljYXRlZCBzbGlkZXNcbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9YCkucmVtb3ZlKCk7XG5cbiAgbGV0IHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuXG4gIGlmIChwYXJhbXMubG9vcEZpbGxHcm91cFdpdGhCbGFuaykge1xuICAgIGNvbnN0IGJsYW5rU2xpZGVzTnVtID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gKHNsaWRlcy5sZW5ndGggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgIGlmIChibGFua1NsaWRlc051bSAhPT0gcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJsYW5rU2xpZGVzTnVtOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgYmxhbmtOb2RlID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MoXG4gICAgICAgICAgYCR7cGFyYW1zLnNsaWRlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlQmxhbmtDbGFzc31gLFxuICAgICAgICApO1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuICAgICAgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgIXBhcmFtcy5sb29wZWRTbGlkZXMpIHBhcmFtcy5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuXG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcbiAgaWYgKHN3aXBlci5sb29wZWRTbGlkZXMgPiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gIH1cblxuICBjb25zdCBwcmVwZW5kU2xpZGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlcyA9IFtdO1xuICBzbGlkZXMuZWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgc2xpZGUgPSAkKGVsKTtcbiAgICBpZiAoaW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICBhcHBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuICAgIGlmIChpbmRleCA8IHNsaWRlcy5sZW5ndGggJiYgaW5kZXggPj0gc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIHtcbiAgICAgIHByZXBlbmRTbGlkZXMucHVzaChlbCk7XG4gICAgfVxuICAgIHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICB9KTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IHByZXBlbmRTbGlkZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcEZpeCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBzd2lwZXIuZW1pdCgnYmVmb3JlTG9vcEZpeCcpO1xuXG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleCxcbiAgICBzbGlkZXMsXG4gICAgbG9vcGVkU2xpZGVzLFxuICAgIGFsbG93U2xpZGVQcmV2LFxuICAgIGFsbG93U2xpZGVOZXh0LFxuICAgIHNuYXBHcmlkLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICB9ID0gc3dpcGVyO1xuICBsZXQgbmV3SW5kZXg7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG5cbiAgY29uc3Qgc25hcFRyYW5zbGF0ZSA9IC1zbmFwR3JpZFthY3RpdmVJbmRleF07XG4gIGNvbnN0IGRpZmYgPSBzbmFwVHJhbnNsYXRlIC0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuXG4gIC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcbiAgaWYgKGFjdGl2ZUluZGV4IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgbmV3SW5kZXggPSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzICogMyArIGFjdGl2ZUluZGV4O1xuICAgIG5ld0luZGV4ICs9IGxvb3BlZFNsaWRlcztcbiAgICBjb25zdCBzbGlkZUNoYW5nZWQgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIGlmIChzbGlkZUNoYW5nZWQgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVJbmRleCA+PSBzbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgLy8gRml4IEZvciBQb3NpdGl2ZSBPdmVyc2xpZGluZ1xuICAgIG5ld0luZGV4ID0gLXNsaWRlcy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGxvb3BlZFNsaWRlcztcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuXG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkd3JhcHBlckVsLCBwYXJhbXMsIHNsaWRlcyB9ID0gc3dpcGVyO1xuICAkd3JhcHBlckVsXG4gICAgLmNoaWxkcmVuKFxuICAgICAgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSwuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVCbGFua0NsYXNzfWAsXG4gICAgKVxuICAgIC5yZW1vdmUoKTtcbiAgc2xpZGVzLnJlbW92ZUF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG59XG4iLCJpbXBvcnQgc2V0R3JhYkN1cnNvciBmcm9tICcuL3NldEdyYWJDdXJzb3InO1xuaW1wb3J0IHVuc2V0R3JhYkN1cnNvciBmcm9tICcuL3Vuc2V0R3JhYkN1cnNvcic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yLFxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChcbiAgICBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fFxuICAgICFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHxcbiAgICAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCkgfHxcbiAgICBzd2lwZXIucGFyYW1zLmNzc01vZGVcbiAgKVxuICAgIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIuZWw7XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy13ZWJraXQtZ3JhYmJpbmcnIDogJy13ZWJraXQtZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctbW96LWdyYWJiaW4nIDogJy1tb3otZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnNldEdyYWJDdXJzb3IoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChcbiAgICBzd2lwZXIuc3VwcG9ydC50b3VjaCB8fFxuICAgIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSB8fFxuICAgIHN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmVsLnN0eWxlLmN1cnNvciA9ICcnO1xufVxuIiwiaW1wb3J0IGFwcGVuZFNsaWRlIGZyb20gJy4vYXBwZW5kU2xpZGUnO1xuaW1wb3J0IHByZXBlbmRTbGlkZSBmcm9tICcuL3ByZXBlbmRTbGlkZSc7XG5pbXBvcnQgYWRkU2xpZGUgZnJvbSAnLi9hZGRTbGlkZSc7XG5pbXBvcnQgcmVtb3ZlU2xpZGUgZnJvbSAnLi9yZW1vdmVTbGlkZSc7XG5pbXBvcnQgcmVtb3ZlQWxsU2xpZGVzIGZyb20gJy4vcmVtb3ZlQWxsU2xpZGVzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBhcHBlbmRTbGlkZSxcbiAgcHJlcGVuZFNsaWRlLFxuICBhZGRTbGlkZSxcbiAgcmVtb3ZlU2xpZGUsXG4gIHJlbW92ZUFsbFNsaWRlcyxcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkd3JhcHBlckVsLCBwYXJhbXMgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXMpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlcGVuZFNsaWRlKHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCwgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXMpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU2xpZGUoaW5kZXgsIHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7ICR3cmFwcGVyRWwsIHBhcmFtcywgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApO1xuICB9XG4gIGNvbnN0IGJhc2VMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKGluZGV4IDw9IDApIHtcbiAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjtcblxuICBjb25zdCBzbGlkZXNCdWZmZXIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICBjb25zdCBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgIGN1cnJlbnRTbGlkZS5yZW1vdmUoKTtcbiAgICBzbGlkZXNCdWZmZXIudW5zaGlmdChjdXJyZW50U2xpZGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9XG4gICAgICBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyBzbGlkZXMubGVuZ3RoIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzQnVmZmVyW2ldKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIHN3aXBlci5zdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuXG4gIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgbGV0IGluZGV4VG9SZW1vdmU7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXNJbmRleGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICB9XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgc3dpcGVyLnN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCBzbGlkZXNJbmRleGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuICBzd2lwZXIucmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcyk7XG59XG4iLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3cgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuXG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7IHBhcmFtcywgdG91Y2hlcyB9ID0gc3dpcGVyO1xuXG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgY29uc3QgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG5cbiAgaWYgKHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ3dyYXBwZXInKSB7XG4gICAgaWYgKCEkdGFyZ2V0RWwuY2xvc2VzdChzd2lwZXIud3JhcHBlckVsKS5sZW5ndGgpIHJldHVybjtcbiAgfVxuICBkYXRhLmlzVG91Y2hFdmVudCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHJldHVybjtcbiAgaWYgKGRhdGEuaXNUb3VjaGVkICYmIGRhdGEuaXNNb3ZlZCkgcmV0dXJuO1xuICBpZiAoXG4gICAgcGFyYW1zLm5vU3dpcGluZyAmJlxuICAgICR0YXJnZXRFbC5jbG9zZXN0KFxuICAgICAgcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yID8gcGFyYW1zLm5vU3dpcGluZ1NlbGVjdG9yIDogYC4ke3BhcmFtcy5ub1N3aXBpbmdDbGFzc31gLFxuICAgIClbMF1cbiAgKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgIGlmICghJHRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcilbMF0pIHJldHVybjtcbiAgfVxuXG4gIHRvdWNoZXMuY3VycmVudFggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gIGNvbnN0IHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIGNvbnN0IHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG5cbiAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG4gIGlmIChcbiAgICBlZGdlU3dpcGVEZXRlY3Rpb24gJiZcbiAgICAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LnNjcmVlbi53aWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZClcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZXh0ZW5kKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gIH0pO1xuXG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcpIHtcbiAgICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgIGlmICgkdGFyZ2V0RWwuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcbiAgICAgICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpICYmXG4gICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSAkdGFyZ2V0RWxbMF1cbiAgICApIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID1cbiAgICAgIHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICAgIGlmIChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cbiIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3cgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKGV2ZW50KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHsgcGFyYW1zLCB0b3VjaGVzLCBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZS50eXBlICE9PSAndG91Y2htb3ZlJykgcmV0dXJuO1xuICBjb25zdCB0YXJnZXRUb3VjaCA9XG4gICAgZS50eXBlID09PSAndG91Y2htb3ZlJyAmJiBlLnRhcmdldFRvdWNoZXMgJiYgKGUudGFyZ2V0VG91Y2hlc1swXSB8fCBlLmNoYW5nZWRUb3VjaGVzWzBdKTtcbiAgY29uc3QgcGFnZVggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gdGFyZ2V0VG91Y2gucGFnZVggOiBlLnBhZ2VYO1xuICBjb25zdCBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyB0YXJnZXRUb3VjaC5wYWdlWSA6IGUucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBleHRlbmQodG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKFxuICAgICAgICAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgfHxcbiAgICAgICAgKHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpXG4gICAgICApIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKHBhZ2VYIDwgdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHx8XG4gICAgICAocGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7XG4gICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG5cbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKVxuICAgIHJldHVybjtcblxuICBpZiAodHlwZW9mIGRhdGEuaXNTY3JvbGxpbmcgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgbGV0IHRvdWNoQW5nbGU7XG4gICAgaWYgKFxuICAgICAgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRZID09PSB0b3VjaGVzLnN0YXJ0WSkgfHxcbiAgICAgIChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIHRvdWNoZXMuY3VycmVudFggPT09IHRvdWNoZXMuc3RhcnRYKVxuICAgICkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gKE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwKSAvIE1hdGguUEk7XG4gICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZVxuICAgICAgICAgIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFkYXRhLnN0YXJ0TW92aW5nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gIGlmICghcGFyYW1zLmNzc01vZGUgJiYgZS5jYW5jZWxhYmxlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG5cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuXG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcblxuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG5cbiAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICBsZXQgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuICBpZiAoZGlmZiA+IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSlcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9XG4gICAgICAgIHN3aXBlci5taW5UcmFuc2xhdGUoKSAtXG4gICAgICAgIDEgK1xuICAgICAgICAoLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDAgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSlcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9XG4gICAgICAgIHN3aXBlci5tYXhUcmFuc2xhdGUoKSArXG4gICAgICAgIDEgLVxuICAgICAgICAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgfVxuXG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChcbiAgICAhc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmXG4gICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiZcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBkYXRhLnN0YXJ0VHJhbnNsYXRlXG4gICkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKFxuICAgICFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiZcbiAgICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJlxuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGVcbiAgKSB7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgfVxuXG4gIC8vIFRocmVzaG9sZFxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAgID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYXG4gICAgICAgICAgOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAoIXBhcmFtcy5mb2xsb3dGaW5nZXIgfHwgcGFyYW1zLmNzc01vZGUpIHJldHVybjtcblxuICAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuICBpZiAocGFyYW1zLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAvLyBWZWxvY2l0eVxuICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICB0aW1lOiBkYXRhLnRvdWNoU3RhcnRUaW1lLFxuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdjdXJyZW50WCcgOiAnY3VycmVudFknXSxcbiAgICAgIHRpbWU6IG5vdygpLFxuICAgIH0pO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG4iLCJpbXBvcnQgeyBub3csIG5leHRUaWNrIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoRW5kKGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuXG4gIGNvbnN0IHsgcGFyYW1zLCB0b3VjaGVzLCBydGxUcmFuc2xhdGU6IHJ0bCwgJHdyYXBwZXJFbCwgc2xpZGVzR3JpZCwgc25hcEdyaWQgfSA9IHN3aXBlcjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICB9XG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICBpZiAoXG4gICAgcGFyYW1zLmdyYWJDdXJzb3IgJiZcbiAgICBkYXRhLmlzTW92ZWQgJiZcbiAgICBkYXRhLmlzVG91Y2hlZCAmJlxuICAgIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKVxuICApIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH1cblxuICAvLyBUaW1lIGRpZmZcbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShlKTtcbiAgICBzd2lwZXIuZW1pdCgndGFwIGNsaWNrJywgZSk7XG4gICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmIHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSA8IDMwMCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCBkb3VibGVDbGljaycsIGUpO1xuICAgIH1cbiAgfVxuXG4gIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpO1xuICBuZXh0VGljaygoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhZGF0YS5pc1RvdWNoZWQgfHxcbiAgICAhZGF0YS5pc01vdmVkIHx8XG4gICAgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fFxuICAgIHRvdWNoZXMuZGlmZiA9PT0gMCB8fFxuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZVxuICApIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcblxuICBsZXQgY3VycmVudFBvcztcbiAgaWYgKHBhcmFtcy5mb2xsb3dGaW5nZXIpIHtcbiAgICBjdXJyZW50UG9zID0gcnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRQb3MgPSAtZGF0YS5jdXJyZW50VHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQb3MgPiAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPCBzbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bSkge1xuICAgICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIGNvbnN0IHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG5cbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuICAgICAgICBpZiAodGltZSA+IDE1MCB8fCBub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSA+IDMwMCkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG4gICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuXG4gICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgIGxldCBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW87XG4gICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlID0gc3dpcGVyLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcblxuICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICBpZiAocnRsKSBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcblxuICAgICAgbGV0IGRvQm91bmNlID0gZmFsc2U7XG4gICAgICBsZXQgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIGNvbnN0IGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICBsZXQgbmVlZHNMb29wRml4O1xuICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIG5lZWRzTG9vcEZpeCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSA+IGJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIGxldCBuZXh0U2xpZGU7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbal0gPiAtbmV3UG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8XG4gICAgICAgICAgICBNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXSAtIG5ld1Bvc2l0aW9uKSB8fFxuICAgICAgICAgIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnXG4gICAgICAgICkge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZSAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRzTG9vcEZpeCkge1xuICAgICAgICBzd2lwZXIub25jZSgndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIEZpeCBkdXJhdGlvblxuICAgICAgaWYgKHN3aXBlci52ZWxvY2l0eSAhPT0gMCkge1xuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKCgtbmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKChuZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgLy8gSWYgZnJlZU1vZGVTdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHlcbiAgICAgICAgICAvLyBldmVudCwgdGhlbiBkdXJhdGlvbnMgY2FuIGJlIDIwKyBzZWNvbmRzIHRvIHNsaWRlIG9uZSAob3IgemVybyEpIHNsaWRlcy5cbiAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZVxuICAgICAgICAgIC8vIG5pY2Ugc2lkZSBlZmZlY3Qgb2YgbWF0Y2hpbmcgc2xpZGUgc3BlZWQgaWYgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYmVmb3JlXG4gICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuXG4gICAgICAgICAgY29uc3QgbW92ZURpc3RhbmNlID0gTWF0aC5hYnMoKHJ0bCA/IC1uZXdQb3NpdGlvbiA6IG5ld1Bvc2l0aW9uKSAtIHN3aXBlci50cmFuc2xhdGUpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgICAgICAgaWYgKG1vdmVEaXN0YW5jZSA8IGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChtb3ZlRGlzdGFuY2UgPCAyICogY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDEuNTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDIuNTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSAmJiBkb0JvdW5jZSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihwYXJhbXMuc3BlZWQpO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5mcmVlTW9kZU1vbWVudHVtIHx8IHRpbWVEaWZmID49IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGVcbiAgbGV0IHN0b3BJbmRleCA9IDA7XG4gIGxldCBncm91cFNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkWzBdO1xuICBmb3IgKFxuICAgIGxldCBpID0gMDtcbiAgICBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7XG4gICAgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBcbiAgKSB7XG4gICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZSBzaXplXG4gIGNvbnN0IHJhdGlvID0gKGN1cnJlbnRQb3MgLSBzbGlkZXNHcmlkW3N0b3BJbmRleF0pIC8gZ3JvdXBTaXplO1xuICBjb25zdCBpbmNyZW1lbnQgPSBzdG9wSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwIC0gMSA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG5cbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICBlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICBlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNob3J0IHN3aXBlc1xuICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc05hdkJ1dHRvblRhcmdldCA9XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbiAmJlxuICAgICAgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyB3cmFwcGVyRWwsIHJ0bFRyYW5zbGF0ZSB9ID0gc3dpcGVyO1xuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgaWYgKHJ0bFRyYW5zbGF0ZSkge1xuICAgICAgc3dpcGVyLnRyYW5zbGF0ZSA9IHdyYXBwZXJFbC5zY3JvbGxXaWR0aCAtIHdyYXBwZXJFbC5vZmZzZXRXaWR0aCAtIHdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxUb3A7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmIChzd2lwZXIudHJhbnNsYXRlID09PSAtMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG5cbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgc2V0QnJlYWtwb2ludCBmcm9tICcuL3NldEJyZWFrcG9pbnQnO1xuaW1wb3J0IGdldEJyZWFrcG9pbnQgZnJvbSAnLi9nZXRCcmVha3BvaW50JztcblxuZXhwb3J0IGRlZmF1bHQgeyBzZXRCcmVha3BvaW50LCBnZXRCcmVha3BvaW50IH07XG4iLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgYWN0aXZlSW5kZXgsIGluaXRpYWxpemVkLCBsb29wZWRTbGlkZXMgPSAwLCBwYXJhbXMsICRlbCB9ID0gc3dpcGVyO1xuICBjb25zdCBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCAoYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkpIHJldHVybjtcblxuICAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuICBjb25zdCBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMpO1xuXG4gIGlmIChicmVha3BvaW50ICYmIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCAhPT0gYnJlYWtwb2ludCkge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICAgIGlmIChicmVha3BvaW50T25seVBhcmFtcykge1xuICAgICAgW1xuICAgICAgICAnc2xpZGVzUGVyVmlldycsXG4gICAgICAgICdzcGFjZUJldHdlZW4nLFxuICAgICAgICAnc2xpZGVzUGVyR3JvdXAnLFxuICAgICAgICAnc2xpZGVzUGVyR3JvdXBTa2lwJyxcbiAgICAgICAgJ3NsaWRlc1BlckNvbHVtbicsXG4gICAgICBdLmZvckVhY2goKHBhcmFtKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcmFtVmFsdWUgPSBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV07XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1WYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgICAgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycgJiYgKHBhcmFtVmFsdWUgPT09ICdBVVRPJyB8fCBwYXJhbVZhbHVlID09PSAnYXV0bycpKSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gJ2F1dG8nO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtID09PSAnc2xpZGVzUGVyVmlldycpIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSBwYXJzZUZsb2F0KHBhcmFtVmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlSW50KHBhcmFtVmFsdWUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgICBjb25zdCB3YXNNdWx0aVJvdyA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxO1xuICAgIGNvbnN0IGlzTXVsdGlSb3cgPSBicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDE7XG4gICAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgICAkZWwucmVtb3ZlQ2xhc3MoXG4gICAgICAgIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfW11bHRpcm93ICR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9bXVsdGlyb3ctY29sdW1uYCxcbiAgICAgICk7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9bXVsdGlyb3dgKTtcbiAgICAgIGlmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgICRlbC5hZGRDbGFzcyhgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31tdWx0aXJvdy1jb2x1bW5gKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPVxuICAgICAgYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gJiYgYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gIT09IHBhcmFtcy5kaXJlY3Rpb247XG4gICAgY29uc3QgbmVlZHNSZUxvb3AgPVxuICAgICAgcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG5cbiAgICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgc3dpcGVyLmNoYW5nZURpcmVjdGlvbigpO1xuICAgIH1cblxuICAgIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcblxuICAgIGV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcbiAgICB9KTtcblxuICAgIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG5cbiAgICBpZiAobmVlZHNSZUxvb3AgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gbG9vcGVkU2xpZGVzICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aFxuICBpZiAoIWJyZWFrcG9pbnRzKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuXG4gIGNvbnN0IHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAoKHBvaW50KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gd2luZG93LmlubmVySGVpZ2h0ICogbWluUmF0aW87XG4gICAgICByZXR1cm4geyB2YWx1ZSwgcG9pbnQgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBwb2ludCB9O1xuICB9KTtcblxuICBwb2ludHMuc29ydCgoYSwgYikgPT4gcGFyc2VJbnQoYS52YWx1ZSwgMTApIC0gcGFyc2VJbnQoYi52YWx1ZSwgMTApKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB7IHBvaW50LCB2YWx1ZSB9ID0gcG9pbnRzW2ldO1xuICAgIGlmICh2YWx1ZSA8PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cbiIsImltcG9ydCBhZGRDbGFzc2VzIGZyb20gJy4vYWRkQ2xhc3Nlcyc7XG5pbXBvcnQgcmVtb3ZlQ2xhc3NlcyBmcm9tICcuL3JlbW92ZUNsYXNzZXMnO1xuXG5leHBvcnQgZGVmYXVsdCB7IGFkZENsYXNzZXMsIHJlbW92ZUNsYXNzZXMgfTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZENsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgY2xhc3NOYW1lcywgcGFyYW1zLCBydGwsICRlbCwgZGV2aWNlIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHN1ZmZpeGVzID0gW107XG5cbiAgc3VmZml4ZXMucHVzaCgnaW5pdGlhbGl6ZWQnKTtcbiAgc3VmZml4ZXMucHVzaChwYXJhbXMuZGlyZWN0aW9uKTtcblxuICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnZnJlZS1tb2RlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3VmZml4ZXMucHVzaCgnYXV0b2hlaWdodCcpO1xuICB9XG4gIGlmIChydGwpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdydGwnKTtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdtdWx0aXJvdycpO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIHN1ZmZpeGVzLnB1c2goJ211bHRpcm93LWNvbHVtbicpO1xuICAgIH1cbiAgfVxuICBpZiAoZGV2aWNlLmFuZHJvaWQpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdhbmRyb2lkJyk7XG4gIH1cbiAgaWYgKGRldmljZS5pb3MpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdpb3MnKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2Nzcy1tb2RlJyk7XG4gIH1cblxuICBzdWZmaXhlcy5mb3JFYWNoKChzdWZmaXgpID0+IHtcbiAgICBjbGFzc05hbWVzLnB1c2gocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBzdWZmaXgpO1xuICB9KTtcblxuICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xuXG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkZWwsIGNsYXNzTmFtZXMgfSA9IHN3aXBlcjtcblxuICAkZWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cbiIsImltcG9ydCBsb2FkSW1hZ2UgZnJvbSAnLi9sb2FkSW1hZ2UnO1xuaW1wb3J0IHByZWxvYWRJbWFnZXMgZnJvbSAnLi9wcmVsb2FkSW1hZ2VzJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBsb2FkSW1hZ2UsXG4gIHByZWxvYWRJbWFnZXMsXG59O1xuIiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi8uLi91dGlscy9kb20nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2FkSW1hZ2UoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IGltYWdlO1xuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfVxuICBjb25zdCBpc1BpY3R1cmUgPSAkKGltYWdlRWwpLnBhcmVudCgncGljdHVyZScpWzBdO1xuXG4gIGlmICghaXNQaWN0dXJlICYmICghaW1hZ2VFbC5jb21wbGV0ZSB8fCAhY2hlY2tGb3JDb21wbGV0ZSkpIHtcbiAgICBpZiAoc3JjKSB7XG4gICAgICBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgICBpbWFnZS5vbmVycm9yID0gb25SZWFkeTtcbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICBpbWFnZS5zcmNzZXQgPSBzcmNzZXQ7XG4gICAgICB9XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb25SZWFkeSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpbWFnZSBhbHJlYWR5IGxvYWRlZC4uLlxuICAgIG9uUmVhZHkoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJlbG9hZEltYWdlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmltYWdlc1RvTG9hZCA9IHN3aXBlci4kZWwuZmluZCgnaW1nJyk7XG4gIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSBzd2lwZXIuaW1hZ2VzTG9hZGVkICs9IDE7XG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07XG4gICAgc3dpcGVyLmxvYWRJbWFnZShcbiAgICAgIGltYWdlRWwsXG4gICAgICBpbWFnZUVsLmN1cnJlbnRTcmMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpLFxuICAgICAgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLFxuICAgICAgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSxcbiAgICAgIHRydWUsXG4gICAgICBvblJlYWR5LFxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdyZXNpemUnLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBleHRlbmQoc3dpcGVyLCB7XG4gICAgICByZXNpemU6IHtcbiAgICAgICAgcmVzaXplSGFuZGxlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3Jlc2l6ZScpO1xuICAgICAgICB9LFxuICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoc3dpcGVyKSB7XG4gICAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICAgIC8vIEVtaXQgcmVzaXplXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3dpcGVyLnJlc2l6ZS5yZXNpemVIYW5kbGVyKTtcblxuICAgICAgLy8gRW1pdCBvcmllbnRhdGlvbmNoYW5nZVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gICAgZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5jb25zdCBPYnNlcnZlciA9IHtcbiAgYXR0YWNoKHRhcmdldCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYygobXV0YXRpb25zKSA9PiB7XG4gICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGEsXG4gICAgfSk7XG5cbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5vYnNlcnZlciB8fCAhc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gc3dpcGVyLiRlbC5wYXJlbnRzKCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kZWxbMF0sIHtcbiAgICAgIGNoaWxkTGlzdDogc3dpcGVyLnBhcmFtcy5vYnNlcnZlU2xpZGVDaGlsZHJlbixcbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiR3cmFwcGVyRWxbMF0sIHsgYXR0cmlidXRlczogZmFsc2UgfSk7XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLmZvckVhY2goKG9ic2VydmVyKSA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycyA9IFtdO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBvYnNlcnZlcjoge1xuICAgICAgICAuLi5PYnNlcnZlcixcbiAgICAgICAgb2JzZXJ2ZXJzOiBbXSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5vYnNlcnZlci5pbml0KCk7XG4gICAgfSxcbiAgICBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmRlc3Ryb3koKTtcbiAgICB9LFxuICB9LFxufTtcbiIsImltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5jb25zdCBWaXJ0dWFsID0ge1xuICB1cGRhdGUoZm9yY2UpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2xpZGVzUGVyVmlldywgc2xpZGVzUGVyR3JvdXAsIGNlbnRlcmVkU2xpZGVzIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHsgYWRkU2xpZGVzQmVmb3JlLCBhZGRTbGlkZXNBZnRlciB9ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsO1xuICAgIGNvbnN0IHtcbiAgICAgIGZyb206IHByZXZpb3VzRnJvbSxcbiAgICAgIHRvOiBwcmV2aW91c1RvLFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzR3JpZDogcHJldmlvdXNTbGlkZXNHcmlkLFxuICAgICAgcmVuZGVyU2xpZGUsXG4gICAgICBvZmZzZXQ6IHByZXZpb3VzT2Zmc2V0LFxuICAgIH0gPSBzd2lwZXIudmlydHVhbDtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuXG4gICAgbGV0IG9mZnNldFByb3A7XG4gICAgaWYgKHN3aXBlci5ydGxUcmFuc2xhdGUpIG9mZnNldFByb3AgPSAncmlnaHQnO1xuICAgIGVsc2Ugb2Zmc2V0UHJvcCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnO1xuXG4gICAgbGV0IHNsaWRlc0FmdGVyO1xuICAgIGxldCBzbGlkZXNCZWZvcmU7XG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZXNBZnRlciA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gc2xpZGVzUGVyVmlldyArIChzbGlkZXNQZXJHcm91cCAtIDEpICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICBzbGlkZXNCZWZvcmUgPSBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9XG4gICAgY29uc3QgZnJvbSA9IE1hdGgubWF4KChhY3RpdmVJbmRleCB8fCAwKSAtIHNsaWRlc0JlZm9yZSwgMCk7XG4gICAgY29uc3QgdG8gPSBNYXRoLm1pbigoYWN0aXZlSW5kZXggfHwgMCkgKyBzbGlkZXNBZnRlciwgc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IG9mZnNldCA9IChzd2lwZXIuc2xpZGVzR3JpZFtmcm9tXSB8fCAwKSAtIChzd2lwZXIuc2xpZGVzR3JpZFswXSB8fCAwKTtcblxuICAgIGV4dGVuZChzd2lwZXIudmlydHVhbCwge1xuICAgICAgZnJvbSxcbiAgICAgIHRvLFxuICAgICAgb2Zmc2V0LFxuICAgICAgc2xpZGVzR3JpZDogc3dpcGVyLnNsaWRlc0dyaWQsXG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBvblJlbmRlcmVkKCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgaWYgKHN3aXBlci5sYXp5ICYmIHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNHcmlkICE9PSBwcmV2aW91c1NsaWRlc0dyaWQgJiYgb2Zmc2V0ICE9PSBwcmV2aW91c09mZnNldCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVzLmNzcyhvZmZzZXRQcm9wLCBgJHtvZmZzZXR9cHhgKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsKSB7XG4gICAgICBzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwuY2FsbChzd2lwZXIsIHtcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBmcm9tLFxuICAgICAgICB0byxcbiAgICAgICAgc2xpZGVzOiAoZnVuY3Rpb24gZ2V0U2xpZGVzKCkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlc1RvUmVuZGVyID0gW107XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gMSkge1xuICAgICAgICAgICAgc2xpZGVzVG9SZW5kZXIucHVzaChzbGlkZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2xpZGVzVG9SZW5kZXI7XG4gICAgICAgIH0pKCksXG4gICAgICB9KTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWxVcGRhdGUpIHtcbiAgICAgICAgb25SZW5kZXJlZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwcmVwZW5kSW5kZXhlcyA9IFtdO1xuICAgIGNvbnN0IGFwcGVuZEluZGV4ZXMgPSBbXTtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IHByZXZpb3VzRnJvbTsgaSA8PSBwcmV2aW91c1RvOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGkgPCBmcm9tIHx8IGkgPiB0bykge1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsXG4gICAgICAgICAgICAuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aX1cIl1gKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoaSA+PSBmcm9tICYmIGkgPD0gdG8pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2aW91c1RvID09PSAndW5kZWZpbmVkJyB8fCBmb3JjZSkge1xuICAgICAgICAgIGFwcGVuZEluZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaSA+IHByZXZpb3VzVG8pIGFwcGVuZEluZGV4ZXMucHVzaChpKTtcbiAgICAgICAgICBpZiAoaSA8IHByZXZpb3VzRnJvbSkgcHJlcGVuZEluZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhcHBlbmRJbmRleGVzLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5hcHBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICB9KTtcbiAgICBwcmVwZW5kSW5kZXhlc1xuICAgICAgLnNvcnQoKGEsIGIpID0+IGIgLSBhKVxuICAgICAgLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLnByZXBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKCcuc3dpcGVyLXNsaWRlJykuY3NzKG9mZnNldFByb3AsIGAke29mZnNldH1weGApO1xuICAgIG9uUmVuZGVyZWQoKTtcbiAgfSxcbiAgcmVuZGVyU2xpZGUoc2xpZGUsIGluZGV4KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgaWYgKHBhcmFtcy5jYWNoZSAmJiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0pIHtcbiAgICAgIHJldHVybiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF07XG4gICAgfVxuICAgIGNvbnN0ICRzbGlkZUVsID0gcGFyYW1zLnJlbmRlclNsaWRlXG4gICAgICA/ICQocGFyYW1zLnJlbmRlclNsaWRlLmNhbGwoc3dpcGVyLCBzbGlkZSwgaW5kZXgpKVxuICAgICAgOiAkKFxuICAgICAgICAgIGA8ZGl2IGNsYXNzPVwiJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9XCIgZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiPiR7c2xpZGV9PC9kaXY+YCxcbiAgICAgICAgKTtcbiAgICBpZiAoISRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIGlmIChwYXJhbXMuY2FjaGUpIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSA9ICRzbGlkZUVsO1xuICAgIHJldHVybiAkc2xpZGVFbDtcbiAgfSxcbiAgYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXMpO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gIH0sXG4gIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgICBsZXQgbnVtYmVyT2ZOZXdTbGlkZXMgPSAxO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgbnVtYmVyT2ZOZXdTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICBjb25zdCBjYWNoZSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlO1xuICAgICAgY29uc3QgbmV3Q2FjaGUgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKChjYWNoZWRJbmRleCkgPT4ge1xuICAgICAgICBjb25zdCAkY2FjaGVkRWwgPSBjYWNoZVtjYWNoZWRJbmRleF07XG4gICAgICAgIGNvbnN0IGNhY2hlZEVsSW5kZXggPSAkY2FjaGVkRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgaWYgKGNhY2hlZEVsSW5kZXgpIHtcbiAgICAgICAgICAkY2FjaGVkRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBwYXJzZUludChjYWNoZWRFbEluZGV4LCAxMCkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdDYWNoZVtwYXJzZUludChjYWNoZWRJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXNdID0gJGNhY2hlZEVsO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IG5ld0NhY2hlO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDApO1xuICB9LFxuICByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICd1bmRlZmluZWQnIHx8IHNsaWRlc0luZGV4ZXMgPT09IG51bGwpIHJldHVybjtcbiAgICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzSW5kZXhlcykpIHtcbiAgICAgIGZvciAobGV0IGkgPSBzbGlkZXNJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTtcbiAgICAgIH1cbiAgICAgIGlmIChzbGlkZXNJbmRleGVzIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKDAsIDApO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAndmlydHVhbCcsXG4gIHBhcmFtczoge1xuICAgIHZpcnR1YWw6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgcmVuZGVyU2xpZGU6IG51bGwsXG4gICAgICByZW5kZXJFeHRlcm5hbDogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsVXBkYXRlOiB0cnVlLFxuICAgICAgYWRkU2xpZGVzQmVmb3JlOiAwLFxuICAgICAgYWRkU2xpZGVzQWZ0ZXI6IDAsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICB2aXJ0dWFsOiB7XG4gICAgICAgIC4uLlZpcnR1YWwsXG4gICAgICAgIHNsaWRlczogc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnNsaWRlcyxcbiAgICAgICAgY2FjaGU6IHt9LFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9dmlydHVhbGApO1xuICAgICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIGV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcblxuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5jb25zdCBLZXlib2FyZCA9IHtcbiAgaGFuZGxlKGV2ZW50KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgY29uc3QgeyBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuICAgIGxldCBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsgLy8ganF1ZXJ5IGZpeFxuICAgIGNvbnN0IGtjID0gZS5rZXlDb2RlIHx8IGUuY2hhckNvZGU7XG4gICAgY29uc3QgcGFnZVVwRG93biA9IHN3aXBlci5wYXJhbXMua2V5Ym9hcmQucGFnZVVwRG93bjtcbiAgICBjb25zdCBpc1BhZ2VVcCA9IHBhZ2VVcERvd24gJiYga2MgPT09IDMzO1xuICAgIGNvbnN0IGlzUGFnZURvd24gPSBwYWdlVXBEb3duICYmIGtjID09PSAzNDtcbiAgICBjb25zdCBpc0Fycm93TGVmdCA9IGtjID09PSAzNztcbiAgICBjb25zdCBpc0Fycm93UmlnaHQgPSBrYyA9PT0gMzk7XG4gICAgY29uc3QgaXNBcnJvd1VwID0ga2MgPT09IDM4O1xuICAgIGNvbnN0IGlzQXJyb3dEb3duID0ga2MgPT09IDQwO1xuICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgICBpZiAoXG4gICAgICAhc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmXG4gICAgICAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93UmlnaHQpIHx8XG4gICAgICAgIChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGlzQXJyb3dEb3duKSB8fFxuICAgICAgICBpc1BhZ2VEb3duKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmXG4gICAgICAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93TGVmdCkgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd1VwKSB8fCBpc1BhZ2VVcClcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJlxuICAgICAgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyB8fFxuICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYScpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmXG4gICAgICAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQgfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKVxuICAgICkge1xuICAgICAgbGV0IGluVmlldyA9IGZhbHNlO1xuICAgICAgLy8gQ2hlY2sgdGhhdCBzd2lwZXIgc2hvdWxkIGJlIGluc2lkZSBvZiB2aXNpYmxlIGFyZWEgb2Ygd2luZG93XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci4kZWwucGFyZW50cyhgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgc3dpcGVyLiRlbC5wYXJlbnRzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YCkubGVuZ3RoID09PSAwXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICBjb25zdCBzd2lwZXJPZmZzZXQgPSBzd2lwZXIuJGVsLm9mZnNldCgpO1xuICAgICAgaWYgKHJ0bCkgc3dpcGVyT2Zmc2V0LmxlZnQgLT0gc3dpcGVyLiRlbFswXS5zY3JvbGxMZWZ0O1xuICAgICAgY29uc3Qgc3dpcGVyQ29vcmQgPSBbXG4gICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sXG4gICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sXG4gICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlci5oZWlnaHRdLFxuICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXIud2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XSxcbiAgICAgIF07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG4gICAgICAgIGlmIChwb2ludFswXSA+PSAwICYmIHBvaW50WzBdIDw9IHdpbmRvd1dpZHRoICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gd2luZG93SGVpZ2h0KSB7XG4gICAgICAgICAgaW5WaWV3ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpblZpZXcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGlmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCkge1xuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgoKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiAhcnRsKSB8fCAoKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpKVxuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICBpZiAoKChpc1BhZ2VVcCB8fCBpc0Fycm93TGVmdCkgJiYgIXJ0bCkgfHwgKChpc1BhZ2VEb3duIHx8IGlzQXJyb3dSaWdodCkgJiYgcnRsKSlcbiAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93VXAgfHwgaXNBcnJvd0Rvd24pIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNQYWdlRG93biB8fCBpc0Fycm93RG93bikgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzQXJyb3dVcCkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgna2V5UHJlc3MnLCBrYyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSxcbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgICQoZG9jdW1lbnQpLm9uKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSB0cnVlO1xuICB9LFxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmICghc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHJldHVybjtcbiAgICAkKGRvY3VtZW50KS5vZmYoJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IGZhbHNlO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAna2V5Ym9hcmQnLFxuICBwYXJhbXM6IHtcbiAgICBrZXlib2FyZDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcbiAgICAgIHBhZ2VVcERvd246IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBrZXlib2FyZDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgLi4uS2V5Ym9hcmQsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcbiIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBub3csIG5leHRUaWNrLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZCgpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBldmVudE5hbWUgPSAnb253aGVlbCc7XG4gIGxldCBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoXG4gICAgIWlzU3VwcG9ydGVkICYmXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiZcbiAgICBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlICYmXG4gICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gICAgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnJywgJycpICE9PSB0cnVlXG4gICkge1xuICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cbiAgICBpc1N1cHBvcnRlZCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgfVxuXG4gIHJldHVybiBpc1N1cHBvcnRlZDtcbn1cbmNvbnN0IE1vdXNld2hlZWwgPSB7XG4gIGxhc3RTY3JvbGxUaW1lOiBub3coKSxcbiAgbGFzdEV2ZW50QmVmb3JlU25hcDogdW5kZWZpbmVkLFxuICByZWNlbnRXaGVlbEV2ZW50czogW10sXG4gIGV2ZW50KCkge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgPiAtMSkgcmV0dXJuICdET01Nb3VzZVNjcm9sbCc7XG4gICAgcmV0dXJuIGlzRXZlbnRTdXBwb3J0ZWQoKSA/ICd3aGVlbCcgOiAnbW91c2V3aGVlbCc7XG4gIH0sXG4gIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIGNvbnN0IFBJWEVMX1NURVAgPSAxMDtcbiAgICBjb25zdCBMSU5FX0hFSUdIVCA9IDQwO1xuICAgIGNvbnN0IFBBR0VfSEVJR0hUID0gODAwO1xuXG4gICAgbGV0IHNYID0gMDtcbiAgICBsZXQgc1kgPSAwOyAvLyBzcGluWCwgc3BpbllcbiAgICBsZXQgcFggPSAwO1xuICAgIGxldCBwWSA9IDA7IC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgICAvLyBMZWdhY3lcbiAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgc1kgPSBlLmRldGFpbDtcbiAgICB9XG4gICAgaWYgKCd3aGVlbERlbHRhJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGEgLyAxMjA7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YVknIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YVkgLyAxMjA7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgIHNYID0gLWUud2hlZWxEZWx0YVggLyAxMjA7XG4gICAgfVxuXG4gICAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICAgIGlmICgnYXhpcycgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICBzWCA9IHNZO1xuICAgICAgc1kgPSAwO1xuICAgIH1cblxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuICAgIGlmICgnZGVsdGFYJyBpbiBlKSB7XG4gICAgICBwWCA9IGUuZGVsdGFYO1xuICAgIH1cblxuICAgIGlmIChlLnNoaWZ0S2V5ICYmICFwWCkge1xuICAgICAgLy8gaWYgdXNlciBzY3JvbGxzIHdpdGggc2hpZnQgaGUgd2FudHMgaG9yaXpvbnRhbCBzY3JvbGxcbiAgICAgIHBYID0gcFk7XG4gICAgICBwWSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKChwWCB8fCBwWSkgJiYgZS5kZWx0YU1vZGUpIHtcbiAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkge1xuICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gICAgaWYgKHBYICYmICFzWCkge1xuICAgICAgc1ggPSBwWCA8IDEgPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmIChwWSAmJiAhc1kpIHtcbiAgICAgIHNZID0gcFkgPCAxID8gLTEgOiAxO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzcGluWDogc1gsXG4gICAgICBzcGluWTogc1ksXG4gICAgICBwaXhlbFg6IHBYLFxuICAgICAgcGl4ZWxZOiBwWSxcbiAgICB9O1xuICB9LFxuICBoYW5kbGVNb3VzZUVudGVyKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IHRydWU7XG4gIH0sXG4gIGhhbmRsZU1vdXNlTGVhdmUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gZmFsc2U7XG4gIH0sXG4gIGhhbmRsZShldmVudCkge1xuICAgIGxldCBlID0gZXZlbnQ7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgbGV0IHRhcmdldCA9IHN3aXBlci4kZWw7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5tb3VzZUVudGVyZWQgJiYgIXRhcmdldFswXS5jb250YWlucyhlLnRhcmdldCkgJiYgIXBhcmFtcy5yZWxlYXNlT25FZGdlcylcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDsgLy8ganF1ZXJ5IGZpeFxuICAgIGxldCBkZWx0YSA9IDA7XG4gICAgY29uc3QgcnRsRmFjdG9yID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcblxuICAgIGNvbnN0IGRhdGEgPSBNb3VzZXdoZWVsLm5vcm1hbGl6ZShlKTtcblxuICAgIGlmIChwYXJhbXMuZm9yY2VUb0F4aXMpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSkgZGVsdGEgPSAtZGF0YS5waXhlbFggKiBydGxGYWN0b3I7XG4gICAgICAgIGVsc2UgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSAtZGF0YS5waXhlbFk7XG4gICAgICBlbHNlIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWx0YSA9XG4gICAgICAgIE1hdGguYWJzKGRhdGEucGl4ZWxYKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxZKSA/IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvciA6IC1kYXRhLnBpeGVsWTtcbiAgICB9XG5cbiAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0cnVlO1xuXG4gICAgaWYgKHBhcmFtcy5pbnZlcnQpIGRlbHRhID0gLWRlbHRhO1xuXG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGluIGEgdmFyaWFibGUgd2hpY2ggc3RvcmVzIHRoZSByZWxldmFudCBkYXRhXG4gICAgICBjb25zdCBuZXdFdmVudCA9IHtcbiAgICAgICAgdGltZTogbm93KCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKSxcbiAgICAgICAgcmF3OiBldmVudCxcbiAgICAgIH07XG5cbiAgICAgIC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuICAgICAgY29uc3QgcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcbiAgICAgIGlmIChyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMikge1xuICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICB9XG4gICAgICBjb25zdCBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGhcbiAgICAgICAgPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpO1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAvLyAgIElmIGRpcmVjdGlvbiBoYXMgY2hhbmdlZCBvclxuICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgIC8vIEVsc2UgKHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHdoZWVsIGlzIG1vdmVkKTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG4gICAgICBpZiAocHJldkV2ZW50KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBuZXdFdmVudC5kaXJlY3Rpb24gIT09IHByZXZFdmVudC5kaXJlY3Rpb24gfHxcbiAgICAgICAgICBuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fFxuICAgICAgICAgIG5ld0V2ZW50LnRpbWUgPiBwcmV2RXZlbnQudGltZSArIDE1MFxuICAgICAgICApIHtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC5hbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGl0J3MgdGltZSB0byByZWxlYXNlIHRoZSBzY3JvbGw6XG4gICAgICAvLyAgIFJldHVybiBub3cgc28geW91IGRvbid0IGhpdCB0aGUgcHJldmVudERlZmF1bHQuXG4gICAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwucmVsZWFzZVNjcm9sbChuZXdFdmVudCkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZyZWVtb2RlIG9yIHNjcm9sbENvbnRhaW5lcjpcblxuICAgICAgLy8gSWYgd2UgcmVjZW50bHkgc25hcHBlZCBhZnRlciBhIG1vbWVudHVtIHNjcm9sbCwgdGhlbiBpZ25vcmUgd2hlZWwgZXZlbnRzXG4gICAgICAvLyB0byBnaXZlIHRpbWUgZm9yIHRoZSBkZWNlbGVyYXRpb24gdG8gZmluaXNoLiBTdG9wIGlnbm9yaW5nIGFmdGVyIDUwMCBtc2Vjc1xuICAgICAgLy8gb3IgaWYgaXQncyBhIG5ldyBzY3JvbGwgKGxhcmdlciBkZWx0YSBvciBpbnZlcnNlIHNpZ24gYXMgbGFzdCBldmVudCBiZWZvcmVcbiAgICAgIC8vIGFuIGVuZC1vZi1tb21lbnR1bSBzbmFwKS5cbiAgICAgIGNvbnN0IG5ld0V2ZW50ID0ge1xuICAgICAgICB0aW1lOiBub3coKSxcbiAgICAgICAgZGVsdGE6IE1hdGguYWJzKGRlbHRhKSxcbiAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnNpZ24oZGVsdGEpLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHsgbGFzdEV2ZW50QmVmb3JlU25hcCB9ID0gc3dpcGVyLm1vdXNld2hlZWw7XG4gICAgICBjb25zdCBpZ25vcmVXaGVlbEV2ZW50cyA9XG4gICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgJiZcbiAgICAgICAgbmV3RXZlbnQudGltZSA8IGxhc3RFdmVudEJlZm9yZVNuYXAudGltZSArIDUwMCAmJlxuICAgICAgICBuZXdFdmVudC5kZWx0YSA8PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRlbHRhICYmXG4gICAgICAgIG5ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG4gICAgICBpZiAoIWlnbm9yZVdoZWVsRXZlbnRzKSB7XG4gICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBvc2l0aW9uID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHk7XG4gICAgICAgIGNvbnN0IHdhc0JlZ2lubmluZyA9IHN3aXBlci5pc0JlZ2lubmluZztcbiAgICAgICAgY29uc3Qgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICBpZiAocG9zaXRpb24gPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcblxuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgICBpZiAoKCF3YXNCZWdpbm5pbmcgJiYgc3dpcGVyLmlzQmVnaW5uaW5nKSB8fCAoIXdhc0VuZCAmJiBzd2lwZXIuaXNFbmQpKSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgLy8gV2hlbiB3aGVlbCBzY3JvbGxpbmcgc3RhcnRzIHdpdGggc3RpY2t5IChha2Egc25hcCkgZW5hYmxlZCwgdGhlbiBkZXRlY3RcbiAgICAgICAgICAvLyB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGJ5IHN0b3JpbmcgcmVjZW50IChOPTE1Pykgd2hlZWwgZXZlbnRzLlxuICAgICAgICAgIC8vIDEuIGRvIGFsbCBOIGV2ZW50cyBoYXZlIGRlY3JlYXNpbmcgb3Igc2FtZSAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhP1xuICAgICAgICAgIC8vIDIuIGRpZCBhbGwgTiBldmVudHMgYXJyaXZlIGluIHRoZSBsYXN0IE0gKE09NTAwPykgbXNlY3M/XG4gICAgICAgICAgLy8gMy4gZG9lcyB0aGUgZWFybGllc3QgZXZlbnQgaGF2ZSBhbiAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhIHRoYXQnc1xuICAgICAgICAgIC8vICAgIGF0IGxlYXN0IFAgKFA9MT8pIGxhcmdlciB0aGFuIHRoZSBtb3N0IHJlY2VudCBldmVudCdzIGRlbHRhP1xuICAgICAgICAgIC8vIDQuIGRvZXMgdGhlIGxhdGVzdCBldmVudCBoYXZlIGEgZGVsdGEgdGhhdCdzIHNtYWxsZXIgdGhhbiBRIChRPTY/KSBwaXhlbHM/XG4gICAgICAgICAgLy8gSWYgMS00IGFyZSBcInllc1wiIHRoZW4gd2UncmUgbmVhciB0aGUgZW5kIG9mIGEgbW9tdW50dW0gc2Nyb2xsIGRlY2VsZXJhdGlvbi5cbiAgICAgICAgICAvLyBTbmFwIGltbWVkaWF0ZWx5IGFuZCBpZ25vcmUgcmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbC5cbiAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBmb3IgXCJyZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsXCIgZGV0ZXJtaW5hdGlvbi5cbiAgICAgICAgICAvLyBJZiAxLTQgYXJlbid0IHNhdGlzZmllZCwgdGhlbiB3YWl0IHRvIHNuYXAgdW50aWwgNTAwbXMgYWZ0ZXIgdGhlIGxhc3QgZXZlbnQuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQpO1xuICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3QgcmVjZW50V2hlZWxFdmVudHMgPSBzd2lwZXIubW91c2V3aGVlbC5yZWNlbnRXaGVlbEV2ZW50cztcbiAgICAgICAgICBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHByZXZFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3QgZmlyc3RFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzWzBdO1xuICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHByZXZFdmVudCAmJlxuICAgICAgICAgICAgKG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbilcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEluY3JlYXNpbmcgb3IgcmV2ZXJzZS1zaWduIGRlbHRhIG1lYW5zIHRoZSB1c2VyIHN0YXJ0ZWQgc2Nyb2xsaW5nIGFnYWluLiBDbGVhciB0aGUgd2hlZWwgZXZlbnQgbG9nLlxuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPj0gMTUgJiZcbiAgICAgICAgICAgIG5ld0V2ZW50LnRpbWUgLSBmaXJzdEV2ZW50LnRpbWUgPCA1MDAgJiZcbiAgICAgICAgICAgIGZpcnN0RXZlbnQuZGVsdGEgLSBuZXdFdmVudC5kZWx0YSA+PSAxICYmXG4gICAgICAgICAgICBuZXdFdmVudC5kZWx0YSA8PSA2XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBXZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBkZWNlbGVyYXRpb24gb2YgYSBtb21lbnR1bSBzY3JvbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAgICAgICAgICAgLy8gdG8gd2FpdCBmb3IgbW9yZSBldmVudHMuIFNuYXAgQVNBUCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgICAgICAgICAgLy8gQWxzbywgYmVjYXVzZSB0aGVyZSdzIHNvbWUgcmVtYWluaW5nIG1vbWVudHVtIHdlJ2xsIGJpYXMgdGhlIHNuYXAgaW4gdGhlXG4gICAgICAgICAgICAvLyBkaXJlY3Rpb24gb2YgdGhlIG9uZ29pbmcgc2Nyb2xsIGJlY2F1c2UgaXQncyBiZXR0ZXIgVVggZm9yIHRoZSBzY3JvbGwgdG8gc25hcFxuICAgICAgICAgICAgLy8gaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoZSBzY3JvbGwgaW5zdGVhZCBvZiByZXZlcnNpbmcgdG8gc25hcC4gIFRoZXJlZm9yZSxcbiAgICAgICAgICAgIC8vIGlmIGl0J3MgYWxyZWFkeSBzY3JvbGxlZCBtb3JlIHRoYW4gMjAlIGluIHRoZSBjdXJyZW50IGRpcmVjdGlvbiwga2VlcCBnb2luZy5cbiAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IGRlbHRhID4gMCA/IDAuOCA6IDAuMjtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudDtcbiAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCAwKTsgLy8gbm8gZGVsYXk7IG1vdmUgb24gbmV4dCB0aWNrXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghc3dpcGVyLm1vdXNld2hlZWwudGltZW91dCkge1xuICAgICAgICAgICAgLy8gaWYgd2UgZ2V0IGhlcmUsIHRoZW4gd2UgaGF2ZW4ndCBkZXRlY3RlZCB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsLCBzb1xuICAgICAgICAgICAgLy8gd2UnbGwgY29uc2lkZXIgYSBzY3JvbGwgXCJjb21wbGV0ZVwiIHdoZW4gdGhlcmUgaGF2ZW4ndCBiZWVuIGFueSB3aGVlbCBldmVudHNcbiAgICAgICAgICAgIC8vIGZvciA1MDBtcy5cbiAgICAgICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwubGFzdEV2ZW50QmVmb3JlU25hcCA9IG5ld0V2ZW50O1xuICAgICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVtaXQgZXZlbnRcbiAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAgIC8vIFN0b3AgYXV0b3BsYXlcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uKVxuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIC8vIFJldHVybiBwYWdlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9uc1xuICAgICAgICBpZiAocG9zaXRpb24gPT09IHN3aXBlci5taW5UcmFuc2xhdGUoKSB8fCBwb3NpdGlvbiA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgYW5pbWF0ZVNsaWRlcihuZXdFdmVudCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgLy8gSWYgdGhlIG1vdmVtZW50IGlzIE5PVCBiaWcgZW5vdWdoIGFuZFxuICAgIC8vIGlmIHRoZSBsYXN0IHRpbWUgdGhlIHVzZXIgc2Nyb2xsZWQgd2FzIHRvbyBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgKGF2b2lkIGNvbnRpbnVvdXNseSB0cmlnZ2VyaW5nIHRoZSBzbGlkZXIpOlxuICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS5cbiAgICBpZiAobmV3RXZlbnQuZGVsdGEgPj0gNiAmJiBub3coKSAtIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lIDwgNjApIHtcbiAgICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBJZiB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBlbmQ6XG4gICAgLy8gICBJZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGxhdGVzdCBzbGlkZSBvclxuICAgIC8vICAgaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgLy8gICAgIEdvIHRvIG5leHQgc2xpZGUgYW5kXG4gICAgLy8gICAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG4gICAgLy8gRWxzZSAodGhlIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGJlZ2lubmluZykgYW5kXG4gICAgLy8gaWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBmaXJzdCBzbGlkZSBvclxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZFxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAvLyAgIEdvIHRvIHByZXYgc2xpZGUgYW5kXG4gICAgLy8gICBlbWl0IGEgc2Nyb2xsIGV2ZW50LlxuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIG5ld0V2ZW50LnJhdyk7XG4gICAgfVxuICAgIC8vIElmIHlvdSBnb3QgaGVyZSBpcyBiZWNhdXNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiB0cmlnZ2VyZWQgc28gc3RvcmUgdGhlIGN1cnJlbnQgdGltZVxuICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lID0gbmV3IHdpbmRvdy5EYXRlKCkuZ2V0VGltZSgpO1xuICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIHJlbGVhc2VTY3JvbGwobmV3RXZlbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbDtcbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wICYmIHBhcmFtcy5yZWxlYXNlT25FZGdlcykge1xuICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICBsZXQgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuICAgIHRhcmdldC5vbignbW91c2VlbnRlcicsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIpO1xuICAgIHRhcmdldC5vbignbW91c2VsZWF2ZScsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlTGVhdmUpO1xuICAgIHRhcmdldC5vbihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGV2ZW50ID0gTW91c2V3aGVlbC5ldmVudCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWV2ZW50KSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHRhcmdldCA9IHN3aXBlci4kZWw7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cbiAgICB0YXJnZXQub2ZmKGV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ21vdXNld2hlZWwnLFxuICBwYXJhbXM6IHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBtb3VzZXdoZWVsOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBsYXN0U2Nyb2xsVGltZTogbm93KCksXG4gICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXA6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVjZW50V2hlZWxFdmVudHM6IFtdLFxuXG4gICAgICAgIGVuYWJsZTogTW91c2V3aGVlbC5lbmFibGUsXG4gICAgICAgIGRpc2FibGU6IE1vdXNld2hlZWwuZGlzYWJsZSxcbiAgICAgICAgaGFuZGxlOiBNb3VzZXdoZWVsLmhhbmRsZSxcbiAgICAgICAgaGFuZGxlTW91c2VFbnRlcjogTW91c2V3aGVlbC5oYW5kbGVNb3VzZUVudGVyLFxuICAgICAgICBoYW5kbGVNb3VzZUxlYXZlOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgIGFuaW1hdGVTbGlkZXI6IE1vdXNld2hlZWwuYW5pbWF0ZVNsaWRlcixcbiAgICAgICAgcmVsZWFzZVNjcm9sbDogTW91c2V3aGVlbC5yZWxlYXNlU2Nyb2xsLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZGlzYWJsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkKSBzd2lwZXIubW91c2V3aGVlbC5lbmFibGUoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmRpc2FibGUoKTtcbiAgICB9LFxuICB9LFxufTtcbiIsImltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRNb2R1bGVNZXRob2RzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5jb25zdCBOYXZpZ2F0aW9uID0ge1xuICB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgJHByZXZFbC5hZGRDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcHJldkVsLnJlbW92ZUNsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH1cbiAgICAgICRwcmV2RWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShcbiAgICAgICAgcGFyYW1zLmxvY2tDbGFzcyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfVxuICAgICAgJG5leHRFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKFxuICAgICAgICBwYXJhbXMubG9ja0NsYXNzLFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG4gIG9uUHJldkNsaWNrKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gIH0sXG4gIG9uTmV4dENsaWNrKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuXG4gICAgbGV0ICRuZXh0RWw7XG4gICAgbGV0ICRwcmV2RWw7XG4gICAgaWYgKHBhcmFtcy5uZXh0RWwpIHtcbiAgICAgICRuZXh0RWwgPSAkKHBhcmFtcy5uZXh0RWwpO1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmXG4gICAgICAgIHR5cGVvZiBwYXJhbXMubmV4dEVsID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAkbmV4dEVsLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5uZXh0RWwpLmxlbmd0aCA9PT0gMVxuICAgICAgKSB7XG4gICAgICAgICRuZXh0RWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMucHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gJChwYXJhbXMucHJldkVsKTtcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJlxuICAgICAgICB0eXBlb2YgcGFyYW1zLnByZXZFbCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgJHByZXZFbC5sZW5ndGggPiAxICYmXG4gICAgICAgIHN3aXBlci4kZWwuZmluZChwYXJhbXMucHJldkVsKS5sZW5ndGggPT09IDFcbiAgICAgICkge1xuICAgICAgICAkcHJldkVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgJG5leHRFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgJHByZXZFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vblByZXZDbGljayk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICAkbmV4dEVsLFxuICAgICAgbmV4dEVsOiAkbmV4dEVsICYmICRuZXh0RWxbMF0sXG4gICAgICAkcHJldkVsLFxuICAgICAgcHJldkVsOiAkcHJldkVsICYmICRwcmV2RWxbMF0sXG4gICAgfSk7XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRuZXh0RWwsICRwcmV2RWwgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoKSB7XG4gICAgICAkbmV4dEVsLm9mZignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICRwcmV2RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICAgICRwcmV2RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ25hdmlnYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICBuZXh0RWw6IG51bGwsXG4gICAgICBwcmV2RWw6IG51bGwsXG5cbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgLi4uTmF2aWdhdGlvbixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgdG9FZGdlKHN3aXBlcikge1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBmcm9tRWRnZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIGNsaWNrKHN3aXBlciwgZSkge1xuICAgICAgY29uc3QgeyAkbmV4dEVsLCAkcHJldkVsIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmXG4gICAgICAgICEkKGUudGFyZ2V0KS5pcygkcHJldkVsKSAmJlxuICAgICAgICAhJChlLnRhcmdldCkuaXMoJG5leHRFbClcbiAgICAgICkge1xuICAgICAgICBsZXQgaXNIaWRkZW47XG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoJHByZXZFbCkge1xuICAgICAgICAgIGlzSGlkZGVuID0gJHByZXZFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uSGlkZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkbmV4dEVsKSB7XG4gICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgJHByZXZFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuY29uc3QgUGFnaW5hdGlvbiA9IHtcbiAgdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoXG4gICAgICAhcGFyYW1zLmVsIHx8XG4gICAgICAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHxcbiAgICAgICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHxcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDBcbiAgICApXG4gICAgICByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID1cbiAgICAgIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkXG4gICAgICAgID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aFxuICAgICAgICA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgY29uc3QgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3BcbiAgICAgID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMikgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKVxuICAgICAgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoXG4gICAgICAgIChzd2lwZXIuYWN0aXZlSW5kZXggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAsXG4gICAgICApO1xuICAgICAgaWYgKGN1cnJlbnQgPiBzbGlkZXNMZW5ndGggLSAxIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIHtcbiAgICAgICAgY3VycmVudCAtPSBzbGlkZXNMZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzICogMjtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50ID4gdG90YWwgLSAxKSBjdXJyZW50IC09IHRvdGFsO1xuICAgICAgaWYgKGN1cnJlbnQgPCAwICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvblR5cGUgIT09ICdidWxsZXRzJykgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9XG4gICAgLy8gVHlwZXNcbiAgICBpZiAoXG4gICAgICBwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmXG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmXG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIGNvbnN0IGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgbGV0IGZpcnN0SW5kZXg7XG4gICAgICBsZXQgbGFzdEluZGV4O1xuICAgICAgbGV0IG1pZEluZGV4O1xuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplID0gYnVsbGV0c1xuICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgIFtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgJGVsLmNzcyhcbiAgICAgICAgICBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsXG4gICAgICAgICAgYCR7c3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCl9cHhgLFxuICAgICAgICApO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA+IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpcnN0SW5kZXggPSBjdXJyZW50IC0gc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4O1xuICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICB9XG4gICAgICBidWxsZXRzLnJlbW92ZUNsYXNzKFxuICAgICAgICBgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0LW5leHQgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXYgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXYtcHJldiAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAsXG4gICAgICApO1xuICAgICAgaWYgKCRlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGJ1bGxldHMuZWFjaCgoYnVsbGV0KSA9PiB7XG4gICAgICAgICAgY29uc3QgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcbiAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldFxuICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2YClcbiAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldi1wcmV2YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0XG4gICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHRgKVxuICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0LW5leHRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgJGJ1bGxldCA9IGJ1bGxldHMuZXEoY3VycmVudCk7XG4gICAgICAgIGNvbnN0IGJ1bGxldEluZGV4ID0gJGJ1bGxldC5pbmRleCgpO1xuICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCAkZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGZpcnN0SW5kZXgpO1xuICAgICAgICAgIGNvbnN0ICRsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShsYXN0SW5kZXgpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBidWxsZXRzLmVxKGkpLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gYnVsbGV0cy5sZW5ndGggLSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgIGJ1bGxldHMuZXEoYnVsbGV0cy5sZW5ndGggLSBpKS5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBidWxsZXRzXG4gICAgICAgICAgICAgICAgLmVxKGJ1bGxldHMubGVuZ3RoIC0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldmApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJGZpcnN0RGlzcGxheWVkQnVsbGV0XG4gICAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LXByZXZgKVxuICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2LXByZXZgKTtcbiAgICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dGApXG4gICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHQtbmV4dGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZmlyc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2YClcbiAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2LXByZXZgKTtcbiAgICAgICAgICAgICRsYXN0RGlzcGxheWVkQnVsbGV0XG4gICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dGApXG4gICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dC1uZXh0YCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNCdWxsZXRzTGVuZ3RoID0gTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KTtcbiAgICAgICAgY29uc3QgYnVsbGV0c09mZnNldCA9XG4gICAgICAgICAgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpIC8gMiAtXG4gICAgICAgICAgbWlkSW5kZXggKiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplO1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5jc3Moc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnLCBgJHtidWxsZXRzT2Zmc2V0fXB4YCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgJGVsLmZpbmQoYC4ke3BhcmFtcy5jdXJyZW50Q2xhc3N9YCkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKSk7XG4gICAgICAkZWwuZmluZChgLiR7cGFyYW1zLnRvdGFsQ2xhc3N9YCkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCkpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGxldCBwcm9ncmVzc2JhckRpcmVjdGlvbjtcbiAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICB9XG4gICAgICBjb25zdCBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgIGxldCBzY2FsZVggPSAxO1xuICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgfVxuICAgICAgJGVsXG4gICAgICAgIC5maW5kKGAuJHtwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3N9YClcbiAgICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWCgke3NjYWxlWH0pIHNjYWxlWSgke3NjYWxlWX0pYClcbiAgICAgICAgLnRyYW5zaXRpb24oc3dpcGVyLnBhcmFtcy5zcGVlZCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgJGVsLmh0bWwocGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCkpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCAkZWxbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsICRlbFswXSk7XG4gICAgfVxuICAgICRlbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKFxuICAgICAgcGFyYW1zLmxvY2tDbGFzcyxcbiAgICApO1xuICB9LFxuICByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChcbiAgICAgICFwYXJhbXMuZWwgfHxcbiAgICAgICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fFxuICAgICAgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fFxuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMFxuICAgIClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPVxuICAgICAgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWRcbiAgICAgICAgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoXG4gICAgICAgIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG5cbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgbGV0IHBhZ2luYXRpb25IVE1MID0gJyc7XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgIGNvbnN0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcFxuICAgICAgICA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cClcbiAgICAgICAgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9ICRlbC5maW5kKGAuJHtwYXJhbXMuYnVsbGV0Q2xhc3N9YCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPVxuICAgICAgICAgIGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+YCArXG4gICAgICAgICAgJyAvICcgK1xuICAgICAgICAgIGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnRvdGFsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICB9XG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhcikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhci5jYWxsKHN3aXBlciwgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICB9XG4gICAgICAkZWwuaHRtbChwYWdpbmF0aW9uSFRNTCk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3dpcGVyLnBhZ2luYXRpb24uJGVsWzBdKTtcbiAgICB9XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcblxuICAgIGxldCAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmICRlbC5sZW5ndGggPiAxKSB7XG4gICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNsaWNrYWJsZUNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG5cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICRlbC5hZGRDbGFzcyhwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9uKCdjbGljaycsIGAuJHtwYXJhbXMuYnVsbGV0Q2xhc3N9YCwgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IGluZGV4ID0gJCh0aGlzKS5pbmRleCgpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXh0ZW5kKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgIH0pO1xuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChcbiAgICAgICFwYXJhbXMuZWwgfHxcbiAgICAgICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fFxuICAgICAgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fFxuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMFxuICAgIClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG5cbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLm9mZignY2xpY2snLCBgLiR7cGFyYW1zLmJ1bGxldENsYXNzfWApO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BhZ2luYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogKG51bWJlcikgPT4gbnVtYmVyLFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogKG51bWJlcikgPT4gbnVtYmVyLFxuICAgICAgYnVsbGV0Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQnLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlJyxcbiAgICAgIG1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi0nLCAvLyBORVdcbiAgICAgIGN1cnJlbnRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWN1cnJlbnQnLFxuICAgICAgdG90YWxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXRvdGFsJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbCcsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZScsXG4gICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsIC8vIE5FV1xuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tbG9jaycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleDogMCxcbiAgICAgICAgLi4uUGFnaW5hdGlvbixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdChzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmluaXQoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBhY3RpdmVJbmRleENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNuYXBJbmRleENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVzTGVuZ3RoQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbmFwR3JpZExlbmd0aENoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5kZXN0cm95KCk7XG4gICAgfSxcbiAgICBjbGljayhzd2lwZXIsIGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmXG4gICAgICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJlxuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID4gMCAmJlxuICAgICAgICAhJChlLnRhcmdldCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGlzSGlkZGVuID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uU2hvdycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIG5leHRUaWNrLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuY29uc3QgU2Nyb2xsYmFyID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsIHJ0bFRyYW5zbGF0ZTogcnRsLCBwcm9ncmVzcyB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgZHJhZ1NpemUsIHRyYWNrU2l6ZSwgJGRyYWdFbCwgJGVsIH0gPSBzY3JvbGxiYXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG5cbiAgICBsZXQgbmV3U2l6ZSA9IGRyYWdTaXplO1xuICAgIGxldCBuZXdQb3MgPSAodHJhY2tTaXplIC0gZHJhZ1NpemUpICogcHJvZ3Jlc3M7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgbmV3UG9zID0gLW5ld1BvcztcbiAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICBuZXdQb3MgPSAwO1xuICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRkcmFnRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke25ld1Bvc31weCwgMCwgMClgKTtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDBweCwgJHtuZXdQb3N9cHgsIDApYCk7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IGAke25ld1NpemV9cHhgO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQpO1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgJGVsLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuJGRyYWdFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSxcbiAgdXBkYXRlU2l6ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHsgc2Nyb2xsYmFyIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZHJhZ0VsLCAkZWwgfSA9IHNjcm9sbGJhcjtcblxuICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSAnJztcbiAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgIGNvbnN0IHRyYWNrU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRlbFswXS5vZmZzZXRXaWR0aCA6ICRlbFswXS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjb25zdCBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyBzd2lwZXIudmlydHVhbFNpemU7XG4gICAgY29uc3QgbW92ZURpdmlkZXIgPSBkaXZpZGVyICogKHRyYWNrU2l6ZSAvIHN3aXBlci5zaXplKTtcbiAgICBsZXQgZHJhZ1NpemU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplID09PSAnYXV0bycpIHtcbiAgICAgIGRyYWdTaXplID0gdHJhY2tTaXplICogZGl2aWRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ1NpemUgPSBwYXJzZUludChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwgMTApO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtkcmFnU2l6ZX1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gYCR7ZHJhZ1NpemV9cHhgO1xuICAgIH1cblxuICAgIGlmIChkaXZpZGVyID49IDEpIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgIH1cbiAgICBleHRlbmQoc2Nyb2xsYmFyLCB7XG4gICAgICB0cmFja1NpemUsXG4gICAgICBkaXZpZGVyLFxuICAgICAgbW92ZURpdmlkZXIsXG4gICAgICBkcmFnU2l6ZSxcbiAgICB9KTtcbiAgICBzY3JvbGxiYXIuJGVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oXG4gICAgICBzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MsXG4gICAgKTtcbiAgfSxcbiAgZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnXG4gICAgICAgID8gZS50YXJnZXRUb3VjaGVzWzBdLmNsaWVudFhcbiAgICAgICAgOiBlLmNsaWVudFg7XG4gICAgfVxuICAgIHJldHVybiBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnXG4gICAgICA/IGUudGFyZ2V0VG91Y2hlc1swXS5jbGllbnRZXG4gICAgICA6IGUuY2xpZW50WTtcbiAgfSxcbiAgc2V0RHJhZ1Bvc2l0aW9uKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGVsLCBkcmFnU2l6ZSwgdHJhY2tTaXplLCBkcmFnU3RhcnRQb3MgfSA9IHNjcm9sbGJhcjtcblxuICAgIGxldCBwb3NpdGlvblJhdGlvO1xuICAgIHBvc2l0aW9uUmF0aW8gPVxuICAgICAgKHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkgLVxuICAgICAgICAkZWwub2Zmc2V0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC1cbiAgICAgICAgKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC9cbiAgICAgICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgcG9zaXRpb25SYXRpbyA9IE1hdGgubWF4KE1hdGgubWluKHBvc2l0aW9uUmF0aW8sIDEpLCAwKTtcbiAgICBpZiAocnRsKSB7XG4gICAgICBwb3NpdGlvblJhdGlvID0gMSAtIHBvc2l0aW9uUmF0aW87XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb24gPVxuICAgICAgc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuXG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9LFxuICBvbkRyYWdTdGFydChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGVsLCAkZHJhZ0VsIH0gPSBzY3JvbGxiYXI7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQgPSB0cnVlO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZHJhZ1N0YXJ0UG9zID1cbiAgICAgIGUudGFyZ2V0ID09PSAkZHJhZ0VsWzBdIHx8IGUudGFyZ2V0ID09PSAkZHJhZ0VsXG4gICAgICAgID8gc2Nyb2xsYmFyLmdldFBvaW50ZXJQb3NpdGlvbihlKSAtXG4gICAgICAgICAgZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddXG4gICAgICAgIDogbnVsbDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigxMDApO1xuICAgICRkcmFnRWwudHJhbnNpdGlvbigxMDApO1xuICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG5cbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG5cbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAxKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJ25vbmUnKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICB9LFxuICBvbkRyYWdNb3ZlKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwsICRkcmFnRWwgfSA9IHNjcm9sbGJhcjtcblxuICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG4gICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKDApO1xuICAgICRlbC50cmFuc2l0aW9uKDApO1xuICAgICRkcmFnRWwudHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgfSxcbiAgb25EcmFnRW5kKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7ICRlbCB9ID0gc2Nyb2xsYmFyO1xuXG4gICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdzY3JvbGwtc25hcC10eXBlJywgJycpO1xuICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKCcnKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0ID0gbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdFbmQnLCBlKTtcbiAgICBpZiAocGFyYW1zLnNuYXBPblJlbGVhc2UpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgIH1cbiAgfSxcbiAgZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgdG91Y2hFdmVudHNUb3VjaCwgdG91Y2hFdmVudHNEZXNrdG9wLCBwYXJhbXMsIHN1cHBvcnQgfSA9IHN3aXBlcjtcbiAgICBjb25zdCAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgIGNvbnN0IHRhcmdldCA9ICRlbFswXTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9XG4gICAgICBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVyc1xuICAgICAgICA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH1cbiAgICAgICAgOiBmYWxzZTtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPVxuICAgICAgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnNcbiAgICAgICAgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH1cbiAgICAgICAgOiBmYWxzZTtcbiAgICBpZiAoIXN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICB0b3VjaEV2ZW50c0Rlc2t0b3Auc3RhcnQsXG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsXG4gICAgICAgIGFjdGl2ZUxpc3RlbmVyLFxuICAgICAgKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcC5tb3ZlLFxuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsXG4gICAgICAgIGFjdGl2ZUxpc3RlbmVyLFxuICAgICAgKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsXG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLFxuICAgICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgY29uc3QgeyBzY3JvbGxiYXIsIHRvdWNoRXZlbnRzVG91Y2gsIHRvdWNoRXZlbnRzRGVza3RvcCwgcGFyYW1zLCBzdXBwb3J0IH0gPSBzd2lwZXI7XG4gICAgY29uc3QgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICBjb25zdCB0YXJnZXQgPSAkZWxbMF07XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXIgPVxuICAgICAgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnNcbiAgICAgICAgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBmYWxzZSB9XG4gICAgICAgIDogZmFsc2U7XG4gICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID1cbiAgICAgIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzXG4gICAgICAgID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9XG4gICAgICAgIDogZmFsc2U7XG4gICAgaWYgKCFzdXBwb3J0LnRvdWNoKSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgdG91Y2hFdmVudHNEZXNrdG9wLnN0YXJ0LFxuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LFxuICAgICAgICBhY3RpdmVMaXN0ZW5lcixcbiAgICAgICk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICB0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSxcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLFxuICAgICAgICBhY3RpdmVMaXN0ZW5lcixcbiAgICAgICk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICB0b3VjaEV2ZW50c0Rlc2t0b3AuZW5kLFxuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCxcbiAgICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgIHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsXG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsXG4gICAgICAgIGFjdGl2ZUxpc3RlbmVyLFxuICAgICAgKTtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICB0b3VjaEV2ZW50c1RvdWNoLm1vdmUsXG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSxcbiAgICAgICAgYWN0aXZlTGlzdGVuZXIsXG4gICAgICApO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJGVsOiAkc3dpcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcblxuICAgIGxldCAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgaWYgKFxuICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJlxuICAgICAgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICRlbC5sZW5ndGggPiAxICYmXG4gICAgICAkc3dpcGVyRWwuZmluZChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMVxuICAgICkge1xuICAgICAgJGVsID0gJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICB9XG5cbiAgICBsZXQgJGRyYWdFbCA9ICRlbC5maW5kKGAuJHtzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3N9YCk7XG4gICAgaWYgKCRkcmFnRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAkZHJhZ0VsID0gJChgPGRpdiBjbGFzcz1cIiR7c3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfVwiPjwvZGl2PmApO1xuICAgICAgJGVsLmFwcGVuZCgkZHJhZ0VsKTtcbiAgICB9XG5cbiAgICBleHRlbmQoc2Nyb2xsYmFyLCB7XG4gICAgICAkZWwsXG4gICAgICBlbDogJGVsWzBdLFxuICAgICAgJGRyYWdFbCxcbiAgICAgIGRyYWdFbDogJGRyYWdFbFswXSxcbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7XG4gICAgICBzY3JvbGxiYXIuZW5hYmxlRHJhZ2dhYmxlKCk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlKCk7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdzY3JvbGxiYXInLFxuICBwYXJhbXM6IHtcbiAgICBzY3JvbGxiYXI6IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgZHJhZ1NpemU6ICdhdXRvJyxcbiAgICAgIGhpZGU6IGZhbHNlLFxuICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcbiAgICAgIHNuYXBPblJlbGVhc2U6IHRydWUsXG4gICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWxvY2snLFxuICAgICAgZHJhZ0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1kcmFnJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICBpc1RvdWNoZWQ6IGZhbHNlLFxuICAgICAgICB0aW1lb3V0OiBudWxsLFxuICAgICAgICBkcmFnVGltZW91dDogbnVsbCxcbiAgICAgICAgLi4uU2Nyb2xsYmFyLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5pbml0KCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICB1cGRhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHJlc2l6ZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGUoc3dpcGVyKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBkZXN0cm95KHN3aXBlcikge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5kZXN0cm95KCk7XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IFBhcmFsbGF4ID0ge1xuICBzZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHJ0bCB9ID0gc3dpcGVyO1xuXG4gICAgY29uc3QgJGVsID0gJChlbCk7XG4gICAgY29uc3QgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuXG4gICAgY29uc3QgcCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheCcpIHx8ICcwJztcbiAgICBsZXQgeCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC14Jyk7XG4gICAgbGV0IHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteScpO1xuICAgIGNvbnN0IHNjYWxlID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlJyk7XG4gICAgY29uc3Qgb3BhY2l0eSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG5cbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB4ID0geCB8fCAnMCc7XG4gICAgICB5ID0geSB8fCAnMCc7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeSA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHA7XG4gICAgICB4ID0gJzAnO1xuICAgIH1cblxuICAgIGlmICh4LmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB4ID0gYCR7cGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSBgJHt4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9cHhgO1xuICAgIH1cbiAgICBpZiAoeS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeSA9IGAke3BhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzfSVgO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0gYCR7eSAqIHByb2dyZXNzfXB4YDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wYWNpdHkgIT09ICd1bmRlZmluZWQnICYmIG9wYWNpdHkgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRPcGFjaXR5ID0gb3BhY2l0eSAtIChvcGFjaXR5IC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSk7XG4gICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjYWxlID09PSAndW5kZWZpbmVkJyB8fCBzY2FsZSA9PT0gbnVsbCkge1xuICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fSwgJHt5fSwgMHB4KWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjdXJyZW50U2NhbGUgPSBzY2FsZSAtIChzY2FsZSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpO1xuICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fSwgJHt5fSwgMHB4KSBzY2FsZSgke2N1cnJlbnRTY2FsZX0pYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRlbCwgc2xpZGVzLCBwcm9ncmVzcywgc25hcEdyaWQgfSA9IHN3aXBlcjtcbiAgICAkZWxcbiAgICAgIC5jaGlsZHJlbihcbiAgICAgICAgJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nLFxuICAgICAgKVxuICAgICAgLmVhY2goKGVsKSA9PiB7XG4gICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKTtcbiAgICAgIH0pO1xuICAgIHNsaWRlcy5lYWNoKChzbGlkZUVsLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBsZXQgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gcHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgICQoc2xpZGVFbClcbiAgICAgICAgLmZpbmQoXG4gICAgICAgICAgJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nLFxuICAgICAgICApXG4gICAgICAgIC5lYWNoKChlbCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHNsaWRlUHJvZ3Jlc3MpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbiA9IHRoaXMucGFyYW1zLnNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRlbCB9ID0gc3dpcGVyO1xuICAgICRlbFxuICAgICAgLmZpbmQoXG4gICAgICAgICdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJyxcbiAgICAgIClcbiAgICAgIC5lYWNoKChwYXJhbGxheEVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgICAgbGV0IHBhcmFsbGF4RHVyYXRpb24gPVxuICAgICAgICAgIHBhcnNlSW50KCRwYXJhbGxheEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgICAgJHBhcmFsbGF4RWwudHJhbnNpdGlvbihwYXJhbGxheER1cmF0aW9uKTtcbiAgICAgIH0pO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncGFyYWxsYXgnLFxuICBwYXJhbXM6IHtcbiAgICBwYXJhbGxheDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBwYXJhbGxheDoge1xuICAgICAgICAuLi5QYXJhbGxheCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIH0sXG4gICAgaW5pdChzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuIiwiaW1wb3J0ICQgZnJvbSAnLi4vLi4vdXRpbHMvZG9tJztcbmltcG9ydCB7IGJpbmRNb2R1bGVNZXRob2RzLCBnZXRUcmFuc2xhdGUgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IFpvb20gPSB7XG4gIC8vIENhbGMgU2NhbGUgRnJvbSBNdWx0aS10b3VjaGVzXG4gIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSkge1xuICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuIDE7XG4gICAgY29uc3QgeDEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgY29uc3QgeTEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgY29uc3QgeDIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVg7XG4gICAgY29uc3QgeTIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVk7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHgyIC0geDEpICoqIDIgKyAoeTIgLSB5MSkgKiogMik7XG4gICAgcmV0dXJuIGRpc3RhbmNlO1xuICB9LFxuICAvLyBFdmVudHNcbiAgb25HZXN0dXJlU3RhcnQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlIH0gPSB6b29tO1xuICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgaWYgKCFzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgfHwgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlU3RhcnQgPSBab29tLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCB8fCAhZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGgpIHtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGggPT09IDApIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICBnZXN0dXJlLm1heFJhdGlvID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZVdyYXBFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VFbCkge1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDApO1xuICAgIH1cbiAgICBzd2lwZXIuem9vbS5pc1NjYWxpbmcgPSB0cnVlO1xuICB9LFxuICBvbkdlc3R1cmVDaGFuZ2UoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICBpZiAoIXN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIGlmIChlLnR5cGUgIT09ICd0b3VjaG1vdmUnIHx8IChlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSB0cnVlO1xuICAgICAgZ2VzdHVyZS5zY2FsZU1vdmUgPSBab29tLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7XG4gICAgfVxuXG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAoZS50eXBlID09PSAnZ2VzdHVyZWNoYW5nZScpIHpvb20ub25HZXN0dXJlU3RhcnQoZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICB6b29tLnNjYWxlID0gZS5zY2FsZSAqIHpvb20uY3VycmVudFNjYWxlO1xuICAgIH0gZWxzZSB7XG4gICAgICB6b29tLnNjYWxlID0gKGdlc3R1cmUuc2NhbGVNb3ZlIC8gZ2VzdHVyZS5zY2FsZVN0YXJ0KSAqIHpvb20uY3VycmVudFNjYWxlO1xuICAgIH1cbiAgICBpZiAoem9vbS5zY2FsZSA+IGdlc3R1cmUubWF4UmF0aW8pIHtcbiAgICAgIHpvb20uc2NhbGUgPSBnZXN0dXJlLm1heFJhdGlvIC0gMSArICh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbyArIDEpICoqIDAuNTtcbiAgICB9XG4gICAgaWYgKHpvb20uc2NhbGUgPCBwYXJhbXMubWluUmF0aW8pIHtcbiAgICAgIHpvb20uc2NhbGUgPSBwYXJhbXMubWluUmF0aW8gKyAxIC0gKHBhcmFtcy5taW5SYXRpbyAtIHpvb20uc2NhbGUgKyAxKSAqKiAwLjU7XG4gICAgfVxuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgKTtcbiAgfSxcbiAgb25HZXN0dXJlRW5kKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgY29uc3Qgc3VwcG9ydCA9IHN3aXBlci5zdXBwb3J0O1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlIH0gPSB6b29tO1xuICAgIGlmICghc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgaWYgKCF6b29tLmZha2VHZXN0dXJlVG91Y2hlZCB8fCAhem9vbS5mYWtlR2VzdHVyZU1vdmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgZS50eXBlICE9PSAndG91Y2hlbmQnIHx8XG4gICAgICAgIChlLnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgZS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGggPCAyICYmICFkZXZpY2UuYW5kcm9pZClcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHpvb20uc2NhbGUgPSBNYXRoLm1heChNYXRoLm1pbih6b29tLnNjYWxlLCBnZXN0dXJlLm1heFJhdGlvKSwgcGFyYW1zLm1pblJhdGlvKTtcbiAgICBnZXN0dXJlLiRpbWFnZUVsXG4gICAgICAudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKVxuICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYCk7XG4gICAgem9vbS5jdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgIHpvb20uaXNTY2FsaW5nID0gZmFsc2U7XG4gICAgaWYgKHpvb20uc2NhbGUgPT09IDEpIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gIH0sXG4gIG9uVG91Y2hTdGFydChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUsIGltYWdlIH0gPSB6b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChpbWFnZS5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBpZiAoZGV2aWNlLmFuZHJvaWQgJiYgZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaW1hZ2UuaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueCA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgfSxcbiAgb25Ub3VjaE1vdmUoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UsIHZlbG9jaXR5IH0gPSB6b29tO1xuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWdlc3R1cmUuJHNsaWRlRWwpIHJldHVybjtcblxuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2Uud2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBpbWFnZS5zdGFydFggPSBnZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd4JykgfHwgMDtcbiAgICAgIGltYWdlLnN0YXJ0WSA9IGdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3knKSB8fCAwO1xuICAgICAgZ2VzdHVyZS5zbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGdlc3R1cmUuc2xpZGVIZWlnaHQgPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMCk7XG4gICAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgICBpbWFnZS5zdGFydFggPSAtaW1hZ2Uuc3RhcnRYO1xuICAgICAgICBpbWFnZS5zdGFydFkgPSAtaW1hZ2Uuc3RhcnRZO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgY29uc3Qgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcblxuICAgIGlmIChzY2FsZWRXaWR0aCA8IGdlc3R1cmUuc2xpZGVXaWR0aCAmJiBzY2FsZWRIZWlnaHQgPCBnZXN0dXJlLnNsaWRlSGVpZ2h0KSByZXR1cm47XG5cbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcblxuICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPSBlLnR5cGUgPT09ICd0b3VjaG1vdmUnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC55ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICBpZiAoIWltYWdlLmlzTW92ZWQgJiYgIXpvb20uaXNTY2FsaW5nKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5pc0hvcml6b250YWwoKSAmJlxuICAgICAgICAoKE1hdGguZmxvb3IoaW1hZ2UubWluWCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJlxuICAgICAgICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPCBpbWFnZS50b3VjaGVzU3RhcnQueCkgfHxcbiAgICAgICAgICAoTWF0aC5mbG9vcihpbWFnZS5tYXhYKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmXG4gICAgICAgICAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpKVxuICAgICAgKSB7XG4gICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgICFzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiZcbiAgICAgICAgKChNYXRoLmZsb29yKGltYWdlLm1pblkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiZcbiAgICAgICAgICBpbWFnZS50b3VjaGVzQ3VycmVudC55IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnkpIHx8XG4gICAgICAgICAgKE1hdGguZmxvb3IoaW1hZ2UubWF4WSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJlxuICAgICAgICAgICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KSlcbiAgICAgICkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICBpbWFnZS5jdXJyZW50WCA9IGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBpbWFnZS50b3VjaGVzU3RhcnQueCArIGltYWdlLnN0YXJ0WDtcbiAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLnRvdWNoZXNDdXJyZW50LnkgLSBpbWFnZS50b3VjaGVzU3RhcnQueSArIGltYWdlLnN0YXJ0WTtcblxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA8IGltYWdlLm1pblgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWluWCArIDEgLSAoaW1hZ2UubWluWCAtIGltYWdlLmN1cnJlbnRYICsgMSkgKiogMC44O1xuICAgIH1cbiAgICBpZiAoaW1hZ2UuY3VycmVudFggPiBpbWFnZS5tYXhYKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WCA9IGltYWdlLm1heFggLSAxICsgKGltYWdlLmN1cnJlbnRYIC0gaW1hZ2UubWF4WCArIDEpICoqIDAuODtcbiAgICB9XG5cbiAgICBpZiAoaW1hZ2UuY3VycmVudFkgPCBpbWFnZS5taW5ZKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLm1pblkgKyAxIC0gKGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEpICoqIDAuODtcbiAgICB9XG4gICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIChpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkgKyAxKSAqKiAwLjg7XG4gICAgfVxuXG4gICAgLy8gVmVsb2NpdHlcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZlbG9jaXR5LnggPVxuICAgICAgKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICB2ZWxvY2l0eS55ID1cbiAgICAgIChpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgLyAoRGF0ZS5ub3coKSAtIHZlbG9jaXR5LnByZXZUaW1lKSAvIDI7XG4gICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSA8IDIpIHZlbG9jaXR5LnggPSAwO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgPCAyKSB2ZWxvY2l0eS55ID0gMDtcbiAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueTtcbiAgICB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7XG5cbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgKTtcbiAgfSxcbiAgb25Ub3VjaEVuZCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUsIGltYWdlLCB2ZWxvY2l0eSB9ID0gem9vbTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBsZXQgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgbGV0IG1vbWVudHVtRHVyYXRpb25ZID0gMzAwO1xuICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VYID0gdmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YO1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uWCA9IGltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgY29uc3QgbW9tZW50dW1EaXN0YW5jZVkgPSB2ZWxvY2l0eS55ICogbW9tZW50dW1EdXJhdGlvblk7XG4gICAgY29uc3QgbmV3UG9zaXRpb25ZID0gaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTtcblxuICAgIC8vIEZpeCBkdXJhdGlvblxuICAgIGlmICh2ZWxvY2l0eS54ICE9PSAwKVxuICAgICAgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7XG4gICAgaWYgKHZlbG9jaXR5LnkgIT09IDApXG4gICAgICBtb21lbnR1bUR1cmF0aW9uWSA9IE1hdGguYWJzKChuZXdQb3NpdGlvblkgLSBpbWFnZS5jdXJyZW50WSkgLyB2ZWxvY2l0eS55KTtcbiAgICBjb25zdCBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5tYXgobW9tZW50dW1EdXJhdGlvblgsIG1vbWVudHVtRHVyYXRpb25ZKTtcblxuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuXG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcblxuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsXG4gICAgICAudHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKVxuICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtpbWFnZS5jdXJyZW50WH1weCwgJHtpbWFnZS5jdXJyZW50WX1weCwwKWApO1xuICB9LFxuICBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlIH0gPSB6b29tO1xuICAgIGlmIChnZXN0dXJlLiRzbGlkZUVsICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgIH1cbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZVdyYXBFbCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgfVxuXG4gICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgIHpvb20uY3VycmVudFNjYWxlID0gMTtcblxuICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIFRvZ2dsZSBab29tXG4gIHRvZ2dsZShlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG5cbiAgICBpZiAoem9vbS5zY2FsZSAmJiB6b29tLnNjYWxlICE9PSAxKSB7XG4gICAgICAvLyBab29tIE91dFxuICAgICAgem9vbS5vdXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gWm9vbSBJblxuICAgICAgem9vbS5pbihlKTtcbiAgICB9XG4gIH0sXG4gIGluKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUsIGltYWdlIH0gPSB6b29tO1xuXG4gICAgaWYgKCFnZXN0dXJlLiRzbGlkZUVsKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsKSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMsIHBpY3R1cmUsIC5zd2lwZXItem9vbS10YXJnZXQnKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBnZXN0dXJlLiRzbGlkZUVsLmFkZENsYXNzKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuXG4gICAgbGV0IHRvdWNoWDtcbiAgICBsZXQgdG91Y2hZO1xuICAgIGxldCBvZmZzZXRYO1xuICAgIGxldCBvZmZzZXRZO1xuICAgIGxldCBkaWZmWDtcbiAgICBsZXQgZGlmZlk7XG4gICAgbGV0IHRyYW5zbGF0ZVg7XG4gICAgbGV0IHRyYW5zbGF0ZVk7XG4gICAgbGV0IGltYWdlV2lkdGg7XG4gICAgbGV0IGltYWdlSGVpZ2h0O1xuICAgIGxldCBzY2FsZWRXaWR0aDtcbiAgICBsZXQgc2NhbGVkSGVpZ2h0O1xuICAgIGxldCB0cmFuc2xhdGVNaW5YO1xuICAgIGxldCB0cmFuc2xhdGVNaW5ZO1xuICAgIGxldCB0cmFuc2xhdGVNYXhYO1xuICAgIGxldCB0cmFuc2xhdGVNYXhZO1xuICAgIGxldCBzbGlkZVdpZHRoO1xuICAgIGxldCBzbGlkZUhlaWdodDtcblxuICAgIGlmICh0eXBlb2YgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPT09ICd1bmRlZmluZWQnICYmIGUpIHtcbiAgICAgIHRvdWNoWCA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgdG91Y2hZID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvdWNoWCA9IGltYWdlLnRvdWNoZXNTdGFydC54O1xuICAgICAgdG91Y2hZID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lnk7XG4gICAgfVxuXG4gICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgem9vbS5jdXJyZW50U2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgIGlmIChlKSB7XG4gICAgICBzbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBvZmZzZXRYID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS5sZWZ0O1xuICAgICAgb2Zmc2V0WSA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkudG9wO1xuICAgICAgZGlmZlggPSBvZmZzZXRYICsgc2xpZGVXaWR0aCAvIDIgLSB0b3VjaFg7XG4gICAgICBkaWZmWSA9IG9mZnNldFkgKyBzbGlkZUhlaWdodCAvIDIgLSB0b3VjaFk7XG5cbiAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgaW1hZ2VIZWlnaHQgPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIHNjYWxlZFdpZHRoID0gaW1hZ2VXaWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICBzY2FsZWRIZWlnaHQgPSBpbWFnZUhlaWdodCAqIHpvb20uc2NhbGU7XG5cbiAgICAgIHRyYW5zbGF0ZU1pblggPSBNYXRoLm1pbihzbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgICB0cmFuc2xhdGVNaW5ZID0gTWF0aC5taW4oc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7XG4gICAgICB0cmFuc2xhdGVNYXhYID0gLXRyYW5zbGF0ZU1pblg7XG4gICAgICB0cmFuc2xhdGVNYXhZID0gLXRyYW5zbGF0ZU1pblk7XG5cbiAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuXG4gICAgICBpZiAodHJhbnNsYXRlWCA8IHRyYW5zbGF0ZU1pblgpIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1pblg7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNsYXRlWCA+IHRyYW5zbGF0ZU1heFgpIHtcbiAgICAgICAgdHJhbnNsYXRlWCA9IHRyYW5zbGF0ZU1heFg7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2xhdGVZIDwgdHJhbnNsYXRlTWluWSkge1xuICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWluWTtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2xhdGVZID4gdHJhbnNsYXRlTWF4WSkge1xuICAgICAgICB0cmFuc2xhdGVZID0gdHJhbnNsYXRlTWF4WTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNsYXRlWCA9IDA7XG4gICAgICB0cmFuc2xhdGVZID0gMDtcbiAgICB9XG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWxcbiAgICAgIC50cmFuc2l0aW9uKDMwMClcbiAgICAgIC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwgJHt0cmFuc2xhdGVZfXB4LDApYCk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgKTtcbiAgfSxcbiAgb3V0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSB9ID0gem9vbTtcblxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzLCBwaWN0dXJlLCAuc3dpcGVyLXpvb20tdGFyZ2V0Jyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgem9vbS5zY2FsZSA9IDE7XG4gICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgZ2VzdHVyZS4kc2xpZGVFbC5yZW1vdmVDbGFzcyhgJHtwYXJhbXMuem9vbWVkU2xpZGVDbGFzc31gKTtcbiAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHRvZ2dsZUdlc3R1cmVzKG1ldGhvZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgc2xpZGVTZWxlY3Rvcjogc2VsZWN0b3IsIHBhc3NpdmVMaXN0ZW5lcjogcGFzc2l2ZSB9ID0gem9vbTtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFttZXRob2RdKCdnZXN0dXJlc3RhcnQnLCBzZWxlY3Rvciwgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZSk7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWxbbWV0aG9kXSgnZ2VzdHVyZWNoYW5nZScsIHNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZSk7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWxbbWV0aG9kXSgnZ2VzdHVyZWVuZCcsIHNlbGVjdG9yLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZSk7XG4gIH0sXG4gIGVuYWJsZUdlc3R1cmVzKCkge1xuICAgIGlmICh0aGlzLnpvb20uZ2VzdHVyZXNFbmFibGVkKSByZXR1cm47XG4gICAgdGhpcy56b29tLmdlc3R1cmVzRW5hYmxlZCA9IHRydWU7XG4gICAgdGhpcy56b29tLnRvZ2dsZUdlc3R1cmVzKCdvbicpO1xuICB9LFxuICBkaXNhYmxlR2VzdHVyZXMoKSB7XG4gICAgaWYgKCF0aGlzLnpvb20uZ2VzdHVyZXNFbmFibGVkKSByZXR1cm47XG4gICAgdGhpcy56b29tLmdlc3R1cmVzRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuem9vbS50b2dnbGVHZXN0dXJlcygnb2ZmJyk7XG4gIH0sXG4gIC8vIEF0dGFjaC9EZXRhY2ggRXZlbnRzXG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG5cbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPVxuICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiZcbiAgICAgIHN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmXG4gICAgICBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnNcbiAgICAgICAgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH1cbiAgICAgICAgOiBmYWxzZTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlID0gc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXJcbiAgICAgID8geyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogdHJ1ZSB9XG4gICAgICA6IHRydWU7XG5cbiAgICBjb25zdCBzbGlkZVNlbGVjdG9yID0gYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuXG4gICAgc3dpcGVyLnpvb20ucGFzc2l2ZUxpc3RlbmVyID0gcGFzc2l2ZUxpc3RlbmVyO1xuICAgIHN3aXBlci56b29tLnNsaWRlU2VsZWN0b3IgPSBzbGlkZVNlbGVjdG9yO1xuXG4gICAgLy8gU2NhbGUgaW1hZ2VcbiAgICBpZiAoc3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIuem9vbS5lbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5lbmQsIHN3aXBlci56b29tLmRpc2FibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihcbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LFxuICAgICAgICBzbGlkZVNlbGVjdG9yLFxuICAgICAgICB6b29tLm9uR2VzdHVyZVN0YXJ0LFxuICAgICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICApO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oXG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLFxuICAgICAgICBzbGlkZVNlbGVjdG9yLFxuICAgICAgICB6b29tLm9uR2VzdHVyZUNoYW5nZSxcbiAgICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSxcbiAgICAgICk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihcbiAgICAgICAgc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCxcbiAgICAgICAgc2xpZGVTZWxlY3RvcixcbiAgICAgICAgem9vbS5vbkdlc3R1cmVFbmQsXG4gICAgICAgIHBhc3NpdmVMaXN0ZW5lcixcbiAgICAgICk7XG4gICAgICBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihcbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHMuY2FuY2VsLFxuICAgICAgICAgIHNsaWRlU2VsZWN0b3IsXG4gICAgICAgICAgem9vbS5vbkdlc3R1cmVFbmQsXG4gICAgICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihcbiAgICAgIHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLFxuICAgICAgYC4ke3N3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzc31gLFxuICAgICAgem9vbS5vblRvdWNoTW92ZSxcbiAgICAgIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUsXG4gICAgKTtcbiAgfSxcbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoIXpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHN1cHBvcnQgPSBzd2lwZXIuc3VwcG9ydDtcblxuICAgIHN3aXBlci56b29tLmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9XG4gICAgICBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJlxuICAgICAgc3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiZcbiAgICAgIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVyc1xuICAgICAgICA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfVxuICAgICAgICA6IGZhbHNlO1xuICAgIGNvbnN0IGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUgPSBzdXBwb3J0LnBhc3NpdmVMaXN0ZW5lclxuICAgICAgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiB0cnVlIH1cbiAgICAgIDogdHJ1ZTtcblxuICAgIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG5cbiAgICAvLyBTY2FsZSBpbWFnZVxuICAgIGlmIChzdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIuem9vbS5lbmFibGVHZXN0dXJlcywgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCBzd2lwZXIuem9vbS5kaXNhYmxlR2VzdHVyZXMsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKFxuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsXG4gICAgICAgIHNsaWRlU2VsZWN0b3IsXG4gICAgICAgIHpvb20ub25HZXN0dXJlU3RhcnQsXG4gICAgICAgIHBhc3NpdmVMaXN0ZW5lcixcbiAgICAgICk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoXG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLFxuICAgICAgICBzbGlkZVNlbGVjdG9yLFxuICAgICAgICB6b29tLm9uR2VzdHVyZUNoYW5nZSxcbiAgICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSxcbiAgICAgICk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoXG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50cy5lbmQsXG4gICAgICAgIHNsaWRlU2VsZWN0b3IsXG4gICAgICAgIHpvb20ub25HZXN0dXJlRW5kLFxuICAgICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICApO1xuICAgICAgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKFxuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50cy5jYW5jZWwsXG4gICAgICAgICAgc2xpZGVTZWxlY3RvcixcbiAgICAgICAgICB6b29tLm9uR2VzdHVyZUVuZCxcbiAgICAgICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTW92ZSBpbWFnZVxuICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihcbiAgICAgIHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLFxuICAgICAgYC4ke3N3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzc31gLFxuICAgICAgem9vbS5vblRvdWNoTW92ZSxcbiAgICAgIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUsXG4gICAgKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3pvb20nLFxuICBwYXJhbXM6IHtcbiAgICB6b29tOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgbWluUmF0aW86IDEsXG4gICAgICB0b2dnbGU6IHRydWUsXG4gICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsXG4gICAgICB6b29tZWRTbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXpvb21lZCcsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIHpvb206IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBjdXJyZW50U2NhbGU6IDEsXG4gICAgICAgIGlzU2NhbGluZzogZmFsc2UsXG4gICAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgICAkc2xpZGVFbDogdW5kZWZpbmVkLFxuICAgICAgICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAgICRpbWFnZUVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgJGltYWdlV3JhcEVsOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWF4UmF0aW86IDMsXG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlOiB7XG4gICAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGN1cnJlbnRYOiB1bmRlZmluZWQsXG4gICAgICAgICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtaW5YOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWluWTogdW5kZWZpbmVkLFxuICAgICAgICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtYXhZOiB1bmRlZmluZWQsXG4gICAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydFg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydFk6IHVuZGVmaW5lZCxcbiAgICAgICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgICAgIHRvdWNoZXNDdXJyZW50OiB7fSxcbiAgICAgICAgfSxcbiAgICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgICB4OiB1bmRlZmluZWQsXG4gICAgICAgICAgeTogdW5kZWZpbmVkLFxuICAgICAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICAgICAgICBwcmV2UG9zaXRpb25ZOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHJldlRpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uWm9vbSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBsZXQgc2NhbGUgPSAxO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICB9LFxuICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIGlmIChzY2FsZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBpbWFnZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbFxuICAgICAgICAgICAgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRpbWFnZUVsWzBdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb25zdCBzbGlkZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kc2xpZGVFbFxuICAgICAgICAgICAgPyBzd2lwZXIuem9vbS5nZXN0dXJlLiRzbGlkZUVsWzBdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnem9vbUNoYW5nZScsIHZhbHVlLCBpbWFnZUVsLCBzbGlkZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBzY2FsZSA9IHZhbHVlO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIHN3aXBlci56b29tLmRpc2FibGUoKTtcbiAgICB9LFxuICAgIHRvdWNoU3RhcnQoc3dpcGVyLCBlKSB7XG4gICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci56b29tLm9uVG91Y2hTdGFydChlKTtcbiAgICB9LFxuICAgIHRvdWNoRW5kKHN3aXBlciwgZSkge1xuICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuem9vbS5vblRvdWNoRW5kKGUpO1xuICAgIH0sXG4gICAgZG91YmxlVGFwKHN3aXBlciwgZSkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgICBzd2lwZXIuem9vbS50b2dnbGUoZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLnpvb20ub25UcmFuc2l0aW9uRW5kKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIuem9vbS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcbiIsImltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5pbXBvcnQgeyBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuY29uc3QgTGF6eSA9IHtcbiAgbG9hZEluU2xpZGUoaW5kZXgsIGxvYWRJbkR1cGxpY2F0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubGF6eTtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gICAgY29uc3QgJHNsaWRlRWwgPSBpc1ZpcnR1YWxcbiAgICAgID8gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oXG4gICAgICAgICAgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2luZGV4fVwiXWAsXG4gICAgICAgIClcbiAgICAgIDogc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG5cbiAgICBjb25zdCAkaW1hZ2VzID0gJHNsaWRlRWwuZmluZChcbiAgICAgIGAuJHtwYXJhbXMuZWxlbWVudENsYXNzfTpub3QoLiR7cGFyYW1zLmxvYWRlZENsYXNzfSk6bm90KC4ke3BhcmFtcy5sb2FkaW5nQ2xhc3N9KWAsXG4gICAgKTtcbiAgICBpZiAoXG4gICAgICAkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMuZWxlbWVudENsYXNzKSAmJlxuICAgICAgISRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykgJiZcbiAgICAgICEkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKVxuICAgICkge1xuICAgICAgJGltYWdlcy5wdXNoKCRzbGlkZUVsWzBdKTtcbiAgICB9XG4gICAgaWYgKCRpbWFnZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAkaW1hZ2VzLmVhY2goKGltYWdlRWwpID0+IHtcbiAgICAgIGNvbnN0ICRpbWFnZUVsID0gJChpbWFnZUVsKTtcbiAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuXG4gICAgICBjb25zdCBiYWNrZ3JvdW5kID0gJGltYWdlRWwuYXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICBjb25zdCBzcmMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyYycpO1xuICAgICAgY29uc3Qgc3Jjc2V0ID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgIGNvbnN0IHNpemVzID0gJGltYWdlRWwuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgY29uc3QgJHBpY3R1cmVFbCA9ICRpbWFnZUVsLnBhcmVudCgncGljdHVyZScpO1xuXG4gICAgICBzd2lwZXIubG9hZEltYWdlKCRpbWFnZUVsWzBdLCBzcmMgfHwgYmFja2dyb3VuZCwgc3Jjc2V0LCBzaXplcywgZmFsc2UsICgpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8XG4gICAgICAgICAgc3dpcGVyID09PSBudWxsIHx8XG4gICAgICAgICAgIXN3aXBlciB8fFxuICAgICAgICAgIChzd2lwZXIgJiYgIXN3aXBlci5wYXJhbXMpIHx8XG4gICAgICAgICAgc3dpcGVyLmRlc3Ryb3llZFxuICAgICAgICApXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoYmFja2dyb3VuZCkge1xuICAgICAgICAgICRpbWFnZUVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoXCIke2JhY2tncm91bmR9XCIpYCk7XG4gICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3Jjc2V0Jywgc3Jjc2V0KTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc2l6ZXMnLCBzaXplcyk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkcGljdHVyZUVsLmxlbmd0aCkge1xuICAgICAgICAgICAgJHBpY3R1cmVFbC5jaGlsZHJlbignc291cmNlJykuZWFjaCgoc291cmNlRWwpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgJHNvdXJjZSA9ICQoc291cmNlRWwpO1xuXG4gICAgICAgICAgICAgIGlmICgkc291cmNlLmF0dHIoJ2RhdGEtc3Jjc2V0JykpIHtcbiAgICAgICAgICAgICAgICAkc291cmNlLmF0dHIoJ3NyY3NldCcsICRzb3VyY2UuYXR0cignZGF0YS1zcmNzZXQnKSk7XG4gICAgICAgICAgICAgICAgJHNvdXJjZS5yZW1vdmVBdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3JjJywgc3JjKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRlZENsYXNzKS5yZW1vdmVDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKTtcbiAgICAgICAgJHNsaWRlRWwuZmluZChgLiR7cGFyYW1zLnByZWxvYWRlckNsYXNzfWApLnJlbW92ZSgpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIGxvYWRJbkR1cGxpY2F0ZSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlT3JpZ2luYWxJbmRleCA9ICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgaWYgKCRzbGlkZUVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcbiAgICAgICAgICAgICAgYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVPcmlnaW5hbEluZGV4fVwiXTpub3QoLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlgLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKG9yaWdpbmFsU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkdXBsaWNhdGVkU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihcbiAgICAgICAgICAgICAgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlT3JpZ2luYWxJbmRleH1cIl1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGR1cGxpY2F0ZWRTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VSZWFkeScsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc3dpcGVyLmVtaXQoJ2xhenlJbWFnZUxvYWQnLCAkc2xpZGVFbFswXSwgJGltYWdlRWxbMF0pO1xuICAgIH0pO1xuICB9LFxuICBsb2FkKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyAkd3JhcHBlckVsLCBwYXJhbXM6IHN3aXBlclBhcmFtcywgc2xpZGVzLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlclBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyUGFyYW1zLmxhenk7XG5cbiAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlclBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlRXhpc3QoaW5kZXgpIHtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aW5kZXh9XCJdYClcbiAgICAgICAgICAgIC5sZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVzW2luZGV4XSkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJldHVybiAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJChzbGlkZUVsKS5pbmRleCgpO1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKSBzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgICAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyUGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzfWApLmVhY2goKHNsaWRlRWwpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBpc1ZpcnR1YWwgPyAkKHNsaWRlRWwpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgOiAkKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleDsgaSA8IGFjdGl2ZUluZGV4ICsgc2xpZGVzUGVyVmlldzsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmxvYWRQcmV2TmV4dCkge1xuICAgICAgaWYgKHNsaWRlc1BlclZpZXcgPiAxIHx8IChwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ICYmIHBhcmFtcy5sb2FkUHJldk5leHRBbW91bnQgPiAxKSkge1xuICAgICAgICBjb25zdCBhbW91bnQgPSBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50O1xuICAgICAgICBjb25zdCBzcHYgPSBzbGlkZXNQZXJWaWV3O1xuICAgICAgICBjb25zdCBtYXhJbmRleCA9IE1hdGgubWluKGFjdGl2ZUluZGV4ICsgc3B2ICsgTWF0aC5tYXgoYW1vdW50LCBzcHYpLCBzbGlkZXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgbWluSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCAtIE1hdGgubWF4KHNwdiwgYW1vdW50KSwgMCk7XG4gICAgICAgIC8vIE5leHQgU2xpZGVzXG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgPCBtYXhJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXYgU2xpZGVzXG4gICAgICAgIGZvciAobGV0IGkgPSBtaW5JbmRleDsgaSA8IGFjdGl2ZUluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVFeGlzdChpKSkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5leHRTbGlkZSA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZU5leHRDbGFzc31gKTtcbiAgICAgICAgaWYgKG5leHRTbGlkZS5sZW5ndGggPiAwKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShzbGlkZUluZGV4KG5leHRTbGlkZSkpO1xuXG4gICAgICAgIGNvbnN0IHByZXZTbGlkZSA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZVByZXZDbGFzc31gKTtcbiAgICAgICAgaWYgKHByZXZTbGlkZS5sZW5ndGggPiAwKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShzbGlkZUluZGV4KHByZXZTbGlkZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2xhenknLFxuICBwYXJhbXM6IHtcbiAgICBsYXp5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dDogZmFsc2UsXG4gICAgICBsb2FkUHJldk5leHRBbW91bnQ6IDEsXG4gICAgICBsb2FkT25UcmFuc2l0aW9uU3RhcnQ6IGZhbHNlLFxuXG4gICAgICBlbGVtZW50Q2xhc3M6ICdzd2lwZXItbGF6eScsXG4gICAgICBsb2FkaW5nQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkaW5nJyxcbiAgICAgIGxvYWRlZENsYXNzOiAnc3dpcGVyLWxhenktbG9hZGVkJyxcbiAgICAgIHByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGxhenk6IHtcbiAgICAgICAgaW5pdGlhbEltYWdlTG9hZGVkOiBmYWxzZSxcbiAgICAgICAgLi4uTGF6eSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgICAgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPT09IDApIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2Nyb2xsKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVzaXplKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNjcm9sbGJhckRyYWdNb3ZlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25TdGFydChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCB8fFxuICAgICAgICAgICghc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCAmJiAhc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKVxuICAgICAgICApIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVDaGFuZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcbiIsIi8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cbmltcG9ydCB7IG5leHRUaWNrLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuY29uc3QgQ29udHJvbGxlciA9IHtcbiAgTGluZWFyU3BsaW5lOiBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoeCwgeSkge1xuICAgIGNvbnN0IGJpbmFyeVNlYXJjaCA9IChmdW5jdGlvbiBzZWFyY2goKSB7XG4gICAgICBsZXQgbWF4SW5kZXg7XG4gICAgICBsZXQgbWluSW5kZXg7XG4gICAgICBsZXQgZ3Vlc3M7XG4gICAgICByZXR1cm4gKGFycmF5LCB2YWwpID0+IHtcbiAgICAgICAgbWluSW5kZXggPSAtMTtcbiAgICAgICAgbWF4SW5kZXggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChtYXhJbmRleCAtIG1pbkluZGV4ID4gMSkge1xuICAgICAgICAgIGd1ZXNzID0gKG1heEluZGV4ICsgbWluSW5kZXgpID4+IDE7XG4gICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgIH07XG4gICAgfSkoKTtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5sYXN0SW5kZXggPSB4Lmxlbmd0aCAtIDE7XG4gICAgLy8gR2l2ZW4gYW4geCB2YWx1ZSAoeDIpLCByZXR1cm4gdGhlIGV4cGVjdGVkIHkyIHZhbHVlOlxuICAgIC8vICh4MSx5MSkgaXMgdGhlIGtub3duIHBvaW50IGJlZm9yZSBnaXZlbiB2YWx1ZSxcbiAgICAvLyAoeDMseTMpIGlzIHRoZSBrbm93biBwb2ludCBhZnRlciBnaXZlbiB2YWx1ZS5cbiAgICBsZXQgaTE7XG4gICAgbGV0IGkzO1xuXG4gICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICBpZiAoIXgyKSByZXR1cm4gMDtcblxuICAgICAgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG4gICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgIGkxID0gaTMgLSAxO1xuXG4gICAgICAvLyBXZSBoYXZlIG91ciBpbmRleGVzIGkxICYgaTMsIHNvIHdlIGNhbiBjYWxjdWxhdGUgYWxyZWFkeTpcbiAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKCh4MiAtIHRoaXMueFtpMV0pICogKHRoaXMueVtpM10gLSB0aGlzLnlbaTFdKSkgLyAodGhpcy54W2kzXSAtIHRoaXMueFtpMV0pICsgdGhpcy55W2kxXVxuICAgICAgKTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvLyB4eHg6IGZvciBub3cgaSB3aWxsIGp1c3Qgc2F2ZSBvbmUgc3BsaW5lIGZ1bmN0aW9uIHRvIHRvXG4gIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHN3aXBlci5wYXJhbXMubG9vcFxuICAgICAgICA/IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKVxuICAgICAgICA6IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNsYXRlKHNldFRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICBsZXQgbXVsdGlwbGllcjtcbiAgICBsZXQgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICBjb25zdCBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjKSB7XG4gICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXJcbiAgICAgIC8vIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSB0aGlzIG9ubHkgb25jZSBhbmQgcmVjYWxsIGl0IGZvciB0aGUgaW50ZXJwb2xhdGlvblxuICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7XG4gICAgICAgIC8vIGkgYW0gbm90IHN1cmUgd2h5IHRoZSB2YWx1ZXMgaGF2ZSB0byBiZSBtdWx0aXBsaWNhdGVkIHRoaXMgd2F5LCB0cmllZCB0byBpbnZlcnQgdGhlIHNuYXBHcmlkXG4gICAgICAgIC8vIGJ1dCBpdCBkaWQgbm90IHdvcmsgb3V0XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvbnRyb2xsZWRUcmFuc2xhdGUgfHwgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnY29udGFpbmVyJykge1xuICAgICAgICBtdWx0aXBsaWVyID1cbiAgICAgICAgICAoYy5tYXhUcmFuc2xhdGUoKSAtIGMubWluVHJhbnNsYXRlKCkpIC8gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIG11bHRpcGxpZXIgKyBjLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UpIHtcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IGMubWF4VHJhbnNsYXRlKCkgLSBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgICAgfVxuICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgIGMuc2V0VHJhbnNsYXRlKGNvbnRyb2xsZWRUcmFuc2xhdGUsIHN3aXBlcik7XG4gICAgICBjLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIGNvbnN0IGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgIGxldCBpO1xuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGMpIHtcbiAgICAgIGMuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgc3dpcGVyKTtcbiAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICBpZiAoYy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGMudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGMuJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgICBpZiAoIWNvbnRyb2xsZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoYy5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICAgIGMubG9vcEZpeCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgcGFyYW1zOiB7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJywgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGNvbnRyb2xsZXI6IHtcbiAgICAgICAgY29udHJvbDogc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wsXG4gICAgICAgIC4uLkNvbnRyb2xsZXIsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIHVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKHN3aXBlciwgdHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oc3dpcGVyLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IEExMXkgPSB7XG4gIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIG1ha2VFbE5vdEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnLTEnKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbFJvbGUoJGVsLCByb2xlKSB7XG4gICAgJGVsLmF0dHIoJ3JvbGUnLCByb2xlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBhZGRFbExhYmVsKCRlbCwgbGFiZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBkaXNhYmxlRWwoJGVsKSB7XG4gICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCB0cnVlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBlbmFibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIGZhbHNlKTtcbiAgICByZXR1cm4gJGVsO1xuICB9LFxuICBvbkVudGVyS2V5KGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAoZS5rZXlDb2RlICE9PSAxMykgcmV0dXJuO1xuICAgIGNvbnN0ICR0YXJnZXRFbCA9ICQoZS50YXJnZXQpO1xuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMubmV4dFNsaWRlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSkge1xuICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgJHRhcmdldEVsLmlzKGAuJHtzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3N9YCkpIHtcbiAgICAgICR0YXJnZXRFbFswXS5jbGljaygpO1xuICAgIH1cbiAgfSxcbiAgbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IHN3aXBlci5hMTF5LmxpdmVSZWdpb247XG4gICAgaWYgKG5vdGlmaWNhdGlvbi5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBub3RpZmljYXRpb24uaHRtbCgnJyk7XG4gICAgbm90aWZpY2F0aW9uLmh0bWwobWVzc2FnZSk7XG4gIH0sXG4gIHVwZGF0ZU5hdmlnYXRpb24oKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgfHwgIXN3aXBlci5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgY29uc3QgeyAkbmV4dEVsLCAkcHJldkVsIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcblxuICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJHByZXZFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJG5leHRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbE5vdEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmIChcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uICYmXG4gICAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmXG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmXG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aFxuICAgICkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5lYWNoKChidWxsZXRFbCkgPT4ge1xuICAgICAgICBjb25zdCAkYnVsbGV0RWwgPSAkKGJ1bGxldEVsKTtcbiAgICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRidWxsZXRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkYnVsbGV0RWwsICdidXR0b24nKTtcbiAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbChcbiAgICAgICAgICAkYnVsbGV0RWwsXG4gICAgICAgICAgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgJGJ1bGxldEVsLmluZGV4KCkgKyAxKSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgc3dpcGVyLiRlbC5hcHBlbmQoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbik7XG5cbiAgICAvLyBOYXZpZ2F0aW9uXG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGxldCAkbmV4dEVsO1xuICAgIGxldCAkcHJldkVsO1xuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7XG4gICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgIH1cbiAgICBpZiAoJG5leHRFbCkge1xuICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRuZXh0RWwpO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRuZXh0RWwsICdidXR0b24nKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJG5leHRFbCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgJG5leHRFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cbiAgICBpZiAoJHByZXZFbCkge1xuICAgICAgc3dpcGVyLmExMXkubWFrZUVsRm9jdXNhYmxlKCRwcmV2RWwpO1xuICAgICAgc3dpcGVyLmExMXkuYWRkRWxSb2xlKCRwcmV2RWwsICdidXR0b24nKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJHByZXZFbCwgcGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgJHByZXZFbC5vbigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoXG4gICAgICBzd2lwZXIucGFnaW5hdGlvbiAmJlxuICAgICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJlxuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJlxuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGhcbiAgICApIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vbihcbiAgICAgICAgJ2tleWRvd24nLFxuICAgICAgICBgLiR7c3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzfWAsXG4gICAgICAgIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXksXG4gICAgICApO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuYTExeS5saXZlUmVnaW9uICYmIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ubGVuZ3RoID4gMClcbiAgICAgIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ucmVtb3ZlKCk7XG5cbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAkcHJldkVsLm9mZigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoXG4gICAgICBzd2lwZXIucGFnaW5hdGlvbiAmJlxuICAgICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJlxuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJlxuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGhcbiAgICApIHtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5vZmYoXG4gICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gLFxuICAgICAgICBzd2lwZXIuYTExeS5vbkVudGVyS2V5LFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYTExeScsXG4gIHBhcmFtczoge1xuICAgIGExMXk6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLFxuICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJyxcbiAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLFxuICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgYTExeToge1xuICAgICAgICAuLi5BMTF5LFxuICAgICAgICBsaXZlUmVnaW9uOiAkKFxuICAgICAgICAgIGA8c3BhbiBjbGFzcz1cIiR7c3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzfVwiIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiIGFyaWEtYXRvbWljPVwidHJ1ZVwiPjwvc3Bhbj5gLFxuICAgICAgICApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkuaW5pdCgpO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgdG9FZGdlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgZnJvbUVkZ2Uoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgfSxcbiAgICBwYWdpbmF0aW9uVXBkYXRlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgIH0sXG4gICAgZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LmRlc3Ryb3koKTtcbiAgICB9LFxuICB9LFxufTtcbiIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IEhpc3RvcnkgPSB7XG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkgfHwgIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhpc3RvcnkgPSBzd2lwZXIuaGlzdG9yeTtcbiAgICBoaXN0b3J5LmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBoaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBpZiAoIWhpc3RvcnkucGF0aHMua2V5ICYmICFoaXN0b3J5LnBhdGhzLnZhbHVlKSByZXR1cm47XG4gICAgaGlzdG9yeS5zY3JvbGxUb1NsaWRlKDAsIGhpc3RvcnkucGF0aHMudmFsdWUsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgIH1cbiAgfSxcbiAgc2V0SGlzdG9yeVBvcFN0YXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLmhpc3RvcnkucGF0aHMgPSBIaXN0b3J5LmdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIHN3aXBlci5oaXN0b3J5LnNjcm9sbFRvU2xpZGUoc3dpcGVyLnBhcmFtcy5zcGVlZCwgc3dpcGVyLmhpc3RvcnkucGF0aHMudmFsdWUsIGZhbHNlKTtcbiAgfSxcbiAgZ2V0UGF0aFZhbHVlcyh1cmxPdmVycmlkZSkge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGxldCBsb2NhdGlvbjtcbiAgICBpZiAodXJsT3ZlcnJpZGUpIHtcbiAgICAgIGxvY2F0aW9uID0gbmV3IFVSTCh1cmxPdmVycmlkZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cbiAgICBjb25zdCBwYXRoQXJyYXkgPSBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgLnNsaWNlKDEpXG4gICAgICAuc3BsaXQoJy8nKVxuICAgICAgLmZpbHRlcigocGFydCkgPT4gcGFydCAhPT0gJycpO1xuICAgIGNvbnN0IHRvdGFsID0gcGF0aEFycmF5Lmxlbmd0aDtcbiAgICBjb25zdCBrZXkgPSBwYXRoQXJyYXlbdG90YWwgLSAyXTtcbiAgICBjb25zdCB2YWx1ZSA9IHBhdGhBcnJheVt0b3RhbCAtIDFdO1xuICAgIHJldHVybiB7IGtleSwgdmFsdWUgfTtcbiAgfSxcbiAgc2V0SGlzdG9yeShrZXksIGluZGV4KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGxldCBsb2NhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51cmwpIHtcbiAgICAgIGxvY2F0aW9uID0gbmV3IFVSTChzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cbiAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuICAgIGxldCB2YWx1ZSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGAke2tleX0vJHt2YWx1ZX1gO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5zdGF0ZTtcbiAgICBpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IHZhbHVlIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgdmFsdWUgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgc2x1Z2lmeSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHRcbiAgICAgIC50b1N0cmluZygpXG4gICAgICAucmVwbGFjZSgvXFxzKy9nLCAnLScpXG4gICAgICAucmVwbGFjZSgvW15cXHctXSsvZywgJycpXG4gICAgICAucmVwbGFjZSgvLS0rL2csICctJylcbiAgICAgIC5yZXBsYWNlKC9eLSsvLCAnJylcbiAgICAgIC5yZXBsYWNlKC8tKyQvLCAnJyk7XG4gIH0sXG4gIHNjcm9sbFRvU2xpZGUoc3BlZWQsIHZhbHVlLCBydW5DYWxsYmFja3MpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICBjb25zdCBzbGlkZUhpc3RvcnkgPSBIaXN0b3J5LnNsdWdpZnkoc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgfVxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlzdG9yeScsXG4gIHBhcmFtczoge1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIGtleTogJ3NsaWRlcycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBoaXN0b3J5OiB7XG4gICAgICAgIC4uLkhpc3RvcnksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGlzdG9yeS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkKSB7XG4gICAgICAgIHN3aXBlci5oaXN0b3J5LnNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IEhhc2hOYXZpZ2F0aW9uID0ge1xuICBvbkhhc2hDYW5nZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBzd2lwZXIuZW1pdCgnaGFzaENoYW5nZScpO1xuICAgIGNvbnN0IG5ld0hhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgY29uc3QgYWN0aXZlU2xpZGVIYXNoID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpO1xuICAgIGlmIChuZXdIYXNoICE9PSBhY3RpdmVTbGlkZUhhc2gpIHtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gc3dpcGVyLiR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtaGFzaD1cIiR7bmV3SGFzaH1cIl1gKVxuICAgICAgICAuaW5kZXgoKTtcbiAgICAgIGlmICh0eXBlb2YgbmV3SW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCk7XG4gICAgfVxuICB9LFxuICBzZXRIYXNoKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmICghc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoXG4gICAgICBzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLnJlcGxhY2VTdGF0ZSAmJlxuICAgICAgd2luZG93Lmhpc3RvcnkgJiZcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZVxuICAgICkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICBgIyR7c3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpfWAgfHwgJycsXG4gICAgICApO1xuICAgICAgc3dpcGVyLmVtaXQoJ2hhc2hTZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBjb25zdCBoYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICAgIHN3aXBlci5lbWl0KCdoYXNoU2V0Jyk7XG4gICAgfVxuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmIChcbiAgICAgICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHxcbiAgICAgIChzd2lwZXIucGFyYW1zLmhpc3RvcnkgJiYgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpXG4gICAgKVxuICAgICAgcmV0dXJuO1xuICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc3QgaGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICBpZiAoaGFzaCkge1xuICAgICAgY29uc3Qgc3BlZWQgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICBjb25zdCBzbGlkZUhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAkKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoYXNoLW5hdmlnYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgd2F0Y2hTdGF0ZTogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgICAgIC4uLkhhc2hOYXZpZ2F0aW9uLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZUNoYW5nZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuaGFzaE5hdmlnYXRpb24uaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG4iLCIvKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IFwib2ZmXCIgKi9cbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBuZXh0VGljaywgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IEF1dG9wbGF5ID0ge1xuICBydW4oKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCAkYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICBsZXQgZGVsYXkgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIGlmICgkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpKSB7XG4gICAgICBkZWxheSA9ICRhY3RpdmVTbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JykgfHwgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IG5leHRUaWNrKCgpID0+IHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldihzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgfSBlbHNlIGlmICghc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICB9LCBkZWxheSk7XG4gIH0sXG4gIHN0YXJ0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IHRydWU7XG4gICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIHN0b3AoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0b3AnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgcGF1c2Uoc3BlZWQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkudGltZW91dCkgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gdHJ1ZTtcbiAgICBpZiAoc3BlZWQgPT09IDAgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkud2FpdEZvclRyYW5zaXRpb24pIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfSxcbiAgb25WaXNpYmlsaXR5Q2hhbmdlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2UoKTtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH0sXG4gIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuJHdyYXBwZXJFbCkgcmV0dXJuO1xuICAgIGlmIChlLnRhcmdldCAhPT0gc3dpcGVyLiR3cmFwcGVyRWxbMF0pIHJldHVybjtcbiAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQsXG4gICAgKTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2F1dG9wbGF5JyxcbiAgcGFyYW1zOiB7XG4gICAgYXV0b3BsYXk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgZGVsYXk6IDMwMDAsXG4gICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLFxuICAgICAgc3RvcE9uTGFzdFNsaWRlOiBmYWxzZSxcbiAgICAgIHJldmVyc2VEaXJlY3Rpb246IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgYXV0b3BsYXk6IHtcbiAgICAgICAgLi4uQXV0b3BsYXksXG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICBwYXVzZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RhcnQoKTtcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgc3dpcGVyLmF1dG9wbGF5Lm9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVUcmFuc2l0aW9uU3RhcnQoc3dpcGVyLCBzcGVlZCwgaW50ZXJuYWwpIHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2Uoc3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNsaWRlckZpcnN0TW92ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRvdWNoRW5kKHN3aXBlcikge1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLmNzc01vZGUgJiZcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCAmJlxuICAgICAgICAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvblxuICAgICAgKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBzd2lwZXIuYXV0b3BsYXkub25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICB9LFxuICB9LFxufTtcbiIsImltcG9ydCB7IGV4dGVuZCwgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IEZhZGUgPSB7XG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2xpZGVzIH0gPSBzd2lwZXI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgIGNvbnN0IG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgbGV0IHR4ID0gLW9mZnNldDtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGVcbiAgICAgICAgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MpLCAwKVxuICAgICAgICA6IDEgKyBNYXRoLm1pbihNYXRoLm1heCgkc2xpZGVFbFswXS5wcm9ncmVzcywgLTEpLCAwKTtcbiAgICAgICRzbGlkZUVsXG4gICAgICAgIC5jc3Moe1xuICAgICAgICAgIG9wYWNpdHk6IHNsaWRlT3BhY2l0eSxcbiAgICAgICAgfSlcbiAgICAgICAgLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KWApO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXMsICR3cmFwcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBzbGlkZXMudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgbGV0IGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICBzbGlkZXMudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2VyRXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmlnZ2VyKHRyaWdnZXJFdmVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdlZmZlY3QtZmFkZScsXG4gIHBhcmFtczoge1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgYmluZE1vZHVsZU1ldGhvZHMoc3dpcGVyLCB7XG4gICAgICBmYWRlRWZmZWN0OiB7XG4gICAgICAgIC4uLkZhZGUsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9ZmFkZWApO1xuICAgICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuY29uc3QgQ3ViZSA9IHtcbiAgc2V0VHJhbnNsYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgJGVsLFxuICAgICAgJHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgICAgYnJvd3NlcixcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgbGV0IHdyYXBwZXJSb3RhdGUgPSAwO1xuICAgIGxldCAkY3ViZVNoYWRvd0VsO1xuICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkd3JhcHBlckVsLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgaWYgKCRjdWJlU2hhZG93RWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAkd3JhcHBlckVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuICAgICAgICAkY3ViZVNoYWRvd0VsLmNzcyh7IGhlaWdodDogYCR7c3dpcGVyV2lkdGh9cHhgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJGVsLmFwcGVuZCgkY3ViZVNoYWRvd0VsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGk7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludCgkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICB9XG4gICAgICBsZXQgc2xpZGVBbmdsZSA9IHNsaWRlSW5kZXggKiA5MDtcbiAgICAgIGxldCByb3VuZCA9IE1hdGguZmxvb3Ioc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHNsaWRlQW5nbGUgPSAtc2xpZGVBbmdsZTtcbiAgICAgICAgcm91bmQgPSBNYXRoLmZsb29yKC1zbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICBsZXQgdHggPSAwO1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGxldCB0eiA9IDA7XG4gICAgICBpZiAoc2xpZGVJbmRleCAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAwO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDEpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHR6ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMikgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIHJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAzICogc3dpcGVyU2l6ZSArIHN3aXBlclNpemUgKiA0ICogcm91bmQ7XG4gICAgICB9XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHR4ID0gLXR4O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzSG9yaXpvbnRhbCkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGByb3RhdGVYKCR7aXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlfWRlZykgcm90YXRlWSgke1xuICAgICAgICBpc0hvcml6b250YWwgPyBzbGlkZUFuZ2xlIDogMFxuICAgICAgfWRlZykgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgJHt0en1weClgO1xuICAgICAgaWYgKHByb2dyZXNzIDw9IDEgJiYgcHJvZ3Jlc3MgPiAtMSkge1xuICAgICAgICB3cmFwcGVyUm90YXRlID0gc2xpZGVJbmRleCAqIDkwICsgcHJvZ3Jlc3MgKiA5MDtcbiAgICAgICAgaWYgKHJ0bCkgd3JhcHBlclJvdGF0ZSA9IC1zbGlkZUluZGV4ICogOTAgLSBwcm9ncmVzcyAqIDkwO1xuICAgICAgfVxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsXG4gICAgICAgICAgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgICAgICA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgc2hhZG93QWZ0ZXIgPSBpc0hvcml6b250YWxcbiAgICAgICAgICA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JylcbiAgICAgICAgICA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0JlZm9yZSA9ICQoXG4gICAgICAgICAgICBgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gLFxuICAgICAgICAgICk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHNoYWRvd0FmdGVyID0gJChcbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJ31cIj48L2Rpdj5gLFxuICAgICAgICAgICk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCkgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApO1xuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoKSBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApO1xuICAgICAgfVxuICAgIH1cbiAgICAkd3JhcHBlckVsLmNzcyh7XG4gICAgICAnLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luJzogYDUwJSA1MCUgLSR7c3dpcGVyU2l6ZSAvIDJ9cHhgLFxuICAgICAgJy1tb3otdHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICAgICctbXMtdHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogYDUwJSA1MCUgLSR7c3dpcGVyU2l6ZSAvIDJ9cHhgLFxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgJGN1YmVTaGFkb3dFbC50cmFuc2Zvcm0oXG4gICAgICAgICAgYHRyYW5zbGF0ZTNkKDBweCwgJHtzd2lwZXJXaWR0aCAvIDIgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAke1xuICAgICAgICAgICAgLXN3aXBlcldpZHRoIC8gMlxuICAgICAgICAgIH1weCkgcm90YXRlWCg5MGRlZykgcm90YXRlWigwZGVnKSBzY2FsZSgke3BhcmFtcy5zaGFkb3dTY2FsZX0pYCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNoYWRvd0FuZ2xlID0gTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLSBNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTA7XG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPVxuICAgICAgICAgIDEuNSAtXG4gICAgICAgICAgKE1hdGguc2luKChzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJKSAvIDM2MCkgLyAyICtcbiAgICAgICAgICAgIE1hdGguY29zKChzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJKSAvIDM2MCkgLyAyKTtcbiAgICAgICAgY29uc3Qgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICBjb25zdCBzY2FsZTIgPSBwYXJhbXMuc2hhZG93U2NhbGUgLyBtdWx0aXBsaWVyO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0O1xuICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybShcbiAgICAgICAgICBgc2NhbGUzZCgke3NjYWxlMX0sIDEsICR7c2NhbGUyfSkgdHJhbnNsYXRlM2QoMHB4LCAke3N3aXBlckhlaWdodCAvIDIgKyBvZmZzZXR9cHgsICR7XG4gICAgICAgICAgICAtc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMlxuICAgICAgICAgIH1weCkgcm90YXRlWCgtOTBkZWcpYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgekZhY3RvciA9IGJyb3dzZXIuaXNTYWZhcmkgfHwgYnJvd3Nlci5pc1dlYlZpZXcgPyAtc3dpcGVyU2l6ZSAvIDIgOiAwO1xuICAgICR3cmFwcGVyRWwudHJhbnNmb3JtKFxuICAgICAgYHRyYW5zbGF0ZTNkKDBweCwwLCR7ekZhY3Rvcn1weCkgcm90YXRlWCgke1xuICAgICAgICBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZVxuICAgICAgfWRlZykgcm90YXRlWSgke3N3aXBlci5pc0hvcml6b250YWwoKSA/IC13cmFwcGVyUm90YXRlIDogMH1kZWcpYCxcbiAgICApO1xuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRlbCwgc2xpZGVzIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKFxuICAgICAgICAnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JyxcbiAgICAgIClcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2VmZmVjdC1jdWJlJyxcbiAgcGFyYW1zOiB7XG4gICAgY3ViZUVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgc2hhZG93OiB0cnVlLFxuICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgIHNoYWRvd1NjYWxlOiAwLjk0LFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGJpbmRNb2R1bGVNZXRob2RzKHN3aXBlciwge1xuICAgICAgY3ViZUVmZmVjdDoge1xuICAgICAgICAuLi5DdWJlLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWN1YmVgKTtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG4gICAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuY29uc3QgRmxpcCA9IHtcbiAgc2V0VHJhbnNsYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXMsIHJ0bFRyYW5zbGF0ZTogcnRsIH0gPSBzd2lwZXI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgbGV0IHByb2dyZXNzID0gJHNsaWRlRWxbMF0ucHJvZ3Jlc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigkc2xpZGVFbFswXS5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3Qgcm90YXRlID0gLTE4MCAqIHByb2dyZXNzO1xuICAgICAgbGV0IHJvdGF0ZVkgPSByb3RhdGU7XG4gICAgICBsZXQgcm90YXRlWCA9IDA7XG4gICAgICBsZXQgdHggPSAtb2Zmc2V0O1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgICAgcm90YXRlWCA9IC1yb3RhdGVZO1xuICAgICAgICByb3RhdGVZID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocnRsKSB7XG4gICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgIH1cblxuICAgICAgJHNsaWRlRWxbMF0uc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQocHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Quc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCBzaGFkb3dCZWZvcmUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgICAgIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIGxldCBzaGFkb3dBZnRlciA9IHN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAgID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKVxuICAgICAgICAgIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlID0gJChcbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnfVwiPjwvZGl2PmAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKFxuICAgICAgICAgICAgYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7c3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nfVwiPjwvZGl2PmAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICB9XG4gICAgICAkc2xpZGVFbC50cmFuc2Zvcm0oXG4gICAgICAgIGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpIHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKWAsXG4gICAgICApO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXMsIGFjdGl2ZUluZGV4LCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKFxuICAgICAgICAnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JyxcbiAgICAgIClcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgLy8gaWYgKCEkKHRoaXMpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2VmZmVjdC1mbGlwJyxcbiAgcGFyYW1zOiB7XG4gICAgZmxpcEVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGZsaXBFZmZlY3Q6IHtcbiAgICAgICAgLi4uRmxpcCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdChzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31mbGlwYCk7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30zZGApO1xuICAgICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBleHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKHN3aXBlcikge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZsaXBFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgJCBmcm9tICcuLi8uLi91dGlscy9kb20nO1xuaW1wb3J0IHsgYmluZE1vZHVsZU1ldGhvZHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmNvbnN0IENvdmVyZmxvdyA9IHtcbiAgc2V0VHJhbnNsYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyB3aWR0aDogc3dpcGVyV2lkdGgsIGhlaWdodDogc3dpcGVySGVpZ2h0LCBzbGlkZXMsIHNsaWRlc1NpemVzR3JpZCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgIGNvbnN0IGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyBzd2lwZXJXaWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgc3dpcGVySGVpZ2h0IC8gMjtcbiAgICBjb25zdCByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgY29uc3QgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoO1xuICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBzbGlkZVNpemUgPSBzbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICBjb25zdCBzbGlkZU9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3Qgb2Zmc2V0TXVsdGlwbGllciA9XG4gICAgICAgICgoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSBzbGlkZVNpemUgLyAyKSAvIHNsaWRlU2l6ZSkgKiBwYXJhbXMubW9kaWZpZXI7XG5cbiAgICAgIGxldCByb3RhdGVZID0gaXNIb3Jpem9udGFsID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICBsZXQgcm90YXRlWCA9IGlzSG9yaXpvbnRhbCA/IDAgOiByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyO1xuICAgICAgLy8gdmFyIHJvdGF0ZVogPSAwXG4gICAgICBsZXQgdHJhbnNsYXRlWiA9IC10cmFuc2xhdGUgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcblxuICAgICAgbGV0IHN0cmV0Y2ggPSBwYXJhbXMuc3RyZXRjaDtcbiAgICAgIC8vIEFsbG93IHBlcmNlbnRhZ2UgdG8gbWFrZSBhIHJlbGF0aXZlIHN0cmV0Y2ggZm9yIHJlc3BvbnNpdmUgc2xpZGVyc1xuICAgICAgaWYgKHR5cGVvZiBzdHJldGNoID09PSAnc3RyaW5nJyAmJiBzdHJldGNoLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgc3RyZXRjaCA9IChwYXJzZUZsb2F0KHBhcmFtcy5zdHJldGNoKSAvIDEwMCkgKiBzbGlkZVNpemU7XG4gICAgICB9XG4gICAgICBsZXQgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuXG4gICAgICBsZXQgc2NhbGUgPSAxIC0gKDEgLSBwYXJhbXMuc2NhbGUpICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG5cbiAgICAgIC8vIEZpeCBmb3IgdWx0cmEgc21hbGwgdmFsdWVzXG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgdHJhbnNsYXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgdHJhbnNsYXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgdHJhbnNsYXRlWiA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgcm90YXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgcm90YXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMoc2NhbGUpIDwgMC4wMDEpIHNjYWxlID0gMDtcblxuICAgICAgY29uc3Qgc2xpZGVUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCR7dHJhbnNsYXRlWX1weCwke3RyYW5zbGF0ZVp9cHgpICByb3RhdGVYKCR7cm90YXRlWH1kZWcpIHJvdGF0ZVkoJHtyb3RhdGVZfWRlZykgc2NhbGUoJHtzY2FsZX0pYDtcblxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHNsaWRlVHJhbnNmb3JtKTtcbiAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgJHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsXG4gICAgICAgICAgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgICAgICA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgJHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWxcbiAgICAgICAgICA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JylcbiAgICAgICAgICA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dCZWZvcmVFbCA9ICQoXG4gICAgICAgICAgICBgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gLFxuICAgICAgICAgICk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dCZWZvcmVFbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzaGFkb3dBZnRlckVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRzaGFkb3dBZnRlckVsID0gJChcbiAgICAgICAgICAgIGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJ31cIj48L2Rpdj5gLFxuICAgICAgICAgICk7XG4gICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dBZnRlckVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aClcbiAgICAgICAgICAkc2hhZG93QmVmb3JlRWxbMF0uc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGgpXG4gICAgICAgICAgJHNoYWRvd0FmdGVyRWxbMF0uc3R5bGUub3BhY2l0eSA9IC1vZmZzZXRNdWx0aXBsaWVyID4gMCA/IC1vZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zbGlkZXNcbiAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgLmZpbmQoXG4gICAgICAgICcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnLFxuICAgICAgKVxuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZWZmZWN0LWNvdmVyZmxvdycsXG4gIHBhcmFtczoge1xuICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgcm90YXRlOiA1MCxcbiAgICAgIHN0cmV0Y2g6IDAsXG4gICAgICBkZXB0aDogMTAwLFxuICAgICAgc2NhbGU6IDEsXG4gICAgICBtb2RpZmllcjogMSxcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICAuLi5Db3ZlcmZsb3csXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoc3dpcGVyKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG5cbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWNvdmVyZmxvd2ApO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcblxuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb3ZlcmZsb3dFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKHN3aXBlciwgZHVyYXRpb24pIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb3ZlcmZsb3dFZmZlY3Quc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG4iLCJpbXBvcnQgeyBleHRlbmQsIGlzT2JqZWN0LCBiaW5kTW9kdWxlTWV0aG9kcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCAkIGZyb20gJy4uLy4uL3V0aWxzL2RvbSc7XG5cbmNvbnN0IFRodW1icyA9IHtcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgdGh1bWJzOiB0aHVtYnNQYXJhbXMgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgaWYgKHN3aXBlci50aHVtYnMuaW5pdGlhbGl6ZWQpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIudGh1bWJzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBjb25zdCBTd2lwZXJDbGFzcyA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICBpZiAodGh1bWJzUGFyYW1zLnN3aXBlciBpbnN0YW5jZW9mIFN3aXBlckNsYXNzKSB7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IHRodW1ic1BhcmFtcy5zd2lwZXI7XG4gICAgICBleHRlbmQoc3dpcGVyLnRodW1icy5zd2lwZXIub3JpZ2luYWxQYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIGV4dGVuZChzd2lwZXIudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRodW1ic1BhcmFtcy5zd2lwZXIpKSB7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IG5ldyBTd2lwZXJDbGFzcyhcbiAgICAgICAgZXh0ZW5kKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyLCB7XG4gICAgICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLiRlbC5hZGRDbGFzcyhzd2lwZXIucGFyYW1zLnRodW1icy50aHVtYnNDb250YWluZXJDbGFzcyk7XG4gICAgc3dpcGVyLnRodW1icy5zd2lwZXIub24oJ3RhcCcsIHN3aXBlci50aHVtYnMub25UaHVtYkNsaWNrKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgb25UaHVtYkNsaWNrKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcbiAgICBjb25zdCBjbGlja2VkSW5kZXggPSB0aHVtYnNTd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgIGNvbnN0IGNsaWNrZWRTbGlkZSA9IHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGU7XG4gICAgaWYgKGNsaWNrZWRTbGlkZSAmJiAkKGNsaWNrZWRTbGlkZSkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzKSlcbiAgICAgIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHNsaWRlVG9JbmRleDtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCgkKHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUpLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVUb0luZGV4ID0gY2xpY2tlZEluZGV4O1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBsZXQgY3VycmVudEluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB9XG4gICAgICBjb25zdCBwcmV2SW5kZXggPSBzd2lwZXIuc2xpZGVzXG4gICAgICAgIC5lcShjdXJyZW50SW5kZXgpXG4gICAgICAgIC5wcmV2QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlVG9JbmRleH1cIl1gKVxuICAgICAgICAuZXEoMClcbiAgICAgICAgLmluZGV4KCk7XG4gICAgICBjb25zdCBuZXh0SW5kZXggPSBzd2lwZXIuc2xpZGVzXG4gICAgICAgIC5lcShjdXJyZW50SW5kZXgpXG4gICAgICAgIC5uZXh0QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlVG9JbmRleH1cIl1gKVxuICAgICAgICAuZXEoMClcbiAgICAgICAgLmluZGV4KCk7XG4gICAgICBpZiAodHlwZW9mIHByZXZJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBuZXh0SW5kZXggPT09ICd1bmRlZmluZWQnKSBzbGlkZVRvSW5kZXggPSBwcmV2SW5kZXg7XG4gICAgICBlbHNlIGlmIChuZXh0SW5kZXggLSBjdXJyZW50SW5kZXggPCBjdXJyZW50SW5kZXggLSBwcmV2SW5kZXgpIHNsaWRlVG9JbmRleCA9IG5leHRJbmRleDtcbiAgICAgIGVsc2Ugc2xpZGVUb0luZGV4ID0gcHJldkluZGV4O1xuICAgIH1cbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9LFxuICB1cGRhdGUoaW5pdGlhbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIpIHJldHVybjtcblxuICAgIGNvbnN0IHNsaWRlc1BlclZpZXcgPVxuICAgICAgdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bydcbiAgICAgICAgPyB0aHVtYnNTd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKVxuICAgICAgICA6IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgIGNvbnN0IGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgIGNvbnN0IHVzZU9mZnNldCA9IGF1dG9TY3JvbGxPZmZzZXQgJiYgIXRodW1ic1N3aXBlci5wYXJhbXMubG9vcDtcbiAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCB8fCB1c2VPZmZzZXQpIHtcbiAgICAgIGxldCBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICBsZXQgbmV3VGh1bWJzSW5kZXg7XG4gICAgICBsZXQgZGlyZWN0aW9uO1xuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlc1xuICAgICAgICAgICAgLmVxKGN1cnJlbnRUaHVtYnNJbmRleClcbiAgICAgICAgICAgIC5oYXNDbGFzcyh0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpXG4gICAgICAgICkge1xuICAgICAgICAgIHRodW1ic1N3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgdGh1bWJzU3dpcGVyLl9jbGllbnRMZWZ0ID0gdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgICBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluZCBhY3R1YWwgdGh1bWJzIGluZGV4IHRvIHNsaWRlIHRvXG4gICAgICAgIGNvbnN0IHByZXZUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXNcbiAgICAgICAgICAuZXEoY3VycmVudFRodW1ic0luZGV4KVxuICAgICAgICAgIC5wcmV2QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5yZWFsSW5kZXh9XCJdYClcbiAgICAgICAgICAuZXEoMClcbiAgICAgICAgICAuaW5kZXgoKTtcbiAgICAgICAgY29uc3QgbmV4dFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlc1xuICAgICAgICAgIC5lcShjdXJyZW50VGh1bWJzSW5kZXgpXG4gICAgICAgICAgLm5leHRBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLnJlYWxJbmRleH1cIl1gKVxuICAgICAgICAgIC5lcSgwKVxuICAgICAgICAgIC5pbmRleCgpO1xuICAgICAgICBpZiAodHlwZW9mIHByZXZUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIG5ld1RodW1ic0luZGV4ID0gbmV4dFRodW1ic0luZGV4O1xuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbmV4dFRodW1ic0luZGV4ID09PSAndW5kZWZpbmVkJykgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICAgIGVsc2UgaWYgKG5leHRUaHVtYnNJbmRleCAtIGN1cnJlbnRUaHVtYnNJbmRleCA9PT0gY3VycmVudFRodW1ic0luZGV4IC0gcHJldlRodW1ic0luZGV4KVxuICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gY3VycmVudFRodW1ic0luZGV4O1xuICAgICAgICBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPCBjdXJyZW50VGh1bWJzSW5kZXggLSBwcmV2VGh1bWJzSW5kZXgpXG4gICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7XG4gICAgICAgIGVsc2UgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICAgIGRpcmVjdGlvbiA9IHN3aXBlci5hY3RpdmVJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICAgICAgICBkaXJlY3Rpb24gPSBuZXdUaHVtYnNJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgfVxuICAgICAgaWYgKHVzZU9mZnNldCkge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzICYmXG4gICAgICAgIHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5pbmRleE9mKG5ld1RodW1ic0luZGV4KSA8IDBcbiAgICAgICkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlVG8obmV3VGh1bWJzSW5kZXgsIGluaXRpYWwgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBY3RpdmF0ZSB0aHVtYnNcbiAgICBsZXQgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgY29uc3QgdGh1bWJBY3RpdmVDbGFzcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIH1cblxuICAgIGlmICghc3dpcGVyLnBhcmFtcy50aHVtYnMubXVsdGlwbGVBY3RpdmVUaHVtYnMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIH1cblxuICAgIHRodW1ic1RvQWN0aXZhdGUgPSBNYXRoLmZsb29yKHRodW1ic1RvQWN0aXZhdGUpO1xuXG4gICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5yZW1vdmVDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICBpZiAoXG4gICAgICB0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHxcbiAgICAgICh0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpXG4gICAgKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4ICsgaX1cIl1gKVxuICAgICAgICAgIC5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgaSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3RodW1icycsXG4gIHBhcmFtczoge1xuICAgIHRodW1iczoge1xuICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgbXVsdGlwbGVBY3RpdmVUaHVtYnM6IHRydWUsXG4gICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLFxuICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItdGh1bWJzJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBiaW5kTW9kdWxlTWV0aG9kcyhzd2lwZXIsIHtcbiAgICAgIHRodW1iczoge1xuICAgICAgICBzd2lwZXI6IG51bGwsXG4gICAgICAgIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgICAgICAgLi4uVGh1bWJzLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KHN3aXBlcikge1xuICAgICAgY29uc3QgeyB0aHVtYnMgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy5pbml0KCk7XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSh0cnVlKTtcbiAgICB9LFxuICAgIHNsaWRlQ2hhbmdlKHN3aXBlcikge1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIHVwZGF0ZShzd2lwZXIpIHtcbiAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgfSxcbiAgICByZXNpemUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgb2JzZXJ2ZXJVcGRhdGUoc3dpcGVyKSB7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihzd2lwZXIsIGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBiZWZvcmVEZXN0cm95KHN3aXBlcikge1xuICAgICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci50aHVtYnMuc3dpcGVyQ3JlYXRlZCAmJiB0aHVtYnNTd2lwZXIpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcbiIsIi8vIFN3aXBlciBDbGFzc1xuaW1wb3J0IFN3aXBlciBmcm9tICcuL2NvbXBvbmVudHMvY29yZS9jb3JlLWNsYXNzJztcblxuLy8gQ29yZSBNb2R1bGVzXG5pbXBvcnQgUmVzaXplIGZyb20gJy4vbW9kdWxlcy9yZXNpemUvcmVzaXplJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXInO1xuXG4vL0lNUE9SVF9DT01QT05FTlRTXG5cbmNvbnN0IGNvbXBvbmVudHMgPSBbXG4gIFJlc2l6ZSxcbiAgT2JzZXJ2ZXIsXG4gIC8vSU5TVEFMTF9DT01QT05FTlRTXG5dO1xuXG5Td2lwZXIudXNlKGNvbXBvbmVudHMpO1xuXG4vL0VYUE9SVFxuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIGZhbmN5Qm94IHYzLjUuN1xuLy9cbi8vIExpY2Vuc2VkIEdQTHYzIGZvciBvcGVuIHNvdXJjZSB1c2Vcbi8vIG9yIGZhbmN5Qm94IENvbW1lcmNpYWwgTGljZW5zZSBmb3IgY29tbWVyY2lhbCB1c2Vcbi8vXG4vLyBodHRwOi8vZmFuY3lhcHBzLmNvbS9mYW5jeWJveC9cbi8vIENvcHlyaWdodCAyMDE5IGZhbmN5QXBwc1xuLy9cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4oZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsICQsIHVuZGVmaW5lZCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB3aW5kb3cuY29uc29sZSA9IHdpbmRvdy5jb25zb2xlIHx8IHtcclxuICAgIGluZm86IGZ1bmN0aW9uIChzdHVmZikge31cclxuICB9O1xyXG5cclxuICAvLyBJZiB0aGVyZSdzIG5vIGpRdWVyeSwgZmFuY3lCb3ggY2FuJ3Qgd29ya1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGlmICghJCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgZmFuY3lCb3ggaXMgYWxyZWFkeSBpbml0aWFsaXplZFxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgaWYgKCQuZm4uZmFuY3lib3gpIHtcclxuICAgIGNvbnNvbGUuaW5mbyhcImZhbmN5Qm94IGFscmVhZHkgaW5pdGlhbGl6ZWRcIik7XHJcblxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gUHJpdmF0ZSBkZWZhdWx0IHNldHRpbmdzXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIHZhciBkZWZhdWx0cyA9IHtcclxuICAgIC8vIENsb3NlIGV4aXN0aW5nIG1vZGFsc1xyXG4gICAgLy8gU2V0IHRoaXMgdG8gZmFsc2UgaWYgeW91IGRvIG5vdCBuZWVkIHRvIHN0YWNrIG11bHRpcGxlIGluc3RhbmNlc1xyXG4gICAgY2xvc2VFeGlzdGluZzogZmFsc2UsXHJcblxyXG4gICAgLy8gRW5hYmxlIGluZmluaXRlIGdhbGxlcnkgbmF2aWdhdGlvblxyXG4gICAgbG9vcDogZmFsc2UsXHJcblxyXG4gICAgLy8gSG9yaXpvbnRhbCBzcGFjZSBiZXR3ZWVuIHNsaWRlc1xyXG4gICAgZ3V0dGVyOiA1MCxcclxuXHJcbiAgICAvLyBFbmFibGUga2V5Ym9hcmQgbmF2aWdhdGlvblxyXG4gICAga2V5Ym9hcmQ6IHRydWUsXHJcblxyXG4gICAgLy8gU2hvdWxkIGFsbG93IGNhcHRpb24gdG8gb3ZlcmxhcCB0aGUgY29udGVudFxyXG4gICAgcHJldmVudENhcHRpb25PdmVybGFwOiB0cnVlLFxyXG5cclxuICAgIC8vIFNob3VsZCBkaXNwbGF5IG5hdmlnYXRpb24gYXJyb3dzIGF0IHRoZSBzY3JlZW4gZWRnZXNcclxuICAgIGFycm93czogdHJ1ZSxcclxuXHJcbiAgICAvLyBTaG91bGQgZGlzcGxheSBjb3VudGVyIGF0IHRoZSB0b3AgbGVmdCBjb3JuZXJcclxuICAgIGluZm9iYXI6IHRydWUsXHJcblxyXG4gICAgLy8gU2hvdWxkIGRpc3BsYXkgY2xvc2UgYnV0dG9uICh1c2luZyBgYnRuVHBsLnNtYWxsQnRuYCB0ZW1wbGF0ZSkgb3ZlciB0aGUgY29udGVudFxyXG4gICAgLy8gQ2FuIGJlIHRydWUsIGZhbHNlLCBcImF1dG9cIlxyXG4gICAgLy8gSWYgXCJhdXRvXCIgLSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZW5hYmxlZCBmb3IgXCJodG1sXCIsIFwiaW5saW5lXCIgb3IgXCJhamF4XCIgaXRlbXNcclxuICAgIHNtYWxsQnRuOiBcImF1dG9cIixcclxuXHJcbiAgICAvLyBTaG91bGQgZGlzcGxheSB0b29sYmFyIChidXR0b25zIGF0IHRoZSB0b3ApXHJcbiAgICAvLyBDYW4gYmUgdHJ1ZSwgZmFsc2UsIFwiYXV0b1wiXHJcbiAgICAvLyBJZiBcImF1dG9cIiAtIHdpbGwgYmUgYXV0b21hdGljYWxseSBoaWRkZW4gaWYgXCJzbWFsbEJ0blwiIGlzIGVuYWJsZWRcclxuICAgIHRvb2xiYXI6IFwiYXV0b1wiLFxyXG5cclxuICAgIC8vIFdoYXQgYnV0dG9ucyBzaG91bGQgYXBwZWFyIGluIHRoZSB0b3AgcmlnaHQgY29ybmVyLlxyXG4gICAgLy8gQnV0dG9ucyB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGVtcGxhdGVzIGZyb20gYGJ0blRwbGAgb3B0aW9uXHJcbiAgICAvLyBhbmQgdGhleSB3aWxsIGJlIHBsYWNlZCBpbnRvIHRvb2xiYXIgKGNsYXNzPVwiZmFuY3lib3gtdG9vbGJhclwiYCBlbGVtZW50KVxyXG4gICAgYnV0dG9uczogW1xyXG4gICAgICBcInpvb21cIixcclxuICAgICAgLy9cInNoYXJlXCIsXHJcbiAgICAgIFwic2xpZGVTaG93XCIsXHJcbiAgICAgIC8vXCJmdWxsU2NyZWVuXCIsXHJcbiAgICAgIC8vXCJkb3dubG9hZFwiLFxyXG4gICAgICBcInRodW1ic1wiLFxyXG4gICAgICBcImNsb3NlXCJcclxuICAgIF0sXHJcblxyXG4gICAgLy8gRGV0ZWN0IFwiaWRsZVwiIHRpbWUgaW4gc2Vjb25kc1xyXG4gICAgaWRsZVRpbWU6IDMsXHJcblxyXG4gICAgLy8gRGlzYWJsZSByaWdodC1jbGljayBhbmQgdXNlIHNpbXBsZSBpbWFnZSBwcm90ZWN0aW9uIGZvciBpbWFnZXNcclxuICAgIHByb3RlY3Q6IGZhbHNlLFxyXG5cclxuICAgIC8vIFNob3J0Y3V0IHRvIG1ha2UgY29udGVudCBcIm1vZGFsXCIgLSBkaXNhYmxlIGtleWJvYXJkIG5hdmlndGlvbiwgaGlkZSBidXR0b25zLCBldGNcclxuICAgIG1vZGFsOiBmYWxzZSxcclxuXHJcbiAgICBpbWFnZToge1xyXG4gICAgICAvLyBXYWl0IGZvciBpbWFnZXMgdG8gbG9hZCBiZWZvcmUgZGlzcGxheWluZ1xyXG4gICAgICAvLyAgIHRydWUgIC0gd2FpdCBmb3IgaW1hZ2UgdG8gbG9hZCBhbmQgdGhlbiBkaXNwbGF5O1xyXG4gICAgICAvLyAgIGZhbHNlIC0gZGlzcGxheSB0aHVtYm5haWwgYW5kIGxvYWQgdGhlIGZ1bGwtc2l6ZWQgaW1hZ2Ugb3ZlciB0b3AsXHJcbiAgICAgIC8vICAgICAgICAgICByZXF1aXJlcyBwcmVkZWZpbmVkIGltYWdlIGRpbWVuc2lvbnMgKGBkYXRhLXdpZHRoYCBhbmQgYGRhdGEtaGVpZ2h0YCBhdHRyaWJ1dGVzKVxyXG4gICAgICBwcmVsb2FkOiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbiAgICBhamF4OiB7XHJcbiAgICAgIC8vIE9iamVjdCBjb250YWluaW5nIHNldHRpbmdzIGZvciBhamF4IHJlcXVlc3RcclxuICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAvLyBUaGlzIGhlbHBzIHRvIGluZGljYXRlIHRoYXQgcmVxdWVzdCBjb21lcyBmcm9tIHRoZSBtb2RhbFxyXG4gICAgICAgIC8vIEZlZWwgZnJlZSB0byBjaGFuZ2UgbmFtaW5nXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgZmFuY3lib3g6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgaWZyYW1lOiB7XHJcbiAgICAgIC8vIElmcmFtZSB0ZW1wbGF0ZVxyXG4gICAgICB0cGw6ICc8aWZyYW1lIGlkPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIG5hbWU9XCJmYW5jeWJveC1mcmFtZXtybmR9XCIgY2xhc3M9XCJmYW5jeWJveC1pZnJhbWVcIiBhbGxvd2Z1bGxzY3JlZW49XCJhbGxvd2Z1bGxzY3JlZW5cIiBhbGxvdz1cImF1dG9wbGF5OyBmdWxsc2NyZWVuXCIgc3JjPVwiXCI+PC9pZnJhbWU+JyxcclxuXHJcbiAgICAgIC8vIFByZWxvYWQgaWZyYW1lIGJlZm9yZSBkaXNwbGF5aW5nIGl0XHJcbiAgICAgIC8vIFRoaXMgYWxsb3dzIHRvIGNhbGN1bGF0ZSBpZnJhbWUgY29udGVudCB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgICAgIC8vIChub3RlOiBEdWUgdG8gXCJTYW1lIE9yaWdpbiBQb2xpY3lcIiwgeW91IGNhbid0IGdldCBjcm9zcyBkb21haW4gZGF0YSkuXHJcbiAgICAgIHByZWxvYWQ6IHRydWUsXHJcblxyXG4gICAgICAvLyBDdXN0b20gQ1NTIHN0eWxpbmcgZm9yIGlmcmFtZSB3cmFwcGluZyBlbGVtZW50XHJcbiAgICAgIC8vIFlvdSBjYW4gdXNlIHRoaXMgdG8gc2V0IGN1c3RvbSBpZnJhbWUgZGltZW5zaW9uc1xyXG4gICAgICBjc3M6IHt9LFxyXG5cclxuICAgICAgLy8gSWZyYW1lIHRhZyBhdHRyaWJ1dGVzXHJcbiAgICAgIGF0dHI6IHtcclxuICAgICAgICBzY3JvbGxpbmc6IFwiYXV0b1wiXHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gRm9yIEhUTUw1IHZpZGVvIG9ubHlcclxuICAgIHZpZGVvOiB7XHJcbiAgICAgIHRwbDogJzx2aWRlbyBjbGFzcz1cImZhbmN5Ym94LXZpZGVvXCIgY29udHJvbHMgY29udHJvbHNMaXN0PVwibm9kb3dubG9hZFwiIHBvc3Rlcj1cInt7cG9zdGVyfX1cIj4nICtcclxuICAgICAgICAnPHNvdXJjZSBzcmM9XCJ7e3NyY319XCIgdHlwZT1cInt7Zm9ybWF0fX1cIiAvPicgK1xyXG4gICAgICAgICdTb3JyeSwgeW91ciBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IGVtYmVkZGVkIHZpZGVvcywgPGEgaHJlZj1cInt7c3JjfX1cIj5kb3dubG9hZDwvYT4gYW5kIHdhdGNoIHdpdGggeW91ciBmYXZvcml0ZSB2aWRlbyBwbGF5ZXIhJyArXHJcbiAgICAgICAgXCI8L3ZpZGVvPlwiLFxyXG4gICAgICBmb3JtYXQ6IFwiXCIsIC8vIGN1c3RvbSB2aWRlbyBmb3JtYXRcclxuICAgICAgYXV0b1N0YXJ0OiB0cnVlXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIERlZmF1bHQgY29udGVudCB0eXBlIGlmIGNhbm5vdCBiZSBkZXRlY3RlZCBhdXRvbWF0aWNhbGx5XHJcbiAgICBkZWZhdWx0VHlwZTogXCJpbWFnZVwiLFxyXG5cclxuICAgIC8vIE9wZW4vY2xvc2UgYW5pbWF0aW9uIHR5cGVcclxuICAgIC8vIFBvc3NpYmxlIHZhbHVlczpcclxuICAgIC8vICAgZmFsc2UgICAgICAgICAgICAtIGRpc2FibGVcclxuICAgIC8vICAgXCJ6b29tXCIgICAgICAgICAgIC0gem9vbSBpbWFnZXMgZnJvbS90byB0aHVtYm5haWxcclxuICAgIC8vICAgXCJmYWRlXCJcclxuICAgIC8vICAgXCJ6b29tLWluLW91dFwiXHJcbiAgICAvL1xyXG4gICAgYW5pbWF0aW9uRWZmZWN0OiBcInpvb21cIixcclxuXHJcbiAgICAvLyBEdXJhdGlvbiBpbiBtcyBmb3Igb3Blbi9jbG9zZSBhbmltYXRpb25cclxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAzNjYsXHJcblxyXG4gICAgLy8gU2hvdWxkIGltYWdlIGNoYW5nZSBvcGFjaXR5IHdoaWxlIHpvb21pbmdcclxuICAgIC8vIElmIG9wYWNpdHkgaXMgXCJhdXRvXCIsIHRoZW4gb3BhY2l0eSB3aWxsIGJlIGNoYW5nZWQgaWYgaW1hZ2UgYW5kIHRodW1ibmFpbCBoYXZlIGRpZmZlcmVudCBhc3BlY3QgcmF0aW9zXHJcbiAgICB6b29tT3BhY2l0eTogXCJhdXRvXCIsXHJcblxyXG4gICAgLy8gVHJhbnNpdGlvbiBlZmZlY3QgYmV0d2VlbiBzbGlkZXNcclxuICAgIC8vXHJcbiAgICAvLyBQb3NzaWJsZSB2YWx1ZXM6XHJcbiAgICAvLyAgIGZhbHNlICAgICAgICAgICAgLSBkaXNhYmxlXHJcbiAgICAvLyAgIFwiZmFkZSdcclxuICAgIC8vICAgXCJzbGlkZSdcclxuICAgIC8vICAgXCJjaXJjdWxhcidcclxuICAgIC8vICAgXCJ0dWJlJ1xyXG4gICAgLy8gICBcInpvb20taW4tb3V0J1xyXG4gICAgLy8gICBcInJvdGF0ZSdcclxuICAgIC8vXHJcbiAgICB0cmFuc2l0aW9uRWZmZWN0OiBcImZhZGVcIixcclxuXHJcbiAgICAvLyBEdXJhdGlvbiBpbiBtcyBmb3IgdHJhbnNpdGlvbiBhbmltYXRpb25cclxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogMzY2LFxyXG5cclxuICAgIC8vIEN1c3RvbSBDU1MgY2xhc3MgZm9yIHNsaWRlIGVsZW1lbnRcclxuICAgIHNsaWRlQ2xhc3M6IFwiXCIsXHJcblxyXG4gICAgLy8gQ3VzdG9tIENTUyBjbGFzcyBmb3IgbGF5b3V0XHJcbiAgICBiYXNlQ2xhc3M6IFwiXCIsXHJcblxyXG4gICAgLy8gQmFzZSB0ZW1wbGF0ZSBmb3IgbGF5b3V0XHJcbiAgICBiYXNlVHBsOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNvbnRhaW5lclwiIHJvbGU9XCJkaWFsb2dcIiB0YWJpbmRleD1cIi0xXCI+JyArXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtYmdcIj48L2Rpdj4nICtcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbm5lclwiPicgK1xyXG4gICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWluZm9iYXJcIj48c3BhbiBkYXRhLWZhbmN5Ym94LWluZGV4Pjwvc3Bhbj4mbmJzcDsvJm5ic3A7PHNwYW4gZGF0YS1mYW5jeWJveC1jb3VudD48L3NwYW4+PC9kaXY+JyArXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtdG9vbGJhclwiPnt7YnV0dG9uc319PC9kaXY+JyArXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtbmF2aWdhdGlvblwiPnt7YXJyb3dzfX08L2Rpdj4nICtcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zdGFnZVwiPjwvZGl2PicgK1xyXG4gICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWNhcHRpb25cIj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtY2FwdGlvbl9fYm9keVwiPjwvZGl2PjwvZGl2PicgK1xyXG4gICAgICBcIjwvZGl2PlwiICtcclxuICAgICAgXCI8L2Rpdj5cIixcclxuXHJcbiAgICAvLyBMb2FkaW5nIGluZGljYXRvciB0ZW1wbGF0ZVxyXG4gICAgc3Bpbm5lclRwbDogJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1sb2FkaW5nXCI+PC9kaXY+JyxcclxuXHJcbiAgICAvLyBFcnJvciBtZXNzYWdlIHRlbXBsYXRlXHJcbiAgICBlcnJvclRwbDogJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1lcnJvclwiPjxwPnt7RVJST1J9fTwvcD48L2Rpdj4nLFxyXG5cclxuICAgIGJ0blRwbDoge1xyXG4gICAgICBkb3dubG9hZDogJzxhIGRvd25sb2FkIGRhdGEtZmFuY3lib3gtZG93bmxvYWQgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1kb3dubG9hZFwiIHRpdGxlPVwie3tET1dOTE9BRH19XCIgaHJlZj1cImphdmFzY3JpcHQ6O1wiPicgK1xyXG4gICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xOC42MiAxNy4wOVYxOUg1LjM4di0xLjkxem0tMi45Ny02Ljk2TDE3IDExLjQ1bC01IDQuODctNS00Ljg3IDEuMzYtMS4zMiAyLjY4IDIuNjRWNWgxLjkydjcuNzd6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPC9hPlwiLFxyXG5cclxuICAgICAgem9vbTogJzxidXR0b24gZGF0YS1mYW5jeWJveC16b29tIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tem9vbVwiIHRpdGxlPVwie3taT09NfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTguNyAxNy4zbC0zLTNhNS45IDUuOSAwIDAgMC0uNi03LjYgNS45IDUuOSAwIDAgMC04LjQgMCA1LjkgNS45IDAgMCAwIDAgOC40IDUuOSA1LjkgMCAwIDAgNy43LjdsMyAzYTEgMSAwIDAgMCAxLjMgMGMuNC0uNS40LTEgMC0xLjV6TTguMSAxMy44YTQgNCAwIDAgMSAwLTUuNyA0IDQgMCAwIDEgNS43IDAgNCA0IDAgMCAxIDAgNS43IDQgNCAwIDAgMS01LjcgMHpcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8L2J1dHRvbj5cIixcclxuXHJcbiAgICAgIGNsb3NlOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWNsb3NlIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tY2xvc2VcIiB0aXRsZT1cInt7Q0xPU0V9fVwiPicgK1xyXG4gICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMiAxMC42TDYuNiA1LjIgNS4yIDYuNmw1LjQgNS40LTUuNCA1LjQgMS40IDEuNCA1LjQtNS40IDUuNCA1LjQgMS40LTEuNC01LjQtNS40IDUuNC01LjQtMS40LTEuNC01LjQgNS40elwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiLFxyXG5cclxuICAgICAgLy8gQXJyb3dzXHJcbiAgICAgIGFycm93TGVmdDogJzxidXR0b24gZGF0YS1mYW5jeWJveC1wcmV2IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tYXJyb3dfbGVmdFwiIHRpdGxlPVwie3tQUkVWfX1cIj4nICtcclxuICAgICAgICAnPGRpdj48c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMS4yOCAxNS43bC0xLjM0IDEuMzdMNSAxMmw0Ljk0LTUuMDcgMS4zNCAxLjM4LTIuNjggMi43MkgxOXYxLjk0SDguNnpcIi8+PC9zdmc+PC9kaXY+JyArXHJcbiAgICAgICAgXCI8L2J1dHRvbj5cIixcclxuXHJcbiAgICAgIGFycm93UmlnaHQ6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtbmV4dCBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWFycm93X3JpZ2h0XCIgdGl0bGU9XCJ7e05FWFR9fVwiPicgK1xyXG4gICAgICAgICc8ZGl2PjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE1LjQgMTIuOTdsLTIuNjggMi43MiAxLjM0IDEuMzhMMTkgMTJsLTQuOTQtNS4wNy0xLjM0IDEuMzggMi42OCAyLjcySDV2MS45NHpcIi8+PC9zdmc+PC9kaXY+JyArXHJcbiAgICAgICAgXCI8L2J1dHRvbj5cIixcclxuXHJcbiAgICAgIC8vIFRoaXMgc21hbGwgY2xvc2UgYnV0dG9uIHdpbGwgYmUgYXBwZW5kZWQgdG8geW91ciBodG1sL2lubGluZS9hamF4IGNvbnRlbnQgYnkgZGVmYXVsdCxcclxuICAgICAgLy8gaWYgXCJzbWFsbEJ0blwiIG9wdGlvbiBpcyBub3Qgc2V0IHRvIGZhbHNlXHJcbiAgICAgIHNtYWxsQnRuOiAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1mYW5jeWJveC1jbG9zZSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1jbG9zZS1zbWFsbFwiIHRpdGxlPVwie3tDTE9TRX19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZlcnNpb249XCIxXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTMgMTJsNS01LTEtMS01IDUtNS01LTEgMSA1IDUtNSA1IDEgMSA1LTUgNSA1IDEtMXpcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuICAgIHBhcmVudEVsOiBcImJvZHlcIixcclxuXHJcbiAgICAvLyBIaWRlIGJyb3dzZXIgdmVydGljYWwgc2Nyb2xsYmFyczsgdXNlIGF0IHlvdXIgb3duIHJpc2tcclxuICAgIGhpZGVTY3JvbGxiYXI6IHRydWUsXHJcblxyXG4gICAgLy8gRm9jdXMgaGFuZGxpbmdcclxuICAgIC8vID09PT09PT09PT09PT09XHJcblxyXG4gICAgLy8gVHJ5IHRvIGZvY3VzIG9uIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCBhZnRlciBvcGVuaW5nXHJcbiAgICBhdXRvRm9jdXM6IHRydWUsXHJcblxyXG4gICAgLy8gUHV0IGZvY3VzIGJhY2sgdG8gYWN0aXZlIGVsZW1lbnQgYWZ0ZXIgY2xvc2luZ1xyXG4gICAgYmFja0ZvY3VzOiB0cnVlLFxyXG5cclxuICAgIC8vIERvIG5vdCBsZXQgdXNlciB0byBmb2N1cyBvbiBlbGVtZW50IG91dHNpZGUgbW9kYWwgY29udGVudFxyXG4gICAgdHJhcEZvY3VzOiB0cnVlLFxyXG5cclxuICAgIC8vIE1vZHVsZSBzcGVjaWZpYyBvcHRpb25zXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGZ1bGxTY3JlZW46IHtcclxuICAgICAgYXV0b1N0YXJ0OiBmYWxzZVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTZXQgYHRvdWNoOiBmYWxzZWAgdG8gZGlzYWJsZSBwYW5uaW5nL3N3aXBpbmdcclxuICAgIHRvdWNoOiB7XHJcbiAgICAgIHZlcnRpY2FsOiB0cnVlLCAvLyBBbGxvdyB0byBkcmFnIGNvbnRlbnQgdmVydGljYWxseVxyXG4gICAgICBtb21lbnR1bTogdHJ1ZSAvLyBDb250aW51ZSBtb3ZlbWVudCBhZnRlciByZWxlYXNpbmcgbW91c2UvdG91Y2ggd2hlbiBwYW5uaW5nXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEhhc2ggdmFsdWUgd2hlbiBpbml0aWFsaXppbmcgbWFudWFsbHksXHJcbiAgICAvLyBzZXQgYGZhbHNlYCB0byBkaXNhYmxlIGhhc2ggY2hhbmdlXHJcbiAgICBoYXNoOiBudWxsLFxyXG5cclxuICAgIC8vIEN1c3RvbWl6ZSBvciBhZGQgbmV3IG1lZGlhIHR5cGVzXHJcbiAgICAvLyBFeGFtcGxlOlxyXG4gICAgLypcclxuICAgICAgbWVkaWEgOiB7XHJcbiAgICAgICAgeW91dHViZSA6IHtcclxuICAgICAgICAgIHBhcmFtcyA6IHtcclxuICAgICAgICAgICAgYXV0b3BsYXkgOiAwXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAqL1xyXG4gICAgbWVkaWE6IHt9LFxyXG5cclxuICAgIHNsaWRlU2hvdzoge1xyXG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlLFxyXG4gICAgICBzcGVlZDogMzAwMFxyXG4gICAgfSxcclxuXHJcbiAgICB0aHVtYnM6IHtcclxuICAgICAgYXV0b1N0YXJ0OiBmYWxzZSwgLy8gRGlzcGxheSB0aHVtYm5haWxzIG9uIG9wZW5pbmdcclxuICAgICAgaGlkZU9uQ2xvc2U6IHRydWUsIC8vIEhpZGUgdGh1bWJuYWlsIGdyaWQgd2hlbiBjbG9zaW5nIGFuaW1hdGlvbiBzdGFydHNcclxuICAgICAgcGFyZW50RWw6IFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiLCAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuICAgICAgYXhpczogXCJ5XCIgLy8gVmVydGljYWwgKHkpIG9yIGhvcml6b250YWwgKHgpIHNjcm9sbGluZ1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVc2UgbW91c2V3aGVlbCB0byBuYXZpZ2F0ZSBnYWxsZXJ5XHJcbiAgICAvLyBJZiAnYXV0bycgLSBlbmFibGVkIGZvciBpbWFnZXMgb25seVxyXG4gICAgd2hlZWw6IFwiYXV0b1wiLFxyXG5cclxuICAgIC8vIENhbGxiYWNrc1xyXG4gICAgLy89PT09PT09PT09XHJcblxyXG4gICAgLy8gU2VlIERvY3VtZW50YXRpb24vQVBJL0V2ZW50cyBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG4gICAgLy8gRXhhbXBsZTpcclxuICAgIC8qXHJcbiAgICAgIGFmdGVyU2hvdzogZnVuY3Rpb24oIGluc3RhbmNlLCBjdXJyZW50ICkge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyggJ0NsaWNrZWQgZWxlbWVudDonICk7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCBjdXJyZW50Lm9wdHMuJG9yaWcgKTtcclxuICAgICAgfVxyXG4gICAgKi9cclxuXHJcbiAgICBvbkluaXQ6ICQubm9vcCwgLy8gV2hlbiBpbnN0YW5jZSBoYXMgYmVlbiBpbml0aWFsaXplZFxyXG5cclxuICAgIGJlZm9yZUxvYWQ6ICQubm9vcCwgLy8gQmVmb3JlIHRoZSBjb250ZW50IG9mIGEgc2xpZGUgaXMgYmVpbmcgbG9hZGVkXHJcbiAgICBhZnRlckxvYWQ6ICQubm9vcCwgLy8gV2hlbiB0aGUgY29udGVudCBvZiBhIHNsaWRlIGlzIGRvbmUgbG9hZGluZ1xyXG5cclxuICAgIGJlZm9yZVNob3c6ICQubm9vcCwgLy8gQmVmb3JlIG9wZW4gYW5pbWF0aW9uIHN0YXJ0c1xyXG4gICAgYWZ0ZXJTaG93OiAkLm5vb3AsIC8vIFdoZW4gY29udGVudCBpcyBkb25lIGxvYWRpbmcgYW5kIGFuaW1hdGluZ1xyXG5cclxuICAgIGJlZm9yZUNsb3NlOiAkLm5vb3AsIC8vIEJlZm9yZSB0aGUgaW5zdGFuY2UgYXR0ZW1wdHMgdG8gY2xvc2UuIFJldHVybiBmYWxzZSB0byBjYW5jZWwgdGhlIGNsb3NlLlxyXG4gICAgYWZ0ZXJDbG9zZTogJC5ub29wLCAvLyBBZnRlciBpbnN0YW5jZSBoYXMgYmVlbiBjbG9zZWRcclxuXHJcbiAgICBvbkFjdGl2YXRlOiAkLm5vb3AsIC8vIFdoZW4gaW5zdGFuY2UgaXMgYnJvdWdodCB0byBmcm9udFxyXG4gICAgb25EZWFjdGl2YXRlOiAkLm5vb3AsIC8vIFdoZW4gb3RoZXIgaW5zdGFuY2UgaGFzIGJlZW4gYWN0aXZhdGVkXHJcblxyXG4gICAgLy8gSW50ZXJhY3Rpb25cclxuICAgIC8vID09PT09PT09PT09XHJcblxyXG4gICAgLy8gVXNlIG9wdGlvbnMgYmVsb3cgdG8gY3VzdG9taXplIHRha2VuIGFjdGlvbiB3aGVuIHVzZXIgY2xpY2tzIG9yIGRvdWJsZSBjbGlja3Mgb24gdGhlIGZhbmN5Qm94IGFyZWEsXHJcbiAgICAvLyBlYWNoIG9wdGlvbiBjYW4gYmUgc3RyaW5nIG9yIG1ldGhvZCB0aGF0IHJldHVybnMgdmFsdWUuXHJcbiAgICAvL1xyXG4gICAgLy8gUG9zc2libGUgdmFsdWVzOlxyXG4gICAgLy8gICBcImNsb3NlXCIgICAgICAgICAgIC0gY2xvc2UgaW5zdGFuY2VcclxuICAgIC8vICAgXCJuZXh0XCIgICAgICAgICAgICAtIG1vdmUgdG8gbmV4dCBnYWxsZXJ5IGl0ZW1cclxuICAgIC8vICAgXCJuZXh0T3JDbG9zZVwiICAgICAtIG1vdmUgdG8gbmV4dCBnYWxsZXJ5IGl0ZW0gb3IgY2xvc2UgaWYgZ2FsbGVyeSBoYXMgb25seSBvbmUgaXRlbVxyXG4gICAgLy8gICBcInRvZ2dsZUNvbnRyb2xzXCIgIC0gc2hvdy9oaWRlIGNvbnRyb2xzXHJcbiAgICAvLyAgIFwiem9vbVwiICAgICAgICAgICAgLSB6b29tIGltYWdlIChpZiBsb2FkZWQpXHJcbiAgICAvLyAgIGZhbHNlICAgICAgICAgICAgIC0gZG8gbm90aGluZ1xyXG5cclxuICAgIC8vIENsaWNrZWQgb24gdGhlIGNvbnRlbnRcclxuICAgIGNsaWNrQ29udGVudDogZnVuY3Rpb24gKGN1cnJlbnQsIGV2ZW50KSB7XHJcbiAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IFwiem9vbVwiIDogZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENsaWNrZWQgb24gdGhlIHNsaWRlXHJcbiAgICBjbGlja1NsaWRlOiBcImNsb3NlXCIsXHJcblxyXG4gICAgLy8gQ2xpY2tlZCBvbiB0aGUgYmFja2dyb3VuZCAoYmFja2Ryb3ApIGVsZW1lbnQ7XHJcbiAgICAvLyBpZiB5b3UgaGF2ZSBub3QgY2hhbmdlZCB0aGUgbGF5b3V0LCB0aGVuIG1vc3QgbGlrZWx5IHlvdSBuZWVkIHRvIHVzZSBgY2xpY2tTbGlkZWAgb3B0aW9uXHJcbiAgICBjbGlja091dHNpZGU6IFwiY2xvc2VcIixcclxuXHJcbiAgICAvLyBTYW1lIGFzIHByZXZpb3VzIHR3bywgYnV0IGZvciBkb3VibGUgY2xpY2tcclxuICAgIGRibGNsaWNrQ29udGVudDogZmFsc2UsXHJcbiAgICBkYmxjbGlja1NsaWRlOiBmYWxzZSxcclxuICAgIGRibGNsaWNrT3V0c2lkZTogZmFsc2UsXHJcblxyXG4gICAgLy8gQ3VzdG9tIG9wdGlvbnMgd2hlbiBtb2JpbGUgZGV2aWNlIGlzIGRldGVjdGVkXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBtb2JpbGU6IHtcclxuICAgICAgcHJldmVudENhcHRpb25PdmVybGFwOiBmYWxzZSxcclxuICAgICAgaWRsZVRpbWU6IGZhbHNlLFxyXG4gICAgICBjbGlja0NvbnRlbnQ6IGZ1bmN0aW9uIChjdXJyZW50LCBldmVudCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IFwidG9nZ2xlQ29udHJvbHNcIiA6IGZhbHNlO1xyXG4gICAgICB9LFxyXG4gICAgICBjbGlja1NsaWRlOiBmdW5jdGlvbiAoY3VycmVudCwgZXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSBcImltYWdlXCIgPyBcInRvZ2dsZUNvbnRyb2xzXCIgOiBcImNsb3NlXCI7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRibGNsaWNrQ29udGVudDogZnVuY3Rpb24gKGN1cnJlbnQsIGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiID8gXCJ6b29tXCIgOiBmYWxzZTtcclxuICAgICAgfSxcclxuICAgICAgZGJsY2xpY2tTbGlkZTogZnVuY3Rpb24gKGN1cnJlbnQsIGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiID8gXCJ6b29tXCIgOiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBJbnRlcm5hdGlvbmFsaXphdGlvblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBsYW5nOiBcImVuXCIsXHJcbiAgICBpMThuOiB7XHJcbiAgICAgIGVuOiB7XHJcbiAgICAgICAgQ0xPU0U6IFwiQ2xvc2VcIixcclxuICAgICAgICBORVhUOiBcIk5leHRcIixcclxuICAgICAgICBQUkVWOiBcIlByZXZpb3VzXCIsXHJcbiAgICAgICAgRVJST1I6IFwiVGhlIHJlcXVlc3RlZCBjb250ZW50IGNhbm5vdCBiZSBsb2FkZWQuIDxici8+IFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIsXHJcbiAgICAgICAgUExBWV9TVEFSVDogXCJTdGFydCBzbGlkZXNob3dcIixcclxuICAgICAgICBQTEFZX1NUT1A6IFwiUGF1c2Ugc2xpZGVzaG93XCIsXHJcbiAgICAgICAgRlVMTF9TQ1JFRU46IFwiRnVsbCBzY3JlZW5cIixcclxuICAgICAgICBUSFVNQlM6IFwiVGh1bWJuYWlsc1wiLFxyXG4gICAgICAgIERPV05MT0FEOiBcIkRvd25sb2FkXCIsXHJcbiAgICAgICAgU0hBUkU6IFwiU2hhcmVcIixcclxuICAgICAgICBaT09NOiBcIlpvb21cIlxyXG4gICAgICB9LFxyXG4gICAgICBkZToge1xyXG4gICAgICAgIENMT1NFOiBcIlNjaGxpZSZzemxpZztlblwiLFxyXG4gICAgICAgIE5FWFQ6IFwiV2VpdGVyXCIsXHJcbiAgICAgICAgUFJFVjogXCJadXImdXVtbDtja1wiLFxyXG4gICAgICAgIEVSUk9SOiBcIkRpZSBhbmdlZm9yZGVydGVuIERhdGVuIGtvbm50ZW4gbmljaHQgZ2VsYWRlbiB3ZXJkZW4uIDxici8+IEJpdHRlIHZlcnN1Y2hlbiBTaWUgZXMgc3AmYXVtbDt0ZXIgbm9jaG1hbC5cIixcclxuICAgICAgICBQTEFZX1NUQVJUOiBcIkRpYXNjaGF1IHN0YXJ0ZW5cIixcclxuICAgICAgICBQTEFZX1NUT1A6IFwiRGlhc2NoYXUgYmVlbmRlblwiLFxyXG4gICAgICAgIEZVTExfU0NSRUVOOiBcIlZvbGxiaWxkXCIsXHJcbiAgICAgICAgVEhVTUJTOiBcIlZvcnNjaGF1YmlsZGVyXCIsXHJcbiAgICAgICAgRE9XTkxPQUQ6IFwiSGVydW50ZXJsYWRlblwiLFxyXG4gICAgICAgIFNIQVJFOiBcIlRlaWxlblwiLFxyXG4gICAgICAgIFpPT006IFwiVmVyZ3Imb3VtbDsmc3psaWc7ZXJuXCJcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIEZldyB1c2VmdWwgdmFyaWFibGVzIGFuZCBtZXRob2RzXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyICRXID0gJCh3aW5kb3cpO1xyXG4gIHZhciAkRCA9ICQoZG9jdW1lbnQpO1xyXG5cclxuICB2YXIgY2FsbGVkID0gMDtcclxuXHJcbiAgLy8gQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGEgalF1ZXJ5IG9iamVjdCBhbmQgbm90IGEgbmF0aXZlIEphdmFTY3JpcHQgb2JqZWN0XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgdmFyIGlzUXVlcnkgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqICYmIG9iai5oYXNPd25Qcm9wZXJ0eSAmJiBvYmogaW5zdGFuY2VvZiAkO1xyXG4gIH07XHJcblxyXG4gIC8vIEhhbmRsZSBtdWx0aXBsZSBicm93c2VycyBmb3IgXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiBhbmQgXCJjYW5jZWxBbmltYXRpb25GcmFtZVwiXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIHZhciByZXF1ZXN0QUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIC8vIGlmIGFsbCBlbHNlIGZhaWxzLCB1c2Ugc2V0VGltZW91dFxyXG4gICAgICBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSkoKTtcclxuXHJcbiAgdmFyIGNhbmNlbEFGcmFtZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoaWQpO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pKCk7XHJcblxyXG4gIC8vIERldGVjdCB0aGUgc3VwcG9ydGVkIHRyYW5zaXRpb24tZW5kIGV2ZW50IHByb3BlcnR5IG5hbWVcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgdmFyIHRyYW5zaXRpb25FbmQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZha2VlbGVtZW50XCIpLFxyXG4gICAgICB0O1xyXG5cclxuICAgIHZhciB0cmFuc2l0aW9ucyA9IHtcclxuICAgICAgdHJhbnNpdGlvbjogXCJ0cmFuc2l0aW9uZW5kXCIsXHJcbiAgICAgIE9UcmFuc2l0aW9uOiBcIm9UcmFuc2l0aW9uRW5kXCIsXHJcbiAgICAgIE1velRyYW5zaXRpb246IFwidHJhbnNpdGlvbmVuZFwiLFxyXG4gICAgICBXZWJraXRUcmFuc2l0aW9uOiBcIndlYmtpdFRyYW5zaXRpb25FbmRcIlxyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKHQgaW4gdHJhbnNpdGlvbnMpIHtcclxuICAgICAgaWYgKGVsLnN0eWxlW3RdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNpdGlvbnNbdF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gXCJ0cmFuc2l0aW9uZW5kXCI7XHJcbiAgfSkoKTtcclxuXHJcbiAgLy8gRm9yY2UgcmVkcmF3IG9uIGFuIGVsZW1lbnQuXHJcbiAgLy8gVGhpcyBoZWxwcyBpbiBjYXNlcyB3aGVyZSB0aGUgYnJvd3NlciBkb2Vzbid0IHJlZHJhdyBhbiB1cGRhdGVkIGVsZW1lbnQgcHJvcGVybHlcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIHZhciBmb3JjZVJlZHJhdyA9IGZ1bmN0aW9uICgkZWwpIHtcclxuICAgIHJldHVybiAkZWwgJiYgJGVsLmxlbmd0aCAmJiAkZWxbMF0ub2Zmc2V0SGVpZ2h0O1xyXG4gIH07XHJcblxyXG4gIC8vIEV4Y2x1ZGUgYXJyYXkgKGBidXR0b25zYCkgb3B0aW9ucyBmcm9tIGRlZXAgbWVyZ2luZ1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIHZhciBtZXJnZU9wdHMgPSBmdW5jdGlvbiAob3B0czEsIG9wdHMyKSB7XHJcbiAgICB2YXIgcmV6ID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdHMxLCBvcHRzMik7XHJcblxyXG4gICAgJC5lYWNoKG9wdHMyLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICBpZiAoJC5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIHJleltrZXldID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXo7XHJcbiAgfTtcclxuXHJcbiAgLy8gSG93IG11Y2ggb2YgYW4gZWxlbWVudCBpcyB2aXNpYmxlIGluIHZpZXdwb3J0XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIHZhciBpblZpZXdwb3J0ID0gZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgIHZhciBlbGVtQ2VudGVyLCByZXo7XHJcblxyXG4gICAgaWYgKCFlbGVtIHx8IGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgICQoXCIuZmFuY3lib3gtY29udGFpbmVyXCIpLmNzcyhcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICBlbGVtQ2VudGVyID0ge1xyXG4gICAgICB4OiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyBlbGVtLm9mZnNldFdpZHRoIC8gMixcclxuICAgICAgeTogZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBlbGVtLm9mZnNldEhlaWdodCAvIDJcclxuICAgIH07XHJcblxyXG4gICAgcmV6ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChlbGVtQ2VudGVyLngsIGVsZW1DZW50ZXIueSkgPT09IGVsZW07XHJcblxyXG4gICAgJChcIi5mYW5jeWJveC1jb250YWluZXJcIikuY3NzKFwicG9pbnRlci1ldmVudHNcIiwgXCJcIik7XHJcblxyXG4gICAgcmV0dXJuIHJlejtcclxuICB9O1xyXG5cclxuICAvLyBDbGFzcyBkZWZpbml0aW9uXHJcbiAgLy8gPT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgRmFuY3lCb3ggPSBmdW5jdGlvbiAoY29udGVudCwgb3B0cywgaW5kZXgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBzZWxmLm9wdHMgPSBtZXJnZU9wdHMoe1xyXG4gICAgICBpbmRleDogaW5kZXhcclxuICAgIH0sICQuZmFuY3lib3guZGVmYXVsdHMpO1xyXG5cclxuICAgIGlmICgkLmlzUGxhaW5PYmplY3Qob3B0cykpIHtcclxuICAgICAgc2VsZi5vcHRzID0gbWVyZ2VPcHRzKHNlbGYub3B0cywgb3B0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCQuZmFuY3lib3guaXNNb2JpbGUpIHtcclxuICAgICAgc2VsZi5vcHRzID0gbWVyZ2VPcHRzKHNlbGYub3B0cywgc2VsZi5vcHRzLm1vYmlsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5pZCA9IHNlbGYub3B0cy5pZCB8fCArK2NhbGxlZDtcclxuXHJcbiAgICBzZWxmLmN1cnJJbmRleCA9IHBhcnNlSW50KHNlbGYub3B0cy5pbmRleCwgMTApIHx8IDA7XHJcbiAgICBzZWxmLnByZXZJbmRleCA9IG51bGw7XHJcblxyXG4gICAgc2VsZi5wcmV2UG9zID0gbnVsbDtcclxuICAgIHNlbGYuY3VyclBvcyA9IDA7XHJcblxyXG4gICAgc2VsZi5maXJzdFJ1biA9IHRydWU7XHJcblxyXG4gICAgLy8gQWxsIGdyb3VwIGl0ZW1zXHJcbiAgICBzZWxmLmdyb3VwID0gW107XHJcblxyXG4gICAgLy8gRXhpc3Rpbmcgc2xpZGVzIChmb3IgY3VycmVudCwgbmV4dCBhbmQgcHJldmlvdXMgZ2FsbGVyeSBpdGVtcylcclxuICAgIHNlbGYuc2xpZGVzID0ge307XHJcblxyXG4gICAgLy8gQ3JlYXRlIGdyb3VwIGVsZW1lbnRzXHJcbiAgICBzZWxmLmFkZENvbnRlbnQoY29udGVudCk7XHJcblxyXG4gICAgaWYgKCFzZWxmLmdyb3VwLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5pbml0KCk7XHJcbiAgfTtcclxuXHJcbiAgJC5leHRlbmQoRmFuY3lCb3gucHJvdG90eXBlLCB7XHJcbiAgICAvLyBDcmVhdGUgRE9NIHN0cnVjdHVyZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBmaXJzdEl0ZW0gPSBzZWxmLmdyb3VwW3NlbGYuY3VyckluZGV4XSxcclxuICAgICAgICBmaXJzdEl0ZW1PcHRzID0gZmlyc3RJdGVtLm9wdHMsXHJcbiAgICAgICAgJGNvbnRhaW5lcixcclxuICAgICAgICBidXR0b25TdHI7XHJcblxyXG4gICAgICBpZiAoZmlyc3RJdGVtT3B0cy5jbG9zZUV4aXN0aW5nKSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5jbG9zZSh0cnVlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSGlkZSBzY3JvbGxiYXJzXHJcbiAgICAgIC8vID09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJmYW5jeWJveC1hY3RpdmVcIik7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgISQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSAmJlxyXG4gICAgICAgIGZpcnN0SXRlbU9wdHMuaGlkZVNjcm9sbGJhciAhPT0gZmFsc2UgJiZcclxuICAgICAgICAhJC5mYW5jeWJveC5pc01vYmlsZSAmJlxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0ID4gd2luZG93LmlubmVySGVpZ2h0XHJcbiAgICAgICkge1xyXG4gICAgICAgICQoXCJoZWFkXCIpLmFwcGVuZChcclxuICAgICAgICAgICc8c3R5bGUgaWQ9XCJmYW5jeWJveC1zdHlsZS1ub3Njcm9sbFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5jb21wZW5zYXRlLWZvci1zY3JvbGxiYXJ7bWFyZ2luLXJpZ2h0OicgK1xyXG4gICAgICAgICAgKHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSArXHJcbiAgICAgICAgICBcInB4O308L3N0eWxlPlwiXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgJChcImJvZHlcIikuYWRkQ2xhc3MoXCJjb21wZW5zYXRlLWZvci1zY3JvbGxiYXJcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEJ1aWxkIGh0bWwgbWFya3VwIGFuZCBzZXQgcmVmZXJlbmNlc1xyXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgIC8vIEJ1aWxkIGh0bWwgY29kZSBmb3IgYnV0dG9ucyBhbmQgaW5zZXJ0IGludG8gbWFpbiB0ZW1wbGF0ZVxyXG4gICAgICBidXR0b25TdHIgPSBcIlwiO1xyXG5cclxuICAgICAgJC5lYWNoKGZpcnN0SXRlbU9wdHMuYnV0dG9ucywgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICAgIGJ1dHRvblN0ciArPSBmaXJzdEl0ZW1PcHRzLmJ0blRwbFt2YWx1ZV0gfHwgXCJcIjtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgbWFya3VwIGZyb20gYmFzZSB0ZW1wbGF0ZSwgaXQgd2lsbCBiZSBpbml0aWFsbHkgaGlkZGVuIHRvXHJcbiAgICAgIC8vIGF2b2lkIHVubmVjZXNzYXJ5IHdvcmsgbGlrZSBwYWludGluZyB3aGlsZSBpbml0aWFsaXppbmcgaXMgbm90IGNvbXBsZXRlXHJcbiAgICAgICRjb250YWluZXIgPSAkKFxyXG4gICAgICAgICAgc2VsZi50cmFuc2xhdGUoXHJcbiAgICAgICAgICAgIHNlbGYsXHJcbiAgICAgICAgICAgIGZpcnN0SXRlbU9wdHMuYmFzZVRwbFxyXG4gICAgICAgICAgICAucmVwbGFjZShcInt7YnV0dG9uc319XCIsIGJ1dHRvblN0cilcclxuICAgICAgICAgICAgLnJlcGxhY2UoXCJ7e2Fycm93c319XCIsIGZpcnN0SXRlbU9wdHMuYnRuVHBsLmFycm93TGVmdCArIGZpcnN0SXRlbU9wdHMuYnRuVHBsLmFycm93UmlnaHQpXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJmYW5jeWJveC1jb250YWluZXItXCIgKyBzZWxmLmlkKVxyXG4gICAgICAgIC5hZGRDbGFzcyhmaXJzdEl0ZW1PcHRzLmJhc2VDbGFzcylcclxuICAgICAgICAuZGF0YShcIkZhbmN5Qm94XCIsIHNlbGYpXHJcbiAgICAgICAgLmFwcGVuZFRvKGZpcnN0SXRlbU9wdHMucGFyZW50RWwpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIG9iamVjdCBob2xkaW5nIHJlZmVyZW5jZXMgdG8galF1ZXJ5IHdyYXBwZWQgbm9kZXNcclxuICAgICAgc2VsZi4kcmVmcyA9IHtcclxuICAgICAgICBjb250YWluZXI6ICRjb250YWluZXJcclxuICAgICAgfTtcclxuXHJcbiAgICAgIFtcImJnXCIsIFwiaW5uZXJcIiwgXCJpbmZvYmFyXCIsIFwidG9vbGJhclwiLCBcInN0YWdlXCIsIFwiY2FwdGlvblwiLCBcIm5hdmlnYXRpb25cIl0uZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHNlbGYuJHJlZnNbaXRlbV0gPSAkY29udGFpbmVyLmZpbmQoXCIuZmFuY3lib3gtXCIgKyBpdGVtKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoXCJvbkluaXRcIik7XHJcblxyXG4gICAgICAvLyBFbmFibGUgZXZlbnRzLCBkZWFjdGl2ZSBwcmV2aW91cyBpbnN0YW5jZXNcclxuICAgICAgc2VsZi5hY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgLy8gQnVpbGQgc2xpZGVzLCBsb2FkIGFuZCByZXZlYWwgY29udGVudFxyXG4gICAgICBzZWxmLmp1bXBUbyhzZWxmLmN1cnJJbmRleCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNpbXBsZSBpMThuIHN1cHBvcnQgLSByZXBsYWNlcyBvYmplY3Qga2V5cyBmb3VuZCBpbiB0ZW1wbGF0ZVxyXG4gICAgLy8gd2l0aCBjb3JyZXNwb25kaW5nIHZhbHVlc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAob2JqLCBzdHIpIHtcclxuICAgICAgdmFyIGFyciA9IG9iai5vcHRzLmkxOG5bb2JqLm9wdHMubGFuZ10gfHwgb2JqLm9wdHMuaTE4bi5lbjtcclxuXHJcbiAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFx7XFx7KFxcdyspXFx9XFx9L2csIGZ1bmN0aW9uIChtYXRjaCwgbikge1xyXG4gICAgICAgIHJldHVybiBhcnJbbl0gPT09IHVuZGVmaW5lZCA/IG1hdGNoIDogYXJyW25dO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gUG9wdWxhdGUgY3VycmVudCBncm91cCB3aXRoIGZyZXNoIGNvbnRlbnRcclxuICAgIC8vIENoZWNrIGlmIGVhY2ggb2JqZWN0IGhhcyB2YWxpZCB0eXBlIGFuZCBjb250ZW50XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFkZENvbnRlbnQ6IGZ1bmN0aW9uIChjb250ZW50KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBpdGVtcyA9ICQubWFrZUFycmF5KGNvbnRlbnQpLFxyXG4gICAgICAgIHRodW1icztcclxuXHJcbiAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24gKGksIGl0ZW0pIHtcclxuICAgICAgICB2YXIgb2JqID0ge30sXHJcbiAgICAgICAgICBvcHRzID0ge30sXHJcbiAgICAgICAgICAkaXRlbSxcclxuICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICBmb3VuZCxcclxuICAgICAgICAgIHNyYyxcclxuICAgICAgICAgIHNyY1BhcnRzO1xyXG5cclxuICAgICAgICAvLyBTdGVwIDEgLSBNYWtlIHN1cmUgd2UgaGF2ZSBhbiBvYmplY3RcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaWYgKCQuaXNQbGFpbk9iamVjdChpdGVtKSkge1xyXG4gICAgICAgICAgLy8gV2UgcHJvYmFibHkgaGF2ZSBtYW51YWwgdXNhZ2UgaGVyZSwgc29tZXRoaW5nIGxpa2VcclxuICAgICAgICAgIC8vICQuZmFuY3lib3gub3BlbiggWyB7IHNyYyA6IFwiaW1hZ2UuanBnXCIsIHR5cGUgOiBcImltYWdlXCIgfSBdIClcclxuXHJcbiAgICAgICAgICBvYmogPSBpdGVtO1xyXG4gICAgICAgICAgb3B0cyA9IGl0ZW0ub3B0cyB8fCBpdGVtO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJC50eXBlKGl0ZW0pID09PSBcIm9iamVjdFwiICYmICQoaXRlbSkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAvLyBIZXJlIHdlIHByb2JhYmx5IGhhdmUgalF1ZXJ5IGNvbGxlY3Rpb24gcmV0dXJuZWQgYnkgc29tZSBzZWxlY3RvclxyXG4gICAgICAgICAgJGl0ZW0gPSAkKGl0ZW0pO1xyXG5cclxuICAgICAgICAgIC8vIFN1cHBvcnQgYXR0cmlidXRlcyBsaWtlIGBkYXRhLW9wdGlvbnM9J3tcInRvdWNoXCIgOiBmYWxzZX0nYCBhbmQgYGRhdGEtdG91Y2g9J2ZhbHNlJ2BcclxuICAgICAgICAgIG9wdHMgPSAkaXRlbS5kYXRhKCkgfHwge307XHJcbiAgICAgICAgICBvcHRzID0gJC5leHRlbmQodHJ1ZSwge30sIG9wdHMsIG9wdHMub3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgLy8gSGVyZSB3ZSBzdG9yZSBjbGlja2VkIGVsZW1lbnRcclxuICAgICAgICAgIG9wdHMuJG9yaWcgPSAkaXRlbTtcclxuXHJcbiAgICAgICAgICBvYmouc3JjID0gc2VsZi5vcHRzLnNyYyB8fCBvcHRzLnNyYyB8fCAkaXRlbS5hdHRyKFwiaHJlZlwiKTtcclxuXHJcbiAgICAgICAgICAvLyBBc3N1bWUgdGhhdCBzaW1wbGUgc3ludGF4IGlzIHVzZWQsIGZvciBleGFtcGxlOlxyXG4gICAgICAgICAgLy8gICBgJC5mYW5jeWJveC5vcGVuKCAkKFwiI3Rlc3RcIiksIHt9ICk7YFxyXG4gICAgICAgICAgaWYgKCFvYmoudHlwZSAmJiAhb2JqLnNyYykge1xyXG4gICAgICAgICAgICBvYmoudHlwZSA9IFwiaW5saW5lXCI7XHJcbiAgICAgICAgICAgIG9iai5zcmMgPSBpdGVtO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBBc3N1bWUgd2UgaGF2ZSBhIHNpbXBsZSBodG1sIGNvZGUsIGZvciBleGFtcGxlOlxyXG4gICAgICAgICAgLy8gICAkLmZhbmN5Ym94Lm9wZW4oICc8ZGl2PjxoMT5IaSE8L2gxPjwvZGl2PicgKTtcclxuICAgICAgICAgIG9iaiA9IHtcclxuICAgICAgICAgICAgdHlwZTogXCJodG1sXCIsXHJcbiAgICAgICAgICAgIHNyYzogaXRlbSArIFwiXCJcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFYWNoIGdhbGxlcnkgb2JqZWN0IGhhcyBmdWxsIGNvbGxlY3Rpb24gb2Ygb3B0aW9uc1xyXG4gICAgICAgIG9iai5vcHRzID0gJC5leHRlbmQodHJ1ZSwge30sIHNlbGYub3B0cywgb3B0cyk7XHJcblxyXG4gICAgICAgIC8vIERvIG5vdCBtZXJnZSBidXR0b25zIGFycmF5XHJcbiAgICAgICAgaWYgKCQuaXNBcnJheShvcHRzLmJ1dHRvbnMpKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy5idXR0b25zID0gb3B0cy5idXR0b25zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCQuZmFuY3lib3guaXNNb2JpbGUgJiYgb2JqLm9wdHMubW9iaWxlKSB7XHJcbiAgICAgICAgICBvYmoub3B0cyA9IG1lcmdlT3B0cyhvYmoub3B0cywgb2JqLm9wdHMubW9iaWxlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFN0ZXAgMiAtIE1ha2Ugc3VyZSB3ZSBoYXZlIGNvbnRlbnQgdHlwZSwgaWYgbm90IC0gdHJ5IHRvIGd1ZXNzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgdHlwZSA9IG9iai50eXBlIHx8IG9iai5vcHRzLnR5cGU7XHJcbiAgICAgICAgc3JjID0gb2JqLnNyYyB8fCBcIlwiO1xyXG5cclxuICAgICAgICBpZiAoIXR5cGUgJiYgc3JjKSB7XHJcbiAgICAgICAgICBpZiAoKGZvdW5kID0gc3JjLm1hdGNoKC9cXC4obXA0fG1vdnxvZ3Z8d2VibSkoKFxcP3wjKS4qKT8kL2kpKSkge1xyXG4gICAgICAgICAgICB0eXBlID0gXCJ2aWRlb1wiO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFvYmoub3B0cy52aWRlby5mb3JtYXQpIHtcclxuICAgICAgICAgICAgICBvYmoub3B0cy52aWRlby5mb3JtYXQgPSBcInZpZGVvL1wiICsgKGZvdW5kWzFdID09PSBcIm9ndlwiID8gXCJvZ2dcIiA6IGZvdW5kWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChzcmMubWF0Y2goLyheZGF0YTppbWFnZVxcL1thLXowLTkrXFwvPV0qLCl8KFxcLihqcChlfGd8ZWcpfGdpZnxwbmd8Ym1wfHdlYnB8c3ZnfGljbykoKFxcP3wjKS4qKT8kKS9pKSkge1xyXG4gICAgICAgICAgICB0eXBlID0gXCJpbWFnZVwiO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChzcmMubWF0Y2goL1xcLihwZGYpKChcXD98IykuKik/JC9pKSkge1xyXG4gICAgICAgICAgICB0eXBlID0gXCJpZnJhbWVcIjtcclxuICAgICAgICAgICAgb2JqID0gJC5leHRlbmQodHJ1ZSwgb2JqLCB7XHJcbiAgICAgICAgICAgICAgY29udGVudFR5cGU6IFwicGRmXCIsXHJcbiAgICAgICAgICAgICAgb3B0czoge1xyXG4gICAgICAgICAgICAgICAgaWZyYW1lOiB7XHJcbiAgICAgICAgICAgICAgICAgIHByZWxvYWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc3JjLmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcclxuICAgICAgICAgICAgdHlwZSA9IFwiaW5saW5lXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgb2JqLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoXCJvYmplY3ROZWVkc1R5cGVcIiwgb2JqKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghb2JqLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICBvYmouY29udGVudFR5cGUgPSAkLmluQXJyYXkob2JqLnR5cGUsIFtcImh0bWxcIiwgXCJpbmxpbmVcIiwgXCJhamF4XCJdKSA+IC0xID8gXCJodG1sXCIgOiBvYmoudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFN0ZXAgMyAtIFNvbWUgYWRqdXN0bWVudHNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIG9iai5pbmRleCA9IHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAob2JqLm9wdHMuc21hbGxCdG4gPT0gXCJhdXRvXCIpIHtcclxuICAgICAgICAgIG9iai5vcHRzLnNtYWxsQnRuID0gJC5pbkFycmF5KG9iai50eXBlLCBbXCJodG1sXCIsIFwiaW5saW5lXCIsIFwiYWpheFwiXSkgPiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmoub3B0cy50b29sYmFyID09PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgb2JqLm9wdHMudG9vbGJhciA9ICFvYmoub3B0cy5zbWFsbEJ0bjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZpbmQgdGh1bWJuYWlsIGltYWdlLCBjaGVjayBpZiBleGlzdHMgYW5kIGlmIGlzIGluIHRoZSB2aWV3cG9ydFxyXG4gICAgICAgIG9iai4kdGh1bWIgPSBvYmoub3B0cy4kdGh1bWIgfHwgbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKG9iai5vcHRzLiR0cmlnZ2VyICYmIG9iai5pbmRleCA9PT0gc2VsZi5vcHRzLmluZGV4KSB7XHJcbiAgICAgICAgICBvYmouJHRodW1iID0gb2JqLm9wdHMuJHRyaWdnZXIuZmluZChcImltZzpmaXJzdFwiKTtcclxuXHJcbiAgICAgICAgICBpZiAob2JqLiR0aHVtYi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb2JqLm9wdHMuJG9yaWcgPSBvYmoub3B0cy4kdHJpZ2dlcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghKG9iai4kdGh1bWIgJiYgb2JqLiR0aHVtYi5sZW5ndGgpICYmIG9iai5vcHRzLiRvcmlnKSB7XHJcbiAgICAgICAgICBvYmouJHRodW1iID0gb2JqLm9wdHMuJG9yaWcuZmluZChcImltZzpmaXJzdFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmouJHRodW1iICYmICFvYmouJHRodW1iLmxlbmd0aCkge1xyXG4gICAgICAgICAgb2JqLiR0aHVtYiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvYmoudGh1bWIgPSBvYmoub3B0cy50aHVtYiB8fCAob2JqLiR0aHVtYiA/IG9iai4kdGh1bWJbMF0uc3JjIDogbnVsbCk7XHJcblxyXG4gICAgICAgIC8vIFwiY2FwdGlvblwiIGlzIGEgXCJzcGVjaWFsXCIgb3B0aW9uLCBpdCBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgY2FwdGlvbiBwZXIgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgaWYgKCQudHlwZShvYmoub3B0cy5jYXB0aW9uKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy5jYXB0aW9uID0gb2JqLm9wdHMuY2FwdGlvbi5hcHBseShpdGVtLCBbc2VsZiwgb2JqXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJC50eXBlKHNlbGYub3B0cy5jYXB0aW9uKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy5jYXB0aW9uID0gc2VsZi5vcHRzLmNhcHRpb24uYXBwbHkoaXRlbSwgW3NlbGYsIG9ial0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgY2FwdGlvbiBhcyBhIHN0cmluZyBvciBqUXVlcnkgb2JqZWN0XHJcbiAgICAgICAgaWYgKCEob2JqLm9wdHMuY2FwdGlvbiBpbnN0YW5jZW9mICQpKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy5jYXB0aW9uID0gb2JqLm9wdHMuY2FwdGlvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IG9iai5vcHRzLmNhcHRpb24gKyBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdXJsIGNvbnRhaW5zIFwiZmlsdGVyXCIgdXNlZCB0byBmaWx0ZXIgdGhlIGNvbnRlbnRcclxuICAgICAgICAvLyBFeGFtcGxlOiBcImFqYXguaHRtbCAjc29tZXRoaW5nXCJcclxuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiYWpheFwiKSB7XHJcbiAgICAgICAgICBzcmNQYXJ0cyA9IHNyYy5zcGxpdCgvXFxzKy8sIDIpO1xyXG5cclxuICAgICAgICAgIGlmIChzcmNQYXJ0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIG9iai5zcmMgPSBzcmNQYXJ0cy5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgb2JqLm9wdHMuZmlsdGVyID0gc3JjUGFydHMuc2hpZnQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhpZGUgYWxsIGJ1dHRvbnMgYW5kIGRpc2FibGUgaW50ZXJhY3Rpdml0eSBmb3IgbW9kYWwgaXRlbXNcclxuICAgICAgICBpZiAob2JqLm9wdHMubW9kYWwpIHtcclxuICAgICAgICAgIG9iai5vcHRzID0gJC5leHRlbmQodHJ1ZSwgb2JqLm9wdHMsIHtcclxuICAgICAgICAgICAgdHJhcEZvY3VzOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYnV0dG9uc1xyXG4gICAgICAgICAgICBpbmZvYmFyOiAwLFxyXG4gICAgICAgICAgICB0b29sYmFyOiAwLFxyXG5cclxuICAgICAgICAgICAgc21hbGxCdG46IDAsXHJcblxyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGtleWJvYXJkIG5hdmlnYXRpb25cclxuICAgICAgICAgICAga2V5Ym9hcmQ6IDAsXHJcblxyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIHNvbWUgbW9kdWxlc1xyXG4gICAgICAgICAgICBzbGlkZVNob3c6IDAsXHJcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46IDAsXHJcbiAgICAgICAgICAgIHRodW1iczogMCxcclxuICAgICAgICAgICAgdG91Y2g6IDAsXHJcblxyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgICAgIGNsaWNrQ29udGVudDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNsaWNrU2xpZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjbGlja091dHNpZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYmxjbGlja0NvbnRlbnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYmxjbGlja1NsaWRlOiBmYWxzZSxcclxuICAgICAgICAgICAgZGJsY2xpY2tPdXRzaWRlOiBmYWxzZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTdGVwIDQgLSBBZGQgcHJvY2Vzc2VkIG9iamVjdCB0byBncm91cFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNlbGYuZ3JvdXAucHVzaChvYmopO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBjb250cm9scyBpZiBnYWxsZXJ5IGlzIGFscmVhZHkgb3BlbmVkXHJcbiAgICAgIGlmIChPYmplY3Qua2V5cyhzZWxmLnNsaWRlcykubGVuZ3RoKSB7XHJcbiAgICAgICAgc2VsZi51cGRhdGVDb250cm9scygpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGh1bWJuYWlscywgaWYgbmVlZGVkXHJcbiAgICAgICAgdGh1bWJzID0gc2VsZi5UaHVtYnM7XHJcblxyXG4gICAgICAgIGlmICh0aHVtYnMgJiYgdGh1bWJzLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICB0aHVtYnMuY3JlYXRlKCk7XHJcblxyXG4gICAgICAgICAgdGh1bWJzLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9ucyBmb3I6XHJcbiAgICAvLyAgIC0gbmF2aWdhdGlvbiBidXR0b25zXHJcbiAgICAvLyAgIC0gYnJvd3NlciBzY3JvbGxpbmcsIHJlc2l6aW5nO1xyXG4gICAgLy8gICAtIGZvY3VzaW5nXHJcbiAgICAvLyAgIC0ga2V5Ym9hcmRcclxuICAgIC8vICAgLSBkZXRlY3RpbmcgaW5hY3Rpdml0eVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhZGRFdmVudHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgc2VsZi5yZW1vdmVFdmVudHMoKTtcclxuXHJcbiAgICAgIC8vIE1ha2UgbmF2aWdhdGlvbiBlbGVtZW50cyBjbGlja2FibGVcclxuICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgc2VsZi4kcmVmcy5jb250YWluZXJcclxuICAgICAgICAub24oXCJjbGljay5mYi1jbG9zZVwiLCBcIltkYXRhLWZhbmN5Ym94LWNsb3NlXVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmNsb3NlKGUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwidG91Y2hzdGFydC5mYi1wcmV2IGNsaWNrLmZiLXByZXZcIiwgXCJbZGF0YS1mYW5jeWJveC1wcmV2XVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICBzZWxmLnByZXZpb3VzKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmZiLW5leHQgY2xpY2suZmItbmV4dFwiLCBcIltkYXRhLWZhbmN5Ym94LW5leHRdXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIHNlbGYubmV4dCgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKFwiY2xpY2suZmJcIiwgXCJbZGF0YS1mYW5jeWJveC16b29tXVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgLy8gQ2xpY2sgaGFuZGxlciBmb3Igem9vbSBidXR0b25cclxuICAgICAgICAgIHNlbGZbc2VsZi5pc1NjYWxlZERvd24oKSA/IFwic2NhbGVUb0FjdHVhbFwiIDogXCJzY2FsZVRvRml0XCJdKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBIYW5kbGUgcGFnZSBzY3JvbGxpbmcgYW5kIGJyb3dzZXIgcmVzaXppbmdcclxuICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAkVy5vbihcIm9yaWVudGF0aW9uY2hhbmdlLmZiIHJlc2l6ZS5mYlwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlICYmIGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQudHlwZSA9PT0gXCJyZXNpemVcIikge1xyXG4gICAgICAgICAgaWYgKHNlbGYucmVxdWVzdElkKSB7XHJcbiAgICAgICAgICAgIGNhbmNlbEFGcmFtZShzZWxmLnJlcXVlc3RJZCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2VsZi5yZXF1ZXN0SWQgPSByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2VsZi51cGRhdGUoZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHNlbGYuY3VycmVudCAmJiBzZWxmLmN1cnJlbnQudHlwZSA9PT0gXCJpZnJhbWVcIikge1xyXG4gICAgICAgICAgICBzZWxmLiRyZWZzLnN0YWdlLmhpZGUoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgc2VsZi4kcmVmcy5zdGFnZS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICAgIHNlbGYudXBkYXRlKGUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LmlzTW9iaWxlID8gNjAwIDogMjUwXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkRC5vbihcImtleWRvd24uZmJcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmZhbmN5Ym94ID8gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpIDogbnVsbCxcclxuICAgICAgICAgIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50LFxyXG4gICAgICAgICAga2V5Y29kZSA9IGUua2V5Q29kZSB8fCBlLndoaWNoO1xyXG5cclxuICAgICAgICAvLyBUcmFwIGtleWJvYXJkIGZvY3VzIGluc2lkZSBvZiB0aGUgbW9kYWxcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaWYgKGtleWNvZGUgPT0gOSkge1xyXG4gICAgICAgICAgaWYgKGN1cnJlbnQub3B0cy50cmFwRm9jdXMpIHtcclxuICAgICAgICAgICAgc2VsZi5mb2N1cyhlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFbmFibGUga2V5Ym9hcmQgbmF2aWdhdGlvblxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGlmICghY3VycmVudC5vcHRzLmtleWJvYXJkIHx8IGUuY3RybEtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5IHx8ICQoZS50YXJnZXQpLmlzKFwiaW5wdXQsdGV4dGFyZWEsdmlkZW8sYXVkaW8sc2VsZWN0XCIpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBCYWNrc3BhY2UgYW5kIEVzYyBrZXlzXHJcbiAgICAgICAgaWYgKGtleWNvZGUgPT09IDggfHwga2V5Y29kZSA9PT0gMjcpIHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmNsb3NlKGUpO1xyXG5cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExlZnQgYXJyb3cgYW5kIFVwIGFycm93XHJcbiAgICAgICAgaWYgKGtleWNvZGUgPT09IDM3IHx8IGtleWNvZGUgPT09IDM4KSB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgc2VsZi5wcmV2aW91cygpO1xyXG5cclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJpZ2ggYXJyb3cgYW5kIERvd24gYXJyb3dcclxuICAgICAgICBpZiAoa2V5Y29kZSA9PT0gMzkgfHwga2V5Y29kZSA9PT0gNDApIHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICBzZWxmLm5leHQoKTtcclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLnRyaWdnZXIoXCJhZnRlcktleWRvd25cIiwgZSwga2V5Y29kZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gSGlkZSBjb250cm9scyBhZnRlciBzb21lIGluYWN0aXZpdHkgcGVyaW9kXHJcbiAgICAgIGlmIChzZWxmLmdyb3VwW3NlbGYuY3VyckluZGV4XS5vcHRzLmlkbGVUaW1lKSB7XHJcbiAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAkRC5vbihcclxuICAgICAgICAgIFwibW91c2Vtb3ZlLmZiLWlkbGUgbW91c2VsZWF2ZS5mYi1pZGxlIG1vdXNlZG93bi5mYi1pZGxlIHRvdWNoc3RhcnQuZmItaWRsZSB0b3VjaG1vdmUuZmItaWRsZSBzY3JvbGwuZmItaWRsZSBrZXlkb3duLmZiLWlkbGVcIixcclxuICAgICAgICAgIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHNlbGYuaWRsZVNlY29uZHNDb3VudGVyID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLmlzSWRsZSkge1xyXG4gICAgICAgICAgICAgIHNlbGYuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYuaXNJZGxlID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc2VsZi5pZGxlSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIrKztcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPj0gc2VsZi5ncm91cFtzZWxmLmN1cnJJbmRleF0ub3B0cy5pZGxlVGltZSAmJiAhc2VsZi5pc0RyYWdnaW5nKSB7XHJcbiAgICAgICAgICAgIHNlbGYuaXNJZGxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5oaWRlQ29udHJvbHMoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBSZW1vdmUgZXZlbnRzIGFkZGVkIGJ5IHRoZSBjb3JlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgcmVtb3ZlRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICRXLm9mZihcIm9yaWVudGF0aW9uY2hhbmdlLmZiIHJlc2l6ZS5mYlwiKTtcclxuICAgICAgJEQub2ZmKFwia2V5ZG93bi5mYiAuZmItaWRsZVwiKTtcclxuXHJcbiAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLm9mZihcIi5mYi1jbG9zZSAuZmItcHJldiAuZmItbmV4dFwiKTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlkbGVJbnRlcnZhbCkge1xyXG4gICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHNlbGYuaWRsZUludGVydmFsKTtcclxuXHJcbiAgICAgICAgc2VsZi5pZGxlSW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoYW5nZSB0byBwcmV2aW91cyBnYWxsZXJ5IGl0ZW1cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBwcmV2aW91czogZnVuY3Rpb24gKGR1cmF0aW9uKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmp1bXBUbyh0aGlzLmN1cnJQb3MgLSAxLCBkdXJhdGlvbik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoYW5nZSB0byBuZXh0IGdhbGxlcnkgaXRlbVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgbmV4dDogZnVuY3Rpb24gKGR1cmF0aW9uKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmp1bXBUbyh0aGlzLmN1cnJQb3MgKyAxLCBkdXJhdGlvbik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFN3aXRjaCB0byBzZWxlY3RlZCBnYWxsZXJ5IGl0ZW1cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBqdW1wVG86IGZ1bmN0aW9uIChwb3MsIGR1cmF0aW9uKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBncm91cExlbiA9IHNlbGYuZ3JvdXAubGVuZ3RoLFxyXG4gICAgICAgIGZpcnN0UnVuLFxyXG4gICAgICAgIGlzTW92ZWQsXHJcbiAgICAgICAgbG9vcCxcclxuICAgICAgICBjdXJyZW50LFxyXG4gICAgICAgIHByZXZpb3VzLFxyXG4gICAgICAgIHNsaWRlUG9zLFxyXG4gICAgICAgIHN0YWdlUG9zLFxyXG4gICAgICAgIHByb3AsXHJcbiAgICAgICAgZGlmZjtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzRHJhZ2dpbmcgfHwgc2VsZi5pc0Nsb3NpbmcgfHwgKHNlbGYuaXNBbmltYXRpbmcgJiYgc2VsZi5maXJzdFJ1bikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFNob3VsZCBsb29wP1xyXG4gICAgICBwb3MgPSBwYXJzZUludChwb3MsIDEwKTtcclxuICAgICAgbG9vcCA9IHNlbGYuY3VycmVudCA/IHNlbGYuY3VycmVudC5vcHRzLmxvb3AgOiBzZWxmLm9wdHMubG9vcDtcclxuXHJcbiAgICAgIGlmICghbG9vcCAmJiAocG9zIDwgMCB8fCBwb3MgPj0gZ3JvdXBMZW4pKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiBvcGVuaW5nIGZvciB0aGUgZmlyc3QgdGltZTsgdGhpcyBoZWxwcyB0byBzcGVlZCB0aGluZ3MgdXBcclxuICAgICAgZmlyc3RSdW4gPSBzZWxmLmZpcnN0UnVuID0gIU9iamVjdC5rZXlzKHNlbGYuc2xpZGVzKS5sZW5ndGg7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgc2xpZGVzXHJcbiAgICAgIHByZXZpb3VzID0gc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgc2VsZi5wcmV2SW5kZXggPSBzZWxmLmN1cnJJbmRleDtcclxuICAgICAgc2VsZi5wcmV2UG9zID0gc2VsZi5jdXJyUG9zO1xyXG5cclxuICAgICAgY3VycmVudCA9IHNlbGYuY3JlYXRlU2xpZGUocG9zKTtcclxuXHJcbiAgICAgIGlmIChncm91cExlbiA+IDEpIHtcclxuICAgICAgICBpZiAobG9vcCB8fCBjdXJyZW50LmluZGV4IDwgZ3JvdXBMZW4gLSAxKSB7XHJcbiAgICAgICAgICBzZWxmLmNyZWF0ZVNsaWRlKHBvcyArIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxvb3AgfHwgY3VycmVudC5pbmRleCA+IDApIHtcclxuICAgICAgICAgIHNlbGYuY3JlYXRlU2xpZGUocG9zIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLmN1cnJlbnQgPSBjdXJyZW50O1xyXG4gICAgICBzZWxmLmN1cnJJbmRleCA9IGN1cnJlbnQuaW5kZXg7XHJcbiAgICAgIHNlbGYuY3VyclBvcyA9IGN1cnJlbnQucG9zO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKFwiYmVmb3JlU2hvd1wiLCBmaXJzdFJ1bik7XHJcblxyXG4gICAgICBzZWxmLnVwZGF0ZUNvbnRyb2xzKCk7XHJcblxyXG4gICAgICAvLyBWYWxpZGF0ZSBkdXJhdGlvbiBsZW5ndGhcclxuICAgICAgY3VycmVudC5mb3JjZWREdXJhdGlvbiA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgIGlmICgkLmlzTnVtZXJpYyhkdXJhdGlvbikpIHtcclxuICAgICAgICBjdXJyZW50LmZvcmNlZER1cmF0aW9uID0gZHVyYXRpb247XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZHVyYXRpb24gPSBjdXJyZW50Lm9wdHNbZmlyc3RSdW4gPyBcImFuaW1hdGlvbkR1cmF0aW9uXCIgOiBcInRyYW5zaXRpb25EdXJhdGlvblwiXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZHVyYXRpb24gPSBwYXJzZUludChkdXJhdGlvbiwgMTApO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdXNlciBoYXMgc3dpcGVkIHRoZSBzbGlkZXMgb3IgaWYgc3RpbGwgYW5pbWF0aW5nXHJcbiAgICAgIGlzTW92ZWQgPSBzZWxmLmlzTW92ZWQoY3VycmVudCk7XHJcblxyXG4gICAgICAvLyBNYWtlIHN1cmUgY3VycmVudCBzbGlkZSBpcyB2aXNpYmxlXHJcbiAgICAgIGN1cnJlbnQuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIik7XHJcblxyXG4gICAgICAvLyBGcmVzaCBzdGFydCAtIHJldmVhbCBjb250YWluZXIsIGN1cnJlbnQgc2xpZGUgYW5kIHN0YXJ0IGxvYWRpbmcgY29udGVudFxyXG4gICAgICBpZiAoZmlyc3RSdW4pIHtcclxuICAgICAgICBpZiAoY3VycmVudC5vcHRzLmFuaW1hdGlvbkVmZmVjdCAmJiBkdXJhdGlvbikge1xyXG4gICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLCBkdXJhdGlvbiArIFwibXNcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLW9wZW5cIikudHJpZ2dlcihcImZvY3VzXCIpO1xyXG5cclxuICAgICAgICAvLyBBdHRlbXB0IHRvIGxvYWQgY29udGVudCBpbnRvIHNsaWRlXHJcbiAgICAgICAgLy8gVGhpcyB3aWxsIGxhdGVyIGNhbGwgYGFmdGVyTG9hZGAgLT4gYHJldmVhbENvbnRlbnRgXHJcbiAgICAgICAgc2VsZi5sb2FkU2xpZGUoY3VycmVudCk7XHJcblxyXG4gICAgICAgIHNlbGYucHJlbG9hZChcImltYWdlXCIpO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEdldCBhY3R1YWwgc2xpZGUvc3RhZ2UgcG9zaXRpb25zIChiZWZvcmUgY2xlYW5pbmcgdXApXHJcbiAgICAgIHNsaWRlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUocHJldmlvdXMuJHNsaWRlKTtcclxuICAgICAgc3RhZ2VQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShzZWxmLiRyZWZzLnN0YWdlKTtcclxuXHJcbiAgICAgIC8vIENsZWFuIHVwIGFsbCBzbGlkZXNcclxuICAgICAgJC5lYWNoKHNlbGYuc2xpZGVzLCBmdW5jdGlvbiAoaW5kZXgsIHNsaWRlKSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRzbGlkZSwgdHJ1ZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHByZXZpb3VzLnBvcyAhPT0gY3VycmVudC5wb3MpIHtcclxuICAgICAgICBwcmV2aW91cy5pc0NvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHByZXZpb3VzLiRzbGlkZS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZSBmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKTtcclxuXHJcbiAgICAgIC8vIElmIHNsaWRlcyBhcmUgb3V0IG9mIHBsYWNlLCB0aGVuIGFuaW1hdGUgdGhlbSB0byBjb3JyZWN0IHBvc2l0aW9uXHJcbiAgICAgIGlmIChpc01vdmVkKSB7XHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGhvcml6b250YWwgc3dpcGUgZGlzdGFuY2VcclxuICAgICAgICBkaWZmID0gc2xpZGVQb3MubGVmdCAtIChwcmV2aW91cy5wb3MgKiBzbGlkZVBvcy53aWR0aCArIHByZXZpb3VzLnBvcyAqIHByZXZpb3VzLm9wdHMuZ3V0dGVyKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHNlbGYuc2xpZGVzLCBmdW5jdGlvbiAoaW5kZXgsIHNsaWRlKSB7XHJcbiAgICAgICAgICBzbGlkZS4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKS5yZW1vdmVDbGFzcyhmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGNsYXNzTmFtZS5tYXRjaCgvKF58XFxzKWZhbmN5Ym94LWZ4LVxcUysvZykgfHwgW10pLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgZWFjaCBzbGlkZSBpcyBpbiBlcXVhbCBkaXN0YW5jZVxyXG4gICAgICAgICAgLy8gVGhpcyBpcyBtb3N0bHkgbmVlZGVkIGZvciBmcmVzaGx5IGFkZGVkIHNsaWRlcywgYmVjYXVzZSB0aGV5IGFyZSBub3QgeWV0IHBvc2l0aW9uZWRcclxuICAgICAgICAgIHZhciBsZWZ0UG9zID0gc2xpZGUucG9zICogc2xpZGVQb3Mud2lkdGggKyBzbGlkZS5wb3MgKiBzbGlkZS5vcHRzLmd1dHRlcjtcclxuXHJcbiAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShzbGlkZS4kc2xpZGUsIHtcclxuICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0UG9zIC0gc3RhZ2VQb3MubGVmdCArIGRpZmZcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmIChzbGlkZS5wb3MgIT09IGN1cnJlbnQucG9zKSB7XHJcbiAgICAgICAgICAgIHNsaWRlLiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1cIiArIChzbGlkZS5wb3MgPiBjdXJyZW50LnBvcyA/IFwibmV4dFwiIDogXCJwcmV2aW91c1wiKSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUmVkcmF3IHRvIG1ha2Ugc3VyZSB0aGF0IHRyYW5zaXRpb24gd2lsbCBzdGFydFxyXG4gICAgICAgICAgZm9yY2VSZWRyYXcoc2xpZGUuJHNsaWRlKTtcclxuXHJcbiAgICAgICAgICAvLyBBbmltYXRlIHRoZSBzbGlkZVxyXG4gICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICAgICBzbGlkZS4kc2xpZGUsIHtcclxuICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgbGVmdDogKHNsaWRlLnBvcyAtIGN1cnJlbnQucG9zKSAqIHNsaWRlUG9zLndpZHRoICsgKHNsaWRlLnBvcyAtIGN1cnJlbnQucG9zKSAqIHNsaWRlLm9wdHMuZ3V0dGVyXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICBvcGFjaXR5OiBcIlwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gJiYgY3VycmVudC5vcHRzLnRyYW5zaXRpb25FZmZlY3QpIHtcclxuICAgICAgICAvLyBTZXQgdHJhbnNpdGlvbiBlZmZlY3QgZm9yIHByZXZpb3VzbHkgYWN0aXZlIHNsaWRlXHJcbiAgICAgICAgcHJvcCA9IFwiZmFuY3lib3gtYW5pbWF0ZWQgZmFuY3lib3gtZngtXCIgKyBjdXJyZW50Lm9wdHMudHJhbnNpdGlvbkVmZmVjdDtcclxuXHJcbiAgICAgICAgcHJldmlvdXMuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiICsgKHByZXZpb3VzLnBvcyA+IGN1cnJlbnQucG9zID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCIpKTtcclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICAgcHJldmlvdXMuJHNsaWRlLFxyXG4gICAgICAgICAgcHJvcCxcclxuICAgICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBwcmV2aW91cy4kc2xpZGUucmVtb3ZlQ2xhc3MocHJvcCkucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXNcIik7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZmFsc2VcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY3VycmVudC5pc0xvYWRlZCkge1xyXG4gICAgICAgIHNlbGYucmV2ZWFsQ29udGVudChjdXJyZW50KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLmxvYWRTbGlkZShjdXJyZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5wcmVsb2FkKFwiaW1hZ2VcIik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENyZWF0ZSBuZXcgXCJzbGlkZVwiIGVsZW1lbnRcclxuICAgIC8vIFRoZXNlIGFyZSBnYWxsZXJ5IGl0ZW1zICB0aGF0IGFyZSBhY3R1YWxseSBhZGRlZCB0byBET01cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBjcmVhdGVTbGlkZTogZnVuY3Rpb24gKHBvcykge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgJHNsaWRlLFxyXG4gICAgICAgIGluZGV4O1xyXG5cclxuICAgICAgaW5kZXggPSBwb3MgJSBzZWxmLmdyb3VwLmxlbmd0aDtcclxuICAgICAgaW5kZXggPSBpbmRleCA8IDAgPyBzZWxmLmdyb3VwLmxlbmd0aCArIGluZGV4IDogaW5kZXg7XHJcblxyXG4gICAgICBpZiAoIXNlbGYuc2xpZGVzW3Bvc10gJiYgc2VsZi5ncm91cFtpbmRleF0pIHtcclxuICAgICAgICAkc2xpZGUgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc2xpZGVcIj48L2Rpdj4nKS5hcHBlbmRUbyhzZWxmLiRyZWZzLnN0YWdlKTtcclxuXHJcbiAgICAgICAgc2VsZi5zbGlkZXNbcG9zXSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBzZWxmLmdyb3VwW2luZGV4XSwge1xyXG4gICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAkc2xpZGU6ICRzbGlkZSxcclxuICAgICAgICAgIGlzTG9hZGVkOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZVNsaWRlKHNlbGYuc2xpZGVzW3Bvc10pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc2VsZi5zbGlkZXNbcG9zXTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gU2NhbGUgaW1hZ2UgdG8gdGhlIGFjdHVhbCBzaXplIG9mIHRoZSBpbWFnZTtcclxuICAgIC8vIHggYW5kIHkgdmFsdWVzIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgc2xpZGVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzY2FsZVRvQWN0dWFsOiBmdW5jdGlvbiAoeCwgeSwgZHVyYXRpb24pIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgJGNvbnRlbnQgPSBjdXJyZW50LiRjb250ZW50LFxyXG4gICAgICAgIGNhbnZhc1dpZHRoID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoY3VycmVudC4kc2xpZGUpLndpZHRoLFxyXG4gICAgICAgIGNhbnZhc0hlaWdodCA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKGN1cnJlbnQuJHNsaWRlKS5oZWlnaHQsXHJcbiAgICAgICAgbmV3SW1nV2lkdGggPSBjdXJyZW50LndpZHRoLFxyXG4gICAgICAgIG5ld0ltZ0hlaWdodCA9IGN1cnJlbnQuaGVpZ2h0LFxyXG4gICAgICAgIGltZ1BvcyxcclxuICAgICAgICBwb3NYLFxyXG4gICAgICAgIHBvc1ksXHJcbiAgICAgICAgc2NhbGVYLFxyXG4gICAgICAgIHNjYWxlWTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzQW5pbWF0aW5nIHx8IHNlbGYuaXNNb3ZlZCgpIHx8ICEkY29udGVudCB8fCAhKGN1cnJlbnQudHlwZSA9PSBcImltYWdlXCIgJiYgY3VycmVudC5pc0xvYWRlZCAmJiAhY3VycmVudC5oYXNFcnJvcikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5zdG9wKCRjb250ZW50KTtcclxuXHJcbiAgICAgIHggPSB4ID09PSB1bmRlZmluZWQgPyBjYW52YXNXaWR0aCAqIDAuNSA6IHg7XHJcbiAgICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyBjYW52YXNIZWlnaHQgKiAwLjUgOiB5O1xyXG5cclxuICAgICAgaW1nUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgaW1nUG9zLnRvcCAtPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShjdXJyZW50LiRzbGlkZSkudG9wO1xyXG4gICAgICBpbWdQb3MubGVmdCAtPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShjdXJyZW50LiRzbGlkZSkubGVmdDtcclxuXHJcbiAgICAgIHNjYWxlWCA9IG5ld0ltZ1dpZHRoIC8gaW1nUG9zLndpZHRoO1xyXG4gICAgICBzY2FsZVkgPSBuZXdJbWdIZWlnaHQgLyBpbWdQb3MuaGVpZ2h0O1xyXG5cclxuICAgICAgLy8gR2V0IGNlbnRlciBwb3NpdGlvbiBmb3Igb3JpZ2luYWwgaW1hZ2VcclxuICAgICAgcG9zWCA9IGNhbnZhc1dpZHRoICogMC41IC0gbmV3SW1nV2lkdGggKiAwLjU7XHJcbiAgICAgIHBvc1kgPSBjYW52YXNIZWlnaHQgKiAwLjUgLSBuZXdJbWdIZWlnaHQgKiAwLjU7XHJcblxyXG4gICAgICAvLyBNYWtlIHN1cmUgaW1hZ2UgZG9lcyBub3QgbW92ZSBhd2F5IGZyb20gZWRnZXNcclxuICAgICAgaWYgKG5ld0ltZ1dpZHRoID4gY2FudmFzV2lkdGgpIHtcclxuICAgICAgICBwb3NYID0gaW1nUG9zLmxlZnQgKiBzY2FsZVggLSAoeCAqIHNjYWxlWCAtIHgpO1xyXG5cclxuICAgICAgICBpZiAocG9zWCA+IDApIHtcclxuICAgICAgICAgIHBvc1ggPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBvc1ggPCBjYW52YXNXaWR0aCAtIG5ld0ltZ1dpZHRoKSB7XHJcbiAgICAgICAgICBwb3NYID0gY2FudmFzV2lkdGggLSBuZXdJbWdXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChuZXdJbWdIZWlnaHQgPiBjYW52YXNIZWlnaHQpIHtcclxuICAgICAgICBwb3NZID0gaW1nUG9zLnRvcCAqIHNjYWxlWSAtICh5ICogc2NhbGVZIC0geSk7XHJcblxyXG4gICAgICAgIGlmIChwb3NZID4gMCkge1xyXG4gICAgICAgICAgcG9zWSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocG9zWSA8IGNhbnZhc0hlaWdodCAtIG5ld0ltZ0hlaWdodCkge1xyXG4gICAgICAgICAgcG9zWSA9IGNhbnZhc0hlaWdodCAtIG5ld0ltZ0hlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKG5ld0ltZ1dpZHRoLCBuZXdJbWdIZWlnaHQpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICRjb250ZW50LCB7XHJcbiAgICAgICAgICB0b3A6IHBvc1ksXHJcbiAgICAgICAgICBsZWZ0OiBwb3NYLFxyXG4gICAgICAgICAgc2NhbGVYOiBzY2FsZVgsXHJcbiAgICAgICAgICBzY2FsZVk6IHNjYWxlWVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZHVyYXRpb24gfHwgMzY2LFxyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICAvLyBTdG9wIHNsaWRlc2hvd1xyXG4gICAgICBpZiAoc2VsZi5TbGlkZVNob3cgJiYgc2VsZi5TbGlkZVNob3cuaXNBY3RpdmUpIHtcclxuICAgICAgICBzZWxmLlNsaWRlU2hvdy5zdG9wKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gU2NhbGUgaW1hZ2UgdG8gZml0IGluc2lkZSBwYXJlbnQgZWxlbWVudFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNjYWxlVG9GaXQ6IGZ1bmN0aW9uIChkdXJhdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQsXHJcbiAgICAgICAgZW5kO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNBbmltYXRpbmcgfHwgc2VsZi5pc01vdmVkKCkgfHwgISRjb250ZW50IHx8ICEoY3VycmVudC50eXBlID09IFwiaW1hZ2VcIiAmJiBjdXJyZW50LmlzTG9hZGVkICYmICFjdXJyZW50Lmhhc0Vycm9yKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LnN0b3AoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgZW5kID0gc2VsZi5nZXRGaXRQb3MoY3VycmVudCk7XHJcblxyXG4gICAgICBzZWxmLnVwZGF0ZUN1cnNvcihlbmQud2lkdGgsIGVuZC5oZWlnaHQpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICRjb250ZW50LCB7XHJcbiAgICAgICAgICB0b3A6IGVuZC50b3AsXHJcbiAgICAgICAgICBsZWZ0OiBlbmQubGVmdCxcclxuICAgICAgICAgIHNjYWxlWDogZW5kLndpZHRoIC8gJGNvbnRlbnQud2lkdGgoKSxcclxuICAgICAgICAgIHNjYWxlWTogZW5kLmhlaWdodCAvICRjb250ZW50LmhlaWdodCgpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkdXJhdGlvbiB8fCAzNjYsXHJcbiAgICAgICAgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIGltYWdlIHNpemUgdG8gZml0IGluc2lkZSB2aWV3cG9ydFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGdldEZpdFBvczogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAkY29udGVudCA9IHNsaWRlLiRjb250ZW50LFxyXG4gICAgICAgICRzbGlkZSA9IHNsaWRlLiRzbGlkZSxcclxuICAgICAgICB3aWR0aCA9IHNsaWRlLndpZHRoIHx8IHNsaWRlLm9wdHMud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0ID0gc2xpZGUuaGVpZ2h0IHx8IHNsaWRlLm9wdHMuaGVpZ2h0LFxyXG4gICAgICAgIG1heFdpZHRoLFxyXG4gICAgICAgIG1heEhlaWdodCxcclxuICAgICAgICBtaW5SYXRpbyxcclxuICAgICAgICBhc3BlY3RSYXRpbyxcclxuICAgICAgICByZXogPSB7fTtcclxuXHJcbiAgICAgIGlmICghc2xpZGUuaXNMb2FkZWQgfHwgISRjb250ZW50IHx8ICEkY29udGVudC5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1heFdpZHRoID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoc2VsZi4kcmVmcy5zdGFnZSkud2lkdGg7XHJcbiAgICAgIG1heEhlaWdodCA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKHNlbGYuJHJlZnMuc3RhZ2UpLmhlaWdodDtcclxuXHJcbiAgICAgIG1heFdpZHRoIC09XHJcbiAgICAgICAgcGFyc2VGbG9hdCgkc2xpZGUuY3NzKFwicGFkZGluZ0xlZnRcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRzbGlkZS5jc3MoXCJwYWRkaW5nUmlnaHRcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRjb250ZW50LmNzcyhcIm1hcmdpbkxlZnRcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRjb250ZW50LmNzcyhcIm1hcmdpblJpZ2h0XCIpKTtcclxuXHJcbiAgICAgIG1heEhlaWdodCAtPVxyXG4gICAgICAgIHBhcnNlRmxvYXQoJHNsaWRlLmNzcyhcInBhZGRpbmdUb3BcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRzbGlkZS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpKSArXHJcbiAgICAgICAgcGFyc2VGbG9hdCgkY29udGVudC5jc3MoXCJtYXJnaW5Ub3BcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRjb250ZW50LmNzcyhcIm1hcmdpbkJvdHRvbVwiKSk7XHJcblxyXG4gICAgICBpZiAoIXdpZHRoIHx8ICFoZWlnaHQpIHtcclxuICAgICAgICB3aWR0aCA9IG1heFdpZHRoO1xyXG4gICAgICAgIGhlaWdodCA9IG1heEhlaWdodDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWluUmF0aW8gPSBNYXRoLm1pbigxLCBtYXhXaWR0aCAvIHdpZHRoLCBtYXhIZWlnaHQgLyBoZWlnaHQpO1xyXG5cclxuICAgICAgd2lkdGggPSBtaW5SYXRpbyAqIHdpZHRoO1xyXG4gICAgICBoZWlnaHQgPSBtaW5SYXRpbyAqIGhlaWdodDtcclxuXHJcbiAgICAgIC8vIEFkanVzdCB3aWR0aC9oZWlnaHQgdG8gcHJlY2lzZWx5IGZpdCBpbnRvIGNvbnRhaW5lclxyXG4gICAgICBpZiAod2lkdGggPiBtYXhXaWR0aCAtIDAuNSkge1xyXG4gICAgICAgIHdpZHRoID0gbWF4V2lkdGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChoZWlnaHQgPiBtYXhIZWlnaHQgLSAwLjUpIHtcclxuICAgICAgICBoZWlnaHQgPSBtYXhIZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzbGlkZS50eXBlID09PSBcImltYWdlXCIpIHtcclxuICAgICAgICByZXoudG9wID0gTWF0aC5mbG9vcigobWF4SGVpZ2h0IC0gaGVpZ2h0KSAqIDAuNSkgKyBwYXJzZUZsb2F0KCRzbGlkZS5jc3MoXCJwYWRkaW5nVG9wXCIpKTtcclxuICAgICAgICByZXoubGVmdCA9IE1hdGguZmxvb3IoKG1heFdpZHRoIC0gd2lkdGgpICogMC41KSArIHBhcnNlRmxvYXQoJHNsaWRlLmNzcyhcInBhZGRpbmdMZWZ0XCIpKTtcclxuICAgICAgfSBlbHNlIGlmIChzbGlkZS5jb250ZW50VHlwZSA9PT0gXCJ2aWRlb1wiKSB7XHJcbiAgICAgICAgLy8gRm9yY2UgYXNwZWN0IHJhdGlvIGZvciB0aGUgdmlkZW9cclxuICAgICAgICAvLyBcIkkgc2F5IHRoZSB3aG9sZSB3b3JsZCBtdXN0IGxlYXJuIG9mIG91ciBwZWFjZWZ1bCB3YXlz4oCmIGJ5IGZvcmNlIVwiXHJcbiAgICAgICAgYXNwZWN0UmF0aW8gPSBzbGlkZS5vcHRzLndpZHRoICYmIHNsaWRlLm9wdHMuaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBzbGlkZS5vcHRzLnJhdGlvIHx8IDE2IC8gOTtcclxuXHJcbiAgICAgICAgaWYgKGhlaWdodCA+IHdpZHRoIC8gYXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgIGhlaWdodCA9IHdpZHRoIC8gYXNwZWN0UmF0aW87XHJcbiAgICAgICAgfSBlbHNlIGlmICh3aWR0aCA+IGhlaWdodCAqIGFzcGVjdFJhdGlvKSB7XHJcbiAgICAgICAgICB3aWR0aCA9IGhlaWdodCAqIGFzcGVjdFJhdGlvO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV6LndpZHRoID0gd2lkdGg7XHJcbiAgICAgIHJlei5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgICByZXR1cm4gcmV6O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVcGRhdGUgY29udGVudCBzaXplIGFuZCBwb3NpdGlvbiBmb3IgYWxsIHNsaWRlc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgJC5lYWNoKHNlbGYuc2xpZGVzLCBmdW5jdGlvbiAoa2V5LCBzbGlkZSkge1xyXG4gICAgICAgIHNlbGYudXBkYXRlU2xpZGUoc2xpZGUsIGUpO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVXBkYXRlIHNsaWRlIGNvbnRlbnQgcG9zaXRpb24gYW5kIHNpemVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdXBkYXRlU2xpZGU6IGZ1bmN0aW9uIChzbGlkZSwgZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgJGNvbnRlbnQgPSBzbGlkZSAmJiBzbGlkZS4kY29udGVudCxcclxuICAgICAgICB3aWR0aCA9IHNsaWRlLndpZHRoIHx8IHNsaWRlLm9wdHMud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0ID0gc2xpZGUuaGVpZ2h0IHx8IHNsaWRlLm9wdHMuaGVpZ2h0LFxyXG4gICAgICAgICRzbGlkZSA9IHNsaWRlLiRzbGlkZTtcclxuXHJcbiAgICAgIC8vIEZpcnN0LCBwcmV2ZW50IGNhcHRpb24gb3ZlcmxhcCwgaWYgbmVlZGVkXHJcbiAgICAgIHNlbGYuYWRqdXN0Q2FwdGlvbihzbGlkZSk7XHJcblxyXG4gICAgICAvLyBUaGVuIHJlc2l6ZSBjb250ZW50IHRvIGZpdCBpbnNpZGUgdGhlIHNsaWRlXHJcbiAgICAgIGlmICgkY29udGVudCAmJiAod2lkdGggfHwgaGVpZ2h0IHx8IHNsaWRlLmNvbnRlbnRUeXBlID09PSBcInZpZGVvXCIpICYmICFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgICQuZmFuY3lib3guc3RvcCgkY29udGVudCk7XHJcblxyXG4gICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCRjb250ZW50LCBzZWxmLmdldEZpdFBvcyhzbGlkZSkpO1xyXG5cclxuICAgICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVGhlbiBzb21lIGFkanVzdG1lbnRzXHJcbiAgICAgIHNlbGYuYWRqdXN0TGF5b3V0KHNsaWRlKTtcclxuXHJcbiAgICAgIGlmICgkc2xpZGUubGVuZ3RoKSB7XHJcbiAgICAgICAgJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpO1xyXG5cclxuICAgICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICAgIHNlbGYuJHJlZnMudG9vbGJhclxyXG4gICAgICAgICAgICAuYWRkKHNlbGYuJHJlZnMubmF2aWdhdGlvbi5maW5kKFwiLmZhbmN5Ym94LWJ1dHRvbi0tYXJyb3dfcmlnaHRcIikpXHJcbiAgICAgICAgICAgIC50b2dnbGVDbGFzcyhcImNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiLCAkc2xpZGUuZ2V0KDApLnNjcm9sbEhlaWdodCA+ICRzbGlkZS5nZXQoMCkuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcIm9uVXBkYXRlXCIsIHNsaWRlLCBlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gSG9yaXpvbnRhbGx5IGNlbnRlciBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNlbnRlclNsaWRlOiBmdW5jdGlvbiAoZHVyYXRpb24pIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgJHNsaWRlID0gY3VycmVudC4kc2xpZGU7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcgfHwgIWN1cnJlbnQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRzbGlkZS5zaWJsaW5ncygpLmNzcyh7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBcIlwiLFxyXG4gICAgICAgIG9wYWNpdHk6IFwiXCJcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkc2xpZGVcclxuICAgICAgICAucGFyZW50KClcclxuICAgICAgICAuY2hpbGRyZW4oKVxyXG4gICAgICAgIC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1zbGlkZS0tbmV4dFwiKTtcclxuXHJcbiAgICAgICQuZmFuY3lib3guYW5pbWF0ZShcclxuICAgICAgICAkc2xpZGUsIHtcclxuICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgICAgICBvcGFjaXR5OiAxXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gMCA6IGR1cmF0aW9uLFxyXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIC8vIENsZWFuIHVwXHJcbiAgICAgICAgICAkc2xpZGUuY3NzKHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBcIlwiLFxyXG4gICAgICAgICAgICBvcGFjaXR5OiBcIlwiXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoIWN1cnJlbnQuaXNDb21wbGV0ZSkge1xyXG4gICAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGVjayBpZiBjdXJyZW50IHNsaWRlIGlzIG1vdmVkIChzd2lwZWQpXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaXNNb3ZlZDogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBjdXJyZW50ID0gc2xpZGUgfHwgdGhpcy5jdXJyZW50LFxyXG4gICAgICAgIHNsaWRlUG9zLFxyXG4gICAgICAgIHN0YWdlUG9zO1xyXG5cclxuICAgICAgaWYgKCFjdXJyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzdGFnZVBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKHRoaXMuJHJlZnMuc3RhZ2UpO1xyXG4gICAgICBzbGlkZVBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKGN1cnJlbnQuJHNsaWRlKTtcclxuXHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgIWN1cnJlbnQuJHNsaWRlLmhhc0NsYXNzKFwiZmFuY3lib3gtYW5pbWF0ZWRcIikgJiZcclxuICAgICAgICAoTWF0aC5hYnMoc2xpZGVQb3MudG9wIC0gc3RhZ2VQb3MudG9wKSA+IDAuNSB8fCBNYXRoLmFicyhzbGlkZVBvcy5sZWZ0IC0gc3RhZ2VQb3MubGVmdCkgPiAwLjUpXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFVwZGF0ZSBjdXJzb3Igc3R5bGUgZGVwZW5kaW5nIGlmIGNvbnRlbnQgY2FuIGJlIHpvb21lZFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdXBkYXRlQ3Vyc29yOiBmdW5jdGlvbiAobmV4dFdpZHRoLCBuZXh0SGVpZ2h0KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgICRjb250YWluZXIgPSBzZWxmLiRyZWZzLmNvbnRhaW5lcixcclxuICAgICAgICBjYW5QYW4sXHJcbiAgICAgICAgaXNab29tYWJsZTtcclxuXHJcbiAgICAgIGlmICghY3VycmVudCB8fCBzZWxmLmlzQ2xvc2luZyB8fCAhc2VsZi5HdWVzdHVyZXMpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy16b29tYWJsZSBmYW5jeWJveC1jYW4tem9vbUluIGZhbmN5Ym94LWNhbi16b29tT3V0IGZhbmN5Ym94LWNhbi1zd2lwZSBmYW5jeWJveC1jYW4tcGFuXCIpO1xyXG5cclxuICAgICAgY2FuUGFuID0gc2VsZi5jYW5QYW4obmV4dFdpZHRoLCBuZXh0SGVpZ2h0KTtcclxuXHJcbiAgICAgIGlzWm9vbWFibGUgPSBjYW5QYW4gPyB0cnVlIDogc2VsZi5pc1pvb21hYmxlKCk7XHJcblxyXG4gICAgICAkY29udGFpbmVyLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtaXMtem9vbWFibGVcIiwgaXNab29tYWJsZSk7XHJcblxyXG4gICAgICAkKFwiW2RhdGEtZmFuY3lib3gtem9vbV1cIikucHJvcChcImRpc2FibGVkXCIsICFpc1pvb21hYmxlKTtcclxuXHJcbiAgICAgIGlmIChjYW5QYW4pIHtcclxuICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtY2FuLXBhblwiKTtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBpc1pvb21hYmxlICYmXHJcbiAgICAgICAgKGN1cnJlbnQub3B0cy5jbGlja0NvbnRlbnQgPT09IFwiem9vbVwiIHx8ICgkLmlzRnVuY3Rpb24oY3VycmVudC5vcHRzLmNsaWNrQ29udGVudCkgJiYgY3VycmVudC5vcHRzLmNsaWNrQ29udGVudChjdXJyZW50KSA9PSBcInpvb21cIikpXHJcbiAgICAgICkge1xyXG4gICAgICAgICRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tem9vbUluXCIpO1xyXG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnQub3B0cy50b3VjaCAmJiAoY3VycmVudC5vcHRzLnRvdWNoLnZlcnRpY2FsIHx8IHNlbGYuZ3JvdXAubGVuZ3RoID4gMSkgJiYgY3VycmVudC5jb250ZW50VHlwZSAhPT0gXCJ2aWRlb1wiKSB7XHJcbiAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyhcImZhbmN5Ym94LWNhbi1zd2lwZVwiKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGVjayBpZiBjdXJyZW50IHNsaWRlIGlzIHpvb21hYmxlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaXNab29tYWJsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICBmaXRQb3M7XHJcblxyXG4gICAgICAvLyBBc3N1bWUgdGhhdCBzbGlkZSBpcyB6b29tYWJsZSBpZjpcclxuICAgICAgLy8gICAtIGltYWdlIGlzIHN0aWxsIGxvYWRpbmdcclxuICAgICAgLy8gICAtIGFjdHVhbCBzaXplIG9mIHRoZSBpbWFnZSBpcyBzbWFsbGVyIHRoYW4gYXZhaWxhYmxlIGFyZWFcclxuICAgICAgaWYgKGN1cnJlbnQgJiYgIXNlbGYuaXNDbG9zaW5nICYmIGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiICYmICFjdXJyZW50Lmhhc0Vycm9yKSB7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpdFBvcyA9IHNlbGYuZ2V0Rml0UG9zKGN1cnJlbnQpO1xyXG5cclxuICAgICAgICBpZiAoZml0UG9zICYmIChjdXJyZW50LndpZHRoID4gZml0UG9zLndpZHRoIHx8IGN1cnJlbnQuaGVpZ2h0ID4gZml0UG9zLmhlaWdodCkpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGVjayBpZiBjdXJyZW50IGltYWdlIGRpbWVuc2lvbnMgYXJlIHNtYWxsZXIgdGhhbiBhY3R1YWxcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGlzU2NhbGVkRG93bjogZnVuY3Rpb24gKG5leHRXaWR0aCwgbmV4dEhlaWdodCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgcmV6ID0gZmFsc2UsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQ7XHJcblxyXG4gICAgICBpZiAobmV4dFdpZHRoICE9PSB1bmRlZmluZWQgJiYgbmV4dEhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV6ID0gbmV4dFdpZHRoIDwgY3VycmVudC53aWR0aCAmJiBuZXh0SGVpZ2h0IDwgY3VycmVudC5oZWlnaHQ7XHJcbiAgICAgIH0gZWxzZSBpZiAoJGNvbnRlbnQpIHtcclxuICAgICAgICByZXogPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSgkY29udGVudCk7XHJcbiAgICAgICAgcmV6ID0gcmV6LndpZHRoIDwgY3VycmVudC53aWR0aCAmJiByZXouaGVpZ2h0IDwgY3VycmVudC5oZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXo7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoZWNrIGlmIGltYWdlIGRpbWVuc2lvbnMgZXhjZWVkIHBhcmVudCBlbGVtZW50XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNhblBhbjogZnVuY3Rpb24gKG5leHRXaWR0aCwgbmV4dEhlaWdodCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICBwb3MgPSBudWxsLFxyXG4gICAgICAgIHJleiA9IGZhbHNlO1xyXG5cclxuICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiICYmIChjdXJyZW50LmlzQ29tcGxldGUgfHwgKG5leHRXaWR0aCAmJiBuZXh0SGVpZ2h0KSkgJiYgIWN1cnJlbnQuaGFzRXJyb3IpIHtcclxuICAgICAgICByZXogPSBzZWxmLmdldEZpdFBvcyhjdXJyZW50KTtcclxuXHJcbiAgICAgICAgaWYgKG5leHRXaWR0aCAhPT0gdW5kZWZpbmVkICYmIG5leHRIZWlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgcG9zID0ge1xyXG4gICAgICAgICAgICB3aWR0aDogbmV4dFdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IG5leHRIZWlnaHRcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50LmlzQ29tcGxldGUpIHtcclxuICAgICAgICAgIHBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKGN1cnJlbnQuJGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBvcyAmJiByZXopIHtcclxuICAgICAgICAgIHJleiA9IE1hdGguYWJzKHBvcy53aWR0aCAtIHJlei53aWR0aCkgPiAxLjUgfHwgTWF0aC5hYnMocG9zLmhlaWdodCAtIHJlei5oZWlnaHQpID4gMS41O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlejtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gTG9hZCBjb250ZW50IGludG8gdGhlIHNsaWRlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBsb2FkU2xpZGU6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICAkc2xpZGUsXHJcbiAgICAgICAgYWpheExvYWQ7XHJcblxyXG4gICAgICBpZiAoc2xpZGUuaXNMb2FkaW5nIHx8IHNsaWRlLmlzTG9hZGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZS5pc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgaWYgKHNlbGYudHJpZ2dlcihcImJlZm9yZUxvYWRcIiwgc2xpZGUpID09PSBmYWxzZSkge1xyXG4gICAgICAgIHNsaWRlLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHR5cGUgPSBzbGlkZS50eXBlO1xyXG4gICAgICAkc2xpZGUgPSBzbGlkZS4kc2xpZGU7XHJcblxyXG4gICAgICAkc2xpZGVcclxuICAgICAgICAub2ZmKFwicmVmcmVzaFwiKVxyXG4gICAgICAgIC50cmlnZ2VyKFwib25SZXNldFwiKVxyXG4gICAgICAgIC5hZGRDbGFzcyhzbGlkZS5vcHRzLnNsaWRlQ2xhc3MpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIGNvbnRlbnQgZGVwZW5kaW5nIG9uIHRoZSB0eXBlXHJcbiAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJpbWFnZVwiOlxyXG4gICAgICAgICAgc2VsZi5zZXRJbWFnZShzbGlkZSk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJpZnJhbWVcIjpcclxuICAgICAgICAgIHNlbGYuc2V0SWZyYW1lKHNsaWRlKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcImh0bWxcIjpcclxuICAgICAgICAgIHNlbGYuc2V0Q29udGVudChzbGlkZSwgc2xpZGUuc3JjIHx8IHNsaWRlLmNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwidmlkZW9cIjpcclxuICAgICAgICAgIHNlbGYuc2V0Q29udGVudChcclxuICAgICAgICAgICAgc2xpZGUsXHJcbiAgICAgICAgICAgIHNsaWRlLm9wdHMudmlkZW8udHBsXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXHtcXHtzcmNcXH1cXH0vZ2ksIHNsaWRlLnNyYylcclxuICAgICAgICAgICAgLnJlcGxhY2UoXCJ7e2Zvcm1hdH19XCIsIHNsaWRlLm9wdHMudmlkZW9Gb3JtYXQgfHwgc2xpZGUub3B0cy52aWRlby5mb3JtYXQgfHwgXCJcIilcclxuICAgICAgICAgICAgLnJlcGxhY2UoXCJ7e3Bvc3Rlcn19XCIsIHNsaWRlLnRodW1iIHx8IFwiXCIpXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwiaW5saW5lXCI6XHJcbiAgICAgICAgICBpZiAoJChzbGlkZS5zcmMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoc2xpZGUsICQoc2xpZGUuc3JjKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxmLnNldEVycm9yKHNsaWRlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcImFqYXhcIjpcclxuICAgICAgICAgIHNlbGYuc2hvd0xvYWRpbmcoc2xpZGUpO1xyXG5cclxuICAgICAgICAgIGFqYXhMb2FkID0gJC5hamF4KFxyXG4gICAgICAgICAgICAkLmV4dGVuZCh7fSwgc2xpZGUub3B0cy5hamF4LnNldHRpbmdzLCB7XHJcbiAgICAgICAgICAgICAgdXJsOiBzbGlkZS5zcmMsXHJcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEsIHRleHRTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ZXh0U3RhdHVzID09PSBcInN1Y2Nlc3NcIikge1xyXG4gICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoc2xpZGUsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChqcVhIUiwgdGV4dFN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGpxWEhSICYmIHRleHRTdGF0dXMgIT09IFwiYWJvcnRcIikge1xyXG4gICAgICAgICAgICAgICAgICBzZWxmLnNldEVycm9yKHNsaWRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICRzbGlkZS5vbmUoXCJvblJlc2V0XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgYWpheExvYWQuYWJvcnQoKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgc2VsZi5zZXRFcnJvcihzbGlkZSk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVc2UgdGh1bWJuYWlsIGltYWdlLCBpZiBwb3NzaWJsZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzZXRJbWFnZTogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBnaG9zdDtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIG5lZWQgdG8gc2hvdyBsb2FkaW5nIGljb25cclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyICRpbWcgPSBzbGlkZS4kaW1hZ2U7XHJcblxyXG4gICAgICAgIGlmICghc2VsZi5pc0Nsb3NpbmcgJiYgc2xpZGUuaXNMb2FkaW5nICYmICghJGltZyB8fCAhJGltZy5sZW5ndGggfHwgISRpbWdbMF0uY29tcGxldGUpICYmICFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgICAgc2VsZi5zaG93TG9hZGluZyhzbGlkZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCA1MCk7XHJcblxyXG4gICAgICAvL0NoZWNrIGlmIGltYWdlIGhhcyBzcmNzZXRcclxuICAgICAgc2VsZi5jaGVja1NyY3NldChzbGlkZSk7XHJcblxyXG4gICAgICAvLyBUaGlzIHdpbGwgYmUgd3JhcHBlciBjb250YWluaW5nIGJvdGggZ2hvc3QgYW5kIGFjdHVhbCBpbWFnZVxyXG4gICAgICBzbGlkZS4kY29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250ZW50XCI+PC9kaXY+JylcclxuICAgICAgICAuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIilcclxuICAgICAgICAuYXBwZW5kVG8oc2xpZGUuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWltYWdlXCIpKTtcclxuXHJcbiAgICAgIC8vIElmIHdlIGhhdmUgYSB0aHVtYm5haWwsIHdlIGNhbiBkaXNwbGF5IGl0IHdoaWxlIGFjdHVhbCBpbWFnZSBpcyBsb2FkaW5nXHJcbiAgICAgIC8vIFVzZXJzIHdpbGwgbm90IHN0YXJlIGF0IGJsYWNrIHNjcmVlbiBhbmQgYWN0dWFsIGltYWdlIHdpbGwgYXBwZWFyIGdyYWR1YWxseVxyXG4gICAgICBpZiAoc2xpZGUub3B0cy5wcmVsb2FkICE9PSBmYWxzZSAmJiBzbGlkZS5vcHRzLndpZHRoICYmIHNsaWRlLm9wdHMuaGVpZ2h0ICYmIHNsaWRlLnRodW1iKSB7XHJcbiAgICAgICAgc2xpZGUud2lkdGggPSBzbGlkZS5vcHRzLndpZHRoO1xyXG4gICAgICAgIHNsaWRlLmhlaWdodCA9IHNsaWRlLm9wdHMuaGVpZ2h0O1xyXG5cclxuICAgICAgICBnaG9zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcblxyXG4gICAgICAgIGdob3N0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgIHNsaWRlLiRnaG9zdCA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZ2hvc3Qub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi5hZnRlckxvYWQoc2xpZGUpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNsaWRlLiRnaG9zdCA9ICQoZ2hvc3QpXHJcbiAgICAgICAgICAuYWRkQ2xhc3MoXCJmYW5jeWJveC1pbWFnZVwiKVxyXG4gICAgICAgICAgLmFwcGVuZFRvKHNsaWRlLiRjb250ZW50KVxyXG4gICAgICAgICAgLmF0dHIoXCJzcmNcIiwgc2xpZGUudGh1bWIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTdGFydCBsb2FkaW5nIGFjdHVhbCBpbWFnZVxyXG4gICAgICBzZWxmLnNldEJpZ0ltYWdlKHNsaWRlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgaW1hZ2UgaGFzIHNyY3NldCBhbmQgZ2V0IHRoZSBzb3VyY2VcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICBjaGVja1NyY3NldDogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzcmNzZXQgPSBzbGlkZS5vcHRzLnNyY3NldCB8fCBzbGlkZS5vcHRzLmltYWdlLnNyY3NldCxcclxuICAgICAgICBmb3VuZCxcclxuICAgICAgICB0ZW1wLFxyXG4gICAgICAgIHB4UmF0aW8sXHJcbiAgICAgICAgd2luZG93V2lkdGg7XHJcblxyXG4gICAgICAvLyBJZiB3ZSBoYXZlIFwic3Jjc2V0XCIsIHRoZW4gd2UgbmVlZCB0byBmaW5kIGZpcnN0IG1hdGNoaW5nIFwic3JjXCIgdmFsdWUuXHJcbiAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5LCBiZWNhdXNlIHdoZW4geW91IHNldCBhbiBzcmMgYXR0cmlidXRlLCB0aGUgYnJvd3NlciB3aWxsIHByZWxvYWQgdGhlIGltYWdlXHJcbiAgICAgIC8vIGJlZm9yZSBhbnkgamF2YXNjcmlwdCBvciBldmVuIENTUyBpcyBhcHBsaWVkLlxyXG4gICAgICBpZiAoc3Jjc2V0KSB7XHJcbiAgICAgICAgcHhSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XHJcbiAgICAgICAgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAqIHB4UmF0aW87XHJcblxyXG4gICAgICAgIHRlbXAgPSBzcmNzZXQuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgIHZhciByZXQgPSB7fTtcclxuXHJcbiAgICAgICAgICBlbC50cmltKClcclxuICAgICAgICAgICAgLnNwbGl0KC9cXHMrLylcclxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGVsLCBpKSB7XHJcbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQoZWwuc3Vic3RyaW5nKDAsIGVsLmxlbmd0aCAtIDEpLCAxMCk7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHJldC51cmwgPSBlbCk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgcmV0LnBvc3RmaXggPSBlbFtlbC5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFNvcnQgYnkgdmFsdWVcclxuICAgICAgICB0ZW1wLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgIHJldHVybiBhLnZhbHVlIC0gYi52YWx1ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gT2ssIG5vdyB3ZSBoYXZlIGFuIGFycmF5IG9mIGFsbCBzcmNzZXQgdmFsdWVzXHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0ZW1wLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICB2YXIgZWwgPSB0ZW1wW2pdO1xyXG5cclxuICAgICAgICAgIGlmICgoZWwucG9zdGZpeCA9PT0gXCJ3XCIgJiYgZWwudmFsdWUgPj0gd2luZG93V2lkdGgpIHx8IChlbC5wb3N0Zml4ID09PSBcInhcIiAmJiBlbC52YWx1ZSA+PSBweFJhdGlvKSkge1xyXG4gICAgICAgICAgICBmb3VuZCA9IGVsO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIG5vdCBmb3VuZCwgdGFrZSB0aGUgbGFzdCBvbmVcclxuICAgICAgICBpZiAoIWZvdW5kICYmIHRlbXAubGVuZ3RoKSB7XHJcbiAgICAgICAgICBmb3VuZCA9IHRlbXBbdGVtcC5sZW5ndGggLSAxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChmb3VuZCkge1xyXG4gICAgICAgICAgc2xpZGUuc3JjID0gZm91bmQudXJsO1xyXG5cclxuICAgICAgICAgIC8vIElmIHdlIGhhdmUgZGVmYXVsdCB3aWR0aC9oZWlnaHQgdmFsdWVzLCB3ZSBjYW4gY2FsY3VsYXRlIGhlaWdodCBmb3IgbWF0Y2hpbmcgc291cmNlXHJcbiAgICAgICAgICBpZiAoc2xpZGUud2lkdGggJiYgc2xpZGUuaGVpZ2h0ICYmIGZvdW5kLnBvc3RmaXggPT0gXCJ3XCIpIHtcclxuICAgICAgICAgICAgc2xpZGUuaGVpZ2h0ID0gKHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0KSAqIGZvdW5kLnZhbHVlO1xyXG4gICAgICAgICAgICBzbGlkZS53aWR0aCA9IGZvdW5kLnZhbHVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHNsaWRlLm9wdHMuc3Jjc2V0ID0gc3Jjc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDcmVhdGUgZnVsbC1zaXplIGltYWdlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2V0QmlnSW1hZ2U6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSxcclxuICAgICAgICAkaW1nID0gJChpbWcpO1xyXG5cclxuICAgICAgc2xpZGUuJGltYWdlID0gJGltZ1xyXG4gICAgICAgIC5vbmUoXCJlcnJvclwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLnNldEVycm9yKHNsaWRlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbmUoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciBzaXplcztcclxuXHJcbiAgICAgICAgICBpZiAoIXNsaWRlLiRnaG9zdCkge1xyXG4gICAgICAgICAgICBzZWxmLnJlc29sdmVJbWFnZVNsaWRlU2l6ZShzbGlkZSwgdGhpcy5uYXR1cmFsV2lkdGgsIHRoaXMubmF0dXJhbEhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmFmdGVyTG9hZChzbGlkZSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGYuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoc2xpZGUub3B0cy5zcmNzZXQpIHtcclxuICAgICAgICAgICAgc2l6ZXMgPSBzbGlkZS5vcHRzLnNpemVzO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFzaXplcyB8fCBzaXplcyA9PT0gXCJhdXRvXCIpIHtcclxuICAgICAgICAgICAgICBzaXplcyA9XHJcbiAgICAgICAgICAgICAgICAoc2xpZGUud2lkdGggLyBzbGlkZS5oZWlnaHQgPiAxICYmICRXLndpZHRoKCkgLyAkVy5oZWlnaHQoKSA+IDEgPyBcIjEwMFwiIDogTWF0aC5yb3VuZCgoc2xpZGUud2lkdGggLyBzbGlkZS5oZWlnaHQpICogMTAwKSkgK1xyXG4gICAgICAgICAgICAgICAgXCJ2d1wiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkaW1nLmF0dHIoXCJzaXplc1wiLCBzaXplcykuYXR0cihcInNyY3NldFwiLCBzbGlkZS5vcHRzLnNyY3NldCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gSGlkZSB0ZW1wb3JhcnkgaW1hZ2UgYWZ0ZXIgc29tZSBkZWxheVxyXG4gICAgICAgICAgaWYgKHNsaWRlLiRnaG9zdCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBpZiAoc2xpZGUuJGdob3N0ICYmICFzZWxmLmlzQ2xvc2luZykge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuJGdob3N0LmhpZGUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIE1hdGgubWluKDMwMCwgTWF0aC5tYXgoMTAwMCwgc2xpZGUuaGVpZ2h0IC8gMTYwMCkpKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZWxmLmhpZGVMb2FkaW5nKHNsaWRlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWltYWdlXCIpXHJcbiAgICAgICAgLmF0dHIoXCJzcmNcIiwgc2xpZGUuc3JjKVxyXG4gICAgICAgIC5hcHBlbmRUbyhzbGlkZS4kY29udGVudCk7XHJcblxyXG4gICAgICBpZiAoKGltZy5jb21wbGV0ZSB8fCBpbWcucmVhZHlTdGF0ZSA9PSBcImNvbXBsZXRlXCIpICYmICRpbWcubmF0dXJhbFdpZHRoICYmICRpbWcubmF0dXJhbEhlaWdodCkge1xyXG4gICAgICAgICRpbWcudHJpZ2dlcihcImxvYWRcIik7XHJcbiAgICAgIH0gZWxzZSBpZiAoaW1nLmVycm9yKSB7XHJcbiAgICAgICAgJGltZy50cmlnZ2VyKFwiZXJyb3JcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ29tcHV0ZXMgdGhlIHNsaWRlIHNpemUgZnJvbSBpbWFnZSBzaXplIGFuZCBtYXhXaWR0aC9tYXhIZWlnaHRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgcmVzb2x2ZUltYWdlU2xpZGVTaXplOiBmdW5jdGlvbiAoc2xpZGUsIGltZ1dpZHRoLCBpbWdIZWlnaHQpIHtcclxuICAgICAgdmFyIG1heFdpZHRoID0gcGFyc2VJbnQoc2xpZGUub3B0cy53aWR0aCwgMTApLFxyXG4gICAgICAgIG1heEhlaWdodCA9IHBhcnNlSW50KHNsaWRlLm9wdHMuaGVpZ2h0LCAxMCk7XHJcblxyXG4gICAgICAvLyBTZXRzIHRoZSBkZWZhdWx0IHZhbHVlcyBmcm9tIHRoZSBpbWFnZVxyXG4gICAgICBzbGlkZS53aWR0aCA9IGltZ1dpZHRoO1xyXG4gICAgICBzbGlkZS5oZWlnaHQgPSBpbWdIZWlnaHQ7XHJcblxyXG4gICAgICBpZiAobWF4V2lkdGggPiAwKSB7XHJcbiAgICAgICAgc2xpZGUud2lkdGggPSBtYXhXaWR0aDtcclxuICAgICAgICBzbGlkZS5oZWlnaHQgPSBNYXRoLmZsb29yKChtYXhXaWR0aCAqIGltZ0hlaWdodCkgLyBpbWdXaWR0aCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChtYXhIZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgc2xpZGUud2lkdGggPSBNYXRoLmZsb29yKChtYXhIZWlnaHQgKiBpbWdXaWR0aCkgLyBpbWdIZWlnaHQpO1xyXG4gICAgICAgIHNsaWRlLmhlaWdodCA9IG1heEhlaWdodDtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDcmVhdGUgaWZyYW1lIHdyYXBwZXIsIGlmcmFtZSBhbmQgYmluZGluZ3NcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNldElmcmFtZTogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBvcHRzID0gc2xpZGUub3B0cy5pZnJhbWUsXHJcbiAgICAgICAgJHNsaWRlID0gc2xpZGUuJHNsaWRlLFxyXG4gICAgICAgICRpZnJhbWU7XHJcblxyXG4gICAgICBzbGlkZS4kY29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250ZW50JyArIChvcHRzLnByZWxvYWQgPyBcIiBmYW5jeWJveC1pcy1oaWRkZW5cIiA6IFwiXCIpICsgJ1wiPjwvZGl2PicpXHJcbiAgICAgICAgLmNzcyhvcHRzLmNzcylcclxuICAgICAgICAuYXBwZW5kVG8oJHNsaWRlKTtcclxuXHJcbiAgICAgICRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1cIiArIHNsaWRlLmNvbnRlbnRUeXBlKTtcclxuXHJcbiAgICAgIHNsaWRlLiRpZnJhbWUgPSAkaWZyYW1lID0gJChvcHRzLnRwbC5yZXBsYWNlKC9cXHtybmRcXH0vZywgbmV3IERhdGUoKS5nZXRUaW1lKCkpKVxyXG4gICAgICAgIC5hdHRyKG9wdHMuYXR0cilcclxuICAgICAgICAuYXBwZW5kVG8oc2xpZGUuJGNvbnRlbnQpO1xyXG5cclxuICAgICAgaWYgKG9wdHMucHJlbG9hZCkge1xyXG4gICAgICAgIHNlbGYuc2hvd0xvYWRpbmcoc2xpZGUpO1xyXG5cclxuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBpdCBpcyBub3QgYWx3YXlzIHBvc3NpYmxlIHRvIGRldGVybWluZSBpZiBpZnJhbWUgaXMgc3VjY2Vzc2Z1bGx5IGxvYWRlZFxyXG4gICAgICAgIC8vIChkdWUgdG8gYnJvd3NlciBzZWN1cml0eSBwb2xpY3kpXHJcblxyXG4gICAgICAgICRpZnJhbWUub24oXCJsb2FkLmZiIGVycm9yLmZiXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICB0aGlzLmlzUmVhZHkgPSAxO1xyXG5cclxuICAgICAgICAgIHNsaWRlLiRzbGlkZS50cmlnZ2VyKFwicmVmcmVzaFwiKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmFmdGVyTG9hZChzbGlkZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlY2FsY3VsYXRlIGlmcmFtZSBjb250ZW50IHNpemVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICRzbGlkZS5vbihcInJlZnJlc2guZmJcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgdmFyICRjb250ZW50ID0gc2xpZGUuJGNvbnRlbnQsXHJcbiAgICAgICAgICAgIGZyYW1lV2lkdGggPSBvcHRzLmNzcy53aWR0aCxcclxuICAgICAgICAgICAgZnJhbWVIZWlnaHQgPSBvcHRzLmNzcy5oZWlnaHQsXHJcbiAgICAgICAgICAgICRjb250ZW50cyxcclxuICAgICAgICAgICAgJGJvZHk7XHJcblxyXG4gICAgICAgICAgaWYgKCRpZnJhbWVbMF0uaXNSZWFkeSAhPT0gMSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgJGNvbnRlbnRzID0gJGlmcmFtZS5jb250ZW50cygpO1xyXG4gICAgICAgICAgICAkYm9keSA9ICRjb250ZW50cy5maW5kKFwiYm9keVwiKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuXHJcbiAgICAgICAgICAvLyBDYWxjdWxhdGUgY29udGVudCBkaW1lbnNpb25zLCBpZiBpdCBpcyBhY2Nlc3NpYmxlXHJcbiAgICAgICAgICBpZiAoJGJvZHkgJiYgJGJvZHkubGVuZ3RoICYmICRib2R5LmNoaWxkcmVuKCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIEF2b2lkIHNjcm9sbGluZyB0byB0b3AgKGlmIG11bHRpcGxlIGluc3RhbmNlcylcclxuICAgICAgICAgICAgJHNsaWRlLmNzcyhcIm92ZXJmbG93XCIsIFwidmlzaWJsZVwiKTtcclxuXHJcbiAgICAgICAgICAgICRjb250ZW50LmNzcyh7XHJcbiAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxyXG4gICAgICAgICAgICAgIFwibWF4LXdpZHRoXCI6IFwiMTAwJVwiLFxyXG4gICAgICAgICAgICAgIGhlaWdodDogXCI5OTk5cHhcIlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcmFtZVdpZHRoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBmcmFtZVdpZHRoID0gTWF0aC5jZWlsKE1hdGgubWF4KCRib2R5WzBdLmNsaWVudFdpZHRoLCAkYm9keS5vdXRlcldpZHRoKHRydWUpKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRjb250ZW50LmNzcyhcIndpZHRoXCIsIGZyYW1lV2lkdGggPyBmcmFtZVdpZHRoIDogXCJcIikuY3NzKFwibWF4LXdpZHRoXCIsIFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZyYW1lSGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICBmcmFtZUhlaWdodCA9IE1hdGguY2VpbChNYXRoLm1heCgkYm9keVswXS5jbGllbnRIZWlnaHQsICRib2R5Lm91dGVySGVpZ2h0KHRydWUpKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRjb250ZW50LmNzcyhcImhlaWdodFwiLCBmcmFtZUhlaWdodCA/IGZyYW1lSGVpZ2h0IDogXCJcIik7XHJcblxyXG4gICAgICAgICAgICAkc2xpZGUuY3NzKFwib3ZlcmZsb3dcIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuYWZ0ZXJMb2FkKHNsaWRlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJGlmcmFtZS5hdHRyKFwic3JjXCIsIHNsaWRlLnNyYyk7XHJcblxyXG4gICAgICAvLyBSZW1vdmUgaWZyYW1lIGlmIGNsb3Npbmcgb3IgY2hhbmdpbmcgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICRzbGlkZS5vbmUoXCJvblJlc2V0XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBUaGlzIGhlbHBzIElFIG5vdCB0byB0aHJvdyBlcnJvcnMgd2hlbiBjbG9zaW5nXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICQodGhpcylcclxuICAgICAgICAgICAgLmZpbmQoXCJpZnJhbWVcIilcclxuICAgICAgICAgICAgLmhpZGUoKVxyXG4gICAgICAgICAgICAudW5iaW5kKClcclxuICAgICAgICAgICAgLmF0dHIoXCJzcmNcIiwgXCIvL2Fib3V0OmJsYW5rXCIpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuXHJcbiAgICAgICAgJCh0aGlzKVxyXG4gICAgICAgICAgLm9mZihcInJlZnJlc2guZmJcIilcclxuICAgICAgICAgIC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBzbGlkZS5pc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNsaWRlLmlzUmV2ZWFsZWQgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFdyYXAgYW5kIGFwcGVuZCBjb250ZW50IHRvIHRoZSBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoc2xpZGUsIGNvbnRlbnQpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLmhpZGVMb2FkaW5nKHNsaWRlKTtcclxuXHJcbiAgICAgIGlmIChzbGlkZS4kY29udGVudCkge1xyXG4gICAgICAgICQuZmFuY3lib3guc3RvcChzbGlkZS4kY29udGVudCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNsaWRlLiRzbGlkZS5lbXB0eSgpO1xyXG5cclxuICAgICAgLy8gSWYgY29udGVudCBpcyBhIGpRdWVyeSBvYmplY3QsIHRoZW4gaXQgd2lsbCBiZSBtb3ZlZCB0byB0aGUgc2xpZGUuXHJcbiAgICAgIC8vIFRoZSBwbGFjZWhvbGRlciBpcyBjcmVhdGVkIHNvIHdlIHdpbGwga25vdyB3aGVyZSB0byBwdXQgaXQgYmFjay5cclxuICAgICAgaWYgKGlzUXVlcnkoY29udGVudCkgJiYgY29udGVudC5wYXJlbnQoKS5sZW5ndGgpIHtcclxuICAgICAgICAvLyBNYWtlIHN1cmUgY29udGVudCBpcyBub3QgYWxyZWFkeSBtb3ZlZCB0byBmYW5jeUJveFxyXG4gICAgICAgIGlmIChjb250ZW50Lmhhc0NsYXNzKFwiZmFuY3lib3gtY29udGVudFwiKSB8fCBjb250ZW50LnBhcmVudCgpLmhhc0NsYXNzKFwiZmFuY3lib3gtY29udGVudFwiKSkge1xyXG4gICAgICAgICAgY29udGVudC5wYXJlbnRzKFwiLmZhbmN5Ym94LXNsaWRlXCIpLnRyaWdnZXIoXCJvblJlc2V0XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHRlbXBvcmFyeSBlbGVtZW50IG1hcmtpbmcgb3JpZ2luYWwgcGxhY2Ugb2YgdGhlIGNvbnRlbnRcclxuICAgICAgICBzbGlkZS4kcGxhY2Vob2xkZXIgPSAkKFwiPGRpdj5cIilcclxuICAgICAgICAgIC5oaWRlKClcclxuICAgICAgICAgIC5pbnNlcnRBZnRlcihjb250ZW50KTtcclxuXHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIGNvbnRlbnQgaXMgdmlzaWJsZVxyXG4gICAgICAgIGNvbnRlbnQuY3NzKFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuICAgICAgfSBlbHNlIGlmICghc2xpZGUuaGFzRXJyb3IpIHtcclxuICAgICAgICAvLyBJZiBjb250ZW50IGlzIGp1c3QgYSBwbGFpbiB0ZXh0LCB0cnkgdG8gY29udmVydCBpdCB0byBodG1sXHJcbiAgICAgICAgaWYgKCQudHlwZShjb250ZW50KSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgY29udGVudCA9ICQoXCI8ZGl2PlwiKVxyXG4gICAgICAgICAgICAuYXBwZW5kKCQudHJpbShjb250ZW50KSlcclxuICAgICAgICAgICAgLmNvbnRlbnRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBcImZpbHRlclwiIG9wdGlvbiBpcyBwcm92aWRlZCwgdGhlbiBmaWx0ZXIgY29udGVudFxyXG4gICAgICAgIGlmIChzbGlkZS5vcHRzLmZpbHRlcikge1xyXG4gICAgICAgICAgY29udGVudCA9ICQoXCI8ZGl2PlwiKVxyXG4gICAgICAgICAgICAuaHRtbChjb250ZW50KVxyXG4gICAgICAgICAgICAuZmluZChzbGlkZS5vcHRzLmZpbHRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZS4kc2xpZGUub25lKFwib25SZXNldFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gUGF1c2UgYWxsIGh0bWw1IHZpZGVvL2F1ZGlvXHJcbiAgICAgICAgJCh0aGlzKVxyXG4gICAgICAgICAgLmZpbmQoXCJ2aWRlbyxhdWRpb1wiKVxyXG4gICAgICAgICAgLnRyaWdnZXIoXCJwYXVzZVwiKTtcclxuXHJcbiAgICAgICAgLy8gUHV0IGNvbnRlbnQgYmFja1xyXG4gICAgICAgIGlmIChzbGlkZS4kcGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgIHNsaWRlLiRwbGFjZWhvbGRlci5hZnRlcihjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtY29udGVudFwiKS5oaWRlKCkpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgIHNsaWRlLiRwbGFjZWhvbGRlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW1vdmUgY3VzdG9tIGNsb3NlIGJ1dHRvblxyXG4gICAgICAgIGlmIChzbGlkZS4kc21hbGxCdG4pIHtcclxuICAgICAgICAgIHNsaWRlLiRzbWFsbEJ0bi5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICBzbGlkZS4kc21hbGxCdG4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGNvbnRlbnQgYW5kIG1hcmsgc2xpZGUgYXMgbm90IGxvYWRlZFxyXG4gICAgICAgIGlmICghc2xpZGUuaGFzRXJyb3IpIHtcclxuICAgICAgICAgICQodGhpcykuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgICBzbGlkZS5pc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgc2xpZGUuaXNSZXZlYWxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkKGNvbnRlbnQpLmFwcGVuZFRvKHNsaWRlLiRzbGlkZSk7XHJcblxyXG4gICAgICBpZiAoJChjb250ZW50KS5pcyhcInZpZGVvLGF1ZGlvXCIpKSB7XHJcbiAgICAgICAgJChjb250ZW50KS5hZGRDbGFzcyhcImZhbmN5Ym94LXZpZGVvXCIpO1xyXG5cclxuICAgICAgICAkKGNvbnRlbnQpLndyYXAoXCI8ZGl2PjwvZGl2PlwiKTtcclxuXHJcbiAgICAgICAgc2xpZGUuY29udGVudFR5cGUgPSBcInZpZGVvXCI7XHJcblxyXG4gICAgICAgIHNsaWRlLm9wdHMud2lkdGggPSBzbGlkZS5vcHRzLndpZHRoIHx8ICQoY29udGVudCkuYXR0cihcIndpZHRoXCIpO1xyXG4gICAgICAgIHNsaWRlLm9wdHMuaGVpZ2h0ID0gc2xpZGUub3B0cy5oZWlnaHQgfHwgJChjb250ZW50KS5hdHRyKFwiaGVpZ2h0XCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZS4kY29udGVudCA9IHNsaWRlLiRzbGlkZVxyXG4gICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgLmZpbHRlcihcImRpdixmb3JtLG1haW4sdmlkZW8sYXVkaW8sYXJ0aWNsZSwuZmFuY3lib3gtY29udGVudFwiKVxyXG4gICAgICAgIC5maXJzdCgpO1xyXG5cclxuICAgICAgc2xpZGUuJGNvbnRlbnQuc2libGluZ3MoKS5oaWRlKCk7XHJcblxyXG4gICAgICAvLyBSZS1jaGVjayBpZiB0aGVyZSBpcyBhIHZhbGlkIGNvbnRlbnRcclxuICAgICAgLy8gKGluIHNvbWUgY2FzZXMsIGFqYXggcmVzcG9uc2UgY2FuIGNvbnRhaW4gdmFyaW91cyBlbGVtZW50cyBvciBwbGFpbiB0ZXh0KVxyXG4gICAgICBpZiAoIXNsaWRlLiRjb250ZW50Lmxlbmd0aCkge1xyXG4gICAgICAgIHNsaWRlLiRjb250ZW50ID0gc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgICAud3JhcElubmVyKFwiPGRpdj48L2Rpdj5cIilcclxuICAgICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgICAuZmlyc3QoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2xpZGUuJGNvbnRlbnQuYWRkQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpO1xyXG5cclxuICAgICAgc2xpZGUuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiICsgc2xpZGUuY29udGVudFR5cGUpO1xyXG5cclxuICAgICAgc2VsZi5hZnRlckxvYWQoc2xpZGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBEaXNwbGF5IGVycm9yIG1lc3NhZ2VcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNldEVycm9yOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgc2xpZGUuaGFzRXJyb3IgPSB0cnVlO1xyXG5cclxuICAgICAgc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgLnRyaWdnZXIoXCJvblJlc2V0XCIpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiICsgc2xpZGUuY29udGVudFR5cGUpXHJcbiAgICAgICAgLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWVycm9yXCIpO1xyXG5cclxuICAgICAgc2xpZGUuY29udGVudFR5cGUgPSBcImh0bWxcIjtcclxuXHJcbiAgICAgIHRoaXMuc2V0Q29udGVudChzbGlkZSwgdGhpcy50cmFuc2xhdGUoc2xpZGUsIHNsaWRlLm9wdHMuZXJyb3JUcGwpKTtcclxuXHJcbiAgICAgIGlmIChzbGlkZS5wb3MgPT09IHRoaXMuY3VyclBvcykge1xyXG4gICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTaG93IGxvYWRpbmcgaWNvbiBpbnNpZGUgdGhlIHNsaWRlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2hvd0xvYWRpbmc6IGZ1bmN0aW9uIChzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBzbGlkZSA9IHNsaWRlIHx8IHNlbGYuY3VycmVudDtcclxuXHJcbiAgICAgIGlmIChzbGlkZSAmJiAhc2xpZGUuJHNwaW5uZXIpIHtcclxuICAgICAgICBzbGlkZS4kc3Bpbm5lciA9ICQoc2VsZi50cmFuc2xhdGUoc2VsZiwgc2VsZi5vcHRzLnNwaW5uZXJUcGwpKVxyXG4gICAgICAgICAgLmFwcGVuZFRvKHNsaWRlLiRzbGlkZSlcclxuICAgICAgICAgIC5oaWRlKClcclxuICAgICAgICAgIC5mYWRlSW4oXCJmYXN0XCIpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFJlbW92ZSBsb2FkaW5nIGljb24gZnJvbSB0aGUgc2xpZGVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBoaWRlTG9hZGluZzogZnVuY3Rpb24gKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIHNsaWRlID0gc2xpZGUgfHwgc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgaWYgKHNsaWRlICYmIHNsaWRlLiRzcGlubmVyKSB7XHJcbiAgICAgICAgc2xpZGUuJHNwaW5uZXIuc3RvcCgpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICBkZWxldGUgc2xpZGUuJHNwaW5uZXI7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQWRqdXN0bWVudHMgYWZ0ZXIgc2xpZGUgY29udGVudCBoYXMgYmVlbiBsb2FkZWRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgYWZ0ZXJMb2FkOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZS5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgc2xpZGUuaXNMb2FkZWQgPSB0cnVlO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKFwiYWZ0ZXJMb2FkXCIsIHNsaWRlKTtcclxuXHJcbiAgICAgIHNlbGYuaGlkZUxvYWRpbmcoc2xpZGUpO1xyXG5cclxuICAgICAgLy8gQWRkIHNtYWxsIGNsb3NlIGJ1dHRvblxyXG4gICAgICBpZiAoc2xpZGUub3B0cy5zbWFsbEJ0biAmJiAoIXNsaWRlLiRzbWFsbEJ0biB8fCAhc2xpZGUuJHNtYWxsQnRuLmxlbmd0aCkpIHtcclxuICAgICAgICBzbGlkZS4kc21hbGxCdG4gPSAkKHNlbGYudHJhbnNsYXRlKHNsaWRlLCBzbGlkZS5vcHRzLmJ0blRwbC5zbWFsbEJ0bikpLmFwcGVuZFRvKHNsaWRlLiRjb250ZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRGlzYWJsZSByaWdodCBjbGlja1xyXG4gICAgICBpZiAoc2xpZGUub3B0cy5wcm90ZWN0ICYmIHNsaWRlLiRjb250ZW50ICYmICFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgIHNsaWRlLiRjb250ZW50Lm9uKFwiY29udGV4dG1lbnUuZmJcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgIGlmIChlLmJ1dHRvbiA9PSAyKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gQWRkIGZha2UgZWxlbWVudCBvbiB0b3Agb2YgdGhlIGltYWdlXHJcbiAgICAgICAgLy8gVGhpcyBtYWtlcyBhIGJpdCBoYXJkZXIgZm9yIHVzZXIgdG8gc2VsZWN0IGltYWdlXHJcbiAgICAgICAgaWYgKHNsaWRlLnR5cGUgPT09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgICAgJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNwYWNlYmFsbFwiPjwvZGl2PicpLmFwcGVuZFRvKHNsaWRlLiRjb250ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuYWRqdXN0Q2FwdGlvbihzbGlkZSk7XHJcblxyXG4gICAgICBzZWxmLmFkanVzdExheW91dChzbGlkZSk7XHJcblxyXG4gICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnJldmVhbENvbnRlbnQoc2xpZGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBQcmV2ZW50IGNhcHRpb24gb3ZlcmxhcCxcclxuICAgIC8vIGZpeCBjc3MgaW5jb25zaXN0ZW5jeSBhY3Jvc3MgYnJvd3NlcnNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhZGp1c3RDYXB0aW9uOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzbGlkZSB8fCBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgY2FwdGlvbiA9IGN1cnJlbnQub3B0cy5jYXB0aW9uLFxyXG4gICAgICAgIHByZXZlbnRPdmVybGFwID0gY3VycmVudC5vcHRzLnByZXZlbnRDYXB0aW9uT3ZlcmxhcCxcclxuICAgICAgICAkY2FwdGlvbiA9IHNlbGYuJHJlZnMuY2FwdGlvbixcclxuICAgICAgICAkY2xvbmUsXHJcbiAgICAgICAgY2FwdGlvbkggPSBmYWxzZTtcclxuXHJcbiAgICAgICRjYXB0aW9uLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtY2FwdGlvbi0tc2VwYXJhdGVcIiwgcHJldmVudE92ZXJsYXApO1xyXG5cclxuICAgICAgaWYgKHByZXZlbnRPdmVybGFwICYmIGNhcHRpb24gJiYgY2FwdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoY3VycmVudC5wb3MgIT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgICAgJGNsb25lID0gJGNhcHRpb24uY2xvbmUoKS5hcHBlbmRUbygkY2FwdGlvbi5wYXJlbnQoKSk7XHJcblxyXG4gICAgICAgICAgJGNsb25lXHJcbiAgICAgICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgICAgIC5lcSgwKVxyXG4gICAgICAgICAgICAuZW1wdHkoKVxyXG4gICAgICAgICAgICAuaHRtbChjYXB0aW9uKTtcclxuXHJcbiAgICAgICAgICBjYXB0aW9uSCA9ICRjbG9uZS5vdXRlckhlaWdodCh0cnVlKTtcclxuXHJcbiAgICAgICAgICAkY2xvbmUuZW1wdHkoKS5yZW1vdmUoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuJGNhcHRpb24pIHtcclxuICAgICAgICAgIGNhcHRpb25IID0gc2VsZi4kY2FwdGlvbi5vdXRlckhlaWdodCh0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1cnJlbnQuJHNsaWRlLmNzcyhcInBhZGRpbmctYm90dG9tXCIsIGNhcHRpb25IIHx8IFwiXCIpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNpbXBsZSBoYWNrIHRvIGZpeCBpbmNvbnNpc3RlbmN5IGFjcm9zcyBicm93c2VycywgZGVzY3JpYmVkIGhlcmUgKGFmZmVjdHMgRWRnZSwgdG9vKTpcclxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTc0ODUxOFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgYWRqdXN0TGF5b3V0OiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzbGlkZSB8fCBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgc2Nyb2xsSGVpZ2h0LFxyXG4gICAgICAgIG1hcmdpbkJvdHRvbSxcclxuICAgICAgICBpbmxpbmVQYWRkaW5nLFxyXG4gICAgICAgIGFjdHVhbFBhZGRpbmc7XHJcblxyXG4gICAgICBpZiAoY3VycmVudC5pc0xvYWRlZCAmJiBjdXJyZW50Lm9wdHMuZGlzYWJsZUxheW91dEZpeCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgIGN1cnJlbnQuJGNvbnRlbnQuY3NzKFwibWFyZ2luLWJvdHRvbVwiLCBcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gSWYgd2Ugd291bGQgYWx3YXlzIHNldCBtYXJnaW4tYm90dG9tIGZvciB0aGUgY29udGVudCxcclxuICAgICAgICAvLyB0aGVuIGl0IHdvdWxkIHBvdGVudGlhbGx5IGJyZWFrIHZlcnRpY2FsIGFsaWduXHJcbiAgICAgICAgaWYgKGN1cnJlbnQuJGNvbnRlbnQub3V0ZXJIZWlnaHQoKSA+IGN1cnJlbnQuJHNsaWRlLmhlaWdodCgpICsgMC41KSB7XHJcbiAgICAgICAgICBpbmxpbmVQYWRkaW5nID0gY3VycmVudC4kc2xpZGVbMF0uc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXTtcclxuICAgICAgICAgIGFjdHVhbFBhZGRpbmcgPSBjdXJyZW50LiRzbGlkZS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiKTtcclxuXHJcbiAgICAgICAgICBpZiAocGFyc2VGbG9hdChhY3R1YWxQYWRkaW5nKSA+IDApIHtcclxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gY3VycmVudC4kc2xpZGVbMF0uc2Nyb2xsSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC4kc2xpZGUuY3NzKFwicGFkZGluZy1ib3R0b21cIiwgMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoc2Nyb2xsSGVpZ2h0IC0gY3VycmVudC4kc2xpZGVbMF0uc2Nyb2xsSGVpZ2h0KSA8IDEpIHtcclxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBhY3R1YWxQYWRkaW5nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiLCBpbmxpbmVQYWRkaW5nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1cnJlbnQuJGNvbnRlbnQuY3NzKFwibWFyZ2luLWJvdHRvbVwiLCBtYXJnaW5Cb3R0b20pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIE1ha2UgY29udGVudCB2aXNpYmxlXHJcbiAgICAvLyBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgcmlnaHQgYWZ0ZXIgY29udGVudCBoYXMgYmVlbiBsb2FkZWQgb3JcclxuICAgIC8vIHVzZXIgbmF2aWdhdGVzIGdhbGxlcnkgYW5kIHRyYW5zaXRpb24gc2hvdWxkIHN0YXJ0XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICByZXZlYWxDb250ZW50OiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICRzbGlkZSA9IHNsaWRlLiRzbGlkZSxcclxuICAgICAgICBlbmQgPSBmYWxzZSxcclxuICAgICAgICBzdGFydCA9IGZhbHNlLFxyXG4gICAgICAgIGlzTW92ZWQgPSBzZWxmLmlzTW92ZWQoc2xpZGUpLFxyXG4gICAgICAgIGlzUmV2ZWFsZWQgPSBzbGlkZS5pc1JldmVhbGVkLFxyXG4gICAgICAgIGVmZmVjdCxcclxuICAgICAgICBlZmZlY3RDbGFzc05hbWUsXHJcbiAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgb3BhY2l0eTtcclxuXHJcbiAgICAgIHNsaWRlLmlzUmV2ZWFsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgZWZmZWN0ID0gc2xpZGUub3B0c1tzZWxmLmZpcnN0UnVuID8gXCJhbmltYXRpb25FZmZlY3RcIiA6IFwidHJhbnNpdGlvbkVmZmVjdFwiXTtcclxuICAgICAgZHVyYXRpb24gPSBzbGlkZS5vcHRzW3NlbGYuZmlyc3RSdW4gPyBcImFuaW1hdGlvbkR1cmF0aW9uXCIgOiBcInRyYW5zaXRpb25EdXJhdGlvblwiXTtcclxuXHJcbiAgICAgIGR1cmF0aW9uID0gcGFyc2VJbnQoc2xpZGUuZm9yY2VkRHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IGR1cmF0aW9uIDogc2xpZGUuZm9yY2VkRHVyYXRpb24sIDEwKTtcclxuXHJcbiAgICAgIGlmIChpc01vdmVkIHx8IHNsaWRlLnBvcyAhPT0gc2VsZi5jdXJyUG9zIHx8ICFkdXJhdGlvbikge1xyXG4gICAgICAgIGVmZmVjdCA9IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiBjYW4gem9vbVxyXG4gICAgICBpZiAoZWZmZWN0ID09PSBcInpvb21cIikge1xyXG4gICAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcyAmJiBkdXJhdGlvbiAmJiBzbGlkZS50eXBlID09PSBcImltYWdlXCIgJiYgIXNsaWRlLmhhc0Vycm9yICYmIChzdGFydCA9IHNlbGYuZ2V0VGh1bWJQb3Moc2xpZGUpKSkge1xyXG4gICAgICAgICAgZW5kID0gc2VsZi5nZXRGaXRQb3Moc2xpZGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBlZmZlY3QgPSBcImZhZGVcIjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFpvb20gYW5pbWF0aW9uXHJcbiAgICAgIC8vID09PT09PT09PT09PT09XHJcbiAgICAgIGlmIChlZmZlY3QgPT09IFwiem9vbVwiKSB7XHJcbiAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgIGVuZC5zY2FsZVggPSBlbmQud2lkdGggLyBzdGFydC53aWR0aDtcclxuICAgICAgICBlbmQuc2NhbGVZID0gZW5kLmhlaWdodCAvIHN0YXJ0LmhlaWdodDtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBhbmltYXRlIG9wYWNpdHlcclxuICAgICAgICBvcGFjaXR5ID0gc2xpZGUub3B0cy56b29tT3BhY2l0eTtcclxuXHJcbiAgICAgICAgaWYgKG9wYWNpdHkgPT0gXCJhdXRvXCIpIHtcclxuICAgICAgICAgIG9wYWNpdHkgPSBNYXRoLmFicyhzbGlkZS53aWR0aCAvIHNsaWRlLmhlaWdodCAtIHN0YXJ0LndpZHRoIC8gc3RhcnQuaGVpZ2h0KSA+IDAuMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcGFjaXR5KSB7XHJcbiAgICAgICAgICBzdGFydC5vcGFjaXR5ID0gMC4xO1xyXG4gICAgICAgICAgZW5kLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRHJhdyBpbWFnZSBhdCBzdGFydCBwb3NpdGlvblxyXG4gICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKHNsaWRlLiRjb250ZW50LnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpLCBzdGFydCk7XHJcblxyXG4gICAgICAgIGZvcmNlUmVkcmF3KHNsaWRlLiRjb250ZW50KTtcclxuXHJcbiAgICAgICAgLy8gU3RhcnQgYW5pbWF0aW9uXHJcbiAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKHNsaWRlLiRjb250ZW50LCBlbmQsIGR1cmF0aW9uLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgc2VsZi5jb21wbGV0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudXBkYXRlU2xpZGUoc2xpZGUpO1xyXG5cclxuICAgICAgLy8gU2ltcGx5IHNob3cgY29udGVudCBpZiBubyBlZmZlY3RcclxuICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgaWYgKCFlZmZlY3QpIHtcclxuICAgICAgICBzbGlkZS4kY29udGVudC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKTtcclxuXHJcbiAgICAgICAgaWYgKCFpc1JldmVhbGVkICYmIGlzTW92ZWQgJiYgc2xpZGUudHlwZSA9PT0gXCJpbWFnZVwiICYmICFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgICAgc2xpZGUuJGNvbnRlbnQuaGlkZSgpLmZhZGVJbihcImZhc3RcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUHJlcGFyZSBmb3IgQ1NTIHRyYW5zaXRvblxyXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICQuZmFuY3lib3guc3RvcCgkc2xpZGUpO1xyXG5cclxuICAgICAgLy9lZmZlY3RDbGFzc05hbWUgPSBcImZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LXNsaWRlLS1cIiArIChzbGlkZS5wb3MgPj0gc2VsZi5wcmV2UG9zID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCIpICsgXCIgZmFuY3lib3gtZngtXCIgKyBlZmZlY3Q7XHJcbiAgICAgIGVmZmVjdENsYXNzTmFtZSA9IFwiZmFuY3lib3gtc2xpZGUtLVwiICsgKHNsaWRlLnBvcyA+PSBzZWxmLnByZXZQb3MgPyBcIm5leHRcIiA6IFwicHJldmlvdXNcIikgKyBcIiBmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1meC1cIiArIGVmZmVjdDtcclxuXHJcbiAgICAgICRzbGlkZS5hZGRDbGFzcyhlZmZlY3RDbGFzc05hbWUpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIik7IC8vLmFkZENsYXNzKGVmZmVjdENsYXNzTmFtZSk7XHJcblxyXG4gICAgICBzbGlkZS4kY29udGVudC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKTtcclxuXHJcbiAgICAgIC8vIEZvcmNlIHJlZmxvd1xyXG4gICAgICBmb3JjZVJlZHJhdygkc2xpZGUpO1xyXG5cclxuICAgICAgaWYgKHNsaWRlLnR5cGUgIT09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgIHNsaWRlLiRjb250ZW50LmhpZGUoKS5zaG93KDApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoXHJcbiAgICAgICAgJHNsaWRlLFxyXG4gICAgICAgIFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIixcclxuICAgICAgICBkdXJhdGlvbixcclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAkc2xpZGUucmVtb3ZlQ2xhc3MoZWZmZWN0Q2xhc3NOYW1lKS5jc3Moe1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFwiXCIsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IFwiXCJcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cnVlXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoZWNrIGlmIHdlIGNhbiBhbmQgaGF2ZSB0byB6b29tIGZyb20gdGh1bWJuYWlsXHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGdldFRodW1iUG9zOiBmdW5jdGlvbiAoc2xpZGUpIHtcclxuICAgICAgdmFyIHJleiA9IGZhbHNlLFxyXG4gICAgICAgICR0aHVtYiA9IHNsaWRlLiR0aHVtYixcclxuICAgICAgICB0aHVtYlBvcyxcclxuICAgICAgICBidHcsXHJcbiAgICAgICAgYnJ3LFxyXG4gICAgICAgIGJidyxcclxuICAgICAgICBibHc7XHJcblxyXG4gICAgICBpZiAoISR0aHVtYiB8fCAhaW5WaWV3cG9ydCgkdGh1bWJbMF0pKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aHVtYlBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCR0aHVtYik7XHJcblxyXG4gICAgICBidHcgPSBwYXJzZUZsb2F0KCR0aHVtYi5jc3MoXCJib3JkZXItdG9wLXdpZHRoXCIpIHx8IDApO1xyXG4gICAgICBicncgPSBwYXJzZUZsb2F0KCR0aHVtYi5jc3MoXCJib3JkZXItcmlnaHQtd2lkdGhcIikgfHwgMCk7XHJcbiAgICAgIGJidyA9IHBhcnNlRmxvYXQoJHRodW1iLmNzcyhcImJvcmRlci1ib3R0b20td2lkdGhcIikgfHwgMCk7XHJcbiAgICAgIGJsdyA9IHBhcnNlRmxvYXQoJHRodW1iLmNzcyhcImJvcmRlci1sZWZ0LXdpZHRoXCIpIHx8IDApO1xyXG5cclxuICAgICAgcmV6ID0ge1xyXG4gICAgICAgIHRvcDogdGh1bWJQb3MudG9wICsgYnR3LFxyXG4gICAgICAgIGxlZnQ6IHRodW1iUG9zLmxlZnQgKyBibHcsXHJcbiAgICAgICAgd2lkdGg6IHRodW1iUG9zLndpZHRoIC0gYnJ3IC0gYmx3LFxyXG4gICAgICAgIGhlaWdodDogdGh1bWJQb3MuaGVpZ2h0IC0gYnR3IC0gYmJ3LFxyXG4gICAgICAgIHNjYWxlWDogMSxcclxuICAgICAgICBzY2FsZVk6IDFcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiB0aHVtYlBvcy53aWR0aCA+IDAgJiYgdGh1bWJQb3MuaGVpZ2h0ID4gMCA/IHJleiA6IGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBGaW5hbCBhZGp1c3RtZW50cyBhZnRlciBjdXJyZW50IGdhbGxlcnkgaXRlbSBpcyBtb3ZlZCB0byBwb3NpdGlvblxyXG4gICAgLy8gYW5kIGl0YHMgY29udGVudCBpcyBsb2FkZWRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIHNsaWRlcyA9IHt9LFxyXG4gICAgICAgICRlbDtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzTW92ZWQoKSB8fCAhY3VycmVudC5pc0xvYWRlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFjdXJyZW50LmlzQ29tcGxldGUpIHtcclxuICAgICAgICBjdXJyZW50LmlzQ29tcGxldGUgPSB0cnVlO1xyXG5cclxuICAgICAgICBjdXJyZW50LiRzbGlkZS5zaWJsaW5ncygpLnRyaWdnZXIoXCJvblJlc2V0XCIpO1xyXG5cclxuICAgICAgICBzZWxmLnByZWxvYWQoXCJpbmxpbmVcIik7XHJcblxyXG4gICAgICAgIC8vIFRyaWdnZXIgYW55IENTUyB0cmFuc2l0b24gaW5zaWRlIHRoZSBzbGlkZVxyXG4gICAgICAgIGZvcmNlUmVkcmF3KGN1cnJlbnQuJHNsaWRlKTtcclxuXHJcbiAgICAgICAgY3VycmVudC4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY29tcGxldGVcIik7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB1bm5lY2Vzc2FyeSBzbGlkZXNcclxuICAgICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uIChrZXksIHNsaWRlKSB7XHJcbiAgICAgICAgICBpZiAoc2xpZGUucG9zID49IHNlbGYuY3VyclBvcyAtIDEgJiYgc2xpZGUucG9zIDw9IHNlbGYuY3VyclBvcyArIDEpIHtcclxuICAgICAgICAgICAgc2xpZGVzW3NsaWRlLnBvc10gPSBzbGlkZTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc2xpZGUpIHtcclxuICAgICAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRzbGlkZSk7XHJcblxyXG4gICAgICAgICAgICBzbGlkZS4kc2xpZGUub2ZmKCkucmVtb3ZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNlbGYuc2xpZGVzID0gc2xpZGVzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKFwiYWZ0ZXJTaG93XCIpO1xyXG5cclxuICAgICAgLy8gQXV0b3BsYXkgZmlyc3QgaHRtbDUgdmlkZW8vYXVkaW9cclxuICAgICAgaWYgKCEhY3VycmVudC5vcHRzLnZpZGVvLmF1dG9TdGFydCkge1xyXG4gICAgICAgIGN1cnJlbnQuJHNsaWRlXHJcbiAgICAgICAgICAuZmluZChcInZpZGVvLGF1ZGlvXCIpXHJcbiAgICAgICAgICAuZmlsdGVyKFwiOnZpc2libGU6Zmlyc3RcIilcclxuICAgICAgICAgIC50cmlnZ2VyKFwicGxheVwiKVxyXG4gICAgICAgICAgLm9uZShcImVuZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKERvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgRG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLndlYmtpdEV4aXRGdWxsc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy53ZWJraXRFeGl0RnVsbHNjcmVlbigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLm5leHQoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBUcnkgdG8gZm9jdXMgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50XHJcbiAgICAgIGlmIChjdXJyZW50Lm9wdHMuYXV0b0ZvY3VzICYmIGN1cnJlbnQuY29udGVudFR5cGUgPT09IFwiaHRtbFwiKSB7XHJcbiAgICAgICAgLy8gTG9vayBmb3IgdGhlIGZpcnN0IGlucHV0IHdpdGggYXV0b2ZvY3VzIGF0dHJpYnV0ZVxyXG4gICAgICAgICRlbCA9IGN1cnJlbnQuJGNvbnRlbnQuZmluZChcImlucHV0W2F1dG9mb2N1c106ZW5hYmxlZDp2aXNpYmxlOmZpcnN0XCIpO1xyXG5cclxuICAgICAgICBpZiAoJGVsLmxlbmd0aCkge1xyXG4gICAgICAgICAgJGVsLnRyaWdnZXIoXCJmb2N1c1wiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2VsZi5mb2N1cyhudWxsLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEF2b2lkIGp1bXBpbmdcclxuICAgICAgY3VycmVudC4kc2xpZGUuc2Nyb2xsVG9wKDApLnNjcm9sbExlZnQoMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFByZWxvYWQgbmV4dCBhbmQgcHJldmlvdXMgc2xpZGVzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHByZWxvYWQ6IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBwcmV2LFxyXG4gICAgICAgIG5leHQ7XHJcblxyXG4gICAgICBpZiAoc2VsZi5ncm91cC5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBuZXh0ID0gc2VsZi5zbGlkZXNbc2VsZi5jdXJyUG9zICsgMV07XHJcbiAgICAgIHByZXYgPSBzZWxmLnNsaWRlc1tzZWxmLmN1cnJQb3MgLSAxXTtcclxuXHJcbiAgICAgIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gdHlwZSkge1xyXG4gICAgICAgIHNlbGYubG9hZFNsaWRlKHByZXYpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobmV4dCAmJiBuZXh0LnR5cGUgPT09IHR5cGUpIHtcclxuICAgICAgICBzZWxmLmxvYWRTbGlkZShuZXh0KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBUcnkgdG8gZmluZCBhbmQgZm9jdXMgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZm9jdXM6IGZ1bmN0aW9uIChlLCBmaXJzdFJ1bikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgZm9jdXNhYmxlU3RyID0gW1xyXG4gICAgICAgICAgXCJhW2hyZWZdXCIsXHJcbiAgICAgICAgICBcImFyZWFbaHJlZl1cIixcclxuICAgICAgICAgICdpbnB1dDpub3QoW2Rpc2FibGVkXSk6bm90KFt0eXBlPVwiaGlkZGVuXCJdKTpub3QoW2FyaWEtaGlkZGVuXSknLFxyXG4gICAgICAgICAgXCJzZWxlY3Q6bm90KFtkaXNhYmxlZF0pOm5vdChbYXJpYS1oaWRkZW5dKVwiLFxyXG4gICAgICAgICAgXCJ0ZXh0YXJlYTpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pXCIsXHJcbiAgICAgICAgICBcImJ1dHRvbjpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pXCIsXHJcbiAgICAgICAgICBcImlmcmFtZVwiLFxyXG4gICAgICAgICAgXCJvYmplY3RcIixcclxuICAgICAgICAgIFwiZW1iZWRcIixcclxuICAgICAgICAgIFwidmlkZW9cIixcclxuICAgICAgICAgIFwiYXVkaW9cIixcclxuICAgICAgICAgIFwiW2NvbnRlbnRlZGl0YWJsZV1cIixcclxuICAgICAgICAgICdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXhePVwiLVwiXSknXHJcbiAgICAgICAgXS5qb2luKFwiLFwiKSxcclxuICAgICAgICBmb2N1c2FibGVJdGVtcyxcclxuICAgICAgICBmb2N1c2VkSXRlbUluZGV4O1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZSB8fCAhc2VsZi5jdXJyZW50IHx8ICFzZWxmLmN1cnJlbnQuaXNDb21wbGV0ZSkge1xyXG4gICAgICAgIC8vIEZvY3VzIG9uIGFueSBlbGVtZW50IGluc2lkZSBmYW5jeWJveFxyXG4gICAgICAgIGZvY3VzYWJsZUl0ZW1zID0gc2VsZi4kcmVmcy5jb250YWluZXIuZmluZChcIio6dmlzaWJsZVwiKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBGb2N1cyBpbnNpZGUgY3VycmVudCBzbGlkZVxyXG4gICAgICAgIGZvY3VzYWJsZUl0ZW1zID0gc2VsZi5jdXJyZW50LiRzbGlkZS5maW5kKFwiKjp2aXNpYmxlXCIgKyAoZmlyc3RSdW4gPyBcIjpub3QoLmZhbmN5Ym94LWNsb3NlLXNtYWxsKVwiIDogXCJcIikpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb2N1c2FibGVJdGVtcyA9IGZvY3VzYWJsZUl0ZW1zLmZpbHRlcihmb2N1c2FibGVTdHIpLmZpbHRlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICQodGhpcykuY3NzKFwidmlzaWJpbGl0eVwiKSAhPT0gXCJoaWRkZW5cIiAmJiAhJCh0aGlzKS5oYXNDbGFzcyhcImRpc2FibGVkXCIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChmb2N1c2FibGVJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICBmb2N1c2VkSXRlbUluZGV4ID0gZm9jdXNhYmxlSXRlbXMuaW5kZXgoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XHJcblxyXG4gICAgICAgIGlmIChlICYmIGUuc2hpZnRLZXkpIHtcclxuICAgICAgICAgIC8vIEJhY2sgdGFiXHJcbiAgICAgICAgICBpZiAoZm9jdXNlZEl0ZW1JbmRleCA8IDAgfHwgZm9jdXNlZEl0ZW1JbmRleCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGZvY3VzYWJsZUl0ZW1zLmVxKGZvY3VzYWJsZUl0ZW1zLmxlbmd0aCAtIDEpLnRyaWdnZXIoXCJmb2N1c1wiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy8gT3V0c2lkZSBvciBGb3J3YXJkIHRhYlxyXG4gICAgICAgICAgaWYgKGZvY3VzZWRJdGVtSW5kZXggPCAwIHx8IGZvY3VzZWRJdGVtSW5kZXggPT0gZm9jdXNhYmxlSXRlbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXNhYmxlSXRlbXMuZXEoMCkudHJpZ2dlcihcImZvY3VzXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci50cmlnZ2VyKFwiZm9jdXNcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQWN0aXZhdGVzIGN1cnJlbnQgaW5zdGFuY2UgLSBicmluZ3MgY29udGFpbmVyIHRvIHRoZSBmcm9udCBhbmQgZW5hYmxlcyBrZXlib2FyZCxcclxuICAgIC8vIG5vdGlmaWVzIG90aGVyIGluc3RhbmNlcyBhYm91dCBkZWFjdGl2YXRpbmdcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIC8vIERlYWN0aXZhdGUgYWxsIGluc3RhbmNlc1xyXG4gICAgICAkKFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEoXCJGYW5jeUJveFwiKTtcclxuXHJcbiAgICAgICAgLy8gU2tpcCBzZWxmIGFuZCBjbG9zaW5nIGluc3RhbmNlc1xyXG4gICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5pZCAhPT0gc2VsZi5pZCAmJiAhaW5zdGFuY2UuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS50cmlnZ2VyKFwib25EZWFjdGl2YXRlXCIpO1xyXG5cclxuICAgICAgICAgIGluc3RhbmNlLnJlbW92ZUV2ZW50cygpO1xyXG5cclxuICAgICAgICAgIGluc3RhbmNlLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzZWxmLmlzVmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgICBpZiAoc2VsZi5jdXJyZW50IHx8IHNlbGYuaXNJZGxlKSB7XHJcbiAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVDb250cm9scygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoXCJvbkFjdGl2YXRlXCIpO1xyXG5cclxuICAgICAgc2VsZi5hZGRFdmVudHMoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gU3RhcnQgY2xvc2luZyBwcm9jZWR1cmVcclxuICAgIC8vIFRoaXMgd2lsbCBzdGFydCBcInpvb20tb3V0XCIgYW5pbWF0aW9uIGlmIG5lZWRlZCBhbmQgY2xlYW4gZXZlcnl0aGluZyB1cCBhZnRlcndhcmRzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBjbG9zZTogZnVuY3Rpb24gKGUsIGQpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgZWZmZWN0LFxyXG4gICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgICRjb250ZW50LFxyXG4gICAgICAgIGRvbVJlY3QsXHJcbiAgICAgICAgb3BhY2l0eSxcclxuICAgICAgICBzdGFydCxcclxuICAgICAgICBlbmQ7XHJcblxyXG4gICAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWxmLmNsZWFuVXAoZSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuaXNDbG9zaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgIC8vIElmIGJlZm9yZUNsb3NlIGNhbGxiYWNrIHByZXZlbnRzIGNsb3NpbmcsIG1ha2Ugc3VyZSBjb250ZW50IGlzIGNlbnRlcmVkXHJcbiAgICAgIGlmIChzZWxmLnRyaWdnZXIoXCJiZWZvcmVDbG9zZVwiLCBlKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICBzZWxmLmlzQ2xvc2luZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVtb3ZlIGFsbCBldmVudHNcclxuICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGluc3RhbmNlcywgdGhleSB3aWxsIGJlIHNldCBhZ2FpbiBieSBcImFjdGl2YXRlXCIgbWV0aG9kXHJcbiAgICAgIHNlbGYucmVtb3ZlRXZlbnRzKCk7XHJcblxyXG4gICAgICAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQ7XHJcbiAgICAgIGVmZmVjdCA9IGN1cnJlbnQub3B0cy5hbmltYXRpb25FZmZlY3Q7XHJcbiAgICAgIGR1cmF0aW9uID0gJC5pc051bWVyaWMoZCkgPyBkIDogZWZmZWN0ID8gY3VycmVudC5vcHRzLmFuaW1hdGlvbkR1cmF0aW9uIDogMDtcclxuXHJcbiAgICAgIGN1cnJlbnQuJHNsaWRlLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1hbmltYXRlZFwiKTtcclxuXHJcbiAgICAgIGlmIChlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKGN1cnJlbnQuJHNsaWRlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlZmZlY3QgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gUmVtb3ZlIG90aGVyIHNsaWRlc1xyXG4gICAgICBjdXJyZW50LiRzbGlkZVxyXG4gICAgICAgIC5zaWJsaW5ncygpXHJcbiAgICAgICAgLnRyaWdnZXIoXCJvblJlc2V0XCIpXHJcbiAgICAgICAgLnJlbW92ZSgpO1xyXG5cclxuICAgICAgLy8gVHJpZ2dlciBhbmltYXRpb25zXHJcbiAgICAgIGlmIChkdXJhdGlvbikge1xyXG4gICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyXHJcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1vcGVuXCIpXHJcbiAgICAgICAgICAuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1jbG9zaW5nXCIpXHJcbiAgICAgICAgICAuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLCBkdXJhdGlvbiArIFwibXNcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENsZWFuIHVwXHJcbiAgICAgIHNlbGYuaGlkZUxvYWRpbmcoY3VycmVudCk7XHJcblxyXG4gICAgICBzZWxmLmhpZGVDb250cm9scyh0cnVlKTtcclxuXHJcbiAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKCk7XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiBwb3NzaWJsZSB0byB6b29tLW91dFxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZWZmZWN0ID09PSBcInpvb21cIiAmJlxyXG4gICAgICAgICEoJGNvbnRlbnQgJiYgZHVyYXRpb24gJiYgY3VycmVudC50eXBlID09PSBcImltYWdlXCIgJiYgIXNlbGYuaXNNb3ZlZCgpICYmICFjdXJyZW50Lmhhc0Vycm9yICYmIChlbmQgPSBzZWxmLmdldFRodW1iUG9zKGN1cnJlbnQpKSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgZWZmZWN0ID0gXCJmYWRlXCI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlZmZlY3QgPT09IFwiem9vbVwiKSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKCRjb250ZW50KTtcclxuXHJcbiAgICAgICAgZG9tUmVjdCA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCRjb250ZW50KTtcclxuXHJcbiAgICAgICAgc3RhcnQgPSB7XHJcbiAgICAgICAgICB0b3A6IGRvbVJlY3QudG9wLFxyXG4gICAgICAgICAgbGVmdDogZG9tUmVjdC5sZWZ0LFxyXG4gICAgICAgICAgc2NhbGVYOiBkb21SZWN0LndpZHRoIC8gZW5kLndpZHRoLFxyXG4gICAgICAgICAgc2NhbGVZOiBkb21SZWN0LmhlaWdodCAvIGVuZC5oZWlnaHQsXHJcbiAgICAgICAgICB3aWR0aDogZW5kLndpZHRoLFxyXG4gICAgICAgICAgaGVpZ2h0OiBlbmQuaGVpZ2h0XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBhbmltYXRlIG9wYWNpdHlcclxuICAgICAgICBvcGFjaXR5ID0gY3VycmVudC5vcHRzLnpvb21PcGFjaXR5O1xyXG5cclxuICAgICAgICBpZiAob3BhY2l0eSA9PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgb3BhY2l0eSA9IE1hdGguYWJzKGN1cnJlbnQud2lkdGggLyBjdXJyZW50LmhlaWdodCAtIGVuZC53aWR0aCAvIGVuZC5oZWlnaHQpID4gMC4xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wYWNpdHkpIHtcclxuICAgICAgICAgIGVuZC5vcGFjaXR5ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCRjb250ZW50LCBzdGFydCk7XHJcblxyXG4gICAgICAgIGZvcmNlUmVkcmF3KCRjb250ZW50KTtcclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKCRjb250ZW50LCBlbmQsIGR1cmF0aW9uLCBkb25lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlZmZlY3QgJiYgZHVyYXRpb24pIHtcclxuICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoXHJcbiAgICAgICAgICBjdXJyZW50LiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIpLFxyXG4gICAgICAgICAgXCJmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1meC1cIiArIGVmZmVjdCxcclxuICAgICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgICAgZG9uZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gSWYgc2tpcCBhbmltYXRpb25cclxuICAgICAgICBpZiAoZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgc2V0VGltZW91dChkb25lLCBkdXJhdGlvbik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBGaW5hbCBhZGp1c3RtZW50cyBhZnRlciByZW1vdmluZyB0aGUgaW5zdGFuY2VcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNsZWFuVXA6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBpbnN0YW5jZSxcclxuICAgICAgICAkZm9jdXMgPSBzZWxmLmN1cnJlbnQub3B0cy4kb3JpZyxcclxuICAgICAgICB4LFxyXG4gICAgICAgIHk7XHJcblxyXG4gICAgICBzZWxmLmN1cnJlbnQuJHNsaWRlLnRyaWdnZXIoXCJvblJlc2V0XCIpO1xyXG5cclxuICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIuZW1wdHkoKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcImFmdGVyQ2xvc2VcIiwgZSk7XHJcblxyXG4gICAgICAvLyBQbGFjZSBiYWNrIGZvY3VzXHJcbiAgICAgIGlmICghIXNlbGYuY3VycmVudC5vcHRzLmJhY2tGb2N1cykge1xyXG4gICAgICAgIGlmICghJGZvY3VzIHx8ICEkZm9jdXMubGVuZ3RoIHx8ICEkZm9jdXMuaXMoXCI6dmlzaWJsZVwiKSkge1xyXG4gICAgICAgICAgJGZvY3VzID0gc2VsZi4kdHJpZ2dlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkZm9jdXMgJiYgJGZvY3VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgeCA9IHdpbmRvdy5zY3JvbGxYO1xyXG4gICAgICAgICAgeSA9IHdpbmRvdy5zY3JvbGxZO1xyXG5cclxuICAgICAgICAgICRmb2N1cy50cmlnZ2VyKFwiZm9jdXNcIik7XHJcblxyXG4gICAgICAgICAgJChcImh0bWwsIGJvZHlcIilcclxuICAgICAgICAgICAgLnNjcm9sbFRvcCh5KVxyXG4gICAgICAgICAgICAuc2Nyb2xsTGVmdCh4KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuY3VycmVudCA9IG51bGw7XHJcblxyXG4gICAgICAvLyBDaGVjayBpZiB0aGVyZSBhcmUgb3RoZXIgaW5zdGFuY2VzXHJcbiAgICAgIGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuYWN0aXZhdGUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFjdGl2ZSBjb21wZW5zYXRlLWZvci1zY3JvbGxiYXJcIik7XHJcblxyXG4gICAgICAgICQoXCIjZmFuY3lib3gtc3R5bGUtbm9zY3JvbGxcIikucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2FsbCBjYWxsYmFjayBhbmQgdHJpZ2dlciBhbiBldmVudFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHRyaWdnZXI6IGZ1bmN0aW9uIChuYW1lLCBzbGlkZSkge1xyXG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgb2JqID0gc2xpZGUgJiYgc2xpZGUub3B0cyA/IHNsaWRlIDogc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIHJlejtcclxuXHJcbiAgICAgIGlmIChvYmopIHtcclxuICAgICAgICBhcmdzLnVuc2hpZnQob2JqKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYmogPSBzZWxmO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhcmdzLnVuc2hpZnQoc2VsZik7XHJcblxyXG4gICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9iai5vcHRzW25hbWVdKSkge1xyXG4gICAgICAgIHJleiA9IG9iai5vcHRzW25hbWVdLmFwcGx5KG9iaiwgYXJncyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZXogPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlejtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5hbWUgPT09IFwiYWZ0ZXJDbG9zZVwiIHx8ICFzZWxmLiRyZWZzKSB7XHJcbiAgICAgICAgJEQudHJpZ2dlcihuYW1lICsgXCIuZmJcIiwgYXJncyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIudHJpZ2dlcihuYW1lICsgXCIuZmJcIiwgYXJncyk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gVXBkYXRlIGluZm9iYXIgdmFsdWVzLCBuYXZpZ2F0aW9uIGJ1dHRvbiBzdGF0ZXMgYW5kIHJldmVhbCBjYXB0aW9uXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB1cGRhdGVDb250cm9sczogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICBpbmRleCA9IGN1cnJlbnQuaW5kZXgsXHJcbiAgICAgICAgJGNvbnRhaW5lciA9IHNlbGYuJHJlZnMuY29udGFpbmVyLFxyXG4gICAgICAgICRjYXB0aW9uID0gc2VsZi4kcmVmcy5jYXB0aW9uLFxyXG4gICAgICAgIGNhcHRpb24gPSBjdXJyZW50Lm9wdHMuY2FwdGlvbjtcclxuXHJcbiAgICAgIC8vIFJlY2FsY3VsYXRlIGNvbnRlbnQgZGltZW5zaW9uc1xyXG4gICAgICBjdXJyZW50LiRzbGlkZS50cmlnZ2VyKFwicmVmcmVzaFwiKTtcclxuXHJcbiAgICAgIC8vIFNldCBjYXB0aW9uXHJcbiAgICAgIGlmIChjYXB0aW9uICYmIGNhcHRpb24ubGVuZ3RoKSB7XHJcbiAgICAgICAgc2VsZi4kY2FwdGlvbiA9ICRjYXB0aW9uO1xyXG5cclxuICAgICAgICAkY2FwdGlvblxyXG4gICAgICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgICAgIC5lcSgwKVxyXG4gICAgICAgICAgLmh0bWwoY2FwdGlvbik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi4kY2FwdGlvbiA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghc2VsZi5oYXNIaWRkZW5Db250cm9scyAmJiAhc2VsZi5pc0lkbGUpIHtcclxuICAgICAgICBzZWxmLnNob3dDb250cm9scygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgaW5mbyBhbmQgbmF2aWdhdGlvbiBlbGVtZW50c1xyXG4gICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1jb3VudF1cIikuaHRtbChzZWxmLmdyb3VwLmxlbmd0aCk7XHJcbiAgICAgICRjb250YWluZXIuZmluZChcIltkYXRhLWZhbmN5Ym94LWluZGV4XVwiKS5odG1sKGluZGV4ICsgMSk7XHJcblxyXG4gICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1wcmV2XVwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgIWN1cnJlbnQub3B0cy5sb29wICYmIGluZGV4IDw9IDApO1xyXG4gICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1uZXh0XVwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgIWN1cnJlbnQub3B0cy5sb29wICYmIGluZGV4ID49IHNlbGYuZ3JvdXAubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICBpZiAoY3VycmVudC50eXBlID09PSBcImltYWdlXCIpIHtcclxuICAgICAgICAvLyBSZS1lbmFibGUgYnV0dG9uczsgdXBkYXRlIGRvd25sb2FkIGJ1dHRvbiBzb3VyY2VcclxuICAgICAgICAkY29udGFpbmVyXHJcbiAgICAgICAgICAuZmluZChcIltkYXRhLWZhbmN5Ym94LXpvb21dXCIpXHJcbiAgICAgICAgICAuc2hvdygpXHJcbiAgICAgICAgICAuZW5kKClcclxuICAgICAgICAgIC5maW5kKFwiW2RhdGEtZmFuY3lib3gtZG93bmxvYWRdXCIpXHJcbiAgICAgICAgICAuYXR0cihcImhyZWZcIiwgY3VycmVudC5vcHRzLmltYWdlLnNyYyB8fCBjdXJyZW50LnNyYylcclxuICAgICAgICAgIC5zaG93KCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5vcHRzLnRvb2xiYXIpIHtcclxuICAgICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1kb3dubG9hZF0sW2RhdGEtZmFuY3lib3gtem9vbV1cIikuaGlkZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBNYWtlIHN1cmUgZm9jdXMgaXMgbm90IG9uIGRpc2FibGVkIGJ1dHRvbi9lbGVtZW50XHJcbiAgICAgIGlmICgkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKFwiOmhpZGRlbixbZGlzYWJsZWRdXCIpKSB7XHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIudHJpZ2dlcihcImZvY3VzXCIpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEhpZGUgdG9vbGJhciBhbmQgY2FwdGlvblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaGlkZUNvbnRyb2xzOiBmdW5jdGlvbiAoYW5kQ2FwdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgYXJyID0gW1wiaW5mb2JhclwiLCBcInRvb2xiYXJcIiwgXCJuYXZcIl07XHJcblxyXG4gICAgICBpZiAoYW5kQ2FwdGlvbiB8fCAhc2VsZi5jdXJyZW50Lm9wdHMucHJldmVudENhcHRpb25PdmVybGFwKSB7XHJcbiAgICAgICAgYXJyLnB1c2goXCJjYXB0aW9uXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyhcclxuICAgICAgICBhcnJcclxuICAgICAgICAubWFwKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICByZXR1cm4gXCJmYW5jeWJveC1zaG93LVwiICsgaTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5qb2luKFwiIFwiKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5oYXNIaWRkZW5Db250cm9scyA9IHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIHNob3dDb250cm9sczogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgb3B0cyA9IHNlbGYuY3VycmVudCA/IHNlbGYuY3VycmVudC5vcHRzIDogc2VsZi5vcHRzLFxyXG4gICAgICAgICRjb250YWluZXIgPSBzZWxmLiRyZWZzLmNvbnRhaW5lcjtcclxuXHJcbiAgICAgIHNlbGYuaGFzSGlkZGVuQ29udHJvbHMgPSBmYWxzZTtcclxuICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgJGNvbnRhaW5lclxyXG4gICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctdG9vbGJhclwiLCAhIShvcHRzLnRvb2xiYXIgJiYgb3B0cy5idXR0b25zKSlcclxuICAgICAgICAudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LWluZm9iYXJcIiwgISEob3B0cy5pbmZvYmFyICYmIHNlbGYuZ3JvdXAubGVuZ3RoID4gMSkpXHJcbiAgICAgICAgLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy1jYXB0aW9uXCIsICEhc2VsZi4kY2FwdGlvbilcclxuICAgICAgICAudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LW5hdlwiLCAhIShvcHRzLmFycm93cyAmJiBzZWxmLmdyb3VwLmxlbmd0aCA+IDEpKVxyXG4gICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWlzLW1vZGFsXCIsICEhb3B0cy5tb2RhbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFRvZ2dsZSB0b29sYmFyIGFuZCBjYXB0aW9uXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHRvZ2dsZUNvbnRyb2xzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGlmICh0aGlzLmhhc0hpZGRlbkNvbnRyb2xzKSB7XHJcbiAgICAgICAgdGhpcy5zaG93Q29udHJvbHMoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLmhpZGVDb250cm9scygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gICQuZmFuY3lib3ggPSB7XHJcbiAgICB2ZXJzaW9uOiBcIjMuNS43XCIsXHJcbiAgICBkZWZhdWx0czogZGVmYXVsdHMsXHJcblxyXG4gICAgLy8gR2V0IGN1cnJlbnQgaW5zdGFuY2UgYW5kIGV4ZWN1dGUgYSBjb21tYW5kLlxyXG4gICAgLy9cclxuICAgIC8vIEV4YW1wbGVzIG9mIHVzYWdlOlxyXG4gICAgLy9cclxuICAgIC8vICAgJGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG4gICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkuanVtcFRvKCAxICk7XHJcbiAgICAvLyAgICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoICdqdW1wVG8nLCAxICk7XHJcbiAgICAvLyAgICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gICAgICAgY29uc29sZS5pbmZvKCB0aGlzLmN1cnJJbmRleCApO1xyXG4gICAgLy8gICB9KTtcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGdldEluc3RhbmNlOiBmdW5jdGlvbiAoY29tbWFuZCkge1xyXG4gICAgICB2YXIgaW5zdGFuY2UgPSAkKCcuZmFuY3lib3gtY29udGFpbmVyOm5vdChcIi5mYW5jeWJveC1pcy1jbG9zaW5nXCIpOmxhc3QnKS5kYXRhKFwiRmFuY3lCb3hcIiksXHJcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBGYW5jeUJveCkge1xyXG4gICAgICAgIGlmICgkLnR5cGUoY29tbWFuZCkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgIGluc3RhbmNlW2NvbW1hbmRdLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCQudHlwZShjb21tYW5kKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBjb21tYW5kLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgb3BlbjogZnVuY3Rpb24gKGl0ZW1zLCBvcHRzLCBpbmRleCkge1xyXG4gICAgICByZXR1cm4gbmV3IEZhbmN5Qm94KGl0ZW1zLCBvcHRzLCBpbmRleCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENsb3NlIGN1cnJlbnQgb3IgYWxsIGluc3RhbmNlc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY2xvc2U6IGZ1bmN0aW9uIChhbGwpIHtcclxuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYW5kIGNsb3NlIG5leHQgaW5zdGFuY2VcclxuICAgICAgICBpZiAoYWxsID09PSB0cnVlKSB7XHJcbiAgICAgICAgICB0aGlzLmNsb3NlKGFsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENsb3NlIGFsbCBpbnN0YW5jZXMgYW5kIHVuYmluZCBhbGwgZXZlbnRzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5jbG9zZSh0cnVlKTtcclxuXHJcbiAgICAgICRELmFkZChcImJvZHlcIikub2ZmKFwiY2xpY2suZmItc3RhcnRcIiwgXCIqKlwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVHJ5IHRvIGRldGVjdCBtb2JpbGUgZGV2aWNlc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGlzTW9iaWxlOiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXHJcblxyXG4gICAgLy8gRGV0ZWN0IGlmICd0cmFuc2xhdGUzZCcgc3VwcG9ydCBpcyBhdmFpbGFibGVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdXNlM2Q6IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSAmJlxyXG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRpdikgJiZcclxuICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaXYpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIikgJiZcclxuICAgICAgICAhKGRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCAxMSlcclxuICAgICAgKTtcclxuICAgIH0pKCksXHJcblxyXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHZpc3VhbCBzdGF0ZSBvZiBhbiBlbGVtZW50XHJcbiAgICAvLyByZXR1cm5zIGFycmF5WyB0b3AsIGxlZnQsIGhvcml6b250YWwtc2NhbGUsIHZlcnRpY2FsLXNjYWxlLCBvcGFjaXR5IF1cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGdldFRyYW5zbGF0ZTogZnVuY3Rpb24gKCRlbCkge1xyXG4gICAgICB2YXIgZG9tUmVjdDtcclxuXHJcbiAgICAgIGlmICghJGVsIHx8ICEkZWwubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkb21SZWN0ID0gJGVsWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0b3A6IGRvbVJlY3QudG9wIHx8IDAsXHJcbiAgICAgICAgbGVmdDogZG9tUmVjdC5sZWZ0IHx8IDAsXHJcbiAgICAgICAgd2lkdGg6IGRvbVJlY3Qud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBkb21SZWN0LmhlaWdodCxcclxuICAgICAgICBvcGFjaXR5OiBwYXJzZUZsb2F0KCRlbC5jc3MoXCJvcGFjaXR5XCIpKVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTaG9ydGN1dCBmb3Igc2V0dGluZyBcInRyYW5zbGF0ZTNkXCIgcHJvcGVydGllcyBmb3IgZWxlbWVudFxyXG4gICAgLy8gQ2FuIHNldCBiZSB1c2VkIHRvIHNldCBvcGFjaXR5LCB0b29cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiAoJGVsLCBwcm9wcykge1xyXG4gICAgICB2YXIgc3RyID0gXCJcIixcclxuICAgICAgICBjc3MgPSB7fTtcclxuXHJcbiAgICAgIGlmICghJGVsIHx8ICFwcm9wcykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHByb3BzLmxlZnQgIT09IHVuZGVmaW5lZCB8fCBwcm9wcy50b3AgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN0ciA9XHJcbiAgICAgICAgICAocHJvcHMubGVmdCA9PT0gdW5kZWZpbmVkID8gJGVsLnBvc2l0aW9uKCkubGVmdCA6IHByb3BzLmxlZnQpICtcclxuICAgICAgICAgIFwicHgsIFwiICtcclxuICAgICAgICAgIChwcm9wcy50b3AgPT09IHVuZGVmaW5lZCA/ICRlbC5wb3NpdGlvbigpLnRvcCA6IHByb3BzLnRvcCkgK1xyXG4gICAgICAgICAgXCJweFwiO1xyXG5cclxuICAgICAgICBpZiAodGhpcy51c2UzZCkge1xyXG4gICAgICAgICAgc3RyID0gXCJ0cmFuc2xhdGUzZChcIiArIHN0ciArIFwiLCAwcHgpXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0ciA9IFwidHJhbnNsYXRlKFwiICsgc3RyICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMuc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuc2NhbGVZICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdHIgKz0gXCIgc2NhbGUoXCIgKyBwcm9wcy5zY2FsZVggKyBcIiwgXCIgKyBwcm9wcy5zY2FsZVkgKyBcIilcIjtcclxuICAgICAgfSBlbHNlIGlmIChwcm9wcy5zY2FsZVggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN0ciArPSBcIiBzY2FsZVgoXCIgKyBwcm9wcy5zY2FsZVggKyBcIilcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHN0ci5sZW5ndGgpIHtcclxuICAgICAgICBjc3MudHJhbnNmb3JtID0gc3RyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY3NzLm9wYWNpdHkgPSBwcm9wcy5vcGFjaXR5O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMud2lkdGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNzcy53aWR0aCA9IHByb3BzLndpZHRoO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjc3MuaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gJGVsLmNzcyhjc3MpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTaW1wbGUgQ1NTIHRyYW5zaXRpb24gaGFuZGxlclxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhbmltYXRlOiBmdW5jdGlvbiAoJGVsLCB0bywgZHVyYXRpb24sIGNhbGxiYWNrLCBsZWF2ZUFuaW1hdGlvbk5hbWUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGZyb207XHJcblxyXG4gICAgICBpZiAoJC5pc0Z1bmN0aW9uKGR1cmF0aW9uKSkge1xyXG4gICAgICAgIGNhbGxiYWNrID0gZHVyYXRpb247XHJcbiAgICAgICAgZHVyYXRpb24gPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnN0b3AoJGVsKTtcclxuXHJcbiAgICAgIGZyb20gPSBzZWxmLmdldFRyYW5zbGF0ZSgkZWwpO1xyXG5cclxuICAgICAgJGVsLm9uKHRyYW5zaXRpb25FbmQsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgLy8gU2tpcCBldmVudHMgZnJvbSBjaGlsZCBlbGVtZW50cyBhbmQgei1pbmRleCBjaGFuZ2VcclxuICAgICAgICBpZiAoZSAmJiBlLm9yaWdpbmFsRXZlbnQgJiYgKCEkZWwuaXMoZS5vcmlnaW5hbEV2ZW50LnRhcmdldCkgfHwgZS5vcmlnaW5hbEV2ZW50LnByb3BlcnR5TmFtZSA9PSBcInotaW5kZXhcIikpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuc3RvcCgkZWwpO1xyXG5cclxuICAgICAgICBpZiAoJC5pc051bWVyaWMoZHVyYXRpb24pKSB7XHJcbiAgICAgICAgICAkZWwuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLCBcIlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkLmlzUGxhaW5PYmplY3QodG8pKSB7XHJcbiAgICAgICAgICBpZiAodG8uc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgdG8uc2NhbGVZICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2VsZi5zZXRUcmFuc2xhdGUoJGVsLCB7XHJcbiAgICAgICAgICAgICAgdG9wOiB0by50b3AsXHJcbiAgICAgICAgICAgICAgbGVmdDogdG8ubGVmdCxcclxuICAgICAgICAgICAgICB3aWR0aDogZnJvbS53aWR0aCAqIHRvLnNjYWxlWCxcclxuICAgICAgICAgICAgICBoZWlnaHQ6IGZyb20uaGVpZ2h0ICogdG8uc2NhbGVZLFxyXG4gICAgICAgICAgICAgIHNjYWxlWDogMSxcclxuICAgICAgICAgICAgICBzY2FsZVk6IDFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChsZWF2ZUFuaW1hdGlvbk5hbWUgIT09IHRydWUpIHtcclxuICAgICAgICAgICRlbC5yZW1vdmVDbGFzcyh0byk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgY2FsbGJhY2soZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICgkLmlzTnVtZXJpYyhkdXJhdGlvbikpIHtcclxuICAgICAgICAkZWwuY3NzKFwidHJhbnNpdGlvbi1kdXJhdGlvblwiLCBkdXJhdGlvbiArIFwibXNcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFN0YXJ0IGFuaW1hdGlvbiBieSBjaGFuZ2luZyBDU1MgcHJvcGVydGllcyBvciBjbGFzcyBuYW1lXHJcbiAgICAgIGlmICgkLmlzUGxhaW5PYmplY3QodG8pKSB7XHJcbiAgICAgICAgaWYgKHRvLnNjYWxlWCAhPT0gdW5kZWZpbmVkICYmIHRvLnNjYWxlWSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBkZWxldGUgdG8ud2lkdGg7XHJcbiAgICAgICAgICBkZWxldGUgdG8uaGVpZ2h0O1xyXG5cclxuICAgICAgICAgIGlmICgkZWwucGFyZW50KCkuaGFzQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0taW1hZ2VcIikpIHtcclxuICAgICAgICAgICAgJGVsLnBhcmVudCgpLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtc2NhbGluZ1wiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCRlbCwgdG8pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICRlbC5hZGRDbGFzcyh0byk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGB0cmFuc2l0aW9uZW5kYCBjYWxsYmFjayBnZXRzIGZpcmVkXHJcbiAgICAgICRlbC5kYXRhKFxyXG4gICAgICAgIFwidGltZXJcIixcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICRlbC50cmlnZ2VyKHRyYW5zaXRpb25FbmQpO1xyXG4gICAgICAgIH0sIGR1cmF0aW9uICsgMzMpXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN0b3A6IGZ1bmN0aW9uICgkZWwsIGNhbGxDYWxsYmFjaykge1xyXG4gICAgICBpZiAoJGVsICYmICRlbC5sZW5ndGgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQoJGVsLmRhdGEoXCJ0aW1lclwiKSk7XHJcblxyXG4gICAgICAgIGlmIChjYWxsQ2FsbGJhY2spIHtcclxuICAgICAgICAgICRlbC50cmlnZ2VyKHRyYW5zaXRpb25FbmQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGVsLm9mZih0cmFuc2l0aW9uRW5kKS5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIFwiXCIpO1xyXG5cclxuICAgICAgICAkZWwucGFyZW50KCkucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1zY2FsaW5nXCIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gRGVmYXVsdCBjbGljayBoYW5kbGVyIGZvciBcImZhbmN5Ym94ZWRcIiBsaW5rc1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIGZ1bmN0aW9uIF9ydW4oZSwgb3B0cykge1xyXG4gICAgdmFyIGl0ZW1zID0gW10sXHJcbiAgICAgIGluZGV4ID0gMCxcclxuICAgICAgJHRhcmdldCxcclxuICAgICAgdmFsdWUsXHJcbiAgICAgIGluc3RhbmNlO1xyXG5cclxuICAgIC8vIEF2b2lkIG9wZW5pbmcgbXVsdGlwbGUgdGltZXNcclxuICAgIGlmIChlICYmIGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcclxuXHJcbiAgICBpZiAoZSAmJiBlLmRhdGEpIHtcclxuICAgICAgb3B0cyA9IG1lcmdlT3B0cyhlLmRhdGEub3B0aW9ucywgb3B0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgJHRhcmdldCA9IG9wdHMuJHRhcmdldCB8fCAkKGUuY3VycmVudFRhcmdldCkudHJpZ2dlcihcImJsdXJcIik7XHJcbiAgICBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuJHRyaWdnZXIgJiYgaW5zdGFuY2UuJHRyaWdnZXIuaXMoJHRhcmdldCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRzLnNlbGVjdG9yKSB7XHJcbiAgICAgIGl0ZW1zID0gJChvcHRzLnNlbGVjdG9yKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEdldCBhbGwgcmVsYXRlZCBpdGVtcyBhbmQgZmluZCBpbmRleCBmb3IgY2xpY2tlZCBvbmVcclxuICAgICAgdmFsdWUgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWZhbmN5Ym94XCIpIHx8IFwiXCI7XHJcblxyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICBpdGVtcyA9IGUuZGF0YSA/IGUuZGF0YS5pdGVtcyA6IFtdO1xyXG4gICAgICAgIGl0ZW1zID0gaXRlbXMubGVuZ3RoID8gaXRlbXMuZmlsdGVyKCdbZGF0YS1mYW5jeWJveD1cIicgKyB2YWx1ZSArICdcIl0nKSA6ICQoJ1tkYXRhLWZhbmN5Ym94PVwiJyArIHZhbHVlICsgJ1wiXScpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGl0ZW1zID0gWyR0YXJnZXRdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaW5kZXggPSAkKGl0ZW1zKS5pbmRleCgkdGFyZ2V0KTtcclxuXHJcbiAgICAvLyBTb21ldGltZXMgY3VycmVudCBpdGVtIGNhbiBub3QgYmUgZm91bmRcclxuICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgaW5kZXggPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGluc3RhbmNlID0gJC5mYW5jeWJveC5vcGVuKGl0ZW1zLCBvcHRzLCBpbmRleCk7XHJcblxyXG4gICAgLy8gU2F2ZSBsYXN0IGFjdGl2ZSBlbGVtZW50XHJcbiAgICBpbnN0YW5jZS4kdHJpZ2dlciA9ICR0YXJnZXQ7XHJcbiAgfVxyXG5cclxuICAvLyBDcmVhdGUgYSBqUXVlcnkgcGx1Z2luXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAkLmZuLmZhbmN5Ym94ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciBzZWxlY3RvcjtcclxuXHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIHNlbGVjdG9yID0gb3B0aW9ucy5zZWxlY3RvciB8fCBmYWxzZTtcclxuXHJcbiAgICBpZiAoc2VsZWN0b3IpIHtcclxuICAgICAgLy8gVXNlIGJvZHkgZWxlbWVudCBpbnN0ZWFkIG9mIGRvY3VtZW50IHNvIGl0IGV4ZWN1dGVzIGZpcnN0XHJcbiAgICAgICQoXCJib2R5XCIpXHJcbiAgICAgICAgLm9mZihcImNsaWNrLmZiLXN0YXJ0XCIsIHNlbGVjdG9yKVxyXG4gICAgICAgIC5vbihcImNsaWNrLmZiLXN0YXJ0XCIsIHNlbGVjdG9yLCB7XHJcbiAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXHJcbiAgICAgICAgfSwgX3J1bik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9mZihcImNsaWNrLmZiLXN0YXJ0XCIpLm9uKFxyXG4gICAgICAgIFwiY2xpY2suZmItc3RhcnRcIiwge1xyXG4gICAgICAgICAgaXRlbXM6IHRoaXMsXHJcbiAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcnVuXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgLy8gU2VsZiBpbml0aWFsaXppbmcgcGx1Z2luIGZvciBhbGwgZWxlbWVudHMgaGF2aW5nIGBkYXRhLWZhbmN5Ym94YCBhdHRyaWJ1dGVcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAkRC5vbihcImNsaWNrLmZiLXN0YXJ0XCIsIFwiW2RhdGEtZmFuY3lib3hdXCIsIF9ydW4pO1xyXG5cclxuICAvLyBFbmFibGUgXCJ0cmlnZ2VyIGVsZW1lbnRzXCJcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICRELm9uKFwiY2xpY2suZmItc3RhcnRcIiwgXCJbZGF0YS1mYW5jeWJveC10cmlnZ2VyXVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgJCgnW2RhdGEtZmFuY3lib3g9XCInICsgJCh0aGlzKS5hdHRyKFwiZGF0YS1mYW5jeWJveC10cmlnZ2VyXCIpICsgJ1wiXScpXHJcbiAgICAgIC5lcSgkKHRoaXMpLmF0dHIoXCJkYXRhLWZhbmN5Ym94LWluZGV4XCIpIHx8IDApXHJcbiAgICAgIC50cmlnZ2VyKFwiY2xpY2suZmItc3RhcnRcIiwge1xyXG4gICAgICAgICR0cmlnZ2VyOiAkKHRoaXMpXHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBUcmFjayBmb2N1cyBldmVudCBmb3IgYmV0dGVyIGFjY2Vzc2liaWxpdHkgc3R5bGluZ1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBidXR0b25TdHIgPSBcIi5mYW5jeWJveC1idXR0b25cIixcclxuICAgICAgZm9jdXNTdHIgPSBcImZhbmN5Ym94LWZvY3VzXCIsXHJcbiAgICAgICRwcmVzc2VkID0gbnVsbDtcclxuXHJcbiAgICAkRC5vbihcIm1vdXNlZG93biBtb3VzZXVwIGZvY3VzIGJsdXJcIiwgYnV0dG9uU3RyLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBzd2l0Y2ggKGUudHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcclxuICAgICAgICAgICRwcmVzc2VkID0gJCh0aGlzKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XHJcbiAgICAgICAgICAkcHJlc3NlZCA9IG51bGw7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiZm9jdXNpblwiOlxyXG4gICAgICAgICAgJChidXR0b25TdHIpLnJlbW92ZUNsYXNzKGZvY3VzU3RyKTtcclxuXHJcbiAgICAgICAgICBpZiAoISQodGhpcykuaXMoJHByZXNzZWQpICYmICEkKHRoaXMpLmlzKFwiW2Rpc2FibGVkXVwiKSkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKGZvY3VzU3RyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJmb2N1c291dFwiOlxyXG4gICAgICAgICAgJChidXR0b25TdHIpLnJlbW92ZUNsYXNzKGZvY3VzU3RyKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KSgpO1xyXG59KSh3aW5kb3csIGRvY3VtZW50LCBqUXVlcnkpO1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gTWVkaWFcclxuLy8gQWRkcyBhZGRpdGlvbmFsIG1lZGlhIHR5cGUgc3VwcG9ydFxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4oZnVuY3Rpb24gKCQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgLy8gT2JqZWN0IGNvbnRhaW5pbmcgcHJvcGVydGllcyBmb3IgZWFjaCBtZWRpYSB0eXBlXHJcbiAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgeW91dHViZToge1xyXG4gICAgICBtYXRjaGVyOiAvKHlvdXR1YmVcXC5jb218eW91dHVcXC5iZXx5b3V0dWJlXFwtbm9jb29raWVcXC5jb20pXFwvKHdhdGNoXFw/KC4qJik/dj18dlxcL3x1XFwvfGVtYmVkXFwvPyk/KHZpZGVvc2VyaWVzXFw/bGlzdD0oLiopfFtcXHctXXsxMX18XFw/bGlzdFR5cGU9KC4qKSZsaXN0PSguKikpKC4qKS9pLFxyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBhdXRvcGxheTogMSxcclxuICAgICAgICBhdXRvaGlkZTogMSxcclxuICAgICAgICBmczogMSxcclxuICAgICAgICByZWw6IDAsXHJcbiAgICAgICAgaGQ6IDEsXHJcbiAgICAgICAgd21vZGU6IFwidHJhbnNwYXJlbnRcIixcclxuICAgICAgICBlbmFibGVqc2FwaTogMSxcclxuICAgICAgICBodG1sNTogMVxyXG4gICAgICB9LFxyXG4gICAgICBwYXJhbVBsYWNlOiA4LFxyXG4gICAgICB0eXBlOiBcImlmcmFtZVwiLFxyXG4gICAgICB1cmw6IFwiaHR0cHM6Ly93d3cueW91dHViZS1ub2Nvb2tpZS5jb20vZW1iZWQvJDRcIixcclxuICAgICAgdGh1bWI6IFwiaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvJDQvaHFkZWZhdWx0LmpwZ1wiXHJcbiAgICB9LFxyXG5cclxuICAgIHZpbWVvOiB7XHJcbiAgICAgIG1hdGNoZXI6IC9eLit2aW1lby5jb21cXC8oLipcXC8pPyhbXFxkXSspKC4qKT8vLFxyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICBhdXRvcGxheTogMSxcclxuICAgICAgICBoZDogMSxcclxuICAgICAgICBzaG93X3RpdGxlOiAxLFxyXG4gICAgICAgIHNob3dfYnlsaW5lOiAxLFxyXG4gICAgICAgIHNob3dfcG9ydHJhaXQ6IDAsXHJcbiAgICAgICAgZnVsbHNjcmVlbjogMVxyXG4gICAgICB9LFxyXG4gICAgICBwYXJhbVBsYWNlOiAzLFxyXG4gICAgICB0eXBlOiBcImlmcmFtZVwiLFxyXG4gICAgICB1cmw6IFwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvLyQyXCJcclxuICAgIH0sXHJcblxyXG4gICAgaW5zdGFncmFtOiB7XHJcbiAgICAgIG1hdGNoZXI6IC8oaW5zdGFnclxcLmFtfGluc3RhZ3JhbVxcLmNvbSlcXC9wXFwvKFthLXpBLVowLTlfXFwtXSspXFwvPy9pLFxyXG4gICAgICB0eXBlOiBcImltYWdlXCIsXHJcbiAgICAgIHVybDogXCIvLyQxL3AvJDIvbWVkaWEvP3NpemU9bFwiXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEV4YW1wbGVzOlxyXG4gICAgLy8gaHR0cDovL21hcHMuZ29vZ2xlLmNvbS8/bGw9NDguODU3OTk1LDIuMjk0Mjk3JnNwbj0wLjAwNzY2NiwwLjAyMTEzNiZ0PW0mej0xNlxyXG4gICAgLy8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL0AzNy43ODUyMDA2LC0xMjIuNDE0NjM1NSwxNC42NXpcclxuICAgIC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9ANTIuMjExMTEyMywyLjkyMzc1NDIsNi42MXo/aGw9ZW5cclxuICAgIC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9wbGFjZS9Hb29nbGVwbGV4L0AzNy40MjIwMDQxLC0xMjIuMDgzMzQ5NCwxN3ovZGF0YT0hNG01ITNtNCExczB4MDoweDZjMjk2YzY2NjE5MzY3ZTAhOG0yITNkMzcuNDIxOTk5OCE0ZC0xMjIuMDg0MDU3MlxyXG4gICAgZ21hcF9wbGFjZToge1xyXG4gICAgICBtYXRjaGVyOiAvKG1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KFxcLlthLXpdezJ9KT8pXFwvKCgobWFwc1xcLyhwbGFjZVxcLyguKilcXC8pP1xcQCguKiksKFxcZCsuP1xcZCs/KXopKXwoXFw/bGw9KSkoLiopPy9pLFxyXG4gICAgICB0eXBlOiBcImlmcmFtZVwiLFxyXG4gICAgICB1cmw6IGZ1bmN0aW9uIChyZXopIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgXCIvL21hcHMuZ29vZ2xlLlwiICtcclxuICAgICAgICAgIHJlelsyXSArXHJcbiAgICAgICAgICBcIi8/bGw9XCIgK1xyXG4gICAgICAgICAgKHJlels5XSA/IHJlels5XSArIFwiJno9XCIgKyBNYXRoLmZsb29yKHJlelsxMF0pICsgKHJlelsxMl0gPyByZXpbMTJdLnJlcGxhY2UoL15cXC8vLCBcIiZcIikgOiBcIlwiKSA6IHJlelsxMl0gKyBcIlwiKS5yZXBsYWNlKC9cXD8vLCBcIiZcIikgK1xyXG4gICAgICAgICAgXCImb3V0cHV0PVwiICtcclxuICAgICAgICAgIChyZXpbMTJdICYmIHJlelsxMl0uaW5kZXhPZihcImxheWVyPWNcIikgPiAwID8gXCJzdmVtYmVkXCIgOiBcImVtYmVkXCIpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBFeGFtcGxlczpcclxuICAgIC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9zZWFyY2gvRW1waXJlK1N0YXRlK0J1aWxkaW5nL1xyXG4gICAgLy8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3NlYXJjaC8/YXBpPTEmcXVlcnk9Y2VudHVyeWxpbmsrZmllbGRcclxuICAgIC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9zZWFyY2gvP2FwaT0xJnF1ZXJ5PTQ3LjU5NTE1MTgsLTEyMi4zMzE2MzkzXHJcbiAgICBnbWFwX3NlYXJjaDoge1xyXG4gICAgICBtYXRjaGVyOiAvKG1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KFxcLlthLXpdezJ9KT8pXFwvKG1hcHNcXC9zZWFyY2hcXC8pKC4qKS9pLFxyXG4gICAgICB0eXBlOiBcImlmcmFtZVwiLFxyXG4gICAgICB1cmw6IGZ1bmN0aW9uIChyZXopIHtcclxuICAgICAgICByZXR1cm4gXCIvL21hcHMuZ29vZ2xlLlwiICsgcmV6WzJdICsgXCIvbWFwcz9xPVwiICsgcmV6WzVdLnJlcGxhY2UoXCJxdWVyeT1cIiwgXCJxPVwiKS5yZXBsYWNlKFwiYXBpPTFcIiwgXCJcIikgKyBcIiZvdXRwdXQ9ZW1iZWRcIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIEZvcm1hdHMgbWF0Y2hpbmcgdXJsIHRvIGZpbmFsIGZvcm1cclxuICB2YXIgZm9ybWF0ID0gZnVuY3Rpb24gKHVybCwgcmV6LCBwYXJhbXMpIHtcclxuICAgIGlmICghdXJsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwgXCJcIjtcclxuXHJcbiAgICBpZiAoJC50eXBlKHBhcmFtcykgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgcGFyYW1zID0gJC5wYXJhbShwYXJhbXMsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgICQuZWFjaChyZXosIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKFwiJFwiICsga2V5LCB2YWx1ZSB8fCBcIlwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChwYXJhbXMubGVuZ3RoKSB7XHJcbiAgICAgIHVybCArPSAodXJsLmluZGV4T2YoXCI/XCIpID4gMCA/IFwiJlwiIDogXCI/XCIpICsgcGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmw7XHJcbiAgfTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oXCJvYmplY3ROZWVkc1R5cGUuZmJcIiwgZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBpdGVtKSB7XHJcbiAgICB2YXIgdXJsID0gaXRlbS5zcmMgfHwgXCJcIixcclxuICAgICAgdHlwZSA9IGZhbHNlLFxyXG4gICAgICBtZWRpYSxcclxuICAgICAgdGh1bWIsXHJcbiAgICAgIHJleixcclxuICAgICAgcGFyYW1zLFxyXG4gICAgICB1cmxQYXJhbXMsXHJcbiAgICAgIHBhcmFtT2JqLFxyXG4gICAgICBwcm92aWRlcjtcclxuXHJcbiAgICBtZWRpYSA9ICQuZXh0ZW5kKHRydWUsIHt9LCBkZWZhdWx0cywgaXRlbS5vcHRzLm1lZGlhKTtcclxuXHJcbiAgICAvLyBMb29rIGZvciBhbnkgbWF0Y2hpbmcgbWVkaWEgdHlwZVxyXG4gICAgJC5lYWNoKG1lZGlhLCBmdW5jdGlvbiAocHJvdmlkZXJOYW1lLCBwcm92aWRlck9wdHMpIHtcclxuICAgICAgcmV6ID0gdXJsLm1hdGNoKHByb3ZpZGVyT3B0cy5tYXRjaGVyKTtcclxuXHJcbiAgICAgIGlmICghcmV6KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0eXBlID0gcHJvdmlkZXJPcHRzLnR5cGU7XHJcbiAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJOYW1lO1xyXG4gICAgICBwYXJhbU9iaiA9IHt9O1xyXG5cclxuICAgICAgaWYgKHByb3ZpZGVyT3B0cy5wYXJhbVBsYWNlICYmIHJleltwcm92aWRlck9wdHMucGFyYW1QbGFjZV0pIHtcclxuICAgICAgICB1cmxQYXJhbXMgPSByZXpbcHJvdmlkZXJPcHRzLnBhcmFtUGxhY2VdO1xyXG5cclxuICAgICAgICBpZiAodXJsUGFyYW1zWzBdID09IFwiP1wiKSB7XHJcbiAgICAgICAgICB1cmxQYXJhbXMgPSB1cmxQYXJhbXMuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXJsUGFyYW1zID0gdXJsUGFyYW1zLnNwbGl0KFwiJlwiKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgbSA9IDA7IG0gPCB1cmxQYXJhbXMubGVuZ3RoOyArK20pIHtcclxuICAgICAgICAgIHZhciBwID0gdXJsUGFyYW1zW21dLnNwbGl0KFwiPVwiLCAyKTtcclxuXHJcbiAgICAgICAgICBpZiAocC5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICBwYXJhbU9ialtwWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwWzFdLnJlcGxhY2UoL1xcKy9nLCBcIiBcIikpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcGFyYW1zID0gJC5leHRlbmQodHJ1ZSwge30sIHByb3ZpZGVyT3B0cy5wYXJhbXMsIGl0ZW0ub3B0c1twcm92aWRlck5hbWVdLCBwYXJhbU9iaik7XHJcblxyXG4gICAgICB1cmwgPVxyXG4gICAgICAgICQudHlwZShwcm92aWRlck9wdHMudXJsKSA9PT0gXCJmdW5jdGlvblwiID8gcHJvdmlkZXJPcHRzLnVybC5jYWxsKHRoaXMsIHJleiwgcGFyYW1zLCBpdGVtKSA6IGZvcm1hdChwcm92aWRlck9wdHMudXJsLCByZXosIHBhcmFtcyk7XHJcblxyXG4gICAgICB0aHVtYiA9XHJcbiAgICAgICAgJC50eXBlKHByb3ZpZGVyT3B0cy50aHVtYikgPT09IFwiZnVuY3Rpb25cIiA/IHByb3ZpZGVyT3B0cy50aHVtYi5jYWxsKHRoaXMsIHJleiwgcGFyYW1zLCBpdGVtKSA6IGZvcm1hdChwcm92aWRlck9wdHMudGh1bWIsIHJleik7XHJcblxyXG4gICAgICBpZiAocHJvdmlkZXJOYW1lID09PSBcInlvdXR1YmVcIikge1xyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC8mdD0oKFxcZCspbSk/KFxcZCspcy8sIGZ1bmN0aW9uIChtYXRjaCwgcDEsIG0sIHMpIHtcclxuICAgICAgICAgIHJldHVybiBcIiZzdGFydD1cIiArICgobSA/IHBhcnNlSW50KG0sIDEwKSAqIDYwIDogMCkgKyBwYXJzZUludChzLCAxMCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHByb3ZpZGVyTmFtZSA9PT0gXCJ2aW1lb1wiKSB7XHJcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoXCImJTIzXCIsIFwiI1wiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSWYgaXQgaXMgZm91bmQsIHRoZW4gY2hhbmdlIGNvbnRlbnQgdHlwZSBhbmQgdXBkYXRlIHRoZSB1cmxcclxuXHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICBpZiAoIWl0ZW0ub3B0cy50aHVtYiAmJiAhKGl0ZW0ub3B0cy4kdGh1bWIgJiYgaXRlbS5vcHRzLiR0aHVtYi5sZW5ndGgpKSB7XHJcbiAgICAgICAgaXRlbS5vcHRzLnRodW1iID0gdGh1bWI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlID09PSBcImlmcmFtZVwiKSB7XHJcbiAgICAgICAgaXRlbS5vcHRzID0gJC5leHRlbmQodHJ1ZSwgaXRlbS5vcHRzLCB7XHJcbiAgICAgICAgICBpZnJhbWU6IHtcclxuICAgICAgICAgICAgcHJlbG9hZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICBzY3JvbGxpbmc6IFwibm9cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQuZXh0ZW5kKGl0ZW0sIHtcclxuICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgIHNyYzogdXJsLFxyXG4gICAgICAgIG9yaWdTcmM6IGl0ZW0uc3JjLFxyXG4gICAgICAgIGNvbnRlbnRTb3VyY2U6IHByb3ZpZGVyLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiB0eXBlID09PSBcImltYWdlXCIgPyBcImltYWdlXCIgOiBwcm92aWRlciA9PSBcImdtYXBfcGxhY2VcIiB8fCBwcm92aWRlciA9PSBcImdtYXBfc2VhcmNoXCIgPyBcIm1hcFwiIDogXCJ2aWRlb1wiXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmICh1cmwpIHtcclxuICAgICAgaXRlbS50eXBlID0gaXRlbS5vcHRzLmRlZmF1bHRUeXBlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBMb2FkIFlvdVR1YmUvVmlkZW8gQVBJIG9uIHJlcXVlc3QgdG8gZGV0ZWN0IHdoZW4gdmlkZW8gZmluaXNoZWQgcGxheWluZ1xyXG4gIHZhciBWaWRlb0FQSUxvYWRlciA9IHtcclxuICAgIHlvdXR1YmU6IHtcclxuICAgICAgc3JjOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGlcIixcclxuICAgICAgY2xhc3M6IFwiWVRcIixcclxuICAgICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICAgIGxvYWRlZDogZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgdmltZW86IHtcclxuICAgICAgc3JjOiBcImh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzXCIsXHJcbiAgICAgIGNsYXNzOiBcIlZpbWVvXCIsXHJcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICBsb2FkZWQ6IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIGxvYWQ6IGZ1bmN0aW9uICh2ZW5kb3IpIHtcclxuICAgICAgdmFyIF90aGlzID0gdGhpcyxcclxuICAgICAgICBzY3JpcHQ7XHJcblxyXG4gICAgICBpZiAodGhpc1t2ZW5kb3JdLmxvYWRlZCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXMuZG9uZSh2ZW5kb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXNbdmVuZG9yXS5sb2FkaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzW3ZlbmRvcl0ubG9hZGluZyA9IHRydWU7XHJcblxyXG4gICAgICBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gICAgICBzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XHJcbiAgICAgIHNjcmlwdC5zcmMgPSB0aGlzW3ZlbmRvcl0uc3JjO1xyXG5cclxuICAgICAgaWYgKHZlbmRvciA9PT0gXCJ5b3V0dWJlXCIpIHtcclxuICAgICAgICB3aW5kb3cub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBfdGhpc1t2ZW5kb3JdLmxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICBfdGhpcy5kb25lKHZlbmRvcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgX3RoaXNbdmVuZG9yXS5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgX3RoaXMuZG9uZSh2ZW5kb3IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuICAgIH0sXHJcbiAgICBkb25lOiBmdW5jdGlvbiAodmVuZG9yKSB7XHJcbiAgICAgIHZhciBpbnN0YW5jZSwgJGVsLCBwbGF5ZXI7XHJcblxyXG4gICAgICBpZiAodmVuZG9yID09PSBcInlvdXR1YmVcIikge1xyXG4gICAgICAgIGRlbGV0ZSB3aW5kb3cub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgJGVsID0gaW5zdGFuY2UuY3VycmVudC4kY29udGVudC5maW5kKFwiaWZyYW1lXCIpO1xyXG5cclxuICAgICAgICBpZiAodmVuZG9yID09PSBcInlvdXR1YmVcIiAmJiBZVCAhPT0gdW5kZWZpbmVkICYmIFlUKSB7XHJcbiAgICAgICAgICBwbGF5ZXIgPSBuZXcgWVQuUGxheWVyKCRlbC5hdHRyKFwiaWRcIiksIHtcclxuICAgICAgICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgICAgICAgb25TdGF0ZUNoYW5nZTogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmRhdGEgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHZlbmRvciA9PT0gXCJ2aW1lb1wiICYmIFZpbWVvICE9PSB1bmRlZmluZWQgJiYgVmltZW8pIHtcclxuICAgICAgICAgIHBsYXllciA9IG5ldyBWaW1lby5QbGF5ZXIoJGVsKTtcclxuXHJcbiAgICAgICAgICBwbGF5ZXIub24oXCJlbmRlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLm5leHQoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKHtcclxuICAgIFwiYWZ0ZXJTaG93LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCkge1xyXG4gICAgICBpZiAoaW5zdGFuY2UuZ3JvdXAubGVuZ3RoID4gMSAmJiAoY3VycmVudC5jb250ZW50U291cmNlID09PSBcInlvdXR1YmVcIiB8fCBjdXJyZW50LmNvbnRlbnRTb3VyY2UgPT09IFwidmltZW9cIikpIHtcclxuICAgICAgICBWaWRlb0FQSUxvYWRlci5sb2FkKGN1cnJlbnQuY29udGVudFNvdXJjZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufSkoalF1ZXJ5KTtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIEd1ZXN0dXJlc1xyXG4vLyBBZGRzIHRvdWNoIGd1ZXN0dXJlcywgaGFuZGxlcyBjbGljayBhbmQgdGFwIGV2ZW50c1xyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4oZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsICQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgdmFyIHJlcXVlc3RBRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgLy8gaWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBzZXRUaW1lb3V0XHJcbiAgICAgIGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9KSgpO1xyXG5cclxuICB2YXIgY2FuY2VsQUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5vQ2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChpZCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSkoKTtcclxuXHJcbiAgdmFyIGdldFBvaW50ZXJYWSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gW107XHJcblxyXG4gICAgZSA9IGUub3JpZ2luYWxFdmVudCB8fCBlIHx8IHdpbmRvdy5lO1xyXG4gICAgZSA9IGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID8gZS50b3VjaGVzIDogZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA/IGUuY2hhbmdlZFRvdWNoZXMgOiBbZV07XHJcblxyXG4gICAgZm9yICh2YXIga2V5IGluIGUpIHtcclxuICAgICAgaWYgKGVba2V5XS5wYWdlWCkge1xyXG4gICAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAgIHg6IGVba2V5XS5wYWdlWCxcclxuICAgICAgICAgIHk6IGVba2V5XS5wYWdlWVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKGVba2V5XS5jbGllbnRYKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgeDogZVtrZXldLmNsaWVudFgsXHJcbiAgICAgICAgICB5OiBlW2tleV0uY2xpZW50WVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG5cclxuICB2YXIgZGlzdGFuY2UgPSBmdW5jdGlvbiAocG9pbnQyLCBwb2ludDEsIHdoYXQpIHtcclxuICAgIGlmICghcG9pbnQxIHx8ICFwb2ludDIpIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHdoYXQgPT09IFwieFwiKSB7XHJcbiAgICAgIHJldHVybiBwb2ludDIueCAtIHBvaW50MS54O1xyXG4gICAgfSBlbHNlIGlmICh3aGF0ID09PSBcInlcIikge1xyXG4gICAgICByZXR1cm4gcG9pbnQyLnkgLSBwb2ludDEueTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50Mi54IC0gcG9pbnQxLngsIDIpICsgTWF0aC5wb3cocG9pbnQyLnkgLSBwb2ludDEueSwgMikpO1xyXG4gIH07XHJcblxyXG4gIHZhciBpc0NsaWNrYWJsZSA9IGZ1bmN0aW9uICgkZWwpIHtcclxuICAgIGlmIChcclxuICAgICAgJGVsLmlzKCdhLGFyZWEsYnV0dG9uLFtyb2xlPVwiYnV0dG9uXCJdLGlucHV0LGxhYmVsLHNlbGVjdCxzdW1tYXJ5LHRleHRhcmVhLHZpZGVvLGF1ZGlvLGlmcmFtZScpIHx8XHJcbiAgICAgICQuaXNGdW5jdGlvbigkZWwuZ2V0KDApLm9uY2xpY2spIHx8XHJcbiAgICAgICRlbC5kYXRhKFwic2VsZWN0YWJsZVwiKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGZvciBhdHRyaWJ1dGVzIGxpa2UgZGF0YS1mYW5jeWJveC1uZXh0IG9yIGRhdGEtZmFuY3lib3gtY2xvc2VcclxuICAgIGZvciAodmFyIGkgPSAwLCBhdHRzID0gJGVsWzBdLmF0dHJpYnV0ZXMsIG4gPSBhdHRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICBpZiAoYXR0c1tpXS5ub2RlTmFtZS5zdWJzdHIoMCwgMTQpID09PSBcImRhdGEtZmFuY3lib3gtXCIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9O1xyXG5cclxuICB2YXIgaGFzU2Nyb2xsYmFycyA9IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgdmFyIG92ZXJmbG93WSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVtcIm92ZXJmbG93LXlcIl0sXHJcbiAgICAgIG92ZXJmbG93WCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKVtcIm92ZXJmbG93LXhcIl0sXHJcbiAgICAgIHZlcnRpY2FsID0gKG92ZXJmbG93WSA9PT0gXCJzY3JvbGxcIiB8fCBvdmVyZmxvd1kgPT09IFwiYXV0b1wiKSAmJiBlbC5zY3JvbGxIZWlnaHQgPiBlbC5jbGllbnRIZWlnaHQsXHJcbiAgICAgIGhvcml6b250YWwgPSAob3ZlcmZsb3dYID09PSBcInNjcm9sbFwiIHx8IG92ZXJmbG93WCA9PT0gXCJhdXRvXCIpICYmIGVsLnNjcm9sbFdpZHRoID4gZWwuY2xpZW50V2lkdGg7XHJcblxyXG4gICAgcmV0dXJuIHZlcnRpY2FsIHx8IGhvcml6b250YWw7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGlzU2Nyb2xsYWJsZSA9IGZ1bmN0aW9uICgkZWwpIHtcclxuICAgIHZhciByZXogPSBmYWxzZTtcclxuXHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICByZXogPSBoYXNTY3JvbGxiYXJzKCRlbC5nZXQoMCkpO1xyXG5cclxuICAgICAgaWYgKHJleikge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkZWwgPSAkZWwucGFyZW50KCk7XHJcblxyXG4gICAgICBpZiAoISRlbC5sZW5ndGggfHwgJGVsLmhhc0NsYXNzKFwiZmFuY3lib3gtc3RhZ2VcIikgfHwgJGVsLmlzKFwiYm9keVwiKSkge1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlejtcclxuICB9O1xyXG5cclxuICB2YXIgR3Vlc3R1cmVzID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgc2VsZi5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cclxuICAgIHNlbGYuJGJnID0gaW5zdGFuY2UuJHJlZnMuYmc7XHJcbiAgICBzZWxmLiRzdGFnZSA9IGluc3RhbmNlLiRyZWZzLnN0YWdlO1xyXG4gICAgc2VsZi4kY29udGFpbmVyID0gaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgIHNlbGYuZGVzdHJveSgpO1xyXG5cclxuICAgIHNlbGYuJGNvbnRhaW5lci5vbihcInRvdWNoc3RhcnQuZmIudG91Y2ggbW91c2Vkb3duLmZiLnRvdWNoXCIsICQucHJveHkoc2VsZiwgXCJvbnRvdWNoc3RhcnRcIikpO1xyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICBzZWxmLiRjb250YWluZXIub2ZmKFwiLmZiLnRvdWNoXCIpO1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9mZihcIi5mYi50b3VjaFwiKTtcclxuXHJcbiAgICBpZiAoc2VsZi5yZXF1ZXN0SWQpIHtcclxuICAgICAgY2FuY2VsQUZyYW1lKHNlbGYucmVxdWVzdElkKTtcclxuICAgICAgc2VsZi5yZXF1ZXN0SWQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZWxmLnRhcHBlZCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi50YXBwZWQpO1xyXG4gICAgICBzZWxmLnRhcHBlZCA9IG51bGw7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vbnRvdWNoc3RhcnQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAkdGFyZ2V0ID0gJChlLnRhcmdldCksXHJcbiAgICAgIGluc3RhbmNlID0gc2VsZi5pbnN0YW5jZSxcclxuICAgICAgY3VycmVudCA9IGluc3RhbmNlLmN1cnJlbnQsXHJcbiAgICAgICRzbGlkZSA9IGN1cnJlbnQuJHNsaWRlLFxyXG4gICAgICAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQsXHJcbiAgICAgIGlzVG91Y2hEZXZpY2UgPSBlLnR5cGUgPT0gXCJ0b3VjaHN0YXJ0XCI7XHJcblxyXG4gICAgLy8gRG8gbm90IHJlc3BvbmQgdG8gYm90aCAodG91Y2ggYW5kIG1vdXNlKSBldmVudHNcclxuICAgIGlmIChpc1RvdWNoRGV2aWNlKSB7XHJcbiAgICAgIHNlbGYuJGNvbnRhaW5lci5vZmYoXCJtb3VzZWRvd24uZmIudG91Y2hcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWdub3JlIHJpZ2h0IGNsaWNrXHJcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5idXR0b24gPT0gMikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWdub3JlIHRhcGluZyBvbiBsaW5rcywgYnV0dG9ucywgaW5wdXQgZWxlbWVudHNcclxuICAgIGlmICghJHNsaWRlLmxlbmd0aCB8fCAhJHRhcmdldC5sZW5ndGggfHwgaXNDbGlja2FibGUoJHRhcmdldCkgfHwgaXNDbGlja2FibGUoJHRhcmdldC5wYXJlbnQoKSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gSWdub3JlIGNsaWNrcyBvbiB0aGUgc2Nyb2xsYmFyXHJcbiAgICBpZiAoISR0YXJnZXQuaXMoXCJpbWdcIikgJiYgZS5vcmlnaW5hbEV2ZW50LmNsaWVudFggPiAkdGFyZ2V0WzBdLmNsaWVudFdpZHRoICsgJHRhcmdldC5vZmZzZXQoKS5sZWZ0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZ25vcmUgY2xpY2tzIHdoaWxlIHpvb21pbmcgb3IgY2xvc2luZ1xyXG4gICAgaWYgKCFjdXJyZW50IHx8IGluc3RhbmNlLmlzQW5pbWF0aW5nIHx8IGN1cnJlbnQuJHNsaWRlLmhhc0NsYXNzKFwiZmFuY3lib3gtYW5pbWF0ZWRcIikpIHtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYucmVhbFBvaW50cyA9IHNlbGYuc3RhcnRQb2ludHMgPSBnZXRQb2ludGVyWFkoZSk7XHJcblxyXG4gICAgaWYgKCFzZWxmLnN0YXJ0UG9pbnRzLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWxsb3cgb3RoZXIgc2NyaXB0cyB0byBjYXRjaCB0b3VjaCBldmVudCBpZiBcInRvdWNoXCIgaXMgc2V0IHRvIGZhbHNlXHJcbiAgICBpZiAoY3VycmVudC50b3VjaCkge1xyXG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYuc3RhcnRFdmVudCA9IGU7XHJcblxyXG4gICAgc2VsZi5jYW5UYXAgPSB0cnVlO1xyXG4gICAgc2VsZi4kdGFyZ2V0ID0gJHRhcmdldDtcclxuICAgIHNlbGYuJGNvbnRlbnQgPSAkY29udGVudDtcclxuICAgIHNlbGYub3B0cyA9IGN1cnJlbnQub3B0cy50b3VjaDtcclxuXHJcbiAgICBzZWxmLmlzUGFubmluZyA9IGZhbHNlO1xyXG4gICAgc2VsZi5pc1N3aXBpbmcgPSBmYWxzZTtcclxuICAgIHNlbGYuaXNab29taW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLmlzU2Nyb2xsaW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLmNhblBhbiA9IGluc3RhbmNlLmNhblBhbigpO1xyXG5cclxuICAgIHNlbGYuc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICBzZWxmLmRpc3RhbmNlWCA9IHNlbGYuZGlzdGFuY2VZID0gc2VsZi5kaXN0YW5jZSA9IDA7XHJcblxyXG4gICAgc2VsZi5jYW52YXNXaWR0aCA9IE1hdGgucm91bmQoJHNsaWRlWzBdLmNsaWVudFdpZHRoKTtcclxuICAgIHNlbGYuY2FudmFzSGVpZ2h0ID0gTWF0aC5yb3VuZCgkc2xpZGVbMF0uY2xpZW50SGVpZ2h0KTtcclxuXHJcbiAgICBzZWxmLmNvbnRlbnRMYXN0UG9zID0gbnVsbDtcclxuICAgIHNlbGYuY29udGVudFN0YXJ0UG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoc2VsZi4kY29udGVudCkgfHwge1xyXG4gICAgICB0b3A6IDAsXHJcbiAgICAgIGxlZnQ6IDBcclxuICAgIH07XHJcbiAgICBzZWxmLnNsaWRlclN0YXJ0UG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoJHNsaWRlKTtcclxuXHJcbiAgICAvLyBTaW5jZSBwb3NpdGlvbiB3aWxsIGJlIGFic29sdXRlLCBidXQgd2UgbmVlZCB0byBtYWtlIGl0IHJlbGF0aXZlIHRvIHRoZSBzdGFnZVxyXG4gICAgc2VsZi5zdGFnZVBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKGluc3RhbmNlLiRyZWZzLnN0YWdlKTtcclxuXHJcbiAgICBzZWxmLnNsaWRlclN0YXJ0UG9zLnRvcCAtPSBzZWxmLnN0YWdlUG9zLnRvcDtcclxuICAgIHNlbGYuc2xpZGVyU3RhcnRQb3MubGVmdCAtPSBzZWxmLnN0YWdlUG9zLmxlZnQ7XHJcblxyXG4gICAgc2VsZi5jb250ZW50U3RhcnRQb3MudG9wIC09IHNlbGYuc3RhZ2VQb3MudG9wO1xyXG4gICAgc2VsZi5jb250ZW50U3RhcnRQb3MubGVmdCAtPSBzZWxmLnN0YWdlUG9zLmxlZnQ7XHJcblxyXG4gICAgJChkb2N1bWVudClcclxuICAgICAgLm9mZihcIi5mYi50b3VjaFwiKVxyXG4gICAgICAub24oaXNUb3VjaERldmljZSA/IFwidG91Y2hlbmQuZmIudG91Y2ggdG91Y2hjYW5jZWwuZmIudG91Y2hcIiA6IFwibW91c2V1cC5mYi50b3VjaCBtb3VzZWxlYXZlLmZiLnRvdWNoXCIsICQucHJveHkoc2VsZiwgXCJvbnRvdWNoZW5kXCIpKVxyXG4gICAgICAub24oaXNUb3VjaERldmljZSA/IFwidG91Y2htb3ZlLmZiLnRvdWNoXCIgOiBcIm1vdXNlbW92ZS5mYi50b3VjaFwiLCAkLnByb3h5KHNlbGYsIFwib250b3VjaG1vdmVcIikpO1xyXG5cclxuICAgIGlmICgkLmZhbmN5Ym94LmlzTW9iaWxlKSB7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgc2VsZi5vbnNjcm9sbCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2tpcCBpZiBjbGlja2VkIG91dHNpZGUgdGhlIHNsaWRpbmcgYXJlYVxyXG4gICAgaWYgKCEoc2VsZi5vcHRzIHx8IHNlbGYuY2FuUGFuKSB8fCAhKCR0YXJnZXQuaXMoc2VsZi4kc3RhZ2UpIHx8IHNlbGYuJHN0YWdlLmZpbmQoJHRhcmdldCkubGVuZ3RoKSkge1xyXG4gICAgICBpZiAoJHRhcmdldC5pcyhcIi5mYW5jeWJveC1pbWFnZVwiKSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCEoJC5mYW5jeWJveC5pc01vYmlsZSAmJiAkdGFyZ2V0LnBhcmVudHMoXCIuZmFuY3lib3gtY2FwdGlvblwiKS5sZW5ndGgpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5pc1Njcm9sbGFibGUgPSBpc1Njcm9sbGFibGUoJHRhcmdldCkgfHwgaXNTY3JvbGxhYmxlKCR0YXJnZXQucGFyZW50KCkpO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZSBhbmQgdHJ5IHRvIHByZXZlbnQgZGVmYXVsdCBiZWhhdmlvciAoc2Nyb2xsaW5nKVxyXG4gICAgaWYgKCEoJC5mYW5jeWJveC5pc01vYmlsZSAmJiBzZWxmLmlzU2Nyb2xsYWJsZSkpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9uZSBmaW5nZXIgb3IgbW91c2UgY2xpY2sgLSBzd2lwZSBvciBwYW4gYW4gaW1hZ2VcclxuICAgIGlmIChzZWxmLnN0YXJ0UG9pbnRzLmxlbmd0aCA9PT0gMSB8fCBjdXJyZW50Lmhhc0Vycm9yKSB7XHJcbiAgICAgIGlmIChzZWxmLmNhblBhbikge1xyXG4gICAgICAgICQuZmFuY3lib3guc3RvcChzZWxmLiRjb250ZW50KTtcclxuXHJcbiAgICAgICAgc2VsZi5pc1Bhbm5pbmcgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuaXNTd2lwaW5nID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi4kY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtZ3JhYmJpbmdcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHdvIGZpbmdlcnMgLSB6b29tIGltYWdlXHJcbiAgICBpZiAoc2VsZi5zdGFydFBvaW50cy5sZW5ndGggPT09IDIgJiYgY3VycmVudC50eXBlID09PSBcImltYWdlXCIgJiYgKGN1cnJlbnQuaXNMb2FkZWQgfHwgY3VycmVudC4kZ2hvc3QpKSB7XHJcbiAgICAgIHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcbiAgICAgIHNlbGYuaXNTd2lwaW5nID0gZmFsc2U7XHJcbiAgICAgIHNlbGYuaXNQYW5uaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICBzZWxmLmlzWm9vbWluZyA9IHRydWU7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LnN0b3Aoc2VsZi4kY29udGVudCk7XHJcblxyXG4gICAgICBzZWxmLmNlbnRlclBvaW50U3RhcnRYID0gKHNlbGYuc3RhcnRQb2ludHNbMF0ueCArIHNlbGYuc3RhcnRQb2ludHNbMV0ueCkgKiAwLjUgLSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xyXG4gICAgICBzZWxmLmNlbnRlclBvaW50U3RhcnRZID0gKHNlbGYuc3RhcnRQb2ludHNbMF0ueSArIHNlbGYuc3RhcnRQb2ludHNbMV0ueSkgKiAwLjUgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XHJcblxyXG4gICAgICBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WCA9IChzZWxmLmNlbnRlclBvaW50U3RhcnRYIC0gc2VsZi5jb250ZW50U3RhcnRQb3MubGVmdCkgLyBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aDtcclxuICAgICAgc2VsZi5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFkgPSAoc2VsZi5jZW50ZXJQb2ludFN0YXJ0WSAtIHNlbGYuY29udGVudFN0YXJ0UG9zLnRvcCkgLyBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG4gICAgICBzZWxmLnN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycyA9IGRpc3RhbmNlKHNlbGYuc3RhcnRQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMV0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUub25zY3JvbGwgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHNlbGYuaXNTY3JvbGxpbmcgPSB0cnVlO1xyXG5cclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgc2VsZi5vbnNjcm9sbCwgdHJ1ZSk7XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vbnRvdWNobW92ZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgLy8gTWFrZSBzdXJlIHVzZXIgaGFzIG5vdCByZWxlYXNlZCBvdmVyIGlmcmFtZSBvciBkaXNhYmxlZCBlbGVtZW50XHJcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50LmJ1dHRvbnMgIT09IHVuZGVmaW5lZCAmJiBlLm9yaWdpbmFsRXZlbnQuYnV0dG9ucyA9PT0gMCkge1xyXG4gICAgICBzZWxmLm9udG91Y2hlbmQoZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2VsZi5pc1Njcm9sbGluZykge1xyXG4gICAgICBzZWxmLmNhblRhcCA9IGZhbHNlO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5uZXdQb2ludHMgPSBnZXRQb2ludGVyWFkoZSk7XHJcblxyXG4gICAgaWYgKCEoc2VsZi5vcHRzIHx8IHNlbGYuY2FuUGFuKSB8fCAhc2VsZi5uZXdQb2ludHMubGVuZ3RoIHx8ICFzZWxmLm5ld1BvaW50cy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghKHNlbGYuaXNTd2lwaW5nICYmIHNlbGYuaXNTd2lwaW5nID09PSB0cnVlKSkge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5kaXN0YW5jZVggPSBkaXN0YW5jZShzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1swXSwgXCJ4XCIpO1xyXG4gICAgc2VsZi5kaXN0YW5jZVkgPSBkaXN0YW5jZShzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1swXSwgXCJ5XCIpO1xyXG5cclxuICAgIHNlbGYuZGlzdGFuY2UgPSBkaXN0YW5jZShzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5zdGFydFBvaW50c1swXSk7XHJcblxyXG4gICAgLy8gU2tpcCBmYWxzZSBvbnRvdWNobW92ZSBldmVudHMgKENocm9tZSlcclxuICAgIGlmIChzZWxmLmRpc3RhbmNlID4gMCkge1xyXG4gICAgICBpZiAoc2VsZi5pc1N3aXBpbmcpIHtcclxuICAgICAgICBzZWxmLm9uU3dpcGUoZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5pc1Bhbm5pbmcpIHtcclxuICAgICAgICBzZWxmLm9uUGFuKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5pc1pvb21pbmcpIHtcclxuICAgICAgICBzZWxmLm9uWm9vbSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vblN3aXBlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG4gICAgICBzd2lwaW5nID0gc2VsZi5pc1N3aXBpbmcsXHJcbiAgICAgIGxlZnQgPSBzZWxmLnNsaWRlclN0YXJ0UG9zLmxlZnQgfHwgMCxcclxuICAgICAgYW5nbGU7XHJcblxyXG4gICAgLy8gSWYgZGlyZWN0aW9uIGlzIG5vdCB5ZXQgZGV0ZXJtaW5lZFxyXG4gICAgaWYgKHN3aXBpbmcgPT09IHRydWUpIHtcclxuICAgICAgLy8gV2UgbmVlZCBhdCBsZWFzdCAxMHB4IGRpc3RhbmNlIHRvIGNvcnJlY3RseSBjYWxjdWxhdGUgYW4gYW5nbGVcclxuICAgICAgaWYgKE1hdGguYWJzKHNlbGYuZGlzdGFuY2UpID4gMTApIHtcclxuICAgICAgICBzZWxmLmNhblRhcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIDwgMiAmJiBzZWxmLm9wdHMudmVydGljYWwpIHtcclxuICAgICAgICAgIHNlbGYuaXNTd2lwaW5nID0gXCJ5XCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZS5pc0RyYWdnaW5nIHx8IHNlbGYub3B0cy52ZXJ0aWNhbCA9PT0gZmFsc2UgfHwgKHNlbGYub3B0cy52ZXJ0aWNhbCA9PT0gXCJhdXRvXCIgJiYgJCh3aW5kb3cpLndpZHRoKCkgPiA4MDApKSB7XHJcbiAgICAgICAgICBzZWxmLmlzU3dpcGluZyA9IFwieFwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhbmdsZSA9IE1hdGguYWJzKChNYXRoLmF0YW4yKHNlbGYuZGlzdGFuY2VZLCBzZWxmLmRpc3RhbmNlWCkgKiAxODApIC8gTWF0aC5QSSk7XHJcblxyXG4gICAgICAgICAgc2VsZi5pc1N3aXBpbmcgPSBhbmdsZSA+IDQ1ICYmIGFuZ2xlIDwgMTM1ID8gXCJ5XCIgOiBcInhcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzZWxmLmlzU3dpcGluZyA9PT0gXCJ5XCIgJiYgJC5mYW5jeWJveC5pc01vYmlsZSAmJiBzZWxmLmlzU2Nyb2xsYWJsZSkge1xyXG4gICAgICAgICAgc2VsZi5pc1Njcm9sbGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zdGFuY2UuaXNEcmFnZ2luZyA9IHNlbGYuaXNTd2lwaW5nO1xyXG5cclxuICAgICAgICAvLyBSZXNldCBwb2ludHMgdG8gYXZvaWQganVtcGluZywgYmVjYXVzZSB3ZSBkcm9wcGVkIGZpcnN0IHN3aXBlcyB0byBjYWxjdWxhdGUgdGhlIGFuZ2xlXHJcbiAgICAgICAgc2VsZi5zdGFydFBvaW50cyA9IHNlbGYubmV3UG9pbnRzO1xyXG5cclxuICAgICAgICAkLmVhY2goaW5zdGFuY2Uuc2xpZGVzLCBmdW5jdGlvbiAoaW5kZXgsIHNsaWRlKSB7XHJcbiAgICAgICAgICB2YXIgc2xpZGVQb3MsIHN0YWdlUG9zO1xyXG5cclxuICAgICAgICAgICQuZmFuY3lib3guc3RvcChzbGlkZS4kc2xpZGUpO1xyXG5cclxuICAgICAgICAgIHNsaWRlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoc2xpZGUuJHNsaWRlKTtcclxuICAgICAgICAgIHN0YWdlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoaW5zdGFuY2UuJHJlZnMuc3RhZ2UpO1xyXG5cclxuICAgICAgICAgIHNsaWRlLiRzbGlkZVxyXG4gICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICB0cmFuc2Zvcm06IFwiXCIsXHJcbiAgICAgICAgICAgICAgb3BhY2l0eTogXCJcIixcclxuICAgICAgICAgICAgICBcInRyYW5zaXRpb24tZHVyYXRpb25cIjogXCJcIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKVxyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoZnVuY3Rpb24gKGluZGV4LCBjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gKGNsYXNzTmFtZS5tYXRjaCgvKF58XFxzKWZhbmN5Ym94LWZ4LVxcUysvZykgfHwgW10pLmpvaW4oXCIgXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoc2xpZGUucG9zID09PSBpbnN0YW5jZS5jdXJyZW50LnBvcykge1xyXG4gICAgICAgICAgICBzZWxmLnNsaWRlclN0YXJ0UG9zLnRvcCA9IHNsaWRlUG9zLnRvcCAtIHN0YWdlUG9zLnRvcDtcclxuICAgICAgICAgICAgc2VsZi5zbGlkZXJTdGFydFBvcy5sZWZ0ID0gc2xpZGVQb3MubGVmdCAtIHN0YWdlUG9zLmxlZnQ7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2xpZGUuJHNsaWRlLCB7XHJcbiAgICAgICAgICAgIHRvcDogc2xpZGVQb3MudG9wIC0gc3RhZ2VQb3MudG9wLFxyXG4gICAgICAgICAgICBsZWZ0OiBzbGlkZVBvcy5sZWZ0IC0gc3RhZ2VQb3MubGVmdFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFN0b3Agc2xpZGVzaG93XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLlNsaWRlU2hvdyAmJiBpbnN0YW5jZS5TbGlkZVNob3cuaXNBY3RpdmUpIHtcclxuICAgICAgICAgIGluc3RhbmNlLlNsaWRlU2hvdy5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RpY2t5IGVkZ2VzXHJcbiAgICBpZiAoc3dpcGluZyA9PSBcInhcIikge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgc2VsZi5kaXN0YW5jZVggPiAwICYmXHJcbiAgICAgICAgKHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIDwgMiB8fCAoc2VsZi5pbnN0YW5jZS5jdXJyZW50LmluZGV4ID09PSAwICYmICFzZWxmLmluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wKSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgbGVmdCA9IGxlZnQgKyBNYXRoLnBvdyhzZWxmLmRpc3RhbmNlWCwgMC44KTtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBzZWxmLmRpc3RhbmNlWCA8IDAgJiZcclxuICAgICAgICAoc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8XHJcbiAgICAgICAgICAoc2VsZi5pbnN0YW5jZS5jdXJyZW50LmluZGV4ID09PSBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCAtIDEgJiYgIXNlbGYuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3ApKVxyXG4gICAgICApIHtcclxuICAgICAgICBsZWZ0ID0gbGVmdCAtIE1hdGgucG93KC1zZWxmLmRpc3RhbmNlWCwgMC44KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZWZ0ID0gbGVmdCArIHNlbGYuZGlzdGFuY2VYO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5zbGlkZXJMYXN0UG9zID0ge1xyXG4gICAgICB0b3A6IHN3aXBpbmcgPT0gXCJ4XCIgPyAwIDogc2VsZi5zbGlkZXJTdGFydFBvcy50b3AgKyBzZWxmLmRpc3RhbmNlWSxcclxuICAgICAgbGVmdDogbGVmdFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoc2VsZi5yZXF1ZXN0SWQpIHtcclxuICAgICAgY2FuY2VsQUZyYW1lKHNlbGYucmVxdWVzdElkKTtcclxuXHJcbiAgICAgIHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoc2VsZi5zbGlkZXJMYXN0UG9zKSB7XHJcbiAgICAgICAgJC5lYWNoKHNlbGYuaW5zdGFuY2Uuc2xpZGVzLCBmdW5jdGlvbiAoaW5kZXgsIHNsaWRlKSB7XHJcbiAgICAgICAgICB2YXIgcG9zID0gc2xpZGUucG9zIC0gc2VsZi5pbnN0YW5jZS5jdXJyUG9zO1xyXG5cclxuICAgICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKHNsaWRlLiRzbGlkZSwge1xyXG4gICAgICAgICAgICB0b3A6IHNlbGYuc2xpZGVyTGFzdFBvcy50b3AsXHJcbiAgICAgICAgICAgIGxlZnQ6IHNlbGYuc2xpZGVyTGFzdFBvcy5sZWZ0ICsgcG9zICogc2VsZi5jYW52YXNXaWR0aCArIHBvcyAqIHNsaWRlLm9wdHMuZ3V0dGVyXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi4kY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtc2xpZGluZ1wiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vblBhbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAvLyBQcmV2ZW50IGFjY2lkZW50YWwgbW92ZW1lbnQgKHNvbWV0aW1lcywgd2hlbiB0YXBwaW5nIGNhc3VhbGx5LCBmaW5nZXIgY2FuIG1vdmUgYSBiaXQpXHJcbiAgICBpZiAoZGlzdGFuY2Uoc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYucmVhbFBvaW50c1swXSkgPCAoJC5mYW5jeWJveC5pc01vYmlsZSA/IDEwIDogNSkpIHtcclxuICAgICAgc2VsZi5zdGFydFBvaW50cyA9IHNlbGYubmV3UG9pbnRzO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuXHJcbiAgICBzZWxmLmNvbnRlbnRMYXN0UG9zID0gc2VsZi5saW1pdE1vdmVtZW50KCk7XHJcblxyXG4gICAgaWYgKHNlbGYucmVxdWVzdElkKSB7XHJcbiAgICAgIGNhbmNlbEFGcmFtZShzZWxmLnJlcXVlc3RJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5yZXF1ZXN0SWQgPSByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2VsZi4kY29udGVudCwgc2VsZi5jb250ZW50TGFzdFBvcyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBNYWtlIHBhbm5pbmcgc3RpY2t5IHRvIHRoZSBlZGdlc1xyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUubGltaXRNb3ZlbWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgY2FudmFzV2lkdGggPSBzZWxmLmNhbnZhc1dpZHRoO1xyXG4gICAgdmFyIGNhbnZhc0hlaWdodCA9IHNlbGYuY2FudmFzSGVpZ2h0O1xyXG5cclxuICAgIHZhciBkaXN0YW5jZVggPSBzZWxmLmRpc3RhbmNlWDtcclxuICAgIHZhciBkaXN0YW5jZVkgPSBzZWxmLmRpc3RhbmNlWTtcclxuXHJcbiAgICB2YXIgY29udGVudFN0YXJ0UG9zID0gc2VsZi5jb250ZW50U3RhcnRQb3M7XHJcblxyXG4gICAgdmFyIGN1cnJlbnRPZmZzZXRYID0gY29udGVudFN0YXJ0UG9zLmxlZnQ7XHJcbiAgICB2YXIgY3VycmVudE9mZnNldFkgPSBjb250ZW50U3RhcnRQb3MudG9wO1xyXG5cclxuICAgIHZhciBjdXJyZW50V2lkdGggPSBjb250ZW50U3RhcnRQb3Mud2lkdGg7XHJcbiAgICB2YXIgY3VycmVudEhlaWdodCA9IGNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG4gICAgdmFyIG1pblRyYW5zbGF0ZVgsIG1pblRyYW5zbGF0ZVksIG1heFRyYW5zbGF0ZVgsIG1heFRyYW5zbGF0ZVksIG5ld09mZnNldFgsIG5ld09mZnNldFk7XHJcblxyXG4gICAgaWYgKGN1cnJlbnRXaWR0aCA+IGNhbnZhc1dpZHRoKSB7XHJcbiAgICAgIG5ld09mZnNldFggPSBjdXJyZW50T2Zmc2V0WCArIGRpc3RhbmNlWDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld09mZnNldFggPSBjdXJyZW50T2Zmc2V0WDtcclxuICAgIH1cclxuXHJcbiAgICBuZXdPZmZzZXRZID0gY3VycmVudE9mZnNldFkgKyBkaXN0YW5jZVk7XHJcblxyXG4gICAgLy8gU2xvdyBkb3duIHByb3BvcnRpb25hbGx5IHRvIHRyYXZlbGVkIGRpc3RhbmNlXHJcbiAgICBtaW5UcmFuc2xhdGVYID0gTWF0aC5tYXgoMCwgY2FudmFzV2lkdGggKiAwLjUgLSBjdXJyZW50V2lkdGggKiAwLjUpO1xyXG4gICAgbWluVHJhbnNsYXRlWSA9IE1hdGgubWF4KDAsIGNhbnZhc0hlaWdodCAqIDAuNSAtIGN1cnJlbnRIZWlnaHQgKiAwLjUpO1xyXG5cclxuICAgIG1heFRyYW5zbGF0ZVggPSBNYXRoLm1pbihjYW52YXNXaWR0aCAtIGN1cnJlbnRXaWR0aCwgY2FudmFzV2lkdGggKiAwLjUgLSBjdXJyZW50V2lkdGggKiAwLjUpO1xyXG4gICAgbWF4VHJhbnNsYXRlWSA9IE1hdGgubWluKGNhbnZhc0hlaWdodCAtIGN1cnJlbnRIZWlnaHQsIGNhbnZhc0hlaWdodCAqIDAuNSAtIGN1cnJlbnRIZWlnaHQgKiAwLjUpO1xyXG5cclxuICAgIC8vICAgLT5cclxuICAgIGlmIChkaXN0YW5jZVggPiAwICYmIG5ld09mZnNldFggPiBtaW5UcmFuc2xhdGVYKSB7XHJcbiAgICAgIG5ld09mZnNldFggPSBtaW5UcmFuc2xhdGVYIC0gMSArIE1hdGgucG93KC1taW5UcmFuc2xhdGVYICsgY3VycmVudE9mZnNldFggKyBkaXN0YW5jZVgsIDAuOCkgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyAgICA8LVxyXG4gICAgaWYgKGRpc3RhbmNlWCA8IDAgJiYgbmV3T2Zmc2V0WCA8IG1heFRyYW5zbGF0ZVgpIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IG1heFRyYW5zbGF0ZVggKyAxIC0gTWF0aC5wb3cobWF4VHJhbnNsYXRlWCAtIGN1cnJlbnRPZmZzZXRYIC0gZGlzdGFuY2VYLCAwLjgpIHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gICBcXC9cclxuICAgIGlmIChkaXN0YW5jZVkgPiAwICYmIG5ld09mZnNldFkgPiBtaW5UcmFuc2xhdGVZKSB7XHJcbiAgICAgIG5ld09mZnNldFkgPSBtaW5UcmFuc2xhdGVZIC0gMSArIE1hdGgucG93KC1taW5UcmFuc2xhdGVZICsgY3VycmVudE9mZnNldFkgKyBkaXN0YW5jZVksIDAuOCkgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyAgIC9cXFxyXG4gICAgaWYgKGRpc3RhbmNlWSA8IDAgJiYgbmV3T2Zmc2V0WSA8IG1heFRyYW5zbGF0ZVkpIHtcclxuICAgICAgbmV3T2Zmc2V0WSA9IG1heFRyYW5zbGF0ZVkgKyAxIC0gTWF0aC5wb3cobWF4VHJhbnNsYXRlWSAtIGN1cnJlbnRPZmZzZXRZIC0gZGlzdGFuY2VZLCAwLjgpIHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG9wOiBuZXdPZmZzZXRZLFxyXG4gICAgICBsZWZ0OiBuZXdPZmZzZXRYXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUubGltaXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdmFyIGNhbnZhc1dpZHRoID0gc2VsZi5jYW52YXNXaWR0aDtcclxuICAgIHZhciBjYW52YXNIZWlnaHQgPSBzZWxmLmNhbnZhc0hlaWdodDtcclxuXHJcbiAgICBpZiAobmV3V2lkdGggPiBjYW52YXNXaWR0aCkge1xyXG4gICAgICBuZXdPZmZzZXRYID0gbmV3T2Zmc2V0WCA+IDAgPyAwIDogbmV3T2Zmc2V0WDtcclxuICAgICAgbmV3T2Zmc2V0WCA9IG5ld09mZnNldFggPCBjYW52YXNXaWR0aCAtIG5ld1dpZHRoID8gY2FudmFzV2lkdGggLSBuZXdXaWR0aCA6IG5ld09mZnNldFg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBDZW50ZXIgaG9yaXpvbnRhbGx5XHJcbiAgICAgIG5ld09mZnNldFggPSBNYXRoLm1heCgwLCBjYW52YXNXaWR0aCAvIDIgLSBuZXdXaWR0aCAvIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChuZXdIZWlnaHQgPiBjYW52YXNIZWlnaHQpIHtcclxuICAgICAgbmV3T2Zmc2V0WSA9IG5ld09mZnNldFkgPiAwID8gMCA6IG5ld09mZnNldFk7XHJcbiAgICAgIG5ld09mZnNldFkgPSBuZXdPZmZzZXRZIDwgY2FudmFzSGVpZ2h0IC0gbmV3SGVpZ2h0ID8gY2FudmFzSGVpZ2h0IC0gbmV3SGVpZ2h0IDogbmV3T2Zmc2V0WTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIENlbnRlciB2ZXJ0aWNhbGx5XHJcbiAgICAgIG5ld09mZnNldFkgPSBNYXRoLm1heCgwLCBjYW52YXNIZWlnaHQgLyAyIC0gbmV3SGVpZ2h0IC8gMik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG9wOiBuZXdPZmZzZXRZLFxyXG4gICAgICBsZWZ0OiBuZXdPZmZzZXRYXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUub25ab29tID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBjdXJyZW50IGRpc3RhbmNlIGJldHdlZW4gcG9pbnRzIHRvIGdldCBwaW5jaCByYXRpbyBhbmQgbmV3IHdpZHRoIGFuZCBoZWlnaHRcclxuICAgIHZhciBjb250ZW50U3RhcnRQb3MgPSBzZWxmLmNvbnRlbnRTdGFydFBvcztcclxuXHJcbiAgICB2YXIgY3VycmVudFdpZHRoID0gY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG4gICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBjb250ZW50U3RhcnRQb3MuaGVpZ2h0O1xyXG5cclxuICAgIHZhciBjdXJyZW50T2Zmc2V0WCA9IGNvbnRlbnRTdGFydFBvcy5sZWZ0O1xyXG4gICAgdmFyIGN1cnJlbnRPZmZzZXRZID0gY29udGVudFN0YXJ0UG9zLnRvcDtcclxuXHJcbiAgICB2YXIgZW5kRGlzdGFuY2VCZXR3ZWVuRmluZ2VycyA9IGRpc3RhbmNlKHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLm5ld1BvaW50c1sxXSk7XHJcblxyXG4gICAgdmFyIHBpbmNoUmF0aW8gPSBlbmREaXN0YW5jZUJldHdlZW5GaW5nZXJzIC8gc2VsZi5zdGFydERpc3RhbmNlQmV0d2VlbkZpbmdlcnM7XHJcblxyXG4gICAgdmFyIG5ld1dpZHRoID0gTWF0aC5mbG9vcihjdXJyZW50V2lkdGggKiBwaW5jaFJhdGlvKTtcclxuICAgIHZhciBuZXdIZWlnaHQgPSBNYXRoLmZsb29yKGN1cnJlbnRIZWlnaHQgKiBwaW5jaFJhdGlvKTtcclxuXHJcbiAgICAvLyBUaGlzIGlzIHRoZSB0cmFuc2xhdGlvbiBkdWUgdG8gcGluY2gtem9vbWluZ1xyXG4gICAgdmFyIHRyYW5zbGF0ZUZyb21ab29taW5nWCA9IChjdXJyZW50V2lkdGggLSBuZXdXaWR0aCkgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WDtcclxuICAgIHZhciB0cmFuc2xhdGVGcm9tWm9vbWluZ1kgPSAoY3VycmVudEhlaWdodCAtIG5ld0hlaWdodCkgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WTtcclxuXHJcbiAgICAvLyBQb2ludCBiZXR3ZWVuIHRoZSB0d28gdG91Y2hlc1xyXG4gICAgdmFyIGNlbnRlclBvaW50RW5kWCA9IChzZWxmLm5ld1BvaW50c1swXS54ICsgc2VsZi5uZXdQb2ludHNbMV0ueCkgLyAyIC0gJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcclxuICAgIHZhciBjZW50ZXJQb2ludEVuZFkgPSAoc2VsZi5uZXdQb2ludHNbMF0ueSArIHNlbGYubmV3UG9pbnRzWzFdLnkpIC8gMiAtICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuXHJcbiAgICAvLyBBbmQgdGhpcyBpcyB0aGUgdHJhbnNsYXRpb24gZHVlIHRvIHRyYW5zbGF0aW9uIG9mIHRoZSBjZW50ZXJwb2ludFxyXG4gICAgLy8gYmV0d2VlbiB0aGUgdHdvIGZpbmdlcnNcclxuICAgIHZhciB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdYID0gY2VudGVyUG9pbnRFbmRYIC0gc2VsZi5jZW50ZXJQb2ludFN0YXJ0WDtcclxuICAgIHZhciB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZID0gY2VudGVyUG9pbnRFbmRZIC0gc2VsZi5jZW50ZXJQb2ludFN0YXJ0WTtcclxuXHJcbiAgICAvLyBUaGUgbmV3IG9mZnNldCBpcyB0aGUgb2xkL2N1cnJlbnQgb25lIHBsdXMgdGhlIHRvdGFsIHRyYW5zbGF0aW9uXHJcbiAgICB2YXIgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYICsgKHRyYW5zbGF0ZUZyb21ab29taW5nWCArIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1gpO1xyXG4gICAgdmFyIG5ld09mZnNldFkgPSBjdXJyZW50T2Zmc2V0WSArICh0cmFuc2xhdGVGcm9tWm9vbWluZ1kgKyB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZKTtcclxuXHJcbiAgICB2YXIgbmV3UG9zID0ge1xyXG4gICAgICB0b3A6IG5ld09mZnNldFksXHJcbiAgICAgIGxlZnQ6IG5ld09mZnNldFgsXHJcbiAgICAgIHNjYWxlWDogcGluY2hSYXRpbyxcclxuICAgICAgc2NhbGVZOiBwaW5jaFJhdGlvXHJcbiAgICB9O1xyXG5cclxuICAgIHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG4gICAgc2VsZi5uZXdXaWR0aCA9IG5ld1dpZHRoO1xyXG4gICAgc2VsZi5uZXdIZWlnaHQgPSBuZXdIZWlnaHQ7XHJcblxyXG4gICAgc2VsZi5jb250ZW50TGFzdFBvcyA9IG5ld1BvcztcclxuXHJcbiAgICBpZiAoc2VsZi5yZXF1ZXN0SWQpIHtcclxuICAgICAgY2FuY2VsQUZyYW1lKHNlbGYucmVxdWVzdElkKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShzZWxmLiRjb250ZW50LCBzZWxmLmNvbnRlbnRMYXN0UG9zKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUub250b3VjaGVuZCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgdmFyIHN3aXBpbmcgPSBzZWxmLmlzU3dpcGluZztcclxuICAgIHZhciBwYW5uaW5nID0gc2VsZi5pc1Bhbm5pbmc7XHJcbiAgICB2YXIgem9vbWluZyA9IHNlbGYuaXNab29taW5nO1xyXG4gICAgdmFyIHNjcm9sbGluZyA9IHNlbGYuaXNTY3JvbGxpbmc7XHJcblxyXG4gICAgc2VsZi5lbmRQb2ludHMgPSBnZXRQb2ludGVyWFkoZSk7XHJcbiAgICBzZWxmLmRNcyA9IE1hdGgubWF4KG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc2VsZi5zdGFydFRpbWUsIDEpO1xyXG5cclxuICAgIHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWdyYWJiaW5nXCIpO1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9mZihcIi5mYi50b3VjaFwiKTtcclxuXHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHNlbGYub25zY3JvbGwsIHRydWUpO1xyXG5cclxuICAgIGlmIChzZWxmLnJlcXVlc3RJZCkge1xyXG4gICAgICBjYW5jZWxBRnJhbWUoc2VsZi5yZXF1ZXN0SWQpO1xyXG5cclxuICAgICAgc2VsZi5yZXF1ZXN0SWQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYuaXNTd2lwaW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLmlzUGFubmluZyA9IGZhbHNlO1xyXG4gICAgc2VsZi5pc1pvb21pbmcgPSBmYWxzZTtcclxuICAgIHNlbGYuaXNTY3JvbGxpbmcgPSBmYWxzZTtcclxuXHJcbiAgICBzZWxmLmluc3RhbmNlLmlzRHJhZ2dpbmcgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoc2VsZi5jYW5UYXApIHtcclxuICAgICAgcmV0dXJuIHNlbGYub25UYXAoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5zcGVlZCA9IDEwMDtcclxuXHJcbiAgICAvLyBTcGVlZCBpbiBweC9tc1xyXG4gICAgc2VsZi52ZWxvY2l0eVggPSAoc2VsZi5kaXN0YW5jZVggLyBzZWxmLmRNcykgKiAwLjU7XHJcbiAgICBzZWxmLnZlbG9jaXR5WSA9IChzZWxmLmRpc3RhbmNlWSAvIHNlbGYuZE1zKSAqIDAuNTtcclxuXHJcbiAgICBpZiAocGFubmluZykge1xyXG4gICAgICBzZWxmLmVuZFBhbm5pbmcoKTtcclxuICAgIH0gZWxzZSBpZiAoem9vbWluZykge1xyXG4gICAgICBzZWxmLmVuZFpvb21pbmcoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNlbGYuZW5kU3dpcGluZyhzd2lwaW5nLCBzY3JvbGxpbmcpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybjtcclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLmVuZFN3aXBpbmcgPSBmdW5jdGlvbiAoc3dpcGluZywgc2Nyb2xsaW5nKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgIHJldCA9IGZhbHNlLFxyXG4gICAgICBsZW4gPSBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCxcclxuICAgICAgZGlzdGFuY2VYID0gTWF0aC5hYnMoc2VsZi5kaXN0YW5jZVgpLFxyXG4gICAgICBjYW5BZHZhbmNlID0gc3dpcGluZyA9PSBcInhcIiAmJiBsZW4gPiAxICYmICgoc2VsZi5kTXMgPiAxMzAgJiYgZGlzdGFuY2VYID4gMTApIHx8IGRpc3RhbmNlWCA+IDUwKSxcclxuICAgICAgc3BlZWRYID0gMzAwO1xyXG5cclxuICAgIHNlbGYuc2xpZGVyTGFzdFBvcyA9IG51bGw7XHJcblxyXG4gICAgLy8gQ2xvc2UgaWYgc3dpcGVkIHZlcnRpY2FsbHkgLyBuYXZpZ2F0ZSBpZiBob3Jpem9udGFsbHlcclxuICAgIGlmIChzd2lwaW5nID09IFwieVwiICYmICFzY3JvbGxpbmcgJiYgTWF0aC5hYnMoc2VsZi5kaXN0YW5jZVkpID4gNTApIHtcclxuICAgICAgLy8gQ29udGludWUgdmVydGljYWwgbW92ZW1lbnRcclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgIHNlbGYuaW5zdGFuY2UuY3VycmVudC4kc2xpZGUsIHtcclxuICAgICAgICAgIHRvcDogc2VsZi5zbGlkZXJTdGFydFBvcy50b3AgKyBzZWxmLmRpc3RhbmNlWSArIHNlbGYudmVsb2NpdHlZICogMTUwLFxyXG4gICAgICAgICAgb3BhY2l0eTogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgMjAwXHJcbiAgICAgICk7XHJcbiAgICAgIHJldCA9IHNlbGYuaW5zdGFuY2UuY2xvc2UodHJ1ZSwgMjUwKTtcclxuICAgIH0gZWxzZSBpZiAoY2FuQWR2YW5jZSAmJiBzZWxmLmRpc3RhbmNlWCA+IDApIHtcclxuICAgICAgcmV0ID0gc2VsZi5pbnN0YW5jZS5wcmV2aW91cyhzcGVlZFgpO1xyXG4gICAgfSBlbHNlIGlmIChjYW5BZHZhbmNlICYmIHNlbGYuZGlzdGFuY2VYIDwgMCkge1xyXG4gICAgICByZXQgPSBzZWxmLmluc3RhbmNlLm5leHQoc3BlZWRYKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmV0ID09PSBmYWxzZSAmJiAoc3dpcGluZyA9PSBcInhcIiB8fCBzd2lwaW5nID09IFwieVwiKSkge1xyXG4gICAgICBzZWxmLmluc3RhbmNlLmNlbnRlclNsaWRlKDIwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtc2xpZGluZ1wiKTtcclxuICB9O1xyXG5cclxuICAvLyBMaW1pdCBwYW5uaW5nIGZyb20gZWRnZXNcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLmVuZFBhbm5pbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgIG5ld09mZnNldFgsXHJcbiAgICAgIG5ld09mZnNldFksXHJcbiAgICAgIG5ld1BvcztcclxuXHJcbiAgICBpZiAoIXNlbGYuY29udGVudExhc3RQb3MpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZWxmLm9wdHMubW9tZW50dW0gPT09IGZhbHNlIHx8IHNlbGYuZE1zID4gMzUwKSB7XHJcbiAgICAgIG5ld09mZnNldFggPSBzZWxmLmNvbnRlbnRMYXN0UG9zLmxlZnQ7XHJcbiAgICAgIG5ld09mZnNldFkgPSBzZWxmLmNvbnRlbnRMYXN0UG9zLnRvcDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIENvbnRpbnVlIG1vdmVtZW50XHJcbiAgICAgIG5ld09mZnNldFggPSBzZWxmLmNvbnRlbnRMYXN0UG9zLmxlZnQgKyBzZWxmLnZlbG9jaXR5WCAqIDUwMDtcclxuICAgICAgbmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudExhc3RQb3MudG9wICsgc2VsZi52ZWxvY2l0eVkgKiA1MDA7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3UG9zID0gc2VsZi5saW1pdFBvc2l0aW9uKG5ld09mZnNldFgsIG5ld09mZnNldFksIHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoLCBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQpO1xyXG5cclxuICAgIG5ld1Bvcy53aWR0aCA9IHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG4gICAgbmV3UG9zLmhlaWdodCA9IHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcbiAgICAkLmZhbmN5Ym94LmFuaW1hdGUoc2VsZi4kY29udGVudCwgbmV3UG9zLCAzNjYpO1xyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUuZW5kWm9vbWluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgY3VycmVudCA9IHNlbGYuaW5zdGFuY2UuY3VycmVudDtcclxuXHJcbiAgICB2YXIgbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgbmV3UG9zLCByZXNldDtcclxuXHJcbiAgICB2YXIgbmV3V2lkdGggPSBzZWxmLm5ld1dpZHRoO1xyXG4gICAgdmFyIG5ld0hlaWdodCA9IHNlbGYubmV3SGVpZ2h0O1xyXG5cclxuICAgIGlmICghc2VsZi5jb250ZW50TGFzdFBvcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbmV3T2Zmc2V0WCA9IHNlbGYuY29udGVudExhc3RQb3MubGVmdDtcclxuICAgIG5ld09mZnNldFkgPSBzZWxmLmNvbnRlbnRMYXN0UG9zLnRvcDtcclxuXHJcbiAgICByZXNldCA9IHtcclxuICAgICAgdG9wOiBuZXdPZmZzZXRZLFxyXG4gICAgICBsZWZ0OiBuZXdPZmZzZXRYLFxyXG4gICAgICB3aWR0aDogbmV3V2lkdGgsXHJcbiAgICAgIGhlaWdodDogbmV3SGVpZ2h0LFxyXG4gICAgICBzY2FsZVg6IDEsXHJcbiAgICAgIHNjYWxlWTogMVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBSZXNldCBzY2FsZXgvc2NhbGVZIHZhbHVlczsgdGhpcyBoZWxwcyBmb3IgcGVyZm9tYW5jZSBhbmQgZG9lcyBub3QgYnJlYWsgYW5pbWF0aW9uXHJcbiAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShzZWxmLiRjb250ZW50LCByZXNldCk7XHJcblxyXG4gICAgaWYgKG5ld1dpZHRoIDwgc2VsZi5jYW52YXNXaWR0aCAmJiBuZXdIZWlnaHQgPCBzZWxmLmNhbnZhc0hlaWdodCkge1xyXG4gICAgICBzZWxmLmluc3RhbmNlLnNjYWxlVG9GaXQoMTUwKTtcclxuICAgIH0gZWxzZSBpZiAobmV3V2lkdGggPiBjdXJyZW50LndpZHRoIHx8IG5ld0hlaWdodCA+IGN1cnJlbnQuaGVpZ2h0KSB7XHJcbiAgICAgIHNlbGYuaW5zdGFuY2Uuc2NhbGVUb0FjdHVhbChzZWxmLmNlbnRlclBvaW50U3RhcnRYLCBzZWxmLmNlbnRlclBvaW50U3RhcnRZLCAxNTApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3UG9zID0gc2VsZi5saW1pdFBvc2l0aW9uKG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKHNlbGYuJGNvbnRlbnQsIG5ld1BvcywgMTUwKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9uVGFwID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIHZhciAkdGFyZ2V0ID0gJChlLnRhcmdldCk7XHJcblxyXG4gICAgdmFyIGluc3RhbmNlID0gc2VsZi5pbnN0YW5jZTtcclxuICAgIHZhciBjdXJyZW50ID0gaW5zdGFuY2UuY3VycmVudDtcclxuXHJcbiAgICB2YXIgZW5kUG9pbnRzID0gKGUgJiYgZ2V0UG9pbnRlclhZKGUpKSB8fCBzZWxmLnN0YXJ0UG9pbnRzO1xyXG5cclxuICAgIHZhciB0YXBYID0gZW5kUG9pbnRzWzBdID8gZW5kUG9pbnRzWzBdLnggLSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpIC0gc2VsZi5zdGFnZVBvcy5sZWZ0IDogMDtcclxuICAgIHZhciB0YXBZID0gZW5kUG9pbnRzWzBdID8gZW5kUG9pbnRzWzBdLnkgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSBzZWxmLnN0YWdlUG9zLnRvcCA6IDA7XHJcblxyXG4gICAgdmFyIHdoZXJlO1xyXG5cclxuICAgIHZhciBwcm9jZXNzID0gZnVuY3Rpb24gKHByZWZpeCkge1xyXG4gICAgICB2YXIgYWN0aW9uID0gY3VycmVudC5vcHRzW3ByZWZpeF07XHJcblxyXG4gICAgICBpZiAoJC5pc0Z1bmN0aW9uKGFjdGlvbikpIHtcclxuICAgICAgICBhY3Rpb24gPSBhY3Rpb24uYXBwbHkoaW5zdGFuY2UsIFtjdXJyZW50LCBlXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKGFjdGlvbikge1xyXG4gICAgICAgIGNhc2UgXCJjbG9zZVwiOlxyXG4gICAgICAgICAgaW5zdGFuY2UuY2xvc2Uoc2VsZi5zdGFydEV2ZW50KTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcInRvZ2dsZUNvbnRyb2xzXCI6XHJcbiAgICAgICAgICBpbnN0YW5jZS50b2dnbGVDb250cm9scygpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwibmV4dFwiOlxyXG4gICAgICAgICAgaW5zdGFuY2UubmV4dCgpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwibmV4dE9yQ2xvc2VcIjpcclxuICAgICAgICAgIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLm5leHQoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmNsb3NlKHNlbGYuc3RhcnRFdmVudCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJ6b29tXCI6XHJcbiAgICAgICAgICBpZiAoY3VycmVudC50eXBlID09IFwiaW1hZ2VcIiAmJiAoY3VycmVudC5pc0xvYWRlZCB8fCBjdXJyZW50LiRnaG9zdCkpIHtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlLmNhblBhbigpKSB7XHJcbiAgICAgICAgICAgICAgaW5zdGFuY2Uuc2NhbGVUb0ZpdCgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmlzU2NhbGVkRG93bigpKSB7XHJcbiAgICAgICAgICAgICAgaW5zdGFuY2Uuc2NhbGVUb0FjdHVhbCh0YXBYLCB0YXBZKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgaW5zdGFuY2UuY2xvc2Uoc2VsZi5zdGFydEV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIElnbm9yZSByaWdodCBjbGlja1xyXG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuYnV0dG9uID09IDIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNraXAgaWYgY2xpY2tlZCBvbiB0aGUgc2Nyb2xsYmFyXHJcbiAgICBpZiAoISR0YXJnZXQuaXMoXCJpbWdcIikgJiYgdGFwWCA+ICR0YXJnZXRbMF0uY2xpZW50V2lkdGggKyAkdGFyZ2V0Lm9mZnNldCgpLmxlZnQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIHdoZXJlIGlzIGNsaWNrZWRcclxuICAgIGlmICgkdGFyZ2V0LmlzKFwiLmZhbmN5Ym94LWJnLC5mYW5jeWJveC1pbm5lciwuZmFuY3lib3gtb3V0ZXIsLmZhbmN5Ym94LWNvbnRhaW5lclwiKSkge1xyXG4gICAgICB3aGVyZSA9IFwiT3V0c2lkZVwiO1xyXG4gICAgfSBlbHNlIGlmICgkdGFyZ2V0LmlzKFwiLmZhbmN5Ym94LXNsaWRlXCIpKSB7XHJcbiAgICAgIHdoZXJlID0gXCJTbGlkZVwiO1xyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgaW5zdGFuY2UuY3VycmVudC4kY29udGVudCAmJlxyXG4gICAgICBpbnN0YW5jZS5jdXJyZW50LiRjb250ZW50XHJcbiAgICAgIC5maW5kKCR0YXJnZXQpXHJcbiAgICAgIC5hZGRCYWNrKClcclxuICAgICAgLmZpbHRlcigkdGFyZ2V0KS5sZW5ndGhcclxuICAgICkge1xyXG4gICAgICB3aGVyZSA9IFwiQ29udGVudFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBkb3VibGUgdGFwXHJcbiAgICBpZiAoc2VsZi50YXBwZWQpIHtcclxuICAgICAgLy8gU3RvcCBwcmV2aW91c2x5IGNyZWF0ZWQgc2luZ2xlIHRhcFxyXG4gICAgICBjbGVhclRpbWVvdXQoc2VsZi50YXBwZWQpO1xyXG4gICAgICBzZWxmLnRhcHBlZCA9IG51bGw7XHJcblxyXG4gICAgICAvLyBTa2lwIGlmIGRpc3RhbmNlIGJldHdlZW4gdGFwcyBpcyB0b28gYmlnXHJcbiAgICAgIGlmIChNYXRoLmFicyh0YXBYIC0gc2VsZi50YXBYKSA+IDUwIHx8IE1hdGguYWJzKHRhcFkgLSBzZWxmLnRhcFkpID4gNTApIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gT0ssIG5vdyB3ZSBhc3N1bWUgdGhhdCB0aGlzIGlzIGEgZG91YmxlLXRhcFxyXG4gICAgICBwcm9jZXNzKFwiZGJsY2xpY2tcIiArIHdoZXJlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFNpbmdsZSB0YXAgd2lsbCBiZSBwcm9jZXNzZWQgaWYgdXNlciBoYXMgbm90IGNsaWNrZWQgc2Vjb25kIHRpbWUgd2l0aGluIDMwMG1zXHJcbiAgICAgIC8vIG9yIHRoZXJlIGlzIG5vIG5lZWQgdG8gd2FpdCBmb3IgZG91YmxlLXRhcFxyXG4gICAgICBzZWxmLnRhcFggPSB0YXBYO1xyXG4gICAgICBzZWxmLnRhcFkgPSB0YXBZO1xyXG5cclxuICAgICAgaWYgKGN1cnJlbnQub3B0c1tcImRibGNsaWNrXCIgKyB3aGVyZV0gJiYgY3VycmVudC5vcHRzW1wiZGJsY2xpY2tcIiArIHdoZXJlXSAhPT0gY3VycmVudC5vcHRzW1wiY2xpY2tcIiArIHdoZXJlXSkge1xyXG4gICAgICAgIHNlbGYudGFwcGVkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzZWxmLnRhcHBlZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc0FuaW1hdGluZykge1xyXG4gICAgICAgICAgICBwcm9jZXNzKFwiY2xpY2tcIiArIHdoZXJlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHByb2Nlc3MoXCJjbGlja1wiICsgd2hlcmUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgJChkb2N1bWVudClcclxuICAgIC5vbihcIm9uQWN0aXZhdGUuZmJcIiwgZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIGlmIChpbnN0YW5jZSAmJiAhaW5zdGFuY2UuR3Vlc3R1cmVzKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuR3Vlc3R1cmVzID0gbmV3IEd1ZXN0dXJlcyhpbnN0YW5jZSk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICAub24oXCJiZWZvcmVDbG9zZS5mYlwiLCBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLkd1ZXN0dXJlcykge1xyXG4gICAgICAgIGluc3RhbmNlLkd1ZXN0dXJlcy5kZXN0cm95KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG59KSh3aW5kb3csIGRvY3VtZW50LCBqUXVlcnkpO1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gU2xpZGVTaG93XHJcbi8vIEVuYWJsZXMgc2xpZGVzaG93IGZ1bmN0aW9uYWxpdHlcclxuLy9cclxuLy8gRXhhbXBsZSBvZiB1c2FnZTpcclxuLy8gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpLlNsaWRlU2hvdy5zdGFydCgpXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgJC5leHRlbmQodHJ1ZSwgJC5mYW5jeWJveC5kZWZhdWx0cywge1xyXG4gICAgYnRuVHBsOiB7XHJcbiAgICAgIHNsaWRlU2hvdzogJzxidXR0b24gZGF0YS1mYW5jeWJveC1wbGF5IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiIHRpdGxlPVwie3tQTEFZX1NUQVJUfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNNi41IDUuNHYxMy4ybDExLTYuNnpcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTguMzMgNS43NWgyLjJ2MTIuNWgtMi4yVjUuNzV6bTUuMTUgMGgyLjJ2MTIuNWgtMi4yVjUuNzV6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPC9idXR0b24+XCJcclxuICAgIH0sXHJcbiAgICBzbGlkZVNob3c6IHtcclxuICAgICAgYXV0b1N0YXJ0OiBmYWxzZSxcclxuICAgICAgc3BlZWQ6IDMwMDAsXHJcbiAgICAgIHByb2dyZXNzOiB0cnVlXHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHZhciBTbGlkZVNob3cgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH07XHJcblxyXG4gICQuZXh0ZW5kKFNsaWRlU2hvdy5wcm90b3R5cGUsIHtcclxuICAgIHRpbWVyOiBudWxsLFxyXG4gICAgaXNBY3RpdmU6IGZhbHNlLFxyXG4gICAgJGJ1dHRvbjogbnVsbCxcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2UsXHJcbiAgICAgICAgb3B0cyA9IGluc3RhbmNlLmdyb3VwW2luc3RhbmNlLmN1cnJJbmRleF0ub3B0cy5zbGlkZVNob3c7XHJcblxyXG4gICAgICBzZWxmLiRidXR0b24gPSBpbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1wbGF5XVwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZWxmLnRvZ2dsZSgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8ICFvcHRzKSB7XHJcbiAgICAgICAgc2VsZi4kYnV0dG9uLmhpZGUoKTtcclxuICAgICAgfSBlbHNlIGlmIChvcHRzLnByb2dyZXNzKSB7XHJcbiAgICAgICAgc2VsZi4kcHJvZ3Jlc3MgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtcHJvZ3Jlc3NcIj48L2Rpdj4nKS5hcHBlbmRUbyhpbnN0YW5jZS4kcmVmcy5pbm5lcik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2V0OiBmdW5jdGlvbiAoZm9yY2UpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGluc3RhbmNlID0gc2VsZi5pbnN0YW5jZSxcclxuICAgICAgICBjdXJyZW50ID0gaW5zdGFuY2UuY3VycmVudDtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHJlYWNoZWQgbGFzdCBlbGVtZW50XHJcbiAgICAgIGlmIChjdXJyZW50ICYmIChmb3JjZSA9PT0gdHJ1ZSB8fCBjdXJyZW50Lm9wdHMubG9vcCB8fCBpbnN0YW5jZS5jdXJySW5kZXggPCBpbnN0YW5jZS5ncm91cC5sZW5ndGggLSAxKSkge1xyXG4gICAgICAgIGlmIChzZWxmLmlzQWN0aXZlICYmIGN1cnJlbnQuY29udGVudFR5cGUgIT09IFwidmlkZW9cIikge1xyXG4gICAgICAgICAgaWYgKHNlbGYuJHByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZShzZWxmLiRwcm9ncmVzcy5zaG93KCksIHtcclxuICAgICAgICAgICAgICBzY2FsZVg6IDFcclxuICAgICAgICAgICAgfSwgY3VycmVudC5vcHRzLnNsaWRlU2hvdy5zcGVlZCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2VsZi50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wICYmIGluc3RhbmNlLmN1cnJlbnQuaW5kZXggPT0gaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgIGluc3RhbmNlLmp1bXBUbygwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIGN1cnJlbnQub3B0cy5zbGlkZVNob3cuc3BlZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLnN0b3AoKTtcclxuICAgICAgICBpbnN0YW5jZS5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG4gICAgICAgIGluc3RhbmNlLnNob3dDb250cm9scygpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLnRpbWVyKTtcclxuXHJcbiAgICAgIHNlbGYudGltZXIgPSBudWxsO1xyXG5cclxuICAgICAgaWYgKHNlbGYuJHByb2dyZXNzKSB7XHJcbiAgICAgICAgc2VsZi4kcHJvZ3Jlc3MucmVtb3ZlQXR0cihcInN0eWxlXCIpLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBzdGFydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuaW5zdGFuY2UuY3VycmVudDtcclxuXHJcbiAgICAgIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgc2VsZi4kYnV0dG9uXHJcbiAgICAgICAgICAuYXR0cihcInRpdGxlXCIsIChjdXJyZW50Lm9wdHMuaTE4bltjdXJyZW50Lm9wdHMubGFuZ10gfHwgY3VycmVudC5vcHRzLmkxOG4uZW4pLlBMQVlfU1RPUClcclxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiKVxyXG4gICAgICAgICAgLmFkZENsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1wYXVzZVwiKTtcclxuXHJcbiAgICAgICAgc2VsZi5pc0FjdGl2ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmIChjdXJyZW50LmlzQ29tcGxldGUpIHtcclxuICAgICAgICAgIHNlbGYuc2V0KHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi5pbnN0YW5jZS50cmlnZ2VyKFwib25TbGlkZVNob3dDaGFuZ2VcIiwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc3RvcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuaW5zdGFuY2UuY3VycmVudDtcclxuXHJcbiAgICAgIHNlbGYuY2xlYXIoKTtcclxuXHJcbiAgICAgIHNlbGYuJGJ1dHRvblxyXG4gICAgICAgIC5hdHRyKFwidGl0bGVcIiwgKGN1cnJlbnQub3B0cy5pMThuW2N1cnJlbnQub3B0cy5sYW5nXSB8fCBjdXJyZW50Lm9wdHMuaTE4bi5lbikuUExBWV9TVEFSVClcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLXBhdXNlXCIpXHJcbiAgICAgICAgLmFkZENsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1wbGF5XCIpO1xyXG5cclxuICAgICAgc2VsZi5pc0FjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgc2VsZi5pbnN0YW5jZS50cmlnZ2VyKFwib25TbGlkZVNob3dDaGFuZ2VcIiwgZmFsc2UpO1xyXG5cclxuICAgICAgaWYgKHNlbGYuJHByb2dyZXNzKSB7XHJcbiAgICAgICAgc2VsZi4kcHJvZ3Jlc3MucmVtb3ZlQXR0cihcInN0eWxlXCIpLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB0b2dnbGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNBY3RpdmUpIHtcclxuICAgICAgICBzZWxmLnN0b3AoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLnN0YXJ0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJvbkluaXQuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIGlmIChpbnN0YW5jZSAmJiAhaW5zdGFuY2UuU2xpZGVTaG93KSB7XHJcbiAgICAgICAgaW5zdGFuY2UuU2xpZGVTaG93ID0gbmV3IFNsaWRlU2hvdyhpbnN0YW5jZSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJiZWZvcmVTaG93LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCwgZmlyc3RSdW4pIHtcclxuICAgICAgdmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcbiAgICAgIGlmIChmaXJzdFJ1bikge1xyXG4gICAgICAgIGlmIChTbGlkZVNob3cgJiYgY3VycmVudC5vcHRzLnNsaWRlU2hvdy5hdXRvU3RhcnQpIHtcclxuICAgICAgICAgIFNsaWRlU2hvdy5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgICAgU2xpZGVTaG93LmNsZWFyKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJhZnRlclNob3cuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBjdXJyZW50KSB7XHJcbiAgICAgIHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG4gICAgICBpZiAoU2xpZGVTaG93ICYmIFNsaWRlU2hvdy5pc0FjdGl2ZSkge1xyXG4gICAgICAgIFNsaWRlU2hvdy5zZXQoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBcImFmdGVyS2V5ZG93bi5mYlwiOiBmdW5jdGlvbiAoZSwgaW5zdGFuY2UsIGN1cnJlbnQsIGtleXByZXNzLCBrZXljb2RlKSB7XHJcbiAgICAgIHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG4gICAgICAvLyBcIlBcIiBvciBTcGFjZWJhclxyXG4gICAgICBpZiAoU2xpZGVTaG93ICYmIGN1cnJlbnQub3B0cy5zbGlkZVNob3cgJiYgKGtleWNvZGUgPT09IDgwIHx8IGtleWNvZGUgPT09IDMyKSAmJiAhJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5pcyhcImJ1dHRvbixhLGlucHV0XCIpKSB7XHJcbiAgICAgICAga2V5cHJlc3MucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgU2xpZGVTaG93LnRvZ2dsZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYmVmb3JlQ2xvc2UuZmIgb25EZWFjdGl2YXRlLmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSkge1xyXG4gICAgICB2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuICAgICAgaWYgKFNsaWRlU2hvdykge1xyXG4gICAgICAgIFNsaWRlU2hvdy5zdG9wKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gUGFnZSBWaXNpYmlsaXR5IEFQSSB0byBwYXVzZSBzbGlkZXNob3cgd2hlbiB3aW5kb3cgaXMgbm90IGFjdGl2ZVxyXG4gICQoZG9jdW1lbnQpLm9uKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCksXHJcbiAgICAgIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcbiAgICBpZiAoU2xpZGVTaG93ICYmIFNsaWRlU2hvdy5pc0FjdGl2ZSkge1xyXG4gICAgICBpZiAoZG9jdW1lbnQuaGlkZGVuKSB7XHJcbiAgICAgICAgU2xpZGVTaG93LmNsZWFyKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgU2xpZGVTaG93LnNldCgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pKGRvY3VtZW50LCBqUXVlcnkpO1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gRnVsbFNjcmVlblxyXG4vLyBBZGRzIGZ1bGxzY3JlZW4gZnVuY3Rpb25hbGl0eVxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4oZnVuY3Rpb24gKGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIC8vIENvbGxlY3Rpb24gb2YgbWV0aG9kcyBzdXBwb3J0ZWQgYnkgdXNlciBicm93c2VyXHJcbiAgdmFyIGZuID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBmbk1hcCA9IFtcclxuICAgICAgW1wicmVxdWVzdEZ1bGxzY3JlZW5cIiwgXCJleGl0RnVsbHNjcmVlblwiLCBcImZ1bGxzY3JlZW5FbGVtZW50XCIsIFwiZnVsbHNjcmVlbkVuYWJsZWRcIiwgXCJmdWxsc2NyZWVuY2hhbmdlXCIsIFwiZnVsbHNjcmVlbmVycm9yXCJdLFxyXG4gICAgICAvLyBuZXcgV2ViS2l0XHJcbiAgICAgIFtcclxuICAgICAgICBcIndlYmtpdFJlcXVlc3RGdWxsc2NyZWVuXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRFeGl0RnVsbHNjcmVlblwiLFxyXG4gICAgICAgIFwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnRcIixcclxuICAgICAgICBcIndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRmdWxsc2NyZWVuZXJyb3JcIlxyXG4gICAgICBdLFxyXG4gICAgICAvLyBvbGQgV2ViS2l0IChTYWZhcmkgNS4xKVxyXG4gICAgICBbXHJcbiAgICAgICAgXCJ3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlblwiLFxyXG4gICAgICAgIFwid2Via2l0Q2FuY2VsRnVsbFNjcmVlblwiLFxyXG4gICAgICAgIFwid2Via2l0Q3VycmVudEZ1bGxTY3JlZW5FbGVtZW50XCIsXHJcbiAgICAgICAgXCJ3ZWJraXRDYW5jZWxGdWxsU2NyZWVuXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsXHJcbiAgICAgICAgXCJ3ZWJraXRmdWxsc2NyZWVuZXJyb3JcIlxyXG4gICAgICBdLFxyXG4gICAgICBbXHJcbiAgICAgICAgXCJtb3pSZXF1ZXN0RnVsbFNjcmVlblwiLFxyXG4gICAgICAgIFwibW96Q2FuY2VsRnVsbFNjcmVlblwiLFxyXG4gICAgICAgIFwibW96RnVsbFNjcmVlbkVsZW1lbnRcIixcclxuICAgICAgICBcIm1vekZ1bGxTY3JlZW5FbmFibGVkXCIsXHJcbiAgICAgICAgXCJtb3pmdWxsc2NyZWVuY2hhbmdlXCIsXHJcbiAgICAgICAgXCJtb3pmdWxsc2NyZWVuZXJyb3JcIlxyXG4gICAgICBdLFxyXG4gICAgICBbXCJtc1JlcXVlc3RGdWxsc2NyZWVuXCIsIFwibXNFeGl0RnVsbHNjcmVlblwiLCBcIm1zRnVsbHNjcmVlbkVsZW1lbnRcIiwgXCJtc0Z1bGxzY3JlZW5FbmFibGVkXCIsIFwiTVNGdWxsc2NyZWVuQ2hhbmdlXCIsIFwiTVNGdWxsc2NyZWVuRXJyb3JcIl1cclxuICAgIF07XHJcblxyXG4gICAgdmFyIHJldCA9IHt9O1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZm5NYXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIHZhbCA9IGZuTWFwW2ldO1xyXG5cclxuICAgICAgaWYgKHZhbCAmJiB2YWxbMV0gaW4gZG9jdW1lbnQpIHtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgcmV0W2ZuTWFwWzBdW2pdXSA9IHZhbFtqXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSkoKTtcclxuXHJcbiAgaWYgKGZuKSB7XHJcbiAgICB2YXIgRnVsbFNjcmVlbiA9IHtcclxuICAgICAgcmVxdWVzdDogZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICBlbGVtID0gZWxlbSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGVsZW1bZm4ucmVxdWVzdEZ1bGxzY3JlZW5dKGVsZW0uQUxMT1dfS0VZQk9BUkRfSU5QVVQpO1xyXG4gICAgICB9LFxyXG4gICAgICBleGl0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZG9jdW1lbnRbZm4uZXhpdEZ1bGxzY3JlZW5dKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRvZ2dsZTogZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICBlbGVtID0gZWxlbSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbigpKSB7XHJcbiAgICAgICAgICB0aGlzLmV4aXQoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5yZXF1ZXN0KGVsZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgaXNGdWxsc2NyZWVuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVsZW1lbnRdKTtcclxuICAgICAgfSxcclxuICAgICAgZW5hYmxlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBCb29sZWFuKGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbmFibGVkXSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC5leHRlbmQodHJ1ZSwgJC5mYW5jeWJveC5kZWZhdWx0cywge1xyXG4gICAgICBidG5UcGw6IHtcclxuICAgICAgICBmdWxsU2NyZWVuOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW4gY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1mc2VudGVyXCIgdGl0bGU9XCJ7e0ZVTExfU0NSRUVOfX1cIj4nICtcclxuICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk03IDE0SDV2NWg1di0ySDd2LTN6bS0yLTRoMlY3aDNWNUg1djV6bTEyIDdoLTN2Mmg1di01aC0ydjN6TTE0IDV2MmgzdjNoMlY1aC01elwiLz48L3N2Zz4nICtcclxuICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk01IDE2aDN2M2gydi01SDV6bTMtOEg1djJoNVY1SDh6bTYgMTFoMnYtM2gzdi0yaC01em0yLTExVjVoLTJ2NWg1Vjh6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICB9LFxyXG4gICAgICBmdWxsU2NyZWVuOiB7XHJcbiAgICAgICAgYXV0b1N0YXJ0OiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbihmbi5mdWxsc2NyZWVuY2hhbmdlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBpc0Z1bGxzY3JlZW4gPSBGdWxsU2NyZWVuLmlzRnVsbHNjcmVlbigpLFxyXG4gICAgICAgIGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgLy8gSWYgaW1hZ2UgaXMgem9vbWluZywgdGhlbiBmb3JjZSB0byBzdG9wIGFuZCByZXBvc2l0aW9uIHByb3Blcmx5XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmN1cnJlbnQgJiYgaW5zdGFuY2UuY3VycmVudC50eXBlID09PSBcImltYWdlXCIgJiYgaW5zdGFuY2UuaXNBbmltYXRpbmcpIHtcclxuICAgICAgICAgIGluc3RhbmNlLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgaW5zdGFuY2UudXBkYXRlKHRydWUsIHRydWUsIDApO1xyXG5cclxuICAgICAgICAgIGlmICghaW5zdGFuY2UuaXNDb21wbGV0ZSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zdGFuY2UudHJpZ2dlcihcIm9uRnVsbHNjcmVlbkNoYW5nZVwiLCBpc0Z1bGxzY3JlZW4pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS4kcmVmcy5jb250YWluZXIudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1pcy1mdWxsc2NyZWVuXCIsIGlzRnVsbHNjcmVlbik7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLiRyZWZzLnRvb2xiYXJcclxuICAgICAgICAgIC5maW5kKFwiW2RhdGEtZmFuY3lib3gtZnVsbHNjcmVlbl1cIilcclxuICAgICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tZnNlbnRlclwiLCAhaXNGdWxsc2NyZWVuKVxyXG4gICAgICAgICAgLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1mc2V4aXRcIiwgaXNGdWxsc2NyZWVuKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAkKGRvY3VtZW50KS5vbih7XHJcbiAgICBcIm9uSW5pdC5mYlwiOiBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuICAgICAgdmFyICRjb250YWluZXI7XHJcblxyXG4gICAgICBpZiAoIWZuKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtZnVsbHNjcmVlbl1cIikucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmdyb3VwW2luc3RhbmNlLmN1cnJJbmRleF0ub3B0cy5mdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgJGNvbnRhaW5lciA9IGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgJGNvbnRhaW5lci5vbihcImNsaWNrLmZiLWZ1bGxzY3JlZW5cIiwgXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICBGdWxsU2NyZWVuLnRvZ2dsZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoaW5zdGFuY2Uub3B0cy5mdWxsU2NyZWVuICYmIGluc3RhbmNlLm9wdHMuZnVsbFNjcmVlbi5hdXRvU3RhcnQgPT09IHRydWUpIHtcclxuICAgICAgICAgIEZ1bGxTY3JlZW4ucmVxdWVzdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRXhwb3NlIEFQSVxyXG4gICAgICAgIGluc3RhbmNlLkZ1bGxTY3JlZW4gPSBGdWxsU2NyZWVuO1xyXG4gICAgICB9IGVsc2UgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtZnVsbHNjcmVlbl1cIikuaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYWZ0ZXJLZXlkb3duLmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCwga2V5cHJlc3MsIGtleWNvZGUpIHtcclxuICAgICAgLy8gXCJGXCJcclxuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLkZ1bGxTY3JlZW4gJiYga2V5Y29kZSA9PT0gNzApIHtcclxuICAgICAgICBrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS5GdWxsU2NyZWVuLnRvZ2dsZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYmVmb3JlQ2xvc2UuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5GdWxsU2NyZWVuICYmIGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci5oYXNDbGFzcyhcImZhbmN5Ym94LWlzLWZ1bGxzY3JlZW5cIikpIHtcclxuICAgICAgICBGdWxsU2NyZWVuLmV4aXQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KShkb2N1bWVudCwgalF1ZXJ5KTtcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIFRodW1ic1xyXG4vLyBEaXNwbGF5cyB0aHVtYm5haWxzIGluIGEgZ3JpZFxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4oZnVuY3Rpb24gKGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIHZhciBDTEFTUyA9IFwiZmFuY3lib3gtdGh1bWJzXCIsXHJcbiAgICBDTEFTU19BQ1RJVkUgPSBDTEFTUyArIFwiLWFjdGl2ZVwiO1xyXG5cclxuICAvLyBNYWtlIHN1cmUgdGhlcmUgYXJlIGRlZmF1bHQgdmFsdWVzXHJcbiAgJC5mYW5jeWJveC5kZWZhdWx0cyA9ICQuZXh0ZW5kKFxyXG4gICAgdHJ1ZSwge1xyXG4gICAgICBidG5UcGw6IHtcclxuICAgICAgICB0aHVtYnM6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtdGh1bWJzIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tdGh1bWJzXCIgdGl0bGU9XCJ7e1RIVU1CU319XCI+JyArXHJcbiAgICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTQuNTkgMTQuNTloMy43NnYzLjc2aC0zLjc2di0zLjc2em0tNC40NyAwaDMuNzZ2My43NmgtMy43NnYtMy43NnptLTQuNDcgMGgzLjc2djMuNzZINS42NXYtMy43NnptOC45NC00LjQ3aDMuNzZ2My43NmgtMy43NnYtMy43NnptLTQuNDcgMGgzLjc2djMuNzZoLTMuNzZ2LTMuNzZ6bS00LjQ3IDBoMy43NnYzLjc2SDUuNjV2LTMuNzZ6bTguOTQtNC40N2gzLjc2djMuNzZoLTMuNzZWNS42NXptLTQuNDcgMGgzLjc2djMuNzZoLTMuNzZWNS42NXptLTQuNDcgMGgzLjc2djMuNzZINS42NVY1LjY1elwiLz48L3N2Zz4nICtcclxuICAgICAgICAgIFwiPC9idXR0b24+XCJcclxuICAgICAgfSxcclxuICAgICAgdGh1bWJzOiB7XHJcbiAgICAgICAgYXV0b1N0YXJ0OiBmYWxzZSwgLy8gRGlzcGxheSB0aHVtYm5haWxzIG9uIG9wZW5pbmdcclxuICAgICAgICBoaWRlT25DbG9zZTogdHJ1ZSwgLy8gSGlkZSB0aHVtYm5haWwgZ3JpZCB3aGVuIGNsb3NpbmcgYW5pbWF0aW9uIHN0YXJ0c1xyXG4gICAgICAgIHBhcmVudEVsOiBcIi5mYW5jeWJveC1jb250YWluZXJcIiwgLy8gQ29udGFpbmVyIGlzIGluamVjdGVkIGludG8gdGhpcyBlbGVtZW50XHJcbiAgICAgICAgYXhpczogXCJ5XCIgLy8gVmVydGljYWwgKHkpIG9yIGhvcml6b250YWwgKHgpIHNjcm9sbGluZ1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgJC5mYW5jeWJveC5kZWZhdWx0c1xyXG4gICk7XHJcblxyXG4gIHZhciBGYW5jeVRodW1icyA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xyXG4gICAgdGhpcy5pbml0KGluc3RhbmNlKTtcclxuICB9O1xyXG5cclxuICAkLmV4dGVuZChGYW5jeVRodW1icy5wcm90b3R5cGUsIHtcclxuICAgICRidXR0b246IG51bGwsXHJcbiAgICAkZ3JpZDogbnVsbCxcclxuICAgICRsaXN0OiBudWxsLFxyXG4gICAgaXNWaXNpYmxlOiBmYWxzZSxcclxuICAgIGlzQWN0aXZlOiBmYWxzZSxcclxuXHJcbiAgICBpbml0OiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGdyb3VwID0gaW5zdGFuY2UuZ3JvdXAsXHJcbiAgICAgICAgZW5hYmxlZCA9IDA7XHJcblxyXG4gICAgICBzZWxmLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgIHNlbGYub3B0cyA9IGdyb3VwW2luc3RhbmNlLmN1cnJJbmRleF0ub3B0cy50aHVtYnM7XHJcblxyXG4gICAgICBpbnN0YW5jZS5UaHVtYnMgPSBzZWxmO1xyXG5cclxuICAgICAgc2VsZi4kYnV0dG9uID0gaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtdGh1bWJzXVwiKTtcclxuXHJcbiAgICAgIC8vIEVuYWJsZSB0aHVtYnMgaWYgYXQgbGVhc3QgdHdvIGdyb3VwIGl0ZW1zIGhhdmUgdGh1bWJuYWlsc1xyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBpZiAoZ3JvdXBbaV0udGh1bWIpIHtcclxuICAgICAgICAgIGVuYWJsZWQrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmFibGVkID4gMSkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZW5hYmxlZCA+IDEgJiYgISFzZWxmLm9wdHMpIHtcclxuICAgICAgICBzZWxmLiRidXR0b24ucmVtb3ZlQXR0cihcInN0eWxlXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgc2VsZi50b2dnbGUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi5pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi4kYnV0dG9uLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGluc3RhbmNlID0gc2VsZi5pbnN0YW5jZSxcclxuICAgICAgICBwYXJlbnRFbCA9IHNlbGYub3B0cy5wYXJlbnRFbCxcclxuICAgICAgICBsaXN0ID0gW10sXHJcbiAgICAgICAgc3JjO1xyXG5cclxuICAgICAgaWYgKCFzZWxmLiRncmlkKSB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIG1haW4gZWxlbWVudFxyXG4gICAgICAgIHNlbGYuJGdyaWQgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIENMQVNTICsgXCIgXCIgKyBDTEFTUyArIFwiLVwiICsgc2VsZi5vcHRzLmF4aXMgKyAnXCI+PC9kaXY+JykuYXBwZW5kVG8oXHJcbiAgICAgICAgICBpbnN0YW5jZS4kcmVmcy5jb250YWluZXJcclxuICAgICAgICAgIC5maW5kKHBhcmVudEVsKVxyXG4gICAgICAgICAgLmFkZEJhY2soKVxyXG4gICAgICAgICAgLmZpbHRlcihwYXJlbnRFbClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBBZGQgXCJjbGlja1wiIGV2ZW50IHRoYXQgcGVyZm9ybXMgZ2FsbGVyeSBuYXZpZ2F0aW9uXHJcbiAgICAgICAgc2VsZi4kZ3JpZC5vbihcImNsaWNrXCIsIFwiYVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5qdW1wVG8oJCh0aGlzKS5hdHRyKFwiZGF0YS1pbmRleFwiKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEJ1aWxkIHRoZSBsaXN0XHJcbiAgICAgIGlmICghc2VsZi4kbGlzdCkge1xyXG4gICAgICAgIHNlbGYuJGxpc3QgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIENMQVNTICsgJ19fbGlzdFwiPicpLmFwcGVuZFRvKHNlbGYuJGdyaWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkLmVhY2goaW5zdGFuY2UuZ3JvdXAsIGZ1bmN0aW9uIChpLCBpdGVtKSB7XHJcbiAgICAgICAgc3JjID0gaXRlbS50aHVtYjtcclxuXHJcbiAgICAgICAgaWYgKCFzcmMgJiYgaXRlbS50eXBlID09PSBcImltYWdlXCIpIHtcclxuICAgICAgICAgIHNyYyA9IGl0ZW0uc3JjO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGlzdC5wdXNoKFxyXG4gICAgICAgICAgJzxhIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiB0YWJpbmRleD1cIjBcIiBkYXRhLWluZGV4PVwiJyArXHJcbiAgICAgICAgICBpICtcclxuICAgICAgICAgICdcIicgK1xyXG4gICAgICAgICAgKHNyYyAmJiBzcmMubGVuZ3RoID8gJyBzdHlsZT1cImJhY2tncm91bmQtaW1hZ2U6dXJsKCcgKyBzcmMgKyAnKVwiJyA6ICdjbGFzcz1cImZhbmN5Ym94LXRodW1icy1taXNzaW5nXCInKSArXHJcbiAgICAgICAgICBcIj48L2E+XCJcclxuICAgICAgICApO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNlbGYuJGxpc3RbMF0uaW5uZXJIVE1MID0gbGlzdC5qb2luKFwiXCIpO1xyXG5cclxuICAgICAgaWYgKHNlbGYub3B0cy5heGlzID09PSBcInhcIikge1xyXG4gICAgICAgIC8vIFNldCBmaXhlZCB3aWR0aCBmb3IgbGlzdCBlbGVtZW50IHRvIGVuYWJsZSBob3Jpem9udGFsIHNjcm9sbGluZ1xyXG4gICAgICAgIHNlbGYuJGxpc3Qud2lkdGgoXHJcbiAgICAgICAgICBwYXJzZUludChzZWxmLiRncmlkLmNzcyhcInBhZGRpbmctcmlnaHRcIiksIDEwKSArXHJcbiAgICAgICAgICBpbnN0YW5jZS5ncm91cC5sZW5ndGggKlxyXG4gICAgICAgICAgc2VsZi4kbGlzdFxyXG4gICAgICAgICAgLmNoaWxkcmVuKClcclxuICAgICAgICAgIC5lcSgwKVxyXG4gICAgICAgICAgLm91dGVyV2lkdGgodHJ1ZSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGZvY3VzOiBmdW5jdGlvbiAoZHVyYXRpb24pIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICRsaXN0ID0gc2VsZi4kbGlzdCxcclxuICAgICAgICAkZ3JpZCA9IHNlbGYuJGdyaWQsXHJcbiAgICAgICAgdGh1bWIsXHJcbiAgICAgICAgdGh1bWJQb3M7XHJcblxyXG4gICAgICBpZiAoIXNlbGYuaW5zdGFuY2UuY3VycmVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGh1bWIgPSAkbGlzdFxyXG4gICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKENMQVNTX0FDVElWRSlcclxuICAgICAgICAuZmlsdGVyKCdbZGF0YS1pbmRleD1cIicgKyBzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggKyAnXCJdJylcclxuICAgICAgICAuYWRkQ2xhc3MoQ0xBU1NfQUNUSVZFKTtcclxuXHJcbiAgICAgIHRodW1iUG9zID0gdGh1bWIucG9zaXRpb24oKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIG5lZWQgdG8gc2Nyb2xsIHRvIG1ha2UgY3VycmVudCB0aHVtYiB2aXNpYmxlXHJcbiAgICAgIGlmIChzZWxmLm9wdHMuYXhpcyA9PT0gXCJ5XCIgJiYgKHRodW1iUG9zLnRvcCA8IDAgfHwgdGh1bWJQb3MudG9wID4gJGxpc3QuaGVpZ2h0KCkgLSB0aHVtYi5vdXRlckhlaWdodCgpKSkge1xyXG4gICAgICAgICRsaXN0LnN0b3AoKS5hbmltYXRlKHtcclxuICAgICAgICAgICAgc2Nyb2xsVG9wOiAkbGlzdC5zY3JvbGxUb3AoKSArIHRodW1iUG9zLnRvcFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGR1cmF0aW9uXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICBzZWxmLm9wdHMuYXhpcyA9PT0gXCJ4XCIgJiZcclxuICAgICAgICAodGh1bWJQb3MubGVmdCA8ICRncmlkLnNjcm9sbExlZnQoKSB8fCB0aHVtYlBvcy5sZWZ0ID4gJGdyaWQuc2Nyb2xsTGVmdCgpICsgKCRncmlkLndpZHRoKCkgLSB0aHVtYi5vdXRlcldpZHRoKCkpKVxyXG4gICAgICApIHtcclxuICAgICAgICAkbGlzdFxyXG4gICAgICAgICAgLnBhcmVudCgpXHJcbiAgICAgICAgICAuc3RvcCgpXHJcbiAgICAgICAgICAuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgc2Nyb2xsTGVmdDogdGh1bWJQb3MubGVmdFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkdXJhdGlvblxyXG4gICAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICB0aGF0Lmluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctdGh1bWJzXCIsIHRoaXMuaXNWaXNpYmxlKTtcclxuXHJcbiAgICAgIGlmICh0aGF0LmlzVmlzaWJsZSkge1xyXG4gICAgICAgIGlmICghdGhhdC4kZ3JpZCkge1xyXG4gICAgICAgICAgdGhhdC5jcmVhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoYXQuaW5zdGFuY2UudHJpZ2dlcihcIm9uVGh1bWJzU2hvd1wiKTtcclxuXHJcbiAgICAgICAgdGhhdC5mb2N1cygwKTtcclxuICAgICAgfSBlbHNlIGlmICh0aGF0LiRncmlkKSB7XHJcbiAgICAgICAgdGhhdC5pbnN0YW5jZS50cmlnZ2VyKFwib25UaHVtYnNIaWRlXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgY29udGVudCBwb3NpdGlvblxyXG4gICAgICB0aGF0Lmluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICB0b2dnbGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5pc1Zpc2libGUgPSAhdGhpcy5pc1Zpc2libGU7XHJcbiAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKHtcclxuICAgIFwib25Jbml0LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSkge1xyXG4gICAgICB2YXIgVGh1bWJzO1xyXG5cclxuICAgICAgaWYgKGluc3RhbmNlICYmICFpbnN0YW5jZS5UaHVtYnMpIHtcclxuICAgICAgICBUaHVtYnMgPSBuZXcgRmFuY3lUaHVtYnMoaW5zdGFuY2UpO1xyXG5cclxuICAgICAgICBpZiAoVGh1bWJzLmlzQWN0aXZlICYmIFRodW1icy5vcHRzLmF1dG9TdGFydCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgVGh1bWJzLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJiZWZvcmVTaG93LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgaXRlbSwgZmlyc3RSdW4pIHtcclxuICAgICAgdmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcbiAgICAgIGlmIChUaHVtYnMgJiYgVGh1bWJzLmlzVmlzaWJsZSkge1xyXG4gICAgICAgIFRodW1icy5mb2N1cyhmaXJzdFJ1biA/IDAgOiAyNTApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYWZ0ZXJLZXlkb3duLmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCwga2V5cHJlc3MsIGtleWNvZGUpIHtcclxuICAgICAgdmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcbiAgICAgIC8vIFwiR1wiXHJcbiAgICAgIGlmIChUaHVtYnMgJiYgVGh1bWJzLmlzQWN0aXZlICYmIGtleWNvZGUgPT09IDcxKSB7XHJcbiAgICAgICAga2V5cHJlc3MucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgVGh1bWJzLnRvZ2dsZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYmVmb3JlQ2xvc2UuZmJcIjogZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIHZhciBUaHVtYnMgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5UaHVtYnM7XHJcblxyXG4gICAgICBpZiAoVGh1bWJzICYmIFRodW1icy5pc1Zpc2libGUgJiYgVGh1bWJzLm9wdHMuaGlkZU9uQ2xvc2UgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgVGh1bWJzLiRncmlkLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KShkb2N1bWVudCwgalF1ZXJ5KTtcbi8vLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gU2hhcmVcclxuLy8gRGlzcGxheXMgc2ltcGxlIGZvcm0gZm9yIHNoYXJpbmcgY3VycmVudCB1cmxcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuKGZ1bmN0aW9uIChkb2N1bWVudCwgJCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcbiAgICBidG5UcGw6IHtcclxuICAgICAgc2hhcmU6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtc2hhcmUgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1zaGFyZVwiIHRpdGxlPVwie3tTSEFSRX19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTIuNTUgMTljMS40LTguNCA5LjEtOS44IDExLjktOS44VjVsNyA3LTcgNi4zdi0zLjVjLTIuOCAwLTEwLjUgMi4xLTExLjkgNC4yelwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiXHJcbiAgICB9LFxyXG4gICAgc2hhcmU6IHtcclxuICAgICAgdXJsOiBmdW5jdGlvbiAoaW5zdGFuY2UsIGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgKCFpbnN0YW5jZS5jdXJyZW50SGFzaCAmJiAhKGl0ZW0udHlwZSA9PT0gXCJpbmxpbmVcIiB8fCBpdGVtLnR5cGUgPT09IFwiaHRtbFwiKSA/IGl0ZW0ub3JpZ1NyYyB8fCBpdGVtLnNyYyA6IGZhbHNlKSB8fCB3aW5kb3cubG9jYXRpb25cclxuICAgICAgICApO1xyXG4gICAgICB9LFxyXG4gICAgICB0cGw6ICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc2hhcmVcIj4nICtcclxuICAgICAgICBcIjxoMT57e1NIQVJFfX08L2gxPlwiICtcclxuICAgICAgICBcIjxwPlwiICtcclxuICAgICAgICAnPGEgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9fYnV0dG9uIGZhbmN5Ym94LXNoYXJlX19idXR0b24tLWZiXCIgaHJlZj1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PXt7dXJsfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm0yODcgNDU2di0yOTljMC0yMSA2LTM1IDM1LTM1aDM4di02M2MtNy0xLTI5LTMtNTUtMy01NCAwLTkxIDMzLTkxIDk0djMwNm0xNDMtMjU0aC0yMDV2NzJoMTk2XCIgLz48L3N2Zz4nICtcclxuICAgICAgICBcIjxzcGFuPkZhY2Vib29rPC9zcGFuPlwiICtcclxuICAgICAgICBcIjwvYT5cIiArXHJcbiAgICAgICAgJzxhIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfX2J1dHRvbiBmYW5jeWJveC1zaGFyZV9fYnV0dG9uLS10d1wiIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD91cmw9e3t1cmx9fSZ0ZXh0PXt7ZGVzY3J9fVwiPicgK1xyXG4gICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwibTQ1NiAxMzNjLTE0IDctMzEgMTEtNDcgMTMgMTctMTAgMzAtMjcgMzctNDYtMTUgMTAtMzQgMTYtNTIgMjAtNjEtNjItMTU3LTctMTQxIDc1LTY4LTMtMTI5LTM1LTE2OS04NS0yMiAzNy0xMSA4NiAyNiAxMDktMTMgMC0yNi00LTM3LTkgMCAzOSAyOCA3MiA2NSA4MC0xMiAzLTI1IDQtMzcgMiAxMCAzMyA0MSA1NyA3NyA1Ny00MiAzMC03NyAzOC0xMjIgMzQgMTcwIDExMSAzNzgtMzIgMzU5LTIwOCAxNi0xMSAzMC0yNSA0MS00MnpcIiAvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPHNwYW4+VHdpdHRlcjwvc3Bhbj5cIiArXHJcbiAgICAgICAgXCI8L2E+XCIgK1xyXG4gICAgICAgICc8YSBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19idXR0b24gZmFuY3lib3gtc2hhcmVfX2J1dHRvbi0tcHRcIiBocmVmPVwiaHR0cHM6Ly93d3cucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8/dXJsPXt7dXJsfX0mZGVzY3JpcHRpb249e3tkZXNjcn19Jm1lZGlhPXt7bWVkaWF9fVwiPicgK1xyXG4gICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwibTI2NSA1NmMtMTA5IDAtMTY0IDc4LTE2NCAxNDQgMCAzOSAxNSA3NCA0NyA4NyA1IDIgMTAgMCAxMi01bDQtMTljMi02IDEtOC0zLTEzLTktMTEtMTUtMjUtMTUtNDUgMC01OCA0My0xMTAgMTEzLTExMCA2MiAwIDk2IDM4IDk2IDg4IDAgNjctMzAgMTIyLTczIDEyMi0yNCAwLTQyLTE5LTM2LTQ0IDYtMjkgMjAtNjAgMjAtODEgMC0xOS0xMC0zNS0zMS0zNS0yNSAwLTQ0IDI2LTQ0IDYwIDAgMjEgNyAzNiA3IDM2bC0zMCAxMjVjLTggMzctMSA4MyAwIDg3IDAgMyA0IDQgNSAyIDItMyAzMi0zOSA0Mi03NWwxNi02NGM4IDE2IDMxIDI5IDU2IDI5IDc0IDAgMTI0LTY3IDEyNC0xNTcgMC02OS01OC0xMzItMTQ2LTEzMnpcIiBmaWxsPVwiI2ZmZlwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjxzcGFuPlBpbnRlcmVzdDwvc3Bhbj5cIiArXHJcbiAgICAgICAgXCI8L2E+XCIgK1xyXG4gICAgICAgIFwiPC9wPlwiICtcclxuICAgICAgICAnPHA+PGlucHV0IGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfX2lucHV0XCIgdHlwZT1cInRleHRcIiB2YWx1ZT1cInt7dXJsX3Jhd319XCIgb25jbGljaz1cInNlbGVjdCgpXCIgLz48L3A+JyArXHJcbiAgICAgICAgXCI8L2Rpdj5cIlxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBlc2NhcGVIdG1sKHN0cmluZykge1xyXG4gICAgdmFyIGVudGl0eU1hcCA9IHtcclxuICAgICAgXCImXCI6IFwiJmFtcDtcIixcclxuICAgICAgXCI8XCI6IFwiJmx0O1wiLFxyXG4gICAgICBcIj5cIjogXCImZ3Q7XCIsXHJcbiAgICAgICdcIic6IFwiJnF1b3Q7XCIsXHJcbiAgICAgIFwiJ1wiOiBcIiYjMzk7XCIsXHJcbiAgICAgIFwiL1wiOiBcIiYjeDJGO1wiLFxyXG4gICAgICBcImBcIjogXCImI3g2MDtcIixcclxuICAgICAgXCI9XCI6IFwiJiN4M0Q7XCJcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UoL1smPD5cIidgPVxcL10vZywgZnVuY3Rpb24gKHMpIHtcclxuICAgICAgcmV0dXJuIGVudGl0eU1hcFtzXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIltkYXRhLWZhbmN5Ym94LXNoYXJlXVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCksXHJcbiAgICAgIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50IHx8IG51bGwsXHJcbiAgICAgIHVybCxcclxuICAgICAgdHBsO1xyXG5cclxuICAgIGlmICghY3VycmVudCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCQudHlwZShjdXJyZW50Lm9wdHMuc2hhcmUudXJsKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgIHVybCA9IGN1cnJlbnQub3B0cy5zaGFyZS51cmwuYXBwbHkoY3VycmVudCwgW2luc3RhbmNlLCBjdXJyZW50XSk7XHJcbiAgICB9XHJcblxyXG4gICAgdHBsID0gY3VycmVudC5vcHRzLnNoYXJlLnRwbFxyXG4gICAgICAucmVwbGFjZSgvXFx7XFx7bWVkaWFcXH1cXH0vZywgY3VycmVudC50eXBlID09PSBcImltYWdlXCIgPyBlbmNvZGVVUklDb21wb25lbnQoY3VycmVudC5zcmMpIDogXCJcIilcclxuICAgICAgLnJlcGxhY2UoL1xce1xce3VybFxcfVxcfS9nLCBlbmNvZGVVUklDb21wb25lbnQodXJsKSlcclxuICAgICAgLnJlcGxhY2UoL1xce1xce3VybF9yYXdcXH1cXH0vZywgZXNjYXBlSHRtbCh1cmwpKVxyXG4gICAgICAucmVwbGFjZSgvXFx7XFx7ZGVzY3JcXH1cXH0vZywgaW5zdGFuY2UuJGNhcHRpb24gPyBlbmNvZGVVUklDb21wb25lbnQoaW5zdGFuY2UuJGNhcHRpb24udGV4dCgpKSA6IFwiXCIpO1xyXG5cclxuICAgICQuZmFuY3lib3gub3Blbih7XHJcbiAgICAgIHNyYzogaW5zdGFuY2UudHJhbnNsYXRlKGluc3RhbmNlLCB0cGwpLFxyXG4gICAgICB0eXBlOiBcImh0bWxcIixcclxuICAgICAgb3B0czoge1xyXG4gICAgICAgIHRvdWNoOiBmYWxzZSxcclxuICAgICAgICBhbmltYXRpb25FZmZlY3Q6IGZhbHNlLFxyXG4gICAgICAgIGFmdGVyTG9hZDogZnVuY3Rpb24gKHNoYXJlSW5zdGFuY2UsIHNoYXJlQ3VycmVudCkge1xyXG4gICAgICAgICAgLy8gQ2xvc2Ugc2VsZiBpZiBwYXJlbnQgaW5zdGFuY2UgaXMgY2xvc2luZ1xyXG4gICAgICAgICAgaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLm9uZShcImJlZm9yZUNsb3NlLmZiXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2hhcmVJbnN0YW5jZS5jbG9zZShudWxsLCAwKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIE9wZW5pbmcgbGlua3MgaW4gYSBwb3B1cCB3aW5kb3dcclxuICAgICAgICAgIHNoYXJlQ3VycmVudC4kY29udGVudC5maW5kKFwiLmZhbmN5Ym94LXNoYXJlX19idXR0b25cIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB3aW5kb3cub3Blbih0aGlzLmhyZWYsIFwiU2hhcmVcIiwgXCJ3aWR0aD01NTAsIGhlaWdodD00NTBcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW9iaWxlOiB7XHJcbiAgICAgICAgICBhdXRvRm9jdXM6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufSkoZG9jdW1lbnQsIGpRdWVyeSk7XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBIYXNoXHJcbi8vIEVuYWJsZXMgbGlua2luZyB0byBlYWNoIG1vZGFsXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgJCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAvLyBTaW1wbGUgJC5lc2NhcGVTZWxlY3RvciBwb2x5ZmlsbCAoZm9yIGpRdWVyeSBwcmlvciB2MylcclxuICBpZiAoISQuZXNjYXBlU2VsZWN0b3IpIHtcclxuICAgICQuZXNjYXBlU2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsKSB7XHJcbiAgICAgIHZhciByY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFx4ODAtXFx1RkZGRlxcdy1dL2c7XHJcbiAgICAgIHZhciBmY3NzZXNjYXBlID0gZnVuY3Rpb24gKGNoLCBhc0NvZGVQb2ludCkge1xyXG4gICAgICAgIGlmIChhc0NvZGVQb2ludCkge1xyXG4gICAgICAgICAgLy8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXHJcbiAgICAgICAgICBpZiAoY2ggPT09IFwiXFwwXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXHJcbiAgICAgICAgICByZXR1cm4gY2guc2xpY2UoMCwgLTEpICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KGNoLmxlbmd0aCAtIDEpLnRvU3RyaW5nKDE2KSArIFwiIFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxyXG4gICAgICAgIHJldHVybiBcIlxcXFxcIiArIGNoO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIEdldCBpbmZvIGFib3V0IGdhbGxlcnkgbmFtZSBhbmQgY3VycmVudCBpbmRleCBmcm9tIHVybFxyXG4gIGZ1bmN0aW9uIHBhcnNlVXJsKCkge1xyXG4gICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSksXHJcbiAgICAgIHJleiA9IGhhc2guc3BsaXQoXCItXCIpLFxyXG4gICAgICBpbmRleCA9IHJlei5sZW5ndGggPiAxICYmIC9eXFwrP1xcZCskLy50ZXN0KHJleltyZXoubGVuZ3RoIC0gMV0pID8gcGFyc2VJbnQocmV6LnBvcCgtMSksIDEwKSB8fCAxIDogMSxcclxuICAgICAgZ2FsbGVyeSA9IHJlei5qb2luKFwiLVwiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBoYXNoOiBoYXNoLFxyXG4gICAgICAvKiBJbmRleCBpcyBzdGFydGluZyBmcm9tIDEgKi9cclxuICAgICAgaW5kZXg6IGluZGV4IDwgMSA/IDEgOiBpbmRleCxcclxuICAgICAgZ2FsbGVyeTogZ2FsbGVyeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIFRyaWdnZXIgY2xpY2sgZXZudCBvbiBsaW5rcyB0byBvcGVuIG5ldyBmYW5jeUJveCBpbnN0YW5jZVxyXG4gIGZ1bmN0aW9uIHRyaWdnZXJGcm9tVXJsKHVybCkge1xyXG4gICAgaWYgKHVybC5nYWxsZXJ5ICE9PSBcIlwiKSB7XHJcbiAgICAgIC8vIElmIHdlIGNhbiBmaW5kIGVsZW1lbnQgbWF0Y2hpbmcgJ2RhdGEtZmFuY3lib3gnIGF0cmlidXRlLFxyXG4gICAgICAvLyB0aGVuIHRyaWdnZXJpbmcgY2xpY2sgZXZlbnQgc2hvdWxkIHN0YXJ0IGZhbmN5Qm94XHJcbiAgICAgICQoXCJbZGF0YS1mYW5jeWJveD0nXCIgKyAkLmVzY2FwZVNlbGVjdG9yKHVybC5nYWxsZXJ5KSArIFwiJ11cIilcclxuICAgICAgICAuZXEodXJsLmluZGV4IC0gMSlcclxuICAgICAgICAuZm9jdXMoKVxyXG4gICAgICAgIC50cmlnZ2VyKFwiY2xpY2suZmItc3RhcnRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgZ2FsbGVyeSBuYW1lIGZyb20gY3VycmVudCBpbnN0YW5jZVxyXG4gIGZ1bmN0aW9uIGdldEdhbGxlcnlJRChpbnN0YW5jZSkge1xyXG4gICAgdmFyIG9wdHMsIHJldDtcclxuXHJcbiAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBvcHRzID0gaW5zdGFuY2UuY3VycmVudCA/IGluc3RhbmNlLmN1cnJlbnQub3B0cyA6IGluc3RhbmNlLm9wdHM7XHJcbiAgICByZXQgPSBvcHRzLmhhc2ggfHwgKG9wdHMuJG9yaWcgPyBvcHRzLiRvcmlnLmRhdGEoXCJmYW5jeWJveFwiKSB8fCBvcHRzLiRvcmlnLmRhdGEoXCJmYW5jeWJveC10cmlnZ2VyXCIpIDogXCJcIik7XHJcblxyXG4gICAgcmV0dXJuIHJldCA9PT0gXCJcIiA/IGZhbHNlIDogcmV0O1xyXG4gIH1cclxuXHJcbiAgLy8gU3RhcnQgd2hlbiBET00gYmVjb21lcyByZWFkeVxyXG4gICQoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gQ2hlY2sgaWYgdXNlciBoYXMgZGlzYWJsZWQgdGhpcyBtb2R1bGVcclxuICAgIGlmICgkLmZhbmN5Ym94LmRlZmF1bHRzLmhhc2ggPT09IGZhbHNlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgaGFzaCB3aGVuIG9wZW5pbmcvY2xvc2luZyBmYW5jeUJveFxyXG4gICAgJChkb2N1bWVudCkub24oe1xyXG4gICAgICBcIm9uSW5pdC5mYlwiOiBmdW5jdGlvbiAoZSwgaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgdXJsLCBnYWxsZXJ5O1xyXG5cclxuICAgICAgICBpZiAoaW5zdGFuY2UuZ3JvdXBbaW5zdGFuY2UuY3VyckluZGV4XS5vcHRzLmhhc2ggPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cmwgPSBwYXJzZVVybCgpO1xyXG4gICAgICAgIGdhbGxlcnkgPSBnZXRHYWxsZXJ5SUQoaW5zdGFuY2UpO1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgZ2FsbGVyeSBzdGFydCBpbmRleCBtYXRjaGVzIGluZGV4IGZyb20gaGFzaFxyXG4gICAgICAgIGlmIChnYWxsZXJ5ICYmIHVybC5nYWxsZXJ5ICYmIGdhbGxlcnkgPT0gdXJsLmdhbGxlcnkpIHtcclxuICAgICAgICAgIGluc3RhbmNlLmN1cnJJbmRleCA9IHVybC5pbmRleCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgXCJiZWZvcmVTaG93LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCwgZmlyc3RSdW4pIHtcclxuICAgICAgICB2YXIgZ2FsbGVyeTtcclxuXHJcbiAgICAgICAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQub3B0cy5oYXNoID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgbmVlZCB0byB1cGRhdGUgd2luZG93IGhhc2hcclxuICAgICAgICBnYWxsZXJ5ID0gZ2V0R2FsbGVyeUlEKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgaWYgKCFnYWxsZXJ5KSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYXJpYWJsZSBjb250YWluaW5nIGxhc3QgaGFzaCB2YWx1ZSBzZXQgYnkgZmFuY3lCb3hcclxuICAgICAgICAvLyBJdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGZhbmN5Qm94IG5lZWRzIHRvIGNsb3NlIGFmdGVyIGhhc2ggY2hhbmdlIGlzIGRldGVjdGVkXHJcbiAgICAgICAgaW5zdGFuY2UuY3VycmVudEhhc2ggPSBnYWxsZXJ5ICsgKGluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEgPyBcIi1cIiArIChjdXJyZW50LmluZGV4ICsgMSkgOiBcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gSWYgY3VycmVudCBoYXNoIGlzIHRoZSBzYW1lICh0aGlzIGluc3RhbmNlIG1vc3QgbGlrZWx5IGlzIG9wZW5lZCBieSBoYXNoY2hhbmdlKSwgdGhlbiBkbyBub3RoaW5nXHJcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSBcIiNcIiArIGluc3RhbmNlLmN1cnJlbnRIYXNoKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmlyc3RSdW4gJiYgIWluc3RhbmNlLm9yaWdIYXNoKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5vcmlnSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmhhc2hUaW1lcikge1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGluc3RhbmNlLmhhc2hUaW1lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgaGFzaFxyXG4gICAgICAgIGluc3RhbmNlLmhhc2hUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKFwicmVwbGFjZVN0YXRlXCIgaW4gd2luZG93Lmhpc3RvcnkpIHtcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnlbZmlyc3RSdW4gPyBcInB1c2hTdGF0ZVwiIDogXCJyZXBsYWNlU3RhdGVcIl0oe30sXHJcbiAgICAgICAgICAgICAgZG9jdW1lbnQudGl0bGUsXHJcbiAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIFwiI1wiICsgaW5zdGFuY2UuY3VycmVudEhhc2hcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaXJzdFJ1bikge1xyXG4gICAgICAgICAgICAgIGluc3RhbmNlLmhhc0NyZWF0ZWRIaXN0b3J5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBpbnN0YW5jZS5jdXJyZW50SGFzaDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpbnN0YW5jZS5oYXNoVGltZXIgPSBudWxsO1xyXG4gICAgICAgIH0sIDMwMCk7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBcImJlZm9yZUNsb3NlLmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCkge1xyXG4gICAgICAgIGlmICghY3VycmVudCB8fCBjdXJyZW50Lm9wdHMuaGFzaCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsZWFyVGltZW91dChpbnN0YW5jZS5oYXNoVGltZXIpO1xyXG5cclxuICAgICAgICAvLyBHb3RvIHByZXZpb3VzIGhpc3RvcnkgZW50cnlcclxuICAgICAgICBpZiAoaW5zdGFuY2UuY3VycmVudEhhc2ggJiYgaW5zdGFuY2UuaGFzQ3JlYXRlZEhpc3RvcnkpIHtcclxuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmN1cnJlbnRIYXNoKSB7XHJcbiAgICAgICAgICBpZiAoXCJyZXBsYWNlU3RhdGVcIiBpbiB3aW5kb3cuaGlzdG9yeSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sIGRvY3VtZW50LnRpdGxlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgKGluc3RhbmNlLm9yaWdIYXNoIHx8IFwiXCIpKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaW5zdGFuY2Uub3JpZ0hhc2g7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnN0YW5jZS5jdXJyZW50SGFzaCA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIG5lZWQgdG8gc3RhcnQvY2xvc2UgYWZ0ZXIgdXJsIGhhcyBjaGFuZ2VkXHJcbiAgICAkKHdpbmRvdykub24oXCJoYXNoY2hhbmdlLmZiXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHVybCA9IHBhcnNlVXJsKCksXHJcbiAgICAgICAgZmIgPSBudWxsO1xyXG5cclxuICAgICAgLy8gRmluZCBsYXN0IGZhbmN5Qm94IGluc3RhbmNlIHRoYXQgaGFzIFwiaGFzaFwiXHJcbiAgICAgICQuZWFjaChcclxuICAgICAgICAkKFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiKVxyXG4gICAgICAgIC5nZXQoKVxyXG4gICAgICAgIC5yZXZlcnNlKCksXHJcbiAgICAgICAgZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICAgICAgdmFyIHRtcCA9ICQodmFsdWUpLmRhdGEoXCJGYW5jeUJveFwiKTtcclxuXHJcbiAgICAgICAgICBpZiAodG1wICYmIHRtcC5jdXJyZW50SGFzaCkge1xyXG4gICAgICAgICAgICBmYiA9IHRtcDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChmYikge1xyXG4gICAgICAgIC8vIE5vdywgY29tcGFyZSBoYXNoIHZhbHVlc1xyXG4gICAgICAgIGlmIChmYi5jdXJyZW50SGFzaCAhPT0gdXJsLmdhbGxlcnkgKyBcIi1cIiArIHVybC5pbmRleCAmJiAhKHVybC5pbmRleCA9PT0gMSAmJiBmYi5jdXJyZW50SGFzaCA9PSB1cmwuZ2FsbGVyeSkpIHtcclxuICAgICAgICAgIGZiLmN1cnJlbnRIYXNoID0gbnVsbDtcclxuXHJcbiAgICAgICAgICBmYi5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh1cmwuZ2FsbGVyeSAhPT0gXCJcIikge1xyXG4gICAgICAgIHRyaWdnZXJGcm9tVXJsKHVybCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENoZWNrIGN1cnJlbnQgaGFzaCBhbmQgdHJpZ2dlciBjbGljayBldmVudCBvbiBtYXRjaGluZyBlbGVtZW50IHRvIHN0YXJ0IGZhbmN5Qm94LCBpZiBuZWVkZWRcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoISQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSkge1xyXG4gICAgICAgIHRyaWdnZXJGcm9tVXJsKHBhcnNlVXJsKCkpO1xyXG4gICAgICB9XHJcbiAgICB9LCA1MCk7XHJcbiAgfSk7XHJcbn0pKHdpbmRvdywgZG9jdW1lbnQsIGpRdWVyeSk7XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBXaGVlbFxyXG4vLyBCYXNpYyBtb3VzZSB3ZWhlZWwgc3VwcG9ydCBmb3IgZ2FsbGVyeSBuYXZpZ2F0aW9uXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgdmFyIHByZXZUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICQoZG9jdW1lbnQpLm9uKHtcclxuICAgIFwib25Jbml0LmZiXCI6IGZ1bmN0aW9uIChlLCBpbnN0YW5jZSwgY3VycmVudCkge1xyXG4gICAgICBpbnN0YW5jZS4kcmVmcy5zdGFnZS5vbihcIm1vdXNld2hlZWwgRE9NTW91c2VTY3JvbGwgd2hlZWwgTW96TW91c2VQaXhlbFNjcm9sbFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gaW5zdGFuY2UuY3VycmVudCxcclxuICAgICAgICAgIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8IGN1cnJlbnQub3B0cy53aGVlbCA9PT0gZmFsc2UgfHwgKGN1cnJlbnQub3B0cy53aGVlbCA9PT0gXCJhdXRvXCIgJiYgY3VycmVudC50eXBlICE9PSBcImltYWdlXCIpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnQuJHNsaWRlLmhhc0NsYXNzKFwiZmFuY3lib3gtYW5pbWF0ZWRcIikpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGUgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJUaW1lIC0gcHJldlRpbWUgPCAyNTApIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXZUaW1lID0gY3VyclRpbWU7XHJcblxyXG4gICAgICAgIGluc3RhbmNlWygtZS5kZWx0YVkgfHwgLWUuZGVsdGFYIHx8IGUud2hlZWxEZWx0YSB8fCAtZS5kZXRhaWwpIDwgMCA/IFwibmV4dFwiIDogXCJwcmV2aW91c1wiXSgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxufSkoZG9jdW1lbnQsIGpRdWVyeSk7IiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbnZhciBzcGxpdCA9ICcnLnNwbGl0O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHRocm93cyBhbiBlcnJvciBpbiByaGlubywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3JoaW5vL2lzc3Vlcy8zNDZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjYuNCcsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbnRlZ2VyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNOYU4oYXJndW1lbnQgPSArYXJndW1lbnQpID8gMCA6IChhcmd1bWVudCA+IDAgPyBmbG9vciA6IGNlaWwpKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhcyhoaWRkZW5LZXlzLCBrZXkpICYmIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmICFoYXModmFsdWUsICduYW1lJykpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCBrZXkpO1xuICAgIGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG5cbnZhciBuYXRpdmVBc3NpZ24gPSBPYmplY3QuYXNzaWduO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICFuYXRpdmVBc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgbmF0aXZlQXNzaWduKHsgYjogMSB9LCBuYXRpdmVBc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gbmF0aXZlQXNzaWduKHt9LCBBKVtzeW1ib2xdICE9IDcgfHwgb2JqZWN0S2V5cyhuYXRpdmVBc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICB2YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xuICB3aGlsZSAoYXJndW1lbnRzTGVuZ3RoID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5U3ltYm9scyA/IG9iamVjdEtleXMoUykuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogbmF0aXZlQXNzaWduO1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjZWlsID0gTWF0aC5jZWlsO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19FTkQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7XG4gICAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyO1xuICAgIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICAgIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XG4gICAgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuICBlbmQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGVhdGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxubW9kdWxlLmV4cG9ydHMgPSAnJy5yZXBlYXQgfHwgZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdW5zYWZlLXJlZ2V4XG5tb2R1bGUuZXhwb3J0cyA9IC9WZXJzaW9uXFwvMTBcXC5cXGQrKFxcLlxcZCspPyggTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZEVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuZW5kO1xudmFyIFdFQktJVF9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZC13ZWJraXQtYnVnJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV0VCS0lUX0JVRyB9LCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIvLyBAZmxvd1xyXG5cclxuXHJcbi8qKiBDaGVja3MgaWYgdmFsdWUgaXMgc3RyaW5nICovXHJcbmV4cG9ydFxyXG5mdW5jdGlvbiBpc1N0cmluZyAoc3RyOiBtaXhlZCk6IGJvb2xlYW4gJWNoZWNrcyB7XHJcbiAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAgRGlyZWN0aW9uXHJcbiAgQHByb3Age3N0cmluZ30gTk9ORVxyXG4gIEBwcm9wIHtzdHJpbmd9IExFRlRcclxuICBAcHJvcCB7c3RyaW5nfSBGT1JDRV9MRUZUXHJcbiAgQHByb3Age3N0cmluZ30gUklHSFRcclxuICBAcHJvcCB7c3RyaW5nfSBGT1JDRV9SSUdIVFxyXG4qL1xyXG5leHBvcnRcclxuY29uc3QgRElSRUNUSU9OID0ge1xyXG4gIE5PTkU6ICdOT05FJyxcclxuICBMRUZUOiAnTEVGVCcsXHJcbiAgRk9SQ0VfTEVGVDogJ0ZPUkNFX0xFRlQnLFxyXG4gIFJJR0hUOiAnUklHSFQnLFxyXG4gIEZPUkNFX1JJR0hUOiAnRk9SQ0VfUklHSFQnLFxyXG59XHJcbi8qKlxyXG4gIERpcmVjdGlvblxyXG4gIEBlbnVtIHtzdHJpbmd9XHJcbiovXHJcbmV4cG9ydFxyXG50eXBlIERpcmVjdGlvbiA9ICRWYWx1ZXM8dHlwZW9mIERJUkVDVElPTj47XHJcblxyXG4vKiogUmV0dXJucyBuZXh0IGNoYXIgaW5kZXggaW4gZGlyZWN0aW9uICovXHJcbmV4cG9ydFxyXG5mdW5jdGlvbiBpbmRleEluRGlyZWN0aW9uIChwb3M6IG51bWJlciwgZGlyZWN0aW9uOiBEaXJlY3Rpb24pOiBudW1iZXIge1xyXG4gIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5MRUZUKSAtLXBvcztcclxuICByZXR1cm4gcG9zO1xyXG59XHJcblxyXG4vKiogUmV0dXJucyBuZXh0IGNoYXIgcG9zaXRpb24gaW4gZGlyZWN0aW9uICovXHJcbmV4cG9ydFxyXG5mdW5jdGlvbiBwb3NJbkRpcmVjdGlvbiAocG9zOiBudW1iZXIsIGRpcmVjdGlvbjogRGlyZWN0aW9uKTogbnVtYmVyIHtcclxuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xyXG4gICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcclxuICAgIGNhc2UgRElSRUNUSU9OLkZPUkNFX0xFRlQ6XHJcbiAgICAgIHJldHVybiAtLXBvcztcclxuICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxyXG4gICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6XHJcbiAgICAgIHJldHVybiArK3BvcztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBwb3M7XHJcbiAgfVxyXG59XHJcblxyXG4vKiogKi9cclxuZXhwb3J0XHJcbmZ1bmN0aW9uIGZvcmNlRGlyZWN0aW9uIChkaXJlY3Rpb246IERpcmVjdGlvbik6IERpcmVjdGlvbiB7XHJcbiAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgIGNhc2UgRElSRUNUSU9OLkxFRlQ6XHJcbiAgICAgIHJldHVybiBESVJFQ1RJT04uRk9SQ0VfTEVGVDtcclxuICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxyXG4gICAgICByZXR1cm4gRElSRUNUSU9OLkZPUkNFX1JJR0hUO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIGRpcmVjdGlvbjtcclxuICB9XHJcbn1cclxuXHJcbi8qKiBFc2NhcGVzIHJlZ3VsYXIgZXhwcmVzc2lvbiBjb250cm9sIGNoYXJzICovXHJcbmV4cG9ydFxyXG5mdW5jdGlvbiBlc2NhcGVSZWdFeHAgKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLiorP149IToke30oKXxbXFxdL1xcXFxdKS9nLCAnXFxcXCQxJyk7XHJcbn1cclxuXHJcblxyXG4vLyBjbG9uZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXBvYmVyZXpraW4vZmFzdC1kZWVwLWVxdWFsIHdpdGggc21hbGwgY2hhbmdlc1xyXG5leHBvcnRcclxuZnVuY3Rpb24gb2JqZWN0SW5jbHVkZXMgKGI6IGFueSwgYTogYW55KTogYm9vbGVhbiB7XHJcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG5cclxuICB2YXIgYXJyQSA9IEFycmF5LmlzQXJyYXkoYSlcclxuICAgICwgYXJyQiA9IEFycmF5LmlzQXJyYXkoYilcclxuICAgICwgaTtcclxuXHJcbiAgaWYgKGFyckEgJiYgYXJyQikge1xyXG4gICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKylcclxuICAgICAgaWYgKCFvYmplY3RJbmNsdWRlcyhhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBpZiAoYXJyQSAhPSBhcnJCKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xyXG4gICAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcclxuICAgICAgLCBkYXRlQiA9IGIgaW5zdGFuY2VvZiBEYXRlO1xyXG4gICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XHJcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHBcclxuICAgICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcclxuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xyXG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYSk7XHJcbiAgICAvLyBpZiAoa2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKGIpLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKVxyXG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKVxyXG4gICAgICBpZighb2JqZWN0SW5jbHVkZXMoYltrZXlzW2ldXSwgYVtrZXlzW2ldXSkpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGVsc2UgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICByZXR1cm4gYS50b1N0cmluZygpID09PSBiLnRvU3RyaW5nKClcclxuICB9XHJcblxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG5cclxuLyoqIFNlbGVjdGlvbiByYW5nZSAqL1xyXG5leHBvcnRcclxudHlwZSBTZWxlY3Rpb24gPSB7XHJcbiAgc3RhcnQ6IG51bWJlcjtcclxuICBlbmQ6IG51bWJlcjtcclxufTtcclxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwZWF0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICByZXBlYXQ6IHJlcGVhdFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGBnbG9iYWxUaGlzYCBvYmplY3Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIGdsb2JhbFRoaXM6IGdsb2JhbFxufSk7XG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQge3R5cGUgRGlyZWN0aW9uLCB0eXBlIFNlbGVjdGlvbiwgRElSRUNUSU9OfSBmcm9tICcuL3V0aWxzLmpzJztcclxuXHJcblxyXG4vKiogUHJvdmlkZXMgZGV0YWlscyBvZiBjaGFuZ2luZyBpbnB1dCAqL1xyXG5leHBvcnQgZGVmYXVsdFxyXG5jbGFzcyBBY3Rpb25EZXRhaWxzIHtcclxuICAvKiogQ3VycmVudCBpbnB1dCB2YWx1ZSAqL1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbiAgLyoqIEN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uICovXHJcbiAgY3Vyc29yUG9zOiBudW1iZXI7XHJcbiAgLyoqIE9sZCBpbnB1dCB2YWx1ZSAqL1xyXG4gIG9sZFZhbHVlOiBzdHJpbmc7XHJcbiAgLyoqIE9sZCBzZWxlY3Rpb24gKi9cclxuICBvbGRTZWxlY3Rpb246IFNlbGVjdGlvbjtcclxuXHJcbiAgY29uc3RydWN0b3IgKFxyXG4gICAgdmFsdWU6IHN0cmluZyxcclxuICAgIGN1cnNvclBvczogbnVtYmVyLFxyXG4gICAgb2xkVmFsdWU6IHN0cmluZyxcclxuICAgIG9sZFNlbGVjdGlvbjogU2VsZWN0aW9uXHJcbiAgKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLmN1cnNvclBvcyA9IGN1cnNvclBvcztcclxuICAgIHRoaXMub2xkVmFsdWUgPSBvbGRWYWx1ZTtcclxuICAgIHRoaXMub2xkU2VsZWN0aW9uID0gb2xkU2VsZWN0aW9uO1xyXG5cclxuICAgIC8vIGRvdWJsZSBjaGVjayBpZiBsZWZ0IHBhcnQgd2FzIGNoYW5nZWQgKGF1dG9maWxsaW5nLCBvdGhlciBub24tc3RhbmRhcmQgaW5wdXQgdHJpZ2dlcnMpXHJcbiAgICB3aGlsZSAodGhpcy52YWx1ZS5zbGljZSgwLCB0aGlzLnN0YXJ0Q2hhbmdlUG9zKSAhPT0gdGhpcy5vbGRWYWx1ZS5zbGljZSgwLCB0aGlzLnN0YXJ0Q2hhbmdlUG9zKSkge1xyXG4gICAgICAtLXRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBTdGFydCBjaGFuZ2luZyBwb3NpdGlvblxyXG4gICAgQHJlYWRvbmx5XHJcbiAgKi9cclxuICBnZXQgc3RhcnRDaGFuZ2VQb3MgKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5taW4odGhpcy5jdXJzb3JQb3MsIHRoaXMub2xkU2VsZWN0aW9uLnN0YXJ0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgSW5zZXJ0ZWQgc3ltYm9scyBjb3VudFxyXG4gICAgQHJlYWRvbmx5XHJcbiAgKi9cclxuICBnZXQgaW5zZXJ0ZWRDb3VudCAoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnNvclBvcyAtIHRoaXMuc3RhcnRDaGFuZ2VQb3M7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEluc2VydGVkIHN5bWJvbHNcclxuICAgIEByZWFkb25seVxyXG4gICovXHJcbiAgZ2V0IGluc2VydGVkICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUuc3Vic3RyKHRoaXMuc3RhcnRDaGFuZ2VQb3MsIHRoaXMuaW5zZXJ0ZWRDb3VudCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFJlbW92ZWQgc3ltYm9scyBjb3VudFxyXG4gICAgQHJlYWRvbmx5XHJcbiAgKi9cclxuICBnZXQgcmVtb3ZlZENvdW50ICgpOiBudW1iZXIge1xyXG4gICAgLy8gTWF0aC5tYXggZm9yIG9wcG9zaXRlIG9wZXJhdGlvblxyXG4gICAgcmV0dXJuIE1hdGgubWF4KCh0aGlzLm9sZFNlbGVjdGlvbi5lbmQgLSB0aGlzLnN0YXJ0Q2hhbmdlUG9zKSB8fFxyXG4gICAgICAvLyBmb3IgRGVsZXRlXHJcbiAgICAgIHRoaXMub2xkVmFsdWUubGVuZ3RoIC0gdGhpcy52YWx1ZS5sZW5ndGgsIDApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBSZW1vdmVkIHN5bWJvbHNcclxuICAgIEByZWFkb25seVxyXG4gICovXHJcbiAgZ2V0IHJlbW92ZWQgKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5vbGRWYWx1ZS5zdWJzdHIodGhpcy5zdGFydENoYW5nZVBvcywgdGhpcy5yZW1vdmVkQ291bnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBVbmNoYW5nZWQgaGVhZCBzeW1ib2xzXHJcbiAgICBAcmVhZG9ubHlcclxuICAqL1xyXG4gIGdldCBoZWFkICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUuc3Vic3RyaW5nKDAsIHRoaXMuc3RhcnRDaGFuZ2VQb3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBVbmNoYW5nZWQgdGFpbCBzeW1ib2xzXHJcbiAgICBAcmVhZG9ubHlcclxuICAqL1xyXG4gIGdldCB0YWlsICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWUuc3Vic3RyaW5nKHRoaXMuc3RhcnRDaGFuZ2VQb3MgKyB0aGlzLmluc2VydGVkQ291bnQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBSZW1vdmUgZGlyZWN0aW9uXHJcbiAgICBAcmVhZG9ubHlcclxuICAqL1xyXG4gIGdldCByZW1vdmVEaXJlY3Rpb24gKCk6IERpcmVjdGlvbiB7XHJcbiAgICBpZiAoIXRoaXMucmVtb3ZlZENvdW50IHx8IHRoaXMuaW5zZXJ0ZWRDb3VudCkgcmV0dXJuIERJUkVDVElPTi5OT05FO1xyXG5cclxuICAgIC8vIGFsaWduIHJpZ2h0IGlmIGRlbGV0ZSBhdCByaWdodCBvciBpZiByYW5nZSByZW1vdmVkIChldmVudCB3aXRoIGJhY2tzcGFjZSlcclxuICAgIHJldHVybiAodGhpcy5vbGRTZWxlY3Rpb24uZW5kID09PSB0aGlzLmN1cnNvclBvcyB8fCB0aGlzLm9sZFNlbGVjdGlvbi5zdGFydCA9PT0gdGhpcy5jdXJzb3JQb3MpID9cclxuICAgICAgRElSRUNUSU9OLlJJR0hUIDpcclxuICAgICAgRElSRUNUSU9OLkxFRlQ7XHJcbiAgfVxyXG59XHJcbiIsIi8vIEBmbG93XHJcblxyXG5cclxuLyoqXHJcbiAgUHJvdmlkZXMgZGV0YWlscyBvZiBjaGFuZ2luZyBtb2RlbCB2YWx1ZVxyXG4gIEBwYXJhbSB7T2JqZWN0fSBbZGV0YWlsc11cclxuICBAcGFyYW0ge3N0cmluZ30gW2RldGFpbHMuaW5zZXJ0ZWRdIC0gSW5zZXJ0ZWQgc3ltYm9sc1xyXG4gIEBwYXJhbSB7Ym9vbGVhbn0gW2RldGFpbHMuc2tpcF0gLSBDYW4gc2tpcCBjaGFyc1xyXG4gIEBwYXJhbSB7bnVtYmVyfSBbZGV0YWlscy5yZW1vdmVDb3VudF0gLSBSZW1vdmVkIHN5bWJvbHMgY291bnRcclxuICBAcGFyYW0ge251bWJlcn0gW2RldGFpbHMudGFpbFNoaWZ0XSAtIEFkZGl0aW9uYWwgb2Zmc2V0IGlmIGFueSBjaGFuZ2VzIG9jY3VycmVkIGJlZm9yZSB0YWlsXHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIENoYW5nZURldGFpbHMge1xyXG4gIC8qKiBJbnNlcnRlZCBzeW1ib2xzICovXHJcbiAgaW5zZXJ0ZWQ6IHN0cmluZztcclxuICAvKiogQ2FuIHNraXAgY2hhcnMgKi9cclxuICBza2lwOiBib29sZWFuO1xyXG4gIC8qKiBBZGRpdGlvbmFsIG9mZnNldCBpZiBhbnkgY2hhbmdlcyBvY2N1cnJlZCBiZWZvcmUgdGFpbCAqL1xyXG4gIHRhaWxTaGlmdDogbnVtYmVyO1xyXG4gIC8qKiBSYXcgaW5zZXJ0ZWQgaXMgdXNlZCBieSBkeW5hbWljIG1hc2sgKi9cclxuICByYXdJbnNlcnRlZDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvciAoZGV0YWlscz86IHtcclxuICAgIGluc2VydGVkPzogJFByb3BlcnR5VHlwZTxDaGFuZ2VEZXRhaWxzLCAnaW5zZXJ0ZWQnPixcclxuICAgIHJhd0luc2VydGVkPzogJFByb3BlcnR5VHlwZTxDaGFuZ2VEZXRhaWxzLCAncmF3SW5zZXJ0ZWQnPixcclxuICAgIHNraXA/OiAkUHJvcGVydHlUeXBlPENoYW5nZURldGFpbHMsICdza2lwJz4sXHJcbiAgICB0YWlsU2hpZnQ/OiAkUHJvcGVydHlUeXBlPENoYW5nZURldGFpbHMsICd0YWlsU2hpZnQnPixcclxuICB9KSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHtcclxuICAgICAgaW5zZXJ0ZWQ6ICcnLFxyXG4gICAgICByYXdJbnNlcnRlZDogJycsXHJcbiAgICAgIHNraXA6IGZhbHNlLFxyXG4gICAgICB0YWlsU2hpZnQ6IDAsXHJcbiAgICB9LCBkZXRhaWxzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQWdncmVnYXRlIGNoYW5nZXNcclxuICAgIEByZXR1cm5zIHtDaGFuZ2VEZXRhaWxzfSBgdGhpc2BcclxuICAqL1xyXG4gIGFnZ3JlZ2F0ZSAoZGV0YWlsczogQ2hhbmdlRGV0YWlscyk6IENoYW5nZURldGFpbHMge1xyXG4gICAgdGhpcy5yYXdJbnNlcnRlZCArPSBkZXRhaWxzLnJhd0luc2VydGVkO1xyXG4gICAgdGhpcy5za2lwID0gdGhpcy5za2lwIHx8IGRldGFpbHMuc2tpcDtcclxuICAgIHRoaXMuaW5zZXJ0ZWQgKz0gZGV0YWlscy5pbnNlcnRlZDtcclxuICAgIHRoaXMudGFpbFNoaWZ0ICs9IGRldGFpbHMudGFpbFNoaWZ0O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKiogVG90YWwgb2Zmc2V0IGNvbnNpZGVyaW5nIGFsbCBjaGFuZ2VzICovXHJcbiAgZ2V0IG9mZnNldCAoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnRhaWxTaGlmdCArIHRoaXMuaW5zZXJ0ZWQubGVuZ3RoO1xyXG4gIH1cclxufVxyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgdHlwZSB7IFRhaWxEZXRhaWxzLCBBcHBlbmRUYWlsIH0gZnJvbSAnLi90YWlsLWRldGFpbHMuanMnO1xyXG5pbXBvcnQgdHlwZSBDaGFuZ2VEZXRhaWxzIGZyb20gJy4vY2hhbmdlLWRldGFpbHMuanMnO1xyXG5cclxuXHJcbnR5cGUgQ29udGludW91c1RhaWxTdGF0ZSA9IHtcclxuICB2YWx1ZTogJFByb3BlcnR5VHlwZTxDb250aW51b3VzVGFpbERldGFpbHMsICd2YWx1ZSc+LFxyXG4gIGZyb206ICRQcm9wZXJ0eVR5cGU8Q29udGludW91c1RhaWxEZXRhaWxzLCAnZnJvbSc+LFxyXG4gIHN0b3A/OiAkUHJvcGVydHlUeXBlPENvbnRpbnVvdXNUYWlsRGV0YWlscywgJ3N0b3AnPixcclxufTtcclxuXHJcbi8qKiBQcm92aWRlcyBkZXRhaWxzIG9mIGNvbnRpbnVvdXMgZXh0cmFjdGVkIHRhaWwgKi9cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgQ29udGludW91c1RhaWxEZXRhaWxzIGltcGxlbWVudHMgVGFpbERldGFpbHMge1xyXG4gIC8qKiBUYWlsIHZhbHVlIGFzIHN0cmluZyAqL1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbiAgLyoqIFRhaWwgc3RhcnQgcG9zaXRpb24gKi9cclxuICBmcm9tOiBudW1iZXI7XHJcbiAgLyoqIFN0YXJ0IHBvc2l0aW9uICovXHJcbiAgc3RvcDogP251bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IgKHZhbHVlPzogc3RyaW5nPScnLCBmcm9tPzogbnVtYmVyPTAsIHN0b3A/OiBudW1iZXIpIHtcclxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIHRoaXMuZnJvbSA9IGZyb207XHJcbiAgICB0aGlzLnN0b3AgPSBzdG9wO1xyXG4gIH1cclxuXHJcbiAgdG9TdHJpbmcgKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLnZhbHVlOyB9XHJcblxyXG4gIGV4dGVuZCAodGFpbDogc3RyaW5nIHwgVGFpbERldGFpbHMpOiB2b2lkIHtcclxuICAgIHRoaXMudmFsdWUgKz0gU3RyaW5nKHRhaWwpO1xyXG4gIH1cclxuXHJcbiAgYXBwZW5kVG8gKG1hc2tlZDogQXBwZW5kVGFpbCk6IENoYW5nZURldGFpbHMge1xyXG4gICAgcmV0dXJuIG1hc2tlZC5hcHBlbmQodGhpcy50b1N0cmluZygpLCB7IHRhaWw6IHRydWUgfSlcclxuICAgICAgLmFnZ3JlZ2F0ZShtYXNrZWQuX2FwcGVuZFBsYWNlaG9sZGVyKCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHN0YXRlICgpOiBDb250aW51b3VzVGFpbFN0YXRlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxyXG4gICAgICBmcm9tOiB0aGlzLmZyb20sXHJcbiAgICAgIHN0b3A6IHRoaXMuc3RvcCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXQgc3RhdGUgKHN0YXRlOiBDb250aW51b3VzVGFpbFN0YXRlKSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHN0YXRlKTtcclxuICB9XHJcblxyXG4gIHNoaWZ0QmVmb3JlIChwb3M6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBpZiAodGhpcy5mcm9tID49IHBvcyB8fCAhdGhpcy52YWx1ZS5sZW5ndGgpIHJldHVybiAnJztcclxuXHJcbiAgICBjb25zdCBzaGlmdENoYXIgPSB0aGlzLnZhbHVlWzBdO1xyXG4gICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuc2xpY2UoMSk7XHJcbiAgICByZXR1cm4gc2hpZnRDaGFyO1xyXG4gIH1cclxufVxyXG4iLCIvKipcclxuICogQXBwbGllcyBtYXNrIG9uIGVsZW1lbnQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge0hUTUxJbnB1dEVsZW1lbnR8SFRNTFRleHRBcmVhRWxlbWVudHxNYXNrRWxlbWVudH0gZWwgLSBFbGVtZW50IHRvIGFwcGx5IG1hc2tcclxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBDdXN0b20gbWFzayBvcHRpb25zXHJcbiAqIEByZXR1cm4ge0lucHV0TWFza31cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmZ1bmN0aW9uIElNYXNrIChlbCwgb3B0cz17fSkge1xyXG4gIC8vIGN1cnJlbnRseSBhdmFpbGFibGUgb25seSBmb3IgaW5wdXQtbGlrZSBlbGVtZW50c1xyXG4gIHJldHVybiBuZXcgSU1hc2suSW5wdXRNYXNrKGVsLCBvcHRzKTtcclxufVxyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcclxuaW1wb3J0IENvbnRpbnVvdXNUYWlsRGV0YWlscyBmcm9tICcuLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcclxuaW1wb3J0IHsgdHlwZSBEaXJlY3Rpb24sIERJUkVDVElPTiwgaXNTdHJpbmcgfSBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgdHlwZSBUYWlsRGV0YWlscyB9IGZyb20gJy4uL2NvcmUvdGFpbC1kZXRhaWxzLmpzJztcclxuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcclxuXHJcblxyXG4vKiogU3VwcG9ydGVkIG1hc2sgdHlwZSAqL1xyXG5leHBvcnRcclxudHlwZSBNYXNrID1cclxuICBzdHJpbmcgfFxyXG4gIFN0cmluZyB8XHJcbiAgUmVnRXhwIHxcclxuICBDbGFzczxOdW1iZXI+IHxcclxuICBDbGFzczxEYXRlPiB8XHJcbiAgQXJyYXk8YW55PiB8XHJcbiAgJFByb3BlcnR5VHlwZTxNYXNrZWQ8Kj4sICd2YWxpZGF0ZSc+IHxcclxuICBNYXNrZWQ8Kj4gfFxyXG4gIENsYXNzPE1hc2tlZDwqPj47XHJcblxyXG5leHBvcnRcclxudHlwZSBNYXNrZWRTdGF0ZSA9IHt8XHJcbiAgX3ZhbHVlOiBzdHJpbmcsXHJcbnx9O1xyXG5cclxuLyoqIEFwcGVuZCBmbGFncyAqL1xyXG5leHBvcnRcclxudHlwZSBBcHBlbmRGbGFncyA9IHtcclxuICBpbnB1dD86IGJvb2xlYW4sXHJcbiAgdGFpbD86IGJvb2xlYW4sXHJcbiAgcmF3PzogYm9vbGVhbixcclxuICBfYmVmb3JlVGFpbFN0YXRlPzogYW55LCAgLy8gVE9ETyB0eXBlcy4uLlxyXG59O1xyXG5cclxuLyoqIEV4dHJhY3QgZmxhZ3MgKi9cclxuZXhwb3J0XHJcbnR5cGUgRXh0cmFjdEZsYWdzID0ge1xyXG4gIHJhdz86IGJvb2xlYW5cclxufTtcclxuXHJcbmV4cG9ydFxyXG50eXBlIE1hc2tlZE9wdGlvbnM8TWFza1R5cGU+ID0ge1xyXG4gIG1hc2s6ICRQcm9wZXJ0eVR5cGU8TWFza2VkPE1hc2tUeXBlPiwgJ21hc2snPixcclxuICBwYXJlbnQ/OiAkUHJvcGVydHlUeXBlPE1hc2tlZDwqPiwgJ3BhcmVudCc+LFxyXG4gIHByZXBhcmU/OiAkUHJvcGVydHlUeXBlPE1hc2tlZDxNYXNrVHlwZT4sICdwcmVwYXJlJz4sXHJcbiAgdmFsaWRhdGU/OiAkUHJvcGVydHlUeXBlPE1hc2tlZDxNYXNrVHlwZT4sICd2YWxpZGF0ZSc+LFxyXG4gIGNvbW1pdD86ICRQcm9wZXJ0eVR5cGU8TWFza2VkPE1hc2tUeXBlPiwgJ2NvbW1pdCc+LFxyXG4gIG92ZXJ3cml0ZT86ICRQcm9wZXJ0eVR5cGU8TWFza2VkPE1hc2tUeXBlPiwgJ292ZXJ3cml0ZSc+LFxyXG4gIGZvcm1hdD86ICRQcm9wZXJ0eVR5cGU8TWFza2VkPE1hc2tUeXBlPiwgJ2Zvcm1hdCc+LFxyXG4gIHBhcnNlPzogJFByb3BlcnR5VHlwZTxNYXNrZWQ8TWFza1R5cGU+LCAncGFyc2UnPixcclxufTtcclxuXHJcblxyXG4vKiogUHJvdmlkZXMgY29tbW9uIG1hc2tpbmcgc3R1ZmYgKi9cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgTWFza2VkPE1hc2tUeXBlPiB7XHJcbiAgc3RhdGljIERFRkFVTFRTOiBhbnk7IC8vICRTaGFwZTxNYXNrZWRPcHRpb25zPjsgVE9ETyBhZnRlciBmaXggaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ3NzNcclxuXHJcbiAgLyoqIEB0eXBlIHtNYXNrfSAqL1xyXG4gIG1hc2s6IE1hc2tUeXBlO1xyXG4gIC8qKiAqLyAvLyAkRmxvd0ZpeE1lIG5vIGlkZWFzXHJcbiAgcGFyZW50OiA/TWFza2VkPCo+O1xyXG4gIC8qKiBUcmFuc2Zvcm1zIHZhbHVlIGJlZm9yZSBtYXNrIHByb2Nlc3NpbmcgKi9cclxuICBwcmVwYXJlOiAoc3RyaW5nLCBNYXNrZWQ8TWFza1R5cGU+LCBBcHBlbmRGbGFncykgPT4gc3RyaW5nO1xyXG4gIC8qKiBWYWxpZGF0ZXMgaWYgdmFsdWUgaXMgYWNjZXB0YWJsZSAqL1xyXG4gIHZhbGlkYXRlOiAoc3RyaW5nLCBNYXNrZWQ8TWFza1R5cGU+LCBBcHBlbmRGbGFncykgPT4gYm9vbGVhbjtcclxuICAvKiogRG9lcyBhZGRpdGlvbmFsIHByb2Nlc3NpbmcgaW4gdGhlIGVuZCBvZiBlZGl0aW5nICovXHJcbiAgY29tbWl0OiAoc3RyaW5nLCBNYXNrZWQ8TWFza1R5cGU+KSA9PiB2b2lkO1xyXG4gIC8qKiBGb3JtYXQgdHlwZWQgdmFsdWUgdG8gc3RyaW5nICovXHJcbiAgZm9ybWF0OiAoYW55LCBNYXNrZWQ8TWFza1R5cGU+KSA9PiBzdHJpbmc7XHJcbiAgLyoqIFBhcnNlIHN0cmdpbiB0byBnZXQgdHlwZWQgdmFsdWUgKi9cclxuICBwYXJzZTogKHN0cmluZywgTWFza2VkPE1hc2tUeXBlPikgPT4gYW55O1xyXG4gIC8qKiBFbmFibGUgY2hhcmFjdGVycyBvdmVyd3JpdGluZyAqL1xyXG4gIG92ZXJ3cml0ZTogP2Jvb2xlYW47XHJcbiAgLyoqICovXHJcbiAgaXNJbml0aWFsaXplZDogYm9vbGVhbjtcclxuICBfdmFsdWU6IHN0cmluZztcclxuICBfcmVmcmVzaGluZzogP2Jvb2xlYW47XHJcbiAgX2lzb2xhdGVkOiA/Ym9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IgKG9wdHM6IHtbc3RyaW5nXTogYW55fSkge1xyXG4gICAgdGhpcy5fdmFsdWUgPSAnJztcclxuICAgIHRoaXMuX3VwZGF0ZSh7XHJcbiAgICAgIC4uLk1hc2tlZC5ERUZBVUxUUyxcclxuICAgICAgLi4ub3B0cyxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5pc0luaXRpYWxpemVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKiBTZXRzIGFuZCBhcHBsaWVzIG5ldyBvcHRpb25zICovXHJcbiAgdXBkYXRlT3B0aW9ucyAob3B0czoge1tzdHJpbmddOiBhbnl9KSB7XHJcbiAgICBpZiAoIU9iamVjdC5rZXlzKG9wdHMpLmxlbmd0aCkgcmV0dXJuO1xyXG4gICAgdGhpcy53aXRoVmFsdWVSZWZyZXNoKHRoaXMuX3VwZGF0ZS5iaW5kKHRoaXMsIG9wdHMpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgU2V0cyBuZXcgb3B0aW9uc1xyXG4gICAgQHByb3RlY3RlZFxyXG4gICovXHJcbiAgX3VwZGF0ZSAob3B0czoge1tzdHJpbmddOiBhbnl9KSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdHMpO1xyXG4gIH1cclxuXHJcbiAgLyoqIE1hc2sgc3RhdGUgKi9cclxuICBnZXQgc3RhdGUgKCk6IGFueSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBfdmFsdWU6IHRoaXMudmFsdWUsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0IHN0YXRlIChzdGF0ZTogYW55KSB7XHJcbiAgICB0aGlzLl92YWx1ZSA9IHN0YXRlLl92YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKiBSZXNldHMgdmFsdWUgKi9cclxuICByZXNldCAoKSB7XHJcbiAgICB0aGlzLl92YWx1ZSA9ICcnO1xyXG4gIH1cclxuXHJcbiAgLyoqICovXHJcbiAgZ2V0IHZhbHVlICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0IHZhbHVlICh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJlc29sdmUgbmV3IHZhbHVlICovXHJcbiAgcmVzb2x2ZSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB0aGlzLmFwcGVuZCh2YWx1ZSwge2lucHV0OiB0cnVlfSwgJycpO1xyXG4gICAgdGhpcy5kb0NvbW1pdCgpO1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBnZXQgdW5tYXNrZWRWYWx1ZSAoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0IHVubWFza2VkVmFsdWUgKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMucmVzZXQoKTtcclxuICAgIHRoaXMuYXBwZW5kKHZhbHVlLCB7fSwgJycpO1xyXG4gICAgdGhpcy5kb0NvbW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqICovXHJcbiAgZ2V0IHR5cGVkVmFsdWUgKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5kb1BhcnNlKHRoaXMudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgc2V0IHR5cGVkVmFsdWUgKHZhbHVlOiBhbnkpIHtcclxuICAgIHRoaXMudmFsdWUgPSB0aGlzLmRvRm9ybWF0KHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKiBWYWx1ZSB0aGF0IGluY2x1ZGVzIHJhdyB1c2VyIGlucHV0ICovXHJcbiAgZ2V0IHJhd0lucHV0VmFsdWUgKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5leHRyYWN0SW5wdXQoMCwgdGhpcy52YWx1ZS5sZW5ndGgsIHtyYXc6IHRydWV9KTtcclxuICB9XHJcblxyXG4gIHNldCByYXdJbnB1dFZhbHVlICh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB0aGlzLmFwcGVuZCh2YWx1ZSwge3JhdzogdHJ1ZX0sICcnKTtcclxuICAgIHRoaXMuZG9Db21taXQoKTtcclxuICB9XHJcblxyXG4gIC8qKiAqL1xyXG4gIGdldCBpc0NvbXBsZXRlICgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqIEZpbmRzIG5lYXJlc3QgaW5wdXQgcG9zaXRpb24gaW4gZGlyZWN0aW9uICovXHJcbiAgbmVhcmVzdElucHV0UG9zIChjdXJzb3JQb3M6IG51bWJlciwgZGlyZWN0aW9uPzogRGlyZWN0aW9uKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBjdXJzb3JQb3M7XHJcbiAgfVxyXG5cclxuICAvKiogRXh0cmFjdHMgdmFsdWUgaW4gcmFuZ2UgY29uc2lkZXJpbmcgZmxhZ3MgKi9cclxuICBleHRyYWN0SW5wdXQgKGZyb21Qb3M/OiBudW1iZXI9MCwgdG9Qb3M/OiBudW1iZXI9dGhpcy52YWx1ZS5sZW5ndGgsIGZsYWdzPzogRXh0cmFjdEZsYWdzKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHVlLnNsaWNlKGZyb21Qb3MsIHRvUG9zKTtcclxuICB9XHJcblxyXG4gIC8qKiBFeHRyYWN0cyB0YWlsIGluIHJhbmdlICovXHJcbiAgZXh0cmFjdFRhaWwgKGZyb21Qb3M/OiBudW1iZXI9MCwgdG9Qb3M/OiBudW1iZXI9dGhpcy52YWx1ZS5sZW5ndGgpOiBUYWlsRGV0YWlscyB7XHJcbiAgICByZXR1cm4gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyh0aGlzLmV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcyksIGZyb21Qb3MpO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFwcGVuZHMgdGFpbCAqL1xyXG4gIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcclxuICBhcHBlbmRUYWlsICh0YWlsOiBzdHJpbmcgfCBUYWlsRGV0YWlscyk6IENoYW5nZURldGFpbHMge1xyXG4gICAgaWYgKGlzU3RyaW5nKHRhaWwpKSB0YWlsID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbCkpO1xyXG5cclxuICAgIHJldHVybiB0YWlsLmFwcGVuZFRvKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFwcGVuZHMgY2hhciAqL1xyXG4gIF9hcHBlbmRDaGFyUmF3IChjaDogc3RyaW5nLCBmbGFnczogQXBwZW5kRmxhZ3M9e30pOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIGNoID0gdGhpcy5kb1ByZXBhcmUoY2gsIGZsYWdzKTtcclxuICAgIGlmICghY2gpIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG5cclxuICAgIHRoaXMuX3ZhbHVlICs9IGNoO1xyXG4gICAgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKHtcclxuICAgICAgaW5zZXJ0ZWQ6IGNoLFxyXG4gICAgICByYXdJbnNlcnRlZDogY2gsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBBcHBlbmRzIGNoYXIgKi9cclxuICBfYXBwZW5kQ2hhciAoY2g6IHN0cmluZywgZmxhZ3M6IEFwcGVuZEZsYWdzPXt9LCBjaGVja1RhaWw/OiBUYWlsRGV0YWlscyk6IENoYW5nZURldGFpbHMge1xyXG4gICAgY29uc3QgY29uc2lzdGVudFN0YXRlOiBNYXNrZWRTdGF0ZSA9IHRoaXMuc3RhdGU7XHJcbiAgICBsZXQgZGV0YWlsczogQ2hhbmdlRGV0YWlscyA9IHRoaXMuX2FwcGVuZENoYXJSYXcoY2gsIGZsYWdzKTtcclxuXHJcbiAgICBpZiAoZGV0YWlscy5pbnNlcnRlZCkge1xyXG4gICAgICBsZXQgY29uc2lzdGVudFRhaWw7XHJcbiAgICAgIGxldCBhcHBlbmRlZCA9IHRoaXMuZG9WYWxpZGF0ZShmbGFncykgIT09IGZhbHNlO1xyXG5cclxuICAgICAgaWYgKGFwcGVuZGVkICYmIGNoZWNrVGFpbCAhPSBudWxsKSB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvbiBvaywgY2hlY2sgdGFpbFxyXG4gICAgICAgIGNvbnN0IGJlZm9yZVRhaWxTdGF0ZSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgaWYgKHRoaXMub3ZlcndyaXRlKSB7XHJcbiAgICAgICAgICBjb25zaXN0ZW50VGFpbCA9IGNoZWNrVGFpbC5zdGF0ZTtcclxuICAgICAgICAgIGNoZWNrVGFpbC5zaGlmdEJlZm9yZSh0aGlzLnZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0YWlsRGV0YWlscyA9IHRoaXMuYXBwZW5kVGFpbChjaGVja1RhaWwpO1xyXG5cclxuICAgICAgICBhcHBlbmRlZCA9IHRhaWxEZXRhaWxzLnJhd0luc2VydGVkID09PSBjaGVja1RhaWwudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgLy8gaWYgb2ssIHJvbGxiYWNrIHN0YXRlIGFmdGVyIHRhaWxcclxuICAgICAgICBpZiAoYXBwZW5kZWQgJiYgdGFpbERldGFpbHMuaW5zZXJ0ZWQpIHRoaXMuc3RhdGUgPSBiZWZvcmVUYWlsU3RhdGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHJldmVydCBhbGwgaWYgc29tZXRoaW5nIHdlbnQgd3JvbmdcclxuICAgICAgaWYgKCFhcHBlbmRlZCkge1xyXG4gICAgICAgIGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBjb25zaXN0ZW50U3RhdGU7XHJcbiAgICAgICAgaWYgKGNoZWNrVGFpbCAmJiBjb25zaXN0ZW50VGFpbCkgY2hlY2tUYWlsLnN0YXRlID0gY29uc2lzdGVudFRhaWw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkZXRhaWxzO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFwcGVuZHMgb3B0aW9uYWwgcGxhY2Vob2xkZXIgYXQgZW5kICovXHJcbiAgX2FwcGVuZFBsYWNlaG9sZGVyICgpOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFwcGVuZHMgc3ltYm9scyBjb25zaWRlcmluZyBmbGFncyAqL1xyXG4gIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcclxuICBhcHBlbmQgKHN0cjogc3RyaW5nLCBmbGFncz86IEFwcGVuZEZsYWdzLCB0YWlsPzogc3RyaW5nIHwgVGFpbERldGFpbHMpOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIGlmICghaXNTdHJpbmcoc3RyKSkgdGhyb3cgbmV3IEVycm9yKCd2YWx1ZSBzaG91bGQgYmUgc3RyaW5nJyk7XHJcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICAgIGNvbnN0IGNoZWNrVGFpbCA9IGlzU3RyaW5nKHRhaWwpID8gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbCkpIDogdGFpbDtcclxuICAgIGlmIChmbGFncy50YWlsKSBmbGFncy5fYmVmb3JlVGFpbFN0YXRlID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICBmb3IgKGxldCBjaT0wOyBjaTxzdHIubGVuZ3RoOyArK2NpKSB7XHJcbiAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRoaXMuX2FwcGVuZENoYXIoc3RyW2NpXSwgZmxhZ3MsIGNoZWNrVGFpbCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGFwcGVuZCB0YWlsIGJ1dCBhZ2dyZWdhdGUgb25seSB0YWlsU2hpZnRcclxuICAgIGlmIChjaGVja1RhaWwgIT0gbnVsbCkge1xyXG4gICAgICBkZXRhaWxzLnRhaWxTaGlmdCArPSB0aGlzLmFwcGVuZFRhaWwoY2hlY2tUYWlsKS50YWlsU2hpZnQ7XHJcbiAgICAgIC8vIFRPRE8gaXQncyBhIGdvb2QgaWRlYSB0byBjbGVhciBzdGF0ZSBhZnRlciBhcHBlbmRpbmcgZW5kc1xyXG4gICAgICAvLyBidXQgaXQgY2F1c2VzIGJ1Z3Mgd2hlbiBvbmUgYXBwZW5kIGNhbGxzIGFub3RoZXIgKHdoZW4gZHluYW1pYyBkaXNwYXRjaCBzZXQgcmF3SW5wdXRWYWx1ZSlcclxuICAgICAgLy8gdGhpcy5fcmVzZXRCZWZvcmVUYWlsU3RhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGV0YWlscztcclxuICB9XHJcblxyXG4gIC8qKiAqL1xyXG4gIHJlbW92ZSAoZnJvbVBvcz86IG51bWJlcj0wLCB0b1Bvcz86IG51bWJlcj10aGlzLnZhbHVlLmxlbmd0aCk6IENoYW5nZURldGFpbHMge1xyXG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIGZyb21Qb3MpICsgdGhpcy52YWx1ZS5zbGljZSh0b1Bvcyk7XHJcbiAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICB9XHJcblxyXG4gIC8qKiBDYWxscyBmdW5jdGlvbiBhbmQgcmVhcHBsaWVzIGN1cnJlbnQgdmFsdWUgKi9cclxuICB3aXRoVmFsdWVSZWZyZXNoPFQ+KGZuOiAoKSA9PiBUKTogVCB7XHJcbiAgICBpZiAodGhpcy5fcmVmcmVzaGluZyB8fCAhdGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm4gZm4oKTtcclxuICAgIHRoaXMuX3JlZnJlc2hpbmcgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0IHJhd0lucHV0ID0gdGhpcy5yYXdJbnB1dFZhbHVlO1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xyXG5cclxuICAgIGNvbnN0IHJldCA9IGZuKCk7XHJcblxyXG4gICAgdGhpcy5yYXdJbnB1dFZhbHVlID0gcmF3SW5wdXQ7XHJcbiAgICAvLyBhcHBlbmQgbG9zdCB0cmFpbGluZyBjaGFycyBhdCBlbmRcclxuICAgIGlmICh0aGlzLnZhbHVlICE9PSB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKHRoaXMudmFsdWUpID09PSAwKSB7XHJcbiAgICAgIHRoaXMuYXBwZW5kKHZhbHVlLnNsaWNlKHRoaXMudmFsdWUubGVuZ3RoKSwge30sICcnKTtcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGUgdGhpcy5fcmVmcmVzaGluZztcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBydW5Jc29sYXRlZDxUPihmbjogKG1hc2tlZDogYW55KSA9PiBUKTogVCB7XHJcbiAgICBpZiAodGhpcy5faXNvbGF0ZWQgfHwgIXRoaXMuaXNJbml0aWFsaXplZCkgcmV0dXJuIGZuKHRoaXMpO1xyXG4gICAgdGhpcy5faXNvbGF0ZWQgPSB0cnVlO1xyXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgIGNvbnN0IHJldCA9IGZuKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIGRlbGV0ZSB0aGlzLl9pc29sYXRlZDtcclxuXHJcbiAgICByZXR1cm4gcmV0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBQcmVwYXJlcyBzdHJpbmcgYmVmb3JlIG1hc2sgcHJvY2Vzc2luZ1xyXG4gICAgQHByb3RlY3RlZFxyXG4gICovXHJcbiAgZG9QcmVwYXJlIChzdHI6IHN0cmluZywgZmxhZ3M6IEFwcGVuZEZsYWdzPXt9KTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnByZXBhcmUgP1xyXG4gICAgICB0aGlzLnByZXBhcmUoc3RyLCB0aGlzLCBmbGFncykgOlxyXG4gICAgICBzdHI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFZhbGlkYXRlcyBpZiB2YWx1ZSBpcyBhY2NlcHRhYmxlXHJcbiAgICBAcHJvdGVjdGVkXHJcbiAgKi9cclxuICBkb1ZhbGlkYXRlIChmbGFnczogQXBwZW5kRmxhZ3MpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoIXRoaXMudmFsaWRhdGUgfHwgdGhpcy52YWxpZGF0ZSh0aGlzLnZhbHVlLCB0aGlzLCBmbGFncykpICYmXHJcbiAgICAgICghdGhpcy5wYXJlbnQgfHwgdGhpcy5wYXJlbnQuZG9WYWxpZGF0ZShmbGFncykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBEb2VzIGFkZGl0aW9uYWwgcHJvY2Vzc2luZyBpbiB0aGUgZW5kIG9mIGVkaXRpbmdcclxuICAgIEBwcm90ZWN0ZWRcclxuICAqL1xyXG4gIGRvQ29tbWl0ICgpIHtcclxuICAgIGlmICh0aGlzLmNvbW1pdCkgdGhpcy5jb21taXQodGhpcy52YWx1ZSwgdGhpcyk7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBkb0Zvcm1hdCAodmFsdWU6IGFueSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0ID8gdGhpcy5mb3JtYXQodmFsdWUsIHRoaXMpIDogdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBkb1BhcnNlIChzdHI6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyc2UgPyB0aGlzLnBhcnNlKHN0ciwgdGhpcykgOiBzdHI7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBzcGxpY2UgKHN0YXJ0OiBudW1iZXIsIGRlbGV0ZUNvdW50OiBudW1iZXIsIGluc2VydGVkOiBzdHJpbmcsIHJlbW92ZURpcmVjdGlvbjogRGlyZWN0aW9uKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICBjb25zdCB0YWlsUG9zOiBudW1iZXIgPSBzdGFydCArIGRlbGV0ZUNvdW50O1xyXG4gICAgY29uc3QgdGFpbDogVGFpbERldGFpbHMgPSB0aGlzLmV4dHJhY3RUYWlsKHRhaWxQb3MpO1xyXG5cclxuICAgIGxldCBzdGFydENoYW5nZVBvczogbnVtYmVyID0gdGhpcy5uZWFyZXN0SW5wdXRQb3Moc3RhcnQsIHJlbW92ZURpcmVjdGlvbik7XHJcbiAgICBjb25zdCBjaGFuZ2VEZXRhaWxzOiBDaGFuZ2VEZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoe1xyXG4gICAgICB0YWlsU2hpZnQ6IHN0YXJ0Q2hhbmdlUG9zIC0gc3RhcnQgIC8vIGFkanVzdCB0YWlsU2hpZnQgaWYgc3RhcnQgd2FzIGFsaWduZWRcclxuICAgIH0pLmFnZ3JlZ2F0ZSh0aGlzLnJlbW92ZShzdGFydENoYW5nZVBvcykpXHJcbiAgICAgIC5hZ2dyZWdhdGUodGhpcy5hcHBlbmQoaW5zZXJ0ZWQsIHtpbnB1dDogdHJ1ZX0sIHRhaWwpKTtcclxuXHJcbiAgICByZXR1cm4gY2hhbmdlRGV0YWlscztcclxuICB9XHJcbn1cclxuTWFza2VkLkRFRkFVTFRTID0ge1xyXG4gIGZvcm1hdDogdiA9PiB2LFxyXG4gIHBhcnNlOiB2ID0+IHYsXHJcbn07XHJcblxyXG5cclxuSU1hc2suTWFza2VkID0gTWFza2VkO1xyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xyXG5pbXBvcnQgdHlwZSBNYXNrZWQgZnJvbSAnLi9iYXNlLmpzJztcclxuaW1wb3J0IHsgdHlwZSBNYXNrIH0gZnJvbSAnLi9iYXNlLmpzJztcclxuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcclxuXHJcblxyXG4vKiogR2V0IE1hc2tlZCBjbGFzcyBieSBtYXNrIHR5cGUgKi9cclxuZXhwb3J0XHJcbmZ1bmN0aW9uIG1hc2tlZENsYXNzIChtYXNrOiBNYXNrKTogQ2xhc3M8TWFza2VkPCo+PiB7XHJcbiAgaWYgKG1hc2sgPT0gbnVsbCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdtYXNrIHByb3BlcnR5IHNob3VsZCBiZSBkZWZpbmVkJyk7XHJcbiAgfVxyXG5cclxuICAvLyAkRmxvd0ZpeE1lXHJcbiAgaWYgKG1hc2sgaW5zdGFuY2VvZiBSZWdFeHApIHJldHVybiBJTWFzay5NYXNrZWRSZWdFeHA7XHJcbiAgLy8gJEZsb3dGaXhNZVxyXG4gIGlmIChpc1N0cmluZyhtYXNrKSkgcmV0dXJuIElNYXNrLk1hc2tlZFBhdHRlcm47XHJcbiAgLy8gJEZsb3dGaXhNZVxyXG4gIGlmIChtYXNrIGluc3RhbmNlb2YgRGF0ZSB8fCBtYXNrID09PSBEYXRlKSByZXR1cm4gSU1hc2suTWFza2VkRGF0ZTtcclxuICAvLyAkRmxvd0ZpeE1lXHJcbiAgaWYgKG1hc2sgaW5zdGFuY2VvZiBOdW1iZXIgfHwgdHlwZW9mIG1hc2sgPT09ICdudW1iZXInIHx8IG1hc2sgPT09IE51bWJlcikgcmV0dXJuIElNYXNrLk1hc2tlZE51bWJlcjtcclxuICAvLyAkRmxvd0ZpeE1lXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkobWFzaykgfHwgbWFzayA9PT0gQXJyYXkpIHJldHVybiBJTWFzay5NYXNrZWREeW5hbWljO1xyXG4gIC8vICRGbG93Rml4TWVcclxuICBpZiAoSU1hc2suTWFza2VkICYmIG1hc2sucHJvdG90eXBlIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSByZXR1cm4gbWFzaztcclxuICAvLyAkRmxvd0ZpeE1lXHJcbiAgaWYgKG1hc2sgaW5zdGFuY2VvZiBGdW5jdGlvbikgcmV0dXJuIElNYXNrLk1hc2tlZEZ1bmN0aW9uO1xyXG4gIC8vICRGbG93Rml4TWVcclxuICBpZiAobWFzayBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgcmV0dXJuIG1hc2suY29uc3RydWN0b3I7XHJcblxyXG4gIGNvbnNvbGUud2FybignTWFzayBub3QgZm91bmQgZm9yIG1hc2snLCBtYXNrKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxyXG4gIC8vICRGbG93Rml4TWVcclxuICByZXR1cm4gSU1hc2suTWFza2VkO1xyXG59XHJcblxyXG4vKiogQ3JlYXRlcyBuZXcge0BsaW5rIE1hc2tlZH0gZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSAqL1xyXG5leHBvcnQgZGVmYXVsdFxyXG5mdW5jdGlvbiBjcmVhdGVNYXNrIChvcHRzOiB7bWFzazogTWFza30gfCBNYXNrZWQ8Kj4pOiBNYXNrZWQ8Kj4ge1xyXG4gIC8vICRGbG93Rml4TWVcclxuICBpZiAoSU1hc2suTWFza2VkICYmIChvcHRzIGluc3RhbmNlb2YgSU1hc2suTWFza2VkKSkgcmV0dXJuIG9wdHM7XHJcblxyXG4gIG9wdHMgPSB7Li4ub3B0c307XHJcbiAgY29uc3QgbWFzayA9IG9wdHMubWFzaztcclxuXHJcbiAgLy8gJEZsb3dGaXhNZVxyXG4gIGlmIChJTWFzay5NYXNrZWQgJiYgKG1hc2sgaW5zdGFuY2VvZiBJTWFzay5NYXNrZWQpKSByZXR1cm4gbWFzaztcclxuXHJcbiAgY29uc3QgTWFza2VkQ2xhc3MgPSBtYXNrZWRDbGFzcyhtYXNrKTtcclxuICBpZiAoIU1hc2tlZENsYXNzKSB0aHJvdyBuZXcgRXJyb3IoJ01hc2tlZCBjbGFzcyBpcyBub3QgZm91bmQgZm9yIHByb3ZpZGVkIG1hc2ssIGFwcHJvcHJpYXRlIG1vZHVsZSBuZWVkcyB0byBiZSBpbXBvcnQgbWFudWFsbHkgYmVmb3JlIGNyZWF0aW5nIG1hc2suJyk7XHJcbiAgcmV0dXJuIG5ldyBNYXNrZWRDbGFzcyhvcHRzKTtcclxufVxyXG5cclxuXHJcbklNYXNrLmNyZWF0ZU1hc2sgPSBjcmVhdGVNYXNrO1xyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgY3JlYXRlTWFzayBmcm9tICcuLi9mYWN0b3J5LmpzJztcclxuaW1wb3J0IHR5cGUgTWFza2VkIGZyb20gJy4uL2Jhc2UuanMnO1xyXG5pbXBvcnQgdHlwZSBNYXNrZWRQYXR0ZXJuIGZyb20gJy4uL3BhdHRlcm4uanMnO1xyXG5pbXBvcnQge3R5cGUgVGFpbERldGFpbHN9IGZyb20gJy4uLy4uL2NvcmUvdGFpbC1kZXRhaWxzLmpzJztcclxuaW1wb3J0IHt0eXBlIE1hc2ssIHR5cGUgRXh0cmFjdEZsYWdzLCB0eXBlIEFwcGVuZEZsYWdzfSBmcm9tICcuLi9iYXNlLmpzJztcclxuaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XHJcbmltcG9ydCB7RElSRUNUSU9OLCB0eXBlIERpcmVjdGlvbn0gZnJvbSAnLi4vLi4vY29yZS91dGlscy5qcyc7XHJcbmltcG9ydCB7dHlwZSBQYXR0ZXJuQmxvY2t9IGZyb20gJy4vYmxvY2suanMnO1xyXG5cclxuXHJcbmV4cG9ydFxyXG50eXBlIERlZmluaXRpb25zID0ge1tzdHJpbmddOiBNYXNrfTtcclxuXHJcbi8qKiAqL1xyXG50eXBlIFBhdHRlcm5JbnB1dERlZmluaXRpb25PcHRpb25zID0ge1xyXG4gIHBhcmVudDogJFByb3BlcnR5VHlwZTxQYXR0ZXJuSW5wdXREZWZpbml0aW9uLCAncGFyZW50Jz4sXHJcbiAgbWFzazogTWFzayxcclxuICBpc09wdGlvbmFsOiAkUHJvcGVydHlUeXBlPFBhdHRlcm5JbnB1dERlZmluaXRpb24sICdpc09wdGlvbmFsJz4sXHJcbiAgbGF6eTogJFByb3BlcnR5VHlwZTxQYXR0ZXJuSW5wdXREZWZpbml0aW9uLCAnbGF6eSc+LFxyXG4gIHBsYWNlaG9sZGVyQ2hhcjogJFByb3BlcnR5VHlwZTxQYXR0ZXJuSW5wdXREZWZpbml0aW9uLCAncGxhY2Vob2xkZXJDaGFyJz4sXHJcbn07XHJcblxyXG50eXBlIFBhdHRlcm5JbnB1dERlZmluaXRpb25TdGF0ZSA9IHtcclxuICBtYXNrZWQ6ICosXHJcbiAgX2lzRmlsbGVkOiBib29sZWFuLFxyXG59O1xyXG5cclxuZXhwb3J0XHJcbmNvbnN0IERFRkFVTFRfSU5QVVRfREVGSU5JVElPTlMgPSB7XHJcbiAgJzAnOiAvXFxkLyxcclxuICAnYSc6IC9bXFx1MDA0MS1cXHUwMDVBXFx1MDA2MS1cXHUwMDdBXFx1MDBBQVxcdTAwQjVcXHUwMEJBXFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzODZcXHUwMzg4LVxcdTAzOEFcXHUwMzhDXFx1MDM4RS1cXHUwM0ExXFx1MDNBMy1cXHUwM0Y1XFx1MDNGNy1cXHUwNDgxXFx1MDQ4QS1cXHUwNTI3XFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1RDAtXFx1MDVFQVxcdTA1RjAtXFx1MDVGMlxcdTA2MjAtXFx1MDY0QVxcdTA2NkVcXHUwNjZGXFx1MDY3MS1cXHUwNkQzXFx1MDZENVxcdTA2RTVcXHUwNkU2XFx1MDZFRVxcdTA2RUZcXHUwNkZBLVxcdTA2RkNcXHUwNkZGXFx1MDcxMFxcdTA3MTItXFx1MDcyRlxcdTA3NEQtXFx1MDdBNVxcdTA3QjFcXHUwN0NBLVxcdTA3RUFcXHUwN0Y0XFx1MDdGNVxcdTA3RkFcXHUwODAwLVxcdTA4MTVcXHUwODFBXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOEEwXFx1MDhBMi1cXHUwOEFDXFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5NzdcXHUwOTc5LVxcdTA5N0ZcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwQTA1LVxcdTBBMEFcXHUwQTBGXFx1MEExMFxcdTBBMTMtXFx1MEEyOFxcdTBBMkEtXFx1MEEzMFxcdTBBMzJcXHUwQTMzXFx1MEEzNVxcdTBBMzZcXHUwQTM4XFx1MEEzOVxcdTBBNTktXFx1MEE1Q1xcdTBBNUVcXHUwQTcyLVxcdTBBNzRcXHUwQTg1LVxcdTBBOERcXHUwQThGLVxcdTBBOTFcXHUwQTkzLVxcdTBBQThcXHUwQUFBLVxcdTBBQjBcXHUwQUIyXFx1MEFCM1xcdTBBQjUtXFx1MEFCOVxcdTBBQkRcXHUwQUQwXFx1MEFFMFxcdTBBRTFcXHUwQjA1LVxcdTBCMENcXHUwQjBGXFx1MEIxMFxcdTBCMTMtXFx1MEIyOFxcdTBCMkEtXFx1MEIzMFxcdTBCMzJcXHUwQjMzXFx1MEIzNS1cXHUwQjM5XFx1MEIzRFxcdTBCNUNcXHUwQjVEXFx1MEI1Ri1cXHUwQjYxXFx1MEI3MVxcdTBCODNcXHUwQjg1LVxcdTBCOEFcXHUwQjhFLVxcdTBCOTBcXHUwQjkyLVxcdTBCOTVcXHUwQjk5XFx1MEI5QVxcdTBCOUNcXHUwQjlFXFx1MEI5RlxcdTBCQTNcXHUwQkE0XFx1MEJBOC1cXHUwQkFBXFx1MEJBRS1cXHUwQkI5XFx1MEJEMFxcdTBDMDUtXFx1MEMwQ1xcdTBDMEUtXFx1MEMxMFxcdTBDMTItXFx1MEMyOFxcdTBDMkEtXFx1MEMzM1xcdTBDMzUtXFx1MEMzOVxcdTBDM0RcXHUwQzU4XFx1MEM1OVxcdTBDNjBcXHUwQzYxXFx1MEM4NS1cXHUwQzhDXFx1MEM4RS1cXHUwQzkwXFx1MEM5Mi1cXHUwQ0E4XFx1MENBQS1cXHUwQ0IzXFx1MENCNS1cXHUwQ0I5XFx1MENCRFxcdTBDREVcXHUwQ0UwXFx1MENFMVxcdTBDRjFcXHUwQ0YyXFx1MEQwNS1cXHUwRDBDXFx1MEQwRS1cXHUwRDEwXFx1MEQxMi1cXHUwRDNBXFx1MEQzRFxcdTBENEVcXHUwRDYwXFx1MEQ2MVxcdTBEN0EtXFx1MEQ3RlxcdTBEODUtXFx1MEQ5NlxcdTBEOUEtXFx1MERCMVxcdTBEQjMtXFx1MERCQlxcdTBEQkRcXHUwREMwLVxcdTBEQzZcXHUwRTAxLVxcdTBFMzBcXHUwRTMyXFx1MEUzM1xcdTBFNDAtXFx1MEU0NlxcdTBFODFcXHUwRTgyXFx1MEU4NFxcdTBFODdcXHUwRTg4XFx1MEU4QVxcdTBFOERcXHUwRTk0LVxcdTBFOTdcXHUwRTk5LVxcdTBFOUZcXHUwRUExLVxcdTBFQTNcXHUwRUE1XFx1MEVBN1xcdTBFQUFcXHUwRUFCXFx1MEVBRC1cXHUwRUIwXFx1MEVCMlxcdTBFQjNcXHUwRUJEXFx1MEVDMC1cXHUwRUM0XFx1MEVDNlxcdTBFREMtXFx1MEVERlxcdTBGMDBcXHUwRjQwLVxcdTBGNDdcXHUwRjQ5LVxcdTBGNkNcXHUwRjg4LVxcdTBGOENcXHUxMDAwLVxcdTEwMkFcXHUxMDNGXFx1MTA1MC1cXHUxMDU1XFx1MTA1QS1cXHUxMDVEXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2RS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4RVxcdTEwQTAtXFx1MTBDNVxcdTEwQzdcXHUxMENEXFx1MTBEMC1cXHUxMEZBXFx1MTBGQy1cXHUxMjQ4XFx1MTI0QS1cXHUxMjREXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNUEtXFx1MTI1RFxcdTEyNjAtXFx1MTI4OFxcdTEyOEEtXFx1MTI4RFxcdTEyOTAtXFx1MTJCMFxcdTEyQjItXFx1MTJCNVxcdTEyQjgtXFx1MTJCRVxcdTEyQzBcXHUxMkMyLVxcdTEyQzVcXHUxMkM4LVxcdTEyRDZcXHUxMkQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNUFcXHUxMzgwLVxcdTEzOEZcXHUxM0EwLVxcdTEzRjRcXHUxNDAxLVxcdTE2NkNcXHUxNjZGLVxcdTE2N0ZcXHUxNjgxLVxcdTE2OUFcXHUxNkEwLVxcdTE2RUFcXHUxNzAwLVxcdTE3MENcXHUxNzBFLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NkNcXHUxNzZFLVxcdTE3NzBcXHUxNzgwLVxcdTE3QjNcXHUxN0Q3XFx1MTdEQ1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThBOFxcdTE4QUFcXHUxOEIwLVxcdTE4RjVcXHUxOTAwLVxcdTE5MUNcXHUxOTUwLVxcdTE5NkRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5QUJcXHUxOUMxLVxcdTE5QzdcXHUxQTAwLVxcdTFBMTZcXHUxQTIwLVxcdTFBNTRcXHUxQUE3XFx1MUIwNS1cXHUxQjMzXFx1MUI0NS1cXHUxQjRCXFx1MUI4My1cXHUxQkEwXFx1MUJBRVxcdTFCQUZcXHUxQkJBLVxcdTFCRTVcXHUxQzAwLVxcdTFDMjNcXHUxQzRELVxcdTFDNEZcXHUxQzVBLVxcdTFDN0RcXHUxQ0U5LVxcdTFDRUNcXHUxQ0VFLVxcdTFDRjFcXHUxQ0Y1XFx1MUNGNlxcdTFEMDAtXFx1MURCRlxcdTFFMDAtXFx1MUYxNVxcdTFGMTgtXFx1MUYxRFxcdTFGMjAtXFx1MUY0NVxcdTFGNDgtXFx1MUY0RFxcdTFGNTAtXFx1MUY1N1xcdTFGNTlcXHUxRjVCXFx1MUY1RFxcdTFGNUYtXFx1MUY3RFxcdTFGODAtXFx1MUZCNFxcdTFGQjYtXFx1MUZCQ1xcdTFGQkVcXHUxRkMyLVxcdTFGQzRcXHUxRkM2LVxcdTFGQ0NcXHUxRkQwLVxcdTFGRDNcXHUxRkQ2LVxcdTFGREJcXHUxRkUwLVxcdTFGRUNcXHUxRkYyLVxcdTFGRjRcXHUxRkY2LVxcdTFGRkNcXHUyMDcxXFx1MjA3RlxcdTIwOTAtXFx1MjA5Q1xcdTIxMDJcXHUyMTA3XFx1MjEwQS1cXHUyMTEzXFx1MjExNVxcdTIxMTktXFx1MjExRFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMkEtXFx1MjEyRFxcdTIxMkYtXFx1MjEzOVxcdTIxM0MtXFx1MjEzRlxcdTIxNDUtXFx1MjE0OVxcdTIxNEVcXHUyMTgzXFx1MjE4NFxcdTJDMDAtXFx1MkMyRVxcdTJDMzAtXFx1MkM1RVxcdTJDNjAtXFx1MkNFNFxcdTJDRUItXFx1MkNFRVxcdTJDRjJcXHUyQ0YzXFx1MkQwMC1cXHUyRDI1XFx1MkQyN1xcdTJEMkRcXHUyRDMwLVxcdTJENjdcXHUyRDZGXFx1MkQ4MC1cXHUyRDk2XFx1MkRBMC1cXHUyREE2XFx1MkRBOC1cXHUyREFFXFx1MkRCMC1cXHUyREI2XFx1MkRCOC1cXHUyREJFXFx1MkRDMC1cXHUyREM2XFx1MkRDOC1cXHUyRENFXFx1MkREMC1cXHUyREQ2XFx1MkREOC1cXHUyRERFXFx1MkUyRlxcdTMwMDVcXHUzMDA2XFx1MzAzMS1cXHUzMDM1XFx1MzAzQlxcdTMwM0NcXHUzMDQxLVxcdTMwOTZcXHUzMDlELVxcdTMwOUZcXHUzMEExLVxcdTMwRkFcXHUzMEZDLVxcdTMwRkZcXHUzMTA1LVxcdTMxMkRcXHUzMTMxLVxcdTMxOEVcXHUzMUEwLVxcdTMxQkFcXHUzMUYwLVxcdTMxRkZcXHUzNDAwLVxcdTREQjVcXHU0RTAwLVxcdTlGQ0NcXHVBMDAwLVxcdUE0OENcXHVBNEQwLVxcdUE0RkRcXHVBNTAwLVxcdUE2MENcXHVBNjEwLVxcdUE2MUZcXHVBNjJBXFx1QTYyQlxcdUE2NDAtXFx1QTY2RVxcdUE2N0YtXFx1QTY5N1xcdUE2QTAtXFx1QTZFNVxcdUE3MTctXFx1QTcxRlxcdUE3MjItXFx1QTc4OFxcdUE3OEItXFx1QTc4RVxcdUE3OTAtXFx1QTc5M1xcdUE3QTAtXFx1QTdBQVxcdUE3RjgtXFx1QTgwMVxcdUE4MDMtXFx1QTgwNVxcdUE4MDctXFx1QTgwQVxcdUE4MEMtXFx1QTgyMlxcdUE4NDAtXFx1QTg3M1xcdUE4ODItXFx1QThCM1xcdUE4RjItXFx1QThGN1xcdUE4RkJcXHVBOTBBLVxcdUE5MjVcXHVBOTMwLVxcdUE5NDZcXHVBOTYwLVxcdUE5N0NcXHVBOTg0LVxcdUE5QjJcXHVBOUNGXFx1QUEwMC1cXHVBQTI4XFx1QUE0MC1cXHVBQTQyXFx1QUE0NC1cXHVBQTRCXFx1QUE2MC1cXHVBQTc2XFx1QUE3QVxcdUFBODAtXFx1QUFBRlxcdUFBQjFcXHVBQUI1XFx1QUFCNlxcdUFBQjktXFx1QUFCRFxcdUFBQzBcXHVBQUMyXFx1QUFEQi1cXHVBQUREXFx1QUFFMC1cXHVBQUVBXFx1QUFGMi1cXHVBQUY0XFx1QUIwMS1cXHVBQjA2XFx1QUIwOS1cXHVBQjBFXFx1QUIxMS1cXHVBQjE2XFx1QUIyMC1cXHVBQjI2XFx1QUIyOC1cXHVBQjJFXFx1QUJDMC1cXHVBQkUyXFx1QUMwMC1cXHVEN0EzXFx1RDdCMC1cXHVEN0M2XFx1RDdDQi1cXHVEN0ZCXFx1RjkwMC1cXHVGQTZEXFx1RkE3MC1cXHVGQUQ5XFx1RkIwMC1cXHVGQjA2XFx1RkIxMy1cXHVGQjE3XFx1RkIxRFxcdUZCMUYtXFx1RkIyOFxcdUZCMkEtXFx1RkIzNlxcdUZCMzgtXFx1RkIzQ1xcdUZCM0VcXHVGQjQwXFx1RkI0MVxcdUZCNDNcXHVGQjQ0XFx1RkI0Ni1cXHVGQkIxXFx1RkJEMy1cXHVGRDNEXFx1RkQ1MC1cXHVGRDhGXFx1RkQ5Mi1cXHVGREM3XFx1RkRGMC1cXHVGREZCXFx1RkU3MC1cXHVGRTc0XFx1RkU3Ni1cXHVGRUZDXFx1RkYyMS1cXHVGRjNBXFx1RkY0MS1cXHVGRjVBXFx1RkY2Ni1cXHVGRkJFXFx1RkZDMi1cXHVGRkM3XFx1RkZDQS1cXHVGRkNGXFx1RkZEMi1cXHVGRkQ3XFx1RkZEQS1cXHVGRkRDXS8sICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjA3NTA3MFxyXG4gICcqJzogLy4vXHJcbn07XHJcblxyXG5cclxuLyoqICovXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIFBhdHRlcm5JbnB1dERlZmluaXRpb24gaW1wbGVtZW50cyBQYXR0ZXJuQmxvY2sge1xyXG4gIC8qKiAqL1xyXG4gICttYXNrZWQ6IE1hc2tlZDwqPjtcclxuICAvKiogKi9cclxuICBwYXJlbnQ6IE1hc2tlZDwqPjtcclxuICAvKiogKi9cclxuICBpc09wdGlvbmFsOiBib29sZWFuO1xyXG4gIC8qKiAqL1xyXG4gIF9pc0ZpbGxlZDogYm9vbGVhbjtcclxuICAvKiogKi9cclxuICBsYXp5OiAkUHJvcGVydHlUeXBlPE1hc2tlZFBhdHRlcm4sICdsYXp5Jz47XHJcbiAgLyoqICovXHJcbiAgcGxhY2Vob2xkZXJDaGFyOiAkUHJvcGVydHlUeXBlPE1hc2tlZFBhdHRlcm4sICdwbGFjZWhvbGRlckNoYXInPjtcclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKG9wdHM6IFBhdHRlcm5JbnB1dERlZmluaXRpb25PcHRpb25zKSB7XHJcbiAgICBjb25zdCB7bWFzaywgLi4uYmxvY2tPcHRzfSA9IG9wdHM7XHJcblxyXG4gICAgdGhpcy5tYXNrZWQgPSBjcmVhdGVNYXNrKHttYXNrfSk7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGJsb2NrT3B0cyk7XHJcbiAgfVxyXG5cclxuICByZXNldCAoKSB7XHJcbiAgICB0aGlzLl9pc0ZpbGxlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5tYXNrZWQucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZSAoZnJvbVBvcz86IG51bWJlcj0wLCB0b1Bvcz86IG51bWJlcj10aGlzLnZhbHVlLmxlbmd0aCk6IENoYW5nZURldGFpbHMge1xyXG4gICAgaWYgKGZyb21Qb3MgPT09IDAgJiYgdG9Qb3MgPj0gMSkge1xyXG4gICAgICB0aGlzLl9pc0ZpbGxlZCA9IGZhbHNlO1xyXG4gICAgICByZXR1cm4gdGhpcy5tYXNrZWQucmVtb3ZlKGZyb21Qb3MsIHRvUG9zKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICB9XHJcblxyXG4gIGdldCB2YWx1ZSAoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLm1hc2tlZC52YWx1ZSB8fFxyXG4gICAgICAodGhpcy5faXNGaWxsZWQgJiYgIXRoaXMuaXNPcHRpb25hbCA/XHJcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlckNoYXIgOlxyXG4gICAgICAgICcnKTtcclxuICB9XHJcblxyXG4gIGdldCB1bm1hc2tlZFZhbHVlICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMubWFza2VkLnVubWFza2VkVmFsdWU7XHJcbiAgfVxyXG5cclxuICBnZXQgaXNDb21wbGV0ZSAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLm1hc2tlZC52YWx1ZSkgfHwgdGhpcy5pc09wdGlvbmFsO1xyXG4gIH1cclxuXHJcbiAgX2FwcGVuZENoYXIgKHN0cjogc3RyaW5nLCBmbGFnczogQXBwZW5kRmxhZ3M9e30pOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIGlmICh0aGlzLl9pc0ZpbGxlZCkgcmV0dXJuIG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcblxyXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLm1hc2tlZC5zdGF0ZTtcclxuICAgIC8vIHNpbXVsYXRlIGlucHV0XHJcbiAgICBjb25zdCBkZXRhaWxzID0gdGhpcy5tYXNrZWQuX2FwcGVuZENoYXIoc3RyLCBmbGFncyk7XHJcblxyXG4gICAgaWYgKGRldGFpbHMuaW5zZXJ0ZWQgJiYgdGhpcy5kb1ZhbGlkYXRlKGZsYWdzKSA9PT0gZmFsc2UpIHtcclxuICAgICAgZGV0YWlscy5pbnNlcnRlZCA9IGRldGFpbHMucmF3SW5zZXJ0ZWQgPSAnJztcclxuICAgICAgdGhpcy5tYXNrZWQuc3RhdGUgPSBzdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWRldGFpbHMuaW5zZXJ0ZWQgJiYgIXRoaXMuaXNPcHRpb25hbCAmJiAhdGhpcy5sYXp5ICYmICFmbGFncy5pbnB1dCkge1xyXG4gICAgICBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5wbGFjZWhvbGRlckNoYXI7XHJcbiAgICB9XHJcbiAgICBkZXRhaWxzLnNraXAgPSAhZGV0YWlscy5pbnNlcnRlZCAmJiAhdGhpcy5pc09wdGlvbmFsO1xyXG4gICAgdGhpcy5faXNGaWxsZWQgPSBCb29sZWFuKGRldGFpbHMuaW5zZXJ0ZWQpO1xyXG5cclxuICAgIHJldHVybiBkZXRhaWxzO1xyXG4gIH1cclxuXHJcbiAgYXBwZW5kICguLi5hcmdzOiAqKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQuYXBwZW5kKC4uLmFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgX2FwcGVuZFBsYWNlaG9sZGVyICgpOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG5cclxuICAgIGlmICh0aGlzLl9pc0ZpbGxlZCB8fCB0aGlzLmlzT3B0aW9uYWwpIHJldHVybiBkZXRhaWxzO1xyXG5cclxuICAgIHRoaXMuX2lzRmlsbGVkID0gdHJ1ZTtcclxuICAgIGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLnBsYWNlaG9sZGVyQ2hhcjtcclxuICAgIHJldHVybiBkZXRhaWxzO1xyXG4gIH1cclxuXHJcbiAgZXh0cmFjdFRhaWwgKC4uLmFyZ3M6ICopOiBUYWlsRGV0YWlscyB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQuZXh0cmFjdFRhaWwoLi4uYXJncyk7XHJcbiAgfVxyXG5cclxuICBhcHBlbmRUYWlsICguLi5hcmdzOiAqKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQuYXBwZW5kVGFpbCguLi5hcmdzKTtcclxuICB9XHJcblxyXG4gIGV4dHJhY3RJbnB1dCAoZnJvbVBvcz86IG51bWJlcj0wLCB0b1Bvcz86IG51bWJlcj10aGlzLnZhbHVlLmxlbmd0aCwgZmxhZ3M/OiBFeHRyYWN0RmxhZ3MpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMubWFza2VkLmV4dHJhY3RJbnB1dChmcm9tUG9zLCB0b1BvcywgZmxhZ3MpO1xyXG4gIH1cclxuXHJcbiAgbmVhcmVzdElucHV0UG9zIChjdXJzb3JQb3M6IG51bWJlciwgZGlyZWN0aW9uOiBEaXJlY3Rpb249RElSRUNUSU9OLk5PTkUpOiBudW1iZXIge1xyXG4gICAgY29uc3QgbWluUG9zID0gMDtcclxuICAgIGNvbnN0IG1heFBvcyA9IHRoaXMudmFsdWUubGVuZ3RoO1xyXG4gICAgY29uc3QgYm91bmRQb3MgPSBNYXRoLm1pbihNYXRoLm1heChjdXJzb3JQb3MsIG1pblBvcyksIG1heFBvcyk7XHJcblxyXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgY2FzZSBESVJFQ1RJT04uTEVGVDpcclxuICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfTEVGVDpcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlID8gYm91bmRQb3MgOiBtaW5Qb3M7XHJcbiAgICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxyXG4gICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9SSUdIVDpcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0NvbXBsZXRlID8gYm91bmRQb3MgOiBtYXhQb3M7XHJcbiAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XHJcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBib3VuZFBvcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGRvVmFsaWRhdGUgKC4uLmFyZ3M6ICopIHtcclxuICAgIHJldHVybiB0aGlzLm1hc2tlZC5kb1ZhbGlkYXRlKC4uLmFyZ3MpICYmIChcclxuICAgICAgIXRoaXMucGFyZW50IHx8IHRoaXMucGFyZW50LmRvVmFsaWRhdGUoLi4uYXJncykpO1xyXG4gIH1cclxuXHJcbiAgZG9Db21taXQgKCkge1xyXG4gICAgdGhpcy5tYXNrZWQuZG9Db21taXQoKTtcclxuICB9XHJcblxyXG4gIGdldCBzdGF0ZSAoKTogUGF0dGVybklucHV0RGVmaW5pdGlvblN0YXRlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG1hc2tlZDogdGhpcy5tYXNrZWQuc3RhdGUsXHJcbiAgICAgIF9pc0ZpbGxlZDogdGhpcy5faXNGaWxsZWQsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc2V0IHN0YXRlIChzdGF0ZTogUGF0dGVybklucHV0RGVmaW5pdGlvblN0YXRlKSB7XHJcbiAgICB0aGlzLm1hc2tlZC5zdGF0ZSA9IHN0YXRlLm1hc2tlZDtcclxuICAgIHRoaXMuX2lzRmlsbGVkID0gc3RhdGUuX2lzRmlsbGVkO1xyXG4gIH1cclxufVxyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcclxuaW1wb3J0IHsgRElSRUNUSU9OLCB0eXBlIERpcmVjdGlvbiwgaXNTdHJpbmcgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJztcclxuaW1wb3J0IHsgdHlwZSBUYWlsRGV0YWlscyB9IGZyb20gJy4uLy4uL2NvcmUvdGFpbC1kZXRhaWxzLmpzJztcclxuaW1wb3J0IENvbnRpbnVvdXNUYWlsRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcclxuaW1wb3J0IHsgdHlwZSBFeHRyYWN0RmxhZ3MsIHR5cGUgQXBwZW5kRmxhZ3MsIHR5cGUgTWFza2VkU3RhdGUgfSBmcm9tICcuLi9iYXNlLmpzJztcclxuaW1wb3J0IHsgdHlwZSBQYXR0ZXJuQmxvY2sgfSBmcm9tICcuL2Jsb2NrLmpzJztcclxuXHJcblxyXG4vKiogKi9cclxudHlwZSBQYXR0ZXJuRml4ZWREZWZpbml0aW9uT3B0aW9ucyA9IHtcclxuICBjaGFyOiAkUHJvcGVydHlUeXBlPFBhdHRlcm5GaXhlZERlZmluaXRpb24sICdjaGFyJz4sXHJcbiAgaXNVbm1hc2tpbmc/OiAkUHJvcGVydHlUeXBlPFBhdHRlcm5GaXhlZERlZmluaXRpb24sICdpc1VubWFza2luZyc+LFxyXG59O1xyXG5cclxudHlwZSBQYXR0ZXJuRml4ZWREZWZpbml0aW9uU3RhdGUgPSB7fFxyXG4gIC4uLk1hc2tlZFN0YXRlLFxyXG4gIF9pc1Jhd0lucHV0OiA/Ym9vbGVhbixcclxufH07XHJcblxyXG5leHBvcnQgZGVmYXVsdFxyXG5jbGFzcyBQYXR0ZXJuRml4ZWREZWZpbml0aW9uIGltcGxlbWVudHMgUGF0dGVybkJsb2NrIHtcclxuICAvKiogKi9cclxuICBfdmFsdWU6IHN0cmluZztcclxuICAvKiogKi9cclxuICBjaGFyOiBzdHJpbmc7XHJcbiAgLyoqICovXHJcbiAgaXNVbm1hc2tpbmc6ID9ib29sZWFuO1xyXG4gIC8qKiAqL1xyXG4gIF9pc1Jhd0lucHV0OiA/Ym9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3Iob3B0czogUGF0dGVybkZpeGVkRGVmaW5pdGlvbk9wdGlvbnMpIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0cyk7XHJcbiAgICB0aGlzLl92YWx1ZSA9ICcnO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHZhbHVlICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHVubWFza2VkVmFsdWUgKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5pc1VubWFza2luZyA/IHRoaXMudmFsdWUgOiAnJztcclxuICB9XHJcblxyXG4gIHJlc2V0ICgpIHtcclxuICAgIHRoaXMuX2lzUmF3SW5wdXQgPSBmYWxzZTtcclxuICAgIHRoaXMuX3ZhbHVlID0gJyc7XHJcbiAgfVxyXG5cclxuICByZW1vdmUgKGZyb21Qb3M/OiBudW1iZXI9MCwgdG9Qb3M/OiBudW1iZXI9dGhpcy5fdmFsdWUubGVuZ3RoKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX3ZhbHVlLnNsaWNlKDAsIGZyb21Qb3MpICsgdGhpcy5fdmFsdWUuc2xpY2UodG9Qb3MpO1xyXG4gICAgaWYgKCF0aGlzLl92YWx1ZSkgdGhpcy5faXNSYXdJbnB1dCA9IGZhbHNlO1xyXG5cclxuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gIH1cclxuXHJcbiAgbmVhcmVzdElucHV0UG9zIChjdXJzb3JQb3M6IG51bWJlciwgZGlyZWN0aW9uOiBEaXJlY3Rpb249RElSRUNUSU9OLk5PTkUpOiBudW1iZXIge1xyXG4gICAgY29uc3QgbWluUG9zID0gMDtcclxuICAgIGNvbnN0IG1heFBvcyA9IHRoaXMuX3ZhbHVlLmxlbmd0aDtcclxuXHJcbiAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xyXG4gICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxyXG4gICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOlxyXG4gICAgICAgIHJldHVybiBtaW5Qb3M7XHJcbiAgICAgIGNhc2UgRElSRUNUSU9OLk5PTkU6XHJcbiAgICAgIGNhc2UgRElSRUNUSU9OLlJJR0hUOlxyXG4gICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9SSUdIVDpcclxuICAgICAgZGVmYXVsdDogcmV0dXJuIG1heFBvcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV4dHJhY3RJbnB1dCAoZnJvbVBvcz86IG51bWJlcj0wLCB0b1Bvcz86IG51bWJlcj10aGlzLl92YWx1ZS5sZW5ndGgsIGZsYWdzPzogRXh0cmFjdEZsYWdzPXt9KSB7XHJcbiAgICByZXR1cm4gZmxhZ3MucmF3ICYmIHRoaXMuX2lzUmF3SW5wdXQgJiYgdGhpcy5fdmFsdWUuc2xpY2UoZnJvbVBvcywgdG9Qb3MpIHx8ICcnO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlzQ29tcGxldGUgKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBfYXBwZW5kQ2hhciAoc3RyOiBzdHJpbmcsIGZsYWdzPzogQXBwZW5kRmxhZ3M9e30pIHtcclxuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG5cclxuICAgIGlmICh0aGlzLl92YWx1ZSkgcmV0dXJuIGRldGFpbHM7XHJcblxyXG4gICAgY29uc3QgYXBwZW5kZWQgPSB0aGlzLmNoYXIgPT09IHN0clswXTtcclxuICAgIGNvbnN0IGlzUmVzb2x2ZWQgPSBhcHBlbmRlZCAmJiAodGhpcy5pc1VubWFza2luZyB8fCBmbGFncy5pbnB1dCB8fCBmbGFncy5yYXcpICYmICFmbGFncy50YWlsO1xyXG4gICAgaWYgKGlzUmVzb2x2ZWQpIGRldGFpbHMucmF3SW5zZXJ0ZWQgPSB0aGlzLmNoYXI7XHJcbiAgICB0aGlzLl92YWx1ZSA9IGRldGFpbHMuaW5zZXJ0ZWQgPSB0aGlzLmNoYXI7XHJcbiAgICB0aGlzLl9pc1Jhd0lucHV0ID0gaXNSZXNvbHZlZCAmJiAoZmxhZ3MucmF3IHx8IGZsYWdzLmlucHV0KTtcclxuXHJcbiAgICByZXR1cm4gZGV0YWlscztcclxuICB9XHJcblxyXG4gIF9hcHBlbmRQbGFjZWhvbGRlciAoKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICAgIGlmICh0aGlzLl92YWx1ZSkgcmV0dXJuIGRldGFpbHM7XHJcblxyXG4gICAgdGhpcy5fdmFsdWUgPSBkZXRhaWxzLmluc2VydGVkID0gdGhpcy5jaGFyO1xyXG4gICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgfVxyXG5cclxuICBleHRyYWN0VGFpbCAoZnJvbVBvcz86IG51bWJlcj0wLCB0b1Bvcz86IG51bWJlcj10aGlzLnZhbHVlLmxlbmd0aCk6IFRhaWxEZXRhaWxzIHtcclxuICAgIHJldHVybiBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKCcnKTtcclxuICB9XHJcblxyXG4gIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcclxuICBhcHBlbmRUYWlsICh0YWlsOiBzdHJpbmcgfCBUYWlsRGV0YWlscyk6IENoYW5nZURldGFpbHMge1xyXG4gICAgaWYgKGlzU3RyaW5nKHRhaWwpKSB0YWlsID0gbmV3IENvbnRpbnVvdXNUYWlsRGV0YWlscyhTdHJpbmcodGFpbCkpO1xyXG5cclxuICAgIHJldHVybiB0YWlsLmFwcGVuZFRvKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgYXBwZW5kIChzdHI6IHN0cmluZywgZmxhZ3M/OiBBcHBlbmRGbGFncywgdGFpbD86IFRhaWxEZXRhaWxzKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0gdGhpcy5fYXBwZW5kQ2hhcihzdHIsIGZsYWdzKTtcclxuXHJcbiAgICBpZiAodGFpbCAhPSBudWxsKSB7XHJcbiAgICAgIGRldGFpbHMudGFpbFNoaWZ0ICs9IHRoaXMuYXBwZW5kVGFpbCh0YWlsKS50YWlsU2hpZnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgfVxyXG5cclxuICBkb0NvbW1pdCAoKSB7fVxyXG5cclxuICBnZXQgc3RhdGUgKCk6IFBhdHRlcm5GaXhlZERlZmluaXRpb25TdGF0ZSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBfdmFsdWU6IHRoaXMuX3ZhbHVlLFxyXG4gICAgICBfaXNSYXdJbnB1dDogdGhpcy5faXNSYXdJbnB1dCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXQgc3RhdGUgKHN0YXRlOiBQYXR0ZXJuRml4ZWREZWZpbml0aW9uU3RhdGUpIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgc3RhdGUpO1xyXG4gIH1cclxufVxyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgdHlwZSB7IFRhaWxEZXRhaWxzLCBBcHBlbmRUYWlsIH0gZnJvbSAnLi4vLi4vY29yZS90YWlsLWRldGFpbHMuanMnO1xyXG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcclxuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzLmpzJztcclxuaW1wb3J0IENvbnRpbnVvdXNUYWlsRGV0YWlscyBmcm9tICcuLi8uLi9jb3JlL2NvbnRpbnVvdXMtdGFpbC1kZXRhaWxzLmpzJztcclxuaW1wb3J0IElNYXNrIGZyb20gJy4uLy4uL2NvcmUvaG9sZGVyLmpzJztcclxuXHJcblxyXG50eXBlIENodW5rc1RhaWxTdGF0ZSA9IHtcclxuICBjaHVua3M6ICRQcm9wZXJ0eVR5cGU8Q2h1bmtzVGFpbERldGFpbHMsICdjaHVua3MnPixcclxuICBmcm9tOiAkUHJvcGVydHlUeXBlPENodW5rc1RhaWxEZXRhaWxzLCAnZnJvbSc+LFxyXG4gIHN0b3A/OiAkUHJvcGVydHlUeXBlPENodW5rc1RhaWxEZXRhaWxzLCAnc3RvcCc+LFxyXG4gIGJsb2NrSW5kZXg/OiAkUHJvcGVydHlUeXBlPENodW5rc1RhaWxEZXRhaWxzLCAnYmxvY2tJbmRleCc+LFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgQ2h1bmtzVGFpbERldGFpbHMgaW1wbGVtZW50cyBUYWlsRGV0YWlscyB7XHJcbiAgY2h1bmtzOiBBcnJheTxUYWlsRGV0YWlscz47XHJcbiAgZnJvbTogbnVtYmVyO1xyXG4gIHN0b3A6ID9udW1iZXI7XHJcbiAgLyoqICovXHJcbiAgYmxvY2tJbmRleDogP251bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IgKGNodW5rcz86IEFycmF5PFRhaWxEZXRhaWxzPj1bXSwgZnJvbT86IG51bWJlcj0wKSB7XHJcbiAgICB0aGlzLmNodW5rcyA9IGNodW5rcztcclxuICAgIHRoaXMuZnJvbSA9IGZyb207XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZyAoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmNodW5rcy5tYXAoU3RyaW5nKS5qb2luKCcnKTtcclxuICB9XHJcblxyXG4gIC8vICRGbG93Rml4TWUgbm8gaWRlYXNcclxuICBleHRlbmQgKHRhaWxDaHVuazogc3RyaW5nIHwgVGFpbERldGFpbHMpOiB2b2lkIHtcclxuICAgIGlmICghU3RyaW5nKHRhaWxDaHVuaykpIHJldHVybjtcclxuICAgIGlmIChpc1N0cmluZyh0YWlsQ2h1bmspKSB0YWlsQ2h1bmsgPSBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKFN0cmluZyh0YWlsQ2h1bmspKTtcclxuXHJcbiAgICBjb25zdCBsYXN0Q2h1bmsgPSB0aGlzLmNodW5rc1t0aGlzLmNodW5rcy5sZW5ndGgtMV07XHJcbiAgICBjb25zdCBleHRlbmRMYXN0ID0gbGFzdENodW5rICYmXHJcbiAgICAgIC8vIGlmIHN0b3BzIGFyZSBzYW1lIG9yIHRhaWwgaGFzIG5vIHN0b3BcclxuICAgICAgKGxhc3RDaHVuay5zdG9wID09PSB0YWlsQ2h1bmsuc3RvcCB8fCB0YWlsQ2h1bmsuc3RvcCA9PSBudWxsKSAmJlxyXG4gICAgICAvLyBpZiB0YWlsIGNodW5rIGdvZXMganVzdCBhZnRlciBsYXN0IGNodW5rXHJcbiAgICAgIHRhaWxDaHVuay5mcm9tID09PSAobGFzdENodW5rLmZyb20gKyBsYXN0Q2h1bmsudG9TdHJpbmcoKS5sZW5ndGgpO1xyXG5cclxuICAgIGlmICh0YWlsQ2h1bmsgaW5zdGFuY2VvZiBDb250aW51b3VzVGFpbERldGFpbHMpIHtcclxuICAgICAgLy8gY2hlY2sgdGhlIGFiaWxpdHkgdG8gZXh0ZW5kIHByZXZpb3VzIGNodW5rXHJcbiAgICAgIGlmIChleHRlbmRMYXN0KSB7XHJcbiAgICAgICAgLy8gZXh0ZW5kIHByZXZpb3VzIGNodW5rXHJcbiAgICAgICAgbGFzdENodW5rLmV4dGVuZCh0YWlsQ2h1bmsudG9TdHJpbmcoKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gYXBwZW5kIG5ldyBjaHVua1xyXG4gICAgICAgIHRoaXMuY2h1bmtzLnB1c2godGFpbENodW5rKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0YWlsQ2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscykge1xyXG4gICAgICBpZiAodGFpbENodW5rLnN0b3AgPT0gbnVsbCkge1xyXG4gICAgICAgIC8vIHVud3JhcCBmbG9hdGluZyBjaHVua3MgdG8gcGFyZW50LCBrZWVwaW5nIGBmcm9tYCBwb3NcclxuICAgICAgICBsZXQgZmlyc3RUYWlsQ2h1bms7XHJcbiAgICAgICAgd2hpbGUgKHRhaWxDaHVuay5jaHVua3MubGVuZ3RoICYmIHRhaWxDaHVuay5jaHVua3NbMF0uc3RvcCA9PSBudWxsKSB7XHJcbiAgICAgICAgICBmaXJzdFRhaWxDaHVuayA9IHRhaWxDaHVuay5jaHVua3Muc2hpZnQoKTtcclxuICAgICAgICAgIGZpcnN0VGFpbENodW5rLmZyb20gKz0gdGFpbENodW5rLmZyb207XHJcbiAgICAgICAgICB0aGlzLmV4dGVuZChmaXJzdFRhaWxDaHVuayk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBpZiB0YWlsIGNodW5rIHN0aWxsIGhhcyB2YWx1ZVxyXG4gICAgICBpZiAodGFpbENodW5rLnRvU3RyaW5nKCkpIHtcclxuICAgICAgICAvLyBpZiBjaHVua3MgY29udGFpbnMgc3RvcHMsIHRoZW4gcG9wdXAgc3RvcCB0byBjb250YWluZXJcclxuICAgICAgICB0YWlsQ2h1bmsuc3RvcCA9IHRhaWxDaHVuay5ibG9ja0luZGV4O1xyXG4gICAgICAgIHRoaXMuY2h1bmtzLnB1c2godGFpbENodW5rKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXBwZW5kVG8gKG1hc2tlZDogQXBwZW5kVGFpbCk6IENoYW5nZURldGFpbHMge1xyXG4gICAgLy8gJEZsb3dGaXhNZVxyXG4gICAgaWYgKCEobWFza2VkIGluc3RhbmNlb2YgSU1hc2suTWFza2VkUGF0dGVybikpIHtcclxuICAgICAgY29uc3QgdGFpbCA9IG5ldyBDb250aW51b3VzVGFpbERldGFpbHModGhpcy50b1N0cmluZygpKTtcclxuICAgICAgcmV0dXJuIHRhaWwuYXBwZW5kVG8obWFza2VkKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcclxuXHJcbiAgICBmb3IgKGxldCBjaT0wOyBjaSA8IHRoaXMuY2h1bmtzLmxlbmd0aCAmJiAhZGV0YWlscy5za2lwOyArK2NpKSB7XHJcbiAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5jaHVua3NbY2ldO1xyXG5cclxuICAgICAgY29uc3QgbGFzdEJsb2NrSXRlciA9IG1hc2tlZC5fbWFwUG9zVG9CbG9jayhtYXNrZWQudmFsdWUubGVuZ3RoKTtcclxuICAgICAgY29uc3Qgc3RvcCA9IGNodW5rLnN0b3A7XHJcbiAgICAgIGxldCBjaHVua0Jsb2NrO1xyXG4gICAgICBpZiAoc3RvcCAhPSBudWxsICYmXHJcbiAgICAgICAgLy8gaWYgYmxvY2sgbm90IGZvdW5kIG9yIHN0b3AgaXMgYmVoaW5kIGxhc3RCbG9ja1xyXG4gICAgICAgICghbGFzdEJsb2NrSXRlciB8fCBsYXN0QmxvY2tJdGVyLmluZGV4IDw9IHN0b3ApXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIGNodW5rIGluc3RhbmNlb2YgQ2h1bmtzVGFpbERldGFpbHMgfHxcclxuICAgICAgICAgIC8vIGZvciBjb250aW51b3VzIGJsb2NrIGFsc28gY2hlY2sgaWYgc3RvcCBpcyBleGlzdFxyXG4gICAgICAgICAgbWFza2VkLl9zdG9wcy5pbmRleE9mKHN0b3ApID49IDBcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGRldGFpbHMuYWdncmVnYXRlKG1hc2tlZC5fYXBwZW5kUGxhY2Vob2xkZXIoc3RvcCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaHVua0Jsb2NrID0gY2h1bmsgaW5zdGFuY2VvZiBDaHVua3NUYWlsRGV0YWlscyAmJiBtYXNrZWQuX2Jsb2Nrc1tzdG9wXTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNodW5rQmxvY2spIHtcclxuICAgICAgICBjb25zdCB0YWlsRGV0YWlscyA9IGNodW5rQmxvY2suYXBwZW5kVGFpbChjaHVuayk7XHJcbiAgICAgICAgdGFpbERldGFpbHMuc2tpcCA9IGZhbHNlOyAvLyBhbHdheXMgaWdub3JlIHNraXAsIGl0IHdpbGwgYmUgc2V0IG9uIGxhc3RcclxuICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0YWlsRGV0YWlscyk7XHJcbiAgICAgICAgbWFza2VkLl92YWx1ZSArPSB0YWlsRGV0YWlscy5pbnNlcnRlZDtcclxuXHJcbiAgICAgICAgLy8gZ2V0IG5vdCBpbnNlcnRlZCBjaGFyc1xyXG4gICAgICAgIGNvbnN0IHJlbWFpbkNoYXJzID0gY2h1bmsudG9TdHJpbmcoKS5zbGljZSh0YWlsRGV0YWlscy5yYXdJbnNlcnRlZC5sZW5ndGgpO1xyXG4gICAgICAgIGlmIChyZW1haW5DaGFycykgZGV0YWlscy5hZ2dyZWdhdGUobWFza2VkLmFwcGVuZChyZW1haW5DaGFycywgeyB0YWlsOiB0cnVlIH0pKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShtYXNrZWQuYXBwZW5kKGNodW5rLnRvU3RyaW5nKCksIHsgdGFpbDogdHJ1ZSB9KSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgfVxyXG5cclxuICBnZXQgc3RhdGUgKCk6IENodW5rc1RhaWxTdGF0ZSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjaHVua3M6IHRoaXMuY2h1bmtzLm1hcChjID0+IGMuc3RhdGUpLFxyXG4gICAgICBmcm9tOiB0aGlzLmZyb20sXHJcbiAgICAgIHN0b3A6IHRoaXMuc3RvcCxcclxuICAgICAgYmxvY2tJbmRleDogdGhpcy5ibG9ja0luZGV4LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNldCBzdGF0ZSAoc3RhdGU6IENodW5rc1RhaWxTdGF0ZSkge1xyXG4gICAgY29uc3QgeyBjaHVua3MsIC4uLnByb3BzIH0gPSBzdGF0ZTtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgcHJvcHMpO1xyXG4gICAgdGhpcy5jaHVua3MgPSBjaHVua3MubWFwKGNzdGF0ZSA9PiB7XHJcbiAgICAgIGNvbnN0IGNodW5rID0gXCJjaHVua3NcIiBpbiBjc3RhdGUgP1xyXG4gICAgICAgIG5ldyBDaHVua3NUYWlsRGV0YWlscygpIDpcclxuICAgICAgICBuZXcgQ29udGludW91c1RhaWxEZXRhaWxzKCk7XHJcbiAgICAgIC8vICRGbG93Rml4TWUgYWxyZWFkeSBjaGVja2VkIGFib3ZlXHJcbiAgICAgIGNodW5rLnN0YXRlID0gY3N0YXRlO1xyXG4gICAgICByZXR1cm4gY2h1bms7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNoaWZ0QmVmb3JlIChwb3M6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICBpZiAodGhpcy5mcm9tID49IHBvcyB8fCAhdGhpcy5jaHVua3MubGVuZ3RoKSByZXR1cm4gJyc7XHJcblxyXG4gICAgY29uc3QgY2h1bmtTaGlmdFBvcyA9IHBvcyAtIHRoaXMuZnJvbTtcclxuICAgIGxldCBjaT0wO1xyXG4gICAgd2hpbGUgKGNpIDwgdGhpcy5jaHVua3MubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5jaHVua3NbY2ldO1xyXG4gICAgICBjb25zdCBzaGlmdENoYXIgPSBjaHVuay5zaGlmdEJlZm9yZShjaHVua1NoaWZ0UG9zKTtcclxuXHJcbiAgICAgIGlmIChjaHVuay50b1N0cmluZygpKSB7XHJcbiAgICAgICAgLy8gY2h1bmsgc3RpbGwgY29udGFpbnMgdmFsdWVcclxuICAgICAgICAvLyBidXQgbm90IHNoaWZ0ZWQgLSBtZWFucyBubyBtb3JlIGF2YWlsYWJsZSBjaGFycyB0byBzaGlmdFxyXG4gICAgICAgIGlmICghc2hpZnRDaGFyKSBicmVhaztcclxuICAgICAgICArK2NpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNsZWFuIGlmIGNodW5rIGhhcyBubyB2YWx1ZVxyXG4gICAgICAgIHRoaXMuY2h1bmtzLnNwbGljZShjaSwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzaGlmdENoYXIpIHJldHVybiBzaGlmdENoYXI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxufVxyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgTWFza2VkLCB7dHlwZSBNYXNrZWRPcHRpb25zfSBmcm9tICcuL2Jhc2UuanMnO1xyXG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xyXG5cclxuXHJcbi8qKiBNYXNraW5nIGJ5IFJlZ0V4cCAqL1xyXG5leHBvcnQgZGVmYXVsdFxyXG5jbGFzcyBNYXNrZWRSZWdFeHAgZXh0ZW5kcyBNYXNrZWQ8UmVnRXhwPiB7XHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcbiAgKi9cclxuICBfdXBkYXRlIChvcHRzOiAkU2hhcGU8TWFza2VkT3B0aW9uczxSZWdFeHA+Pikge1xyXG4gICAgaWYgKG9wdHMubWFzaykgb3B0cy52YWxpZGF0ZSA9ICh2YWx1ZSkgPT4gdmFsdWUuc2VhcmNoKG9wdHMubWFzaykgPj0gMDtcclxuICAgIHN1cGVyLl91cGRhdGUob3B0cyk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuSU1hc2suTWFza2VkUmVnRXhwID0gTWFza2VkUmVnRXhwO1xyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQge0RJUkVDVElPTiwgdHlwZSBEaXJlY3Rpb24sIGZvcmNlRGlyZWN0aW9ufSBmcm9tICcuLi9jb3JlL3V0aWxzLmpzJztcclxuaW1wb3J0IENoYW5nZURldGFpbHMgZnJvbSAnLi4vY29yZS9jaGFuZ2UtZGV0YWlscy5qcyc7XHJcbmltcG9ydCBNYXNrZWQsIHt0eXBlIEFwcGVuZEZsYWdzLCB0eXBlIEV4dHJhY3RGbGFncywgdHlwZSBNYXNrZWRPcHRpb25zLCB0eXBlIE1hc2tlZFN0YXRlfSBmcm9tICcuL2Jhc2UuanMnO1xyXG5pbXBvcnQgUGF0dGVybklucHV0RGVmaW5pdGlvbiwge0RFRkFVTFRfSU5QVVRfREVGSU5JVElPTlMsIHR5cGUgRGVmaW5pdGlvbnN9IGZyb20gJy4vcGF0dGVybi9pbnB1dC1kZWZpbml0aW9uLmpzJztcclxuaW1wb3J0IFBhdHRlcm5GaXhlZERlZmluaXRpb24gZnJvbSAnLi9wYXR0ZXJuL2ZpeGVkLWRlZmluaXRpb24uanMnO1xyXG5pbXBvcnQgeyB0eXBlIFRhaWxEZXRhaWxzIH0gZnJvbSAnLi4vY29yZS90YWlsLWRldGFpbHMuanMnO1xyXG5pbXBvcnQgQ2h1bmtzVGFpbERldGFpbHMgZnJvbSAnLi9wYXR0ZXJuL2NodW5rLXRhaWwtZGV0YWlscy5qcyc7XHJcbmltcG9ydCBDb250aW51b3VzVGFpbERldGFpbHMgZnJvbSAnLi4vY29yZS9jb250aW51b3VzLXRhaWwtZGV0YWlscy5qcyc7XHJcbmltcG9ydCB7dHlwZSBQYXR0ZXJuQmxvY2t9IGZyb20gJy4vcGF0dGVybi9ibG9jay5qcyc7XHJcbmltcG9ydCBjcmVhdGVNYXNrIGZyb20gJy4vZmFjdG9yeS5qcyc7XHJcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XHJcbmltcG9ydCAnLi9yZWdleHAuanMnOyAgLy8gc3VwcG9ydCBmb3IgZGVmYXVsdCBkZWZpbml0aW9ucyB3aGljaCBhcmUgcmVnZXhwJ3NcclxuXHJcblxyXG50eXBlIE1hc2tlZFBhdHRlcm5PcHRpb25zID0ge1xyXG4gIC4uLk1hc2tlZE9wdGlvbnM8c3RyaW5nPixcclxuICBkZWZpbml0aW9ucz86ICRQcm9wZXJ0eVR5cGU8TWFza2VkUGF0dGVybiwgJ2RlZmluaXRpb25zJz4sXHJcbiAgYmxvY2tzPzogJFByb3BlcnR5VHlwZTxNYXNrZWRQYXR0ZXJuLCAnYmxvY2tzJz4sXHJcbiAgcGxhY2Vob2xkZXJDaGFyPzogJFByb3BlcnR5VHlwZTxNYXNrZWRQYXR0ZXJuLCAncGxhY2Vob2xkZXJDaGFyJz4sXHJcbiAgbGF6eT86ICRQcm9wZXJ0eVR5cGU8TWFza2VkUGF0dGVybiwgJ2xhenknPixcclxufTtcclxuXHJcbnR5cGUgTWFza2VkUGF0dGVyblN0YXRlID0ge3xcclxuICAuLi5NYXNrZWRTdGF0ZSxcclxuICBfYmxvY2tzOiBBcnJheTwqPixcclxufH07XHJcblxyXG50eXBlIEJsb2NrUG9zRGF0YSA9IHtcclxuICBpbmRleDogbnVtYmVyLFxyXG4gIG9mZnNldDogbnVtYmVyLFxyXG59O1xyXG5cclxuLyoqXHJcbiAgUGF0dGVybiBtYXNrXHJcbiAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICBAcGFyYW0ge09iamVjdH0gb3B0cy5ibG9ja3NcclxuICBAcGFyYW0ge09iamVjdH0gb3B0cy5kZWZpbml0aW9uc1xyXG4gIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnBsYWNlaG9sZGVyQ2hhclxyXG4gIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5sYXp5XHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIE1hc2tlZFBhdHRlcm4gZXh0ZW5kcyBNYXNrZWQ8c3RyaW5nPiB7XHJcbiAgc3RhdGljIERFRkFVTFRTOiBhbnk7XHJcbiAgc3RhdGljIFNUT1BfQ0hBUjogc3RyaW5nO1xyXG4gIHN0YXRpYyBFU0NBUEVfQ0hBUjogc3RyaW5nO1xyXG4gIHN0YXRpYyBJbnB1dERlZmluaXRpb246IENsYXNzPFBhdHRlcm5JbnB1dERlZmluaXRpb24+O1xyXG4gIHN0YXRpYyBGaXhlZERlZmluaXRpb246IENsYXNzPFBhdHRlcm5GaXhlZERlZmluaXRpb24+O1xyXG5cclxuICAvKiogKi9cclxuICBibG9ja3M6IHtbc3RyaW5nXTogTWFza2VkT3B0aW9uczxhbnk+fTtcclxuICAvKiogKi9cclxuICBkZWZpbml0aW9uczogRGVmaW5pdGlvbnM7XHJcbiAgLyoqIFNpbmdsZSBjaGFyIGZvciBlbXB0eSBpbnB1dCAqL1xyXG4gIHBsYWNlaG9sZGVyQ2hhcjogc3RyaW5nO1xyXG4gIC8qKiBTaG93IHBsYWNlaG9sZGVyIG9ubHkgd2hlbiBuZWVkZWQgKi9cclxuICBsYXp5OiBib29sZWFuO1xyXG4gIF9ibG9ja3M6IEFycmF5PFBhdHRlcm5CbG9jaz47XHJcbiAgX21hc2tlZEJsb2Nrczoge1tzdHJpbmddOiBBcnJheTxudW1iZXI+fTtcclxuICBfc3RvcHM6IEFycmF5PG51bWJlcj47XHJcblxyXG4gIGNvbnN0cnVjdG9yIChvcHRzOiBhbnk9e30pIHsgIC8vIFRPRE8gdHlwZSAkU2hhcGU8TWFza2VkUGF0dGVybk9wdGlvbnM+PXt9IGRvZXMgbm90IHdvcmtcclxuICAgIG9wdHMuZGVmaW5pdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0lOUFVUX0RFRklOSVRJT05TLCBvcHRzLmRlZmluaXRpb25zKTtcclxuICAgIHN1cGVyKHtcclxuICAgICAgLi4uTWFza2VkUGF0dGVybi5ERUZBVUxUUyxcclxuICAgICAgLi4ub3B0cyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAgIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcbiAgKi9cclxuICBfdXBkYXRlIChvcHRzOiAkU2hhcGU8TWFza2VkUGF0dGVybk9wdGlvbnM+PXt9KSB7XHJcbiAgICBvcHRzLmRlZmluaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kZWZpbml0aW9ucywgb3B0cy5kZWZpbml0aW9ucyk7XHJcbiAgICBzdXBlci5fdXBkYXRlKG9wdHMpO1xyXG4gICAgdGhpcy5fcmVidWlsZE1hc2soKTtcclxuICB9XHJcblxyXG4gIC8qKiAqL1xyXG4gIF9yZWJ1aWxkTWFzayAoKSB7XHJcbiAgICBjb25zdCBkZWZzID0gdGhpcy5kZWZpbml0aW9ucztcclxuICAgIHRoaXMuX2Jsb2NrcyA9IFtdO1xyXG4gICAgdGhpcy5fc3RvcHMgPSBbXTtcclxuICAgIHRoaXMuX21hc2tlZEJsb2NrcyA9IHt9O1xyXG5cclxuICAgIGxldCBwYXR0ZXJuID0gdGhpcy5tYXNrO1xyXG4gICAgaWYgKCFwYXR0ZXJuIHx8ICFkZWZzKSByZXR1cm47XHJcblxyXG4gICAgbGV0IHVubWFza2luZ0Jsb2NrID0gZmFsc2U7XHJcbiAgICBsZXQgb3B0aW9uYWxCbG9jayA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAobGV0IGk9MDsgaTxwYXR0ZXJuLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmICh0aGlzLmJsb2Nrcykge1xyXG4gICAgICAgIGNvbnN0IHAgPSBwYXR0ZXJuLnNsaWNlKGkpO1xyXG4gICAgICAgIGNvbnN0IGJOYW1lcyA9IE9iamVjdC5rZXlzKHRoaXMuYmxvY2tzKS5maWx0ZXIoYk5hbWUgPT4gcC5pbmRleE9mKGJOYW1lKSA9PT0gMCk7XHJcbiAgICAgICAgLy8gb3JkZXIgYnkga2V5IGxlbmd0aFxyXG4gICAgICAgIGJOYW1lcy5zb3J0KChhLCBiKSA9PiBiLmxlbmd0aCAtIGEubGVuZ3RoKTtcclxuICAgICAgICAvLyB1c2UgYmxvY2sgbmFtZSB3aXRoIG1heCBsZW5ndGhcclxuICAgICAgICBjb25zdCBiTmFtZSA9IGJOYW1lc1swXTtcclxuICAgICAgICBpZiAoYk5hbWUpIHtcclxuICAgICAgICAgIGNvbnN0IG1hc2tlZEJsb2NrID0gY3JlYXRlTWFzayh7XHJcbiAgICAgICAgICAgIHBhcmVudDogdGhpcyxcclxuICAgICAgICAgICAgbGF6eTogdGhpcy5sYXp5LFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlckNoYXI6IHRoaXMucGxhY2Vob2xkZXJDaGFyLFxyXG4gICAgICAgICAgICBvdmVyd3JpdGU6IHRoaXMub3ZlcndyaXRlLFxyXG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lXHJcbiAgICAgICAgICAgIC4uLnRoaXMuYmxvY2tzW2JOYW1lXSxcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmIChtYXNrZWRCbG9jaykge1xyXG4gICAgICAgICAgICB0aGlzLl9ibG9ja3MucHVzaChtYXNrZWRCbG9jayk7XHJcblxyXG4gICAgICAgICAgICAvLyBzdG9yZSBibG9jayBpbmRleFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0pIHRoaXMuX21hc2tlZEJsb2Nrc1tiTmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fbWFza2VkQmxvY2tzW2JOYW1lXS5wdXNoKHRoaXMuX2Jsb2Nrcy5sZW5ndGggLSAxKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpICs9IGJOYW1lLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBjaGFyID0gcGF0dGVybltpXTtcclxuICAgICAgbGV0IGlzSW5wdXQgPSBjaGFyIGluIGRlZnM7XHJcblxyXG4gICAgICBpZiAoY2hhciA9PT0gTWFza2VkUGF0dGVybi5TVE9QX0NIQVIpIHtcclxuICAgICAgICB0aGlzLl9zdG9wcy5wdXNoKHRoaXMuX2Jsb2Nrcy5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY2hhciA9PT0gJ3snIHx8IGNoYXIgPT09ICd9Jykge1xyXG4gICAgICAgIHVubWFza2luZ0Jsb2NrID0gIXVubWFza2luZ0Jsb2NrO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoY2hhciA9PT0gJ1snIHx8IGNoYXIgPT09ICddJykge1xyXG4gICAgICAgIG9wdGlvbmFsQmxvY2sgPSAhb3B0aW9uYWxCbG9jaztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNoYXIgPT09IE1hc2tlZFBhdHRlcm4uRVNDQVBFX0NIQVIpIHtcclxuICAgICAgICArK2k7XHJcbiAgICAgICAgY2hhciA9IHBhdHRlcm5baV07XHJcbiAgICAgICAgaWYgKCFjaGFyKSBicmVhaztcclxuICAgICAgICBpc0lucHV0ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRlZiA9IGlzSW5wdXQgP1xyXG4gICAgICAgIG5ldyBQYXR0ZXJuSW5wdXREZWZpbml0aW9uKHtcclxuICAgICAgICAgIHBhcmVudDogdGhpcyxcclxuICAgICAgICAgIGxhenk6IHRoaXMubGF6eSxcclxuICAgICAgICAgIHBsYWNlaG9sZGVyQ2hhcjogdGhpcy5wbGFjZWhvbGRlckNoYXIsXHJcbiAgICAgICAgICBtYXNrOiBkZWZzW2NoYXJdLFxyXG4gICAgICAgICAgaXNPcHRpb25hbDogb3B0aW9uYWxCbG9jayxcclxuICAgICAgICB9KSA6XHJcbiAgICAgICAgbmV3IFBhdHRlcm5GaXhlZERlZmluaXRpb24oe1xyXG4gICAgICAgICAgY2hhcixcclxuICAgICAgICAgIGlzVW5tYXNraW5nOiB1bm1hc2tpbmdCbG9jayxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuX2Jsb2Nrcy5wdXNoKGRlZik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZ2V0IHN0YXRlICgpOiBNYXNrZWRQYXR0ZXJuU3RhdGUge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uc3VwZXIuc3RhdGUsXHJcbiAgICAgIF9ibG9ja3M6IHRoaXMuX2Jsb2Nrcy5tYXAoYiA9PiBiLnN0YXRlKSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXQgc3RhdGUgKHN0YXRlOiBNYXNrZWRQYXR0ZXJuU3RhdGUpIHtcclxuICAgIGNvbnN0IHtfYmxvY2tzLCAuLi5tYXNrZWRTdGF0ZX0gPSBzdGF0ZTtcclxuICAgIHRoaXMuX2Jsb2Nrcy5mb3JFYWNoKChiLCBiaSkgPT4gYi5zdGF0ZSA9IF9ibG9ja3NbYmldKTtcclxuICAgIHN1cGVyLnN0YXRlID0gbWFza2VkU3RhdGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgcmVzZXQgKCkge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuICAgIHRoaXMuX2Jsb2Nrcy5mb3JFYWNoKGIgPT4gYi5yZXNldCgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgaXNDb21wbGV0ZSAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmV2ZXJ5KGIgPT4gYi5pc0NvbXBsZXRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBkb0NvbW1pdCAoKSB7XHJcbiAgICB0aGlzLl9ibG9ja3MuZm9yRWFjaChiID0+IGIuZG9Db21taXQoKSk7XHJcbiAgICBzdXBlci5kb0NvbW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGdldCB1bm1hc2tlZFZhbHVlICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrcy5yZWR1Y2UoKHN0ciwgYikgPT4gc3RyICs9IGIudW5tYXNrZWRWYWx1ZSwgJycpO1xyXG4gIH1cclxuXHJcbiAgc2V0IHVubWFza2VkVmFsdWUgKHVubWFza2VkVmFsdWU6IHN0cmluZykge1xyXG4gICAgc3VwZXIudW5tYXNrZWRWYWx1ZSA9IHVubWFza2VkVmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZ2V0IHZhbHVlICgpOiBzdHJpbmcge1xyXG4gICAgLy8gVE9ETyByZXR1cm4gX3ZhbHVlIHdoZW4gbm90IGluIGNoYW5nZT9cclxuICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVkdWNlKChzdHIsIGIpID0+IHN0ciArPSBiLnZhbHVlLCAnJyk7XHJcbiAgfVxyXG5cclxuICBzZXQgdmFsdWUgKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyLnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgYXBwZW5kVGFpbCAodGFpbDogc3RyaW5nIHwgVGFpbERldGFpbHMpOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIHJldHVybiBzdXBlci5hcHBlbmRUYWlsKHRhaWwpLmFnZ3JlZ2F0ZSh0aGlzLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBfYXBwZW5kQ2hhclJhdyAoY2g6IHN0cmluZywgZmxhZ3M6IEFwcGVuZEZsYWdzPXt9KTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICBjaCA9IHRoaXMuZG9QcmVwYXJlKGNoLCBmbGFncyk7XHJcbiAgICBjb25zdCBibG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKHRoaXMudmFsdWUubGVuZ3RoKTtcclxuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG4gICAgaWYgKCFibG9ja0l0ZXIpIHJldHVybiBkZXRhaWxzO1xyXG5cclxuICAgIGZvciAobGV0IGJpPWJsb2NrSXRlci5pbmRleDsgOyArK2JpKSB7XHJcbiAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5fYmxvY2tzW2JpXTtcclxuICAgICAgaWYgKCFibG9jaykgYnJlYWs7XHJcblxyXG4gICAgICBjb25zdCBibG9ja0RldGFpbHMgPSBibG9jay5fYXBwZW5kQ2hhcihjaCwgZmxhZ3MpO1xyXG5cclxuICAgICAgY29uc3Qgc2tpcCA9IGJsb2NrRGV0YWlscy5za2lwO1xyXG4gICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShibG9ja0RldGFpbHMpO1xyXG5cclxuICAgICAgaWYgKHNraXAgfHwgYmxvY2tEZXRhaWxzLnJhd0luc2VydGVkKSBicmVhazsgLy8gZ28gbmV4dCBjaGFyXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGRldGFpbHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZXh0cmFjdFRhaWwgKGZyb21Qb3M/OiBudW1iZXI9MCwgdG9Qb3M/OiBudW1iZXI9dGhpcy52YWx1ZS5sZW5ndGgpOiBDaHVua3NUYWlsRGV0YWlscyB7XHJcbiAgICBjb25zdCBjaHVua1RhaWwgPSBuZXcgQ2h1bmtzVGFpbERldGFpbHMoKTtcclxuICAgIGlmIChmcm9tUG9zID09PSB0b1BvcykgcmV0dXJuIGNodW5rVGFpbDtcclxuXHJcbiAgICB0aGlzLl9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zLCB0b1BvcywgKGIsIGJpLCBiRnJvbVBvcywgYlRvUG9zKSA9PiB7XHJcbiAgICAgIGNvbnN0IGJsb2NrQ2h1bmsgPSBiLmV4dHJhY3RUYWlsKGJGcm9tUG9zLCBiVG9Qb3MpO1xyXG4gICAgICBibG9ja0NodW5rLnN0b3AgPSB0aGlzLl9maW5kU3RvcEJlZm9yZShiaSk7XHJcbiAgICAgIGJsb2NrQ2h1bmsuZnJvbSA9IHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmkpO1xyXG4gICAgICBpZiAoYmxvY2tDaHVuayBpbnN0YW5jZW9mIENodW5rc1RhaWxEZXRhaWxzKSBibG9ja0NodW5rLmJsb2NrSW5kZXggPSBiaTtcclxuXHJcbiAgICAgIGNodW5rVGFpbC5leHRlbmQoYmxvY2tDaHVuayk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY2h1bmtUYWlsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGV4dHJhY3RJbnB1dCAoZnJvbVBvcz86IG51bWJlcj0wLCB0b1Bvcz86IG51bWJlcj10aGlzLnZhbHVlLmxlbmd0aCwgZmxhZ3M6IEV4dHJhY3RGbGFncz17fSk6IHN0cmluZyB7XHJcbiAgICBpZiAoZnJvbVBvcyA9PT0gdG9Qb3MpIHJldHVybiAnJztcclxuXHJcbiAgICBsZXQgaW5wdXQgPSAnJztcclxuXHJcbiAgICB0aGlzLl9mb3JFYWNoQmxvY2tzSW5SYW5nZShmcm9tUG9zLCB0b1BvcywgKGIsIF8sIGZyb21Qb3MsIHRvUG9zKSA9PiB7XHJcbiAgICAgIGlucHV0ICs9IGIuZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zLCBmbGFncyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaW5wdXQ7XHJcbiAgfVxyXG5cclxuICBfZmluZFN0b3BCZWZvcmUgKGJsb2NrSW5kZXg6IG51bWJlcik6ID9udW1iZXIge1xyXG4gICAgbGV0IHN0b3BCZWZvcmU7XHJcbiAgICBmb3IgKGxldCBzaT0wOyBzaTx0aGlzLl9zdG9wcy5sZW5ndGg7ICsrc2kpIHtcclxuICAgICAgY29uc3Qgc3RvcCA9IHRoaXMuX3N0b3BzW3NpXTtcclxuICAgICAgaWYgKHN0b3AgPD0gYmxvY2tJbmRleCkgc3RvcEJlZm9yZSA9IHN0b3A7XHJcbiAgICAgIGVsc2UgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RvcEJlZm9yZTtcclxuICB9XHJcblxyXG4gIC8qKiBBcHBlbmRzIHBsYWNlaG9sZGVyIGRlcGVuZGluZyBvbiBsYXppbmVzcyAqL1xyXG4gIF9hcHBlbmRQbGFjZWhvbGRlciAodG9CbG9ja0luZGV4OiA/bnVtYmVyKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IENoYW5nZURldGFpbHMoKTtcclxuICAgIGlmICh0aGlzLmxhenkgJiYgdG9CbG9ja0luZGV4ID09IG51bGwpIHJldHVybiBkZXRhaWxzO1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0QmxvY2tJdGVyID0gdGhpcy5fbWFwUG9zVG9CbG9jayh0aGlzLnZhbHVlLmxlbmd0aCk7XHJcbiAgICBpZiAoIXN0YXJ0QmxvY2tJdGVyKSByZXR1cm4gZGV0YWlscztcclxuXHJcbiAgICBjb25zdCBzdGFydEJsb2NrSW5kZXggPSBzdGFydEJsb2NrSXRlci5pbmRleDtcclxuICAgIGNvbnN0IGVuZEJsb2NrSW5kZXggPSB0b0Jsb2NrSW5kZXggIT0gbnVsbCA/IHRvQmxvY2tJbmRleCA6IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7XHJcblxyXG4gICAgdGhpcy5fYmxvY2tzLnNsaWNlKHN0YXJ0QmxvY2tJbmRleCwgZW5kQmxvY2tJbmRleClcclxuICAgICAgLmZvckVhY2goYiA9PiB7XHJcbiAgICAgICAgaWYgKCFiLmxhenkgfHwgdG9CbG9ja0luZGV4ICE9IG51bGwpIHtcclxuICAgICAgICAgIC8vICRGbG93Rml4TWUgYF9ibG9ja3NgIG1heSBub3QgYmUgcHJlc2VudFxyXG4gICAgICAgICAgY29uc3QgYXJncyA9IGIuX2Jsb2NrcyAhPSBudWxsID8gW2IuX2Jsb2Nrcy5sZW5ndGhdIDogW107XHJcbiAgICAgICAgICBjb25zdCBiRGV0YWlscyA9IGIuX2FwcGVuZFBsYWNlaG9sZGVyKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgdGhpcy5fdmFsdWUgKz0gYkRldGFpbHMuaW5zZXJ0ZWQ7XHJcbiAgICAgICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZShiRGV0YWlscyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gZGV0YWlscztcclxuICB9XHJcblxyXG4gIC8qKiBGaW5kcyBibG9jayBpbiBwb3MgKi9cclxuICBfbWFwUG9zVG9CbG9jayAocG9zOiBudW1iZXIpOiA/QmxvY2tQb3NEYXRhIHtcclxuICAgIGxldCBhY2NWYWwgPSAnJztcclxuICAgIGZvciAobGV0IGJpPTA7IGJpPHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcclxuICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xyXG4gICAgICBjb25zdCBibG9ja1N0YXJ0UG9zID0gYWNjVmFsLmxlbmd0aDtcclxuXHJcbiAgICAgIGFjY1ZhbCArPSBibG9jay52YWx1ZTtcclxuXHJcbiAgICAgIGlmIChwb3MgPD0gYWNjVmFsLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBpbmRleDogYmksXHJcbiAgICAgICAgICBvZmZzZXQ6IHBvcyAtIGJsb2NrU3RhcnRQb3MsXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqICovXHJcbiAgX2Jsb2NrU3RhcnRQb3MgKGJsb2NrSW5kZXg6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzXHJcbiAgICAgIC5zbGljZSgwLCBibG9ja0luZGV4KVxyXG4gICAgICAucmVkdWNlKChwb3MsIGIpID0+IHBvcyArPSBiLnZhbHVlLmxlbmd0aCwgMCk7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBfZm9yRWFjaEJsb2Nrc0luUmFuZ2UgKGZyb21Qb3M6IG51bWJlciwgdG9Qb3M6IG51bWJlcj10aGlzLnZhbHVlLmxlbmd0aCwgZm46IChibG9jazogUGF0dGVybkJsb2NrLCBibG9ja0luZGV4OiBudW1iZXIsIGZyb21Qb3M6IG51bWJlciwgdG9Qb3M6IG51bWJlcikgPT4gdm9pZCkge1xyXG4gICAgY29uc3QgZnJvbUJsb2NrSXRlciA9IHRoaXMuX21hcFBvc1RvQmxvY2soZnJvbVBvcyk7XHJcblxyXG4gICAgaWYgKGZyb21CbG9ja0l0ZXIpIHtcclxuICAgICAgY29uc3QgdG9CbG9ja0l0ZXIgPSB0aGlzLl9tYXBQb3NUb0Jsb2NrKHRvUG9zKTtcclxuICAgICAgLy8gcHJvY2VzcyBmaXJzdCBibG9ja1xyXG4gICAgICBjb25zdCBpc1NhbWVCbG9jayA9IHRvQmxvY2tJdGVyICYmIGZyb21CbG9ja0l0ZXIuaW5kZXggPT09IHRvQmxvY2tJdGVyLmluZGV4O1xyXG4gICAgICBjb25zdCBmcm9tQmxvY2tTdGFydFBvcyA9IGZyb21CbG9ja0l0ZXIub2Zmc2V0O1xyXG4gICAgICBjb25zdCBmcm9tQmxvY2tFbmRQb3MgPSB0b0Jsb2NrSXRlciAmJiBpc1NhbWVCbG9jayA/XHJcbiAgICAgICAgdG9CbG9ja0l0ZXIub2Zmc2V0IDpcclxuICAgICAgICB0aGlzLl9ibG9ja3NbZnJvbUJsb2NrSXRlci5pbmRleF0udmFsdWUubGVuZ3RoO1xyXG4gICAgICBmbih0aGlzLl9ibG9ja3NbZnJvbUJsb2NrSXRlci5pbmRleF0sIGZyb21CbG9ja0l0ZXIuaW5kZXgsIGZyb21CbG9ja1N0YXJ0UG9zLCBmcm9tQmxvY2tFbmRQb3MpO1xyXG5cclxuICAgICAgaWYgKHRvQmxvY2tJdGVyICYmICFpc1NhbWVCbG9jaykge1xyXG4gICAgICAgIC8vIHByb2Nlc3MgaW50ZXJtZWRpYXRlIGJsb2Nrc1xyXG4gICAgICAgIGZvciAobGV0IGJpPWZyb21CbG9ja0l0ZXIuaW5kZXgrMTsgYmk8dG9CbG9ja0l0ZXIuaW5kZXg7ICsrYmkpIHtcclxuICAgICAgICAgIGZuKHRoaXMuX2Jsb2Nrc1tiaV0sIGJpLCAwLCB0aGlzLl9ibG9ja3NbYmldLnZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcm9jZXNzIGxhc3QgYmxvY2tcclxuICAgICAgICBmbih0aGlzLl9ibG9ja3NbdG9CbG9ja0l0ZXIuaW5kZXhdLCB0b0Jsb2NrSXRlci5pbmRleCwgMCwgdG9CbG9ja0l0ZXIub2Zmc2V0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIHJlbW92ZSAoZnJvbVBvczogbnVtYmVyPTAsIHRvUG9zOiBudW1iZXI9dGhpcy52YWx1ZS5sZW5ndGgpOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIGNvbnN0IHJlbW92ZURldGFpbHMgPSBzdXBlci5yZW1vdmUoZnJvbVBvcywgdG9Qb3MpO1xyXG4gICAgdGhpcy5fZm9yRWFjaEJsb2Nrc0luUmFuZ2UoZnJvbVBvcywgdG9Qb3MsIChiLCBfLCBiRnJvbVBvcywgYlRvUG9zKSA9PiB7XHJcbiAgICAgIHJlbW92ZURldGFpbHMuYWdncmVnYXRlKGIucmVtb3ZlKGJGcm9tUG9zLCBiVG9Qb3MpKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlbW92ZURldGFpbHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgbmVhcmVzdElucHV0UG9zIChjdXJzb3JQb3M6IG51bWJlciwgZGlyZWN0aW9uOiBEaXJlY3Rpb249RElSRUNUSU9OLk5PTkUpOiBudW1iZXIge1xyXG4gICAgLy8gVE9ETyByZWZhY3RvciAtIGV4dHJhY3QgYWxpZ25ibG9ja1xyXG5cclxuICAgIGNvbnN0IGJlZ2luQmxvY2tEYXRhID0gdGhpcy5fbWFwUG9zVG9CbG9jayhjdXJzb3JQb3MpIHx8IHtpbmRleDogMCwgb2Zmc2V0OiAwfTtcclxuICAgIGNvbnN0IHtcclxuICAgICAgb2Zmc2V0OiBiZWdpbkJsb2NrT2Zmc2V0LFxyXG4gICAgICBpbmRleDogYmVnaW5CbG9ja0luZGV4LFxyXG4gICAgfSA9IGJlZ2luQmxvY2tEYXRhO1xyXG4gICAgY29uc3QgYmVnaW5CbG9jayA9IHRoaXMuX2Jsb2Nrc1tiZWdpbkJsb2NrSW5kZXhdO1xyXG5cclxuICAgIGlmICghYmVnaW5CbG9jaykgcmV0dXJuIGN1cnNvclBvcztcclxuXHJcbiAgICBsZXQgYmVnaW5CbG9ja0N1cnNvclBvcyA9IGJlZ2luQmxvY2tPZmZzZXQ7XHJcbiAgICAvLyBpZiBwb3NpdGlvbiBpbnNpZGUgYmxvY2sgLSB0cnkgdG8gYWRqdXN0IGl0XHJcbiAgICBpZiAoYmVnaW5CbG9ja0N1cnNvclBvcyAhPT0gMCAmJiBiZWdpbkJsb2NrQ3Vyc29yUG9zIDwgYmVnaW5CbG9jay52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgYmVnaW5CbG9ja0N1cnNvclBvcyA9IGJlZ2luQmxvY2submVhcmVzdElucHV0UG9zKGJlZ2luQmxvY2tPZmZzZXQsIGZvcmNlRGlyZWN0aW9uKGRpcmVjdGlvbikpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGN1cnNvckF0UmlnaHQgPSBiZWdpbkJsb2NrQ3Vyc29yUG9zID09PSBiZWdpbkJsb2NrLnZhbHVlLmxlbmd0aDtcclxuICAgIGNvbnN0IGN1cnNvckF0TGVmdCA9IGJlZ2luQmxvY2tDdXJzb3JQb3MgPT09IDA7XHJcblxyXG4gICAgLy8gIGN1cnNvciBpcyBJTlNJREUgZmlyc3QgYmxvY2sgKG5vdCBhdCBib3VuZHMpXHJcbiAgICBpZiAoIWN1cnNvckF0TGVmdCAmJiAhY3Vyc29yQXRSaWdodCkgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmVnaW5CbG9ja0luZGV4KSArIGJlZ2luQmxvY2tDdXJzb3JQb3M7XHJcblxyXG4gICAgY29uc3Qgc2VhcmNoQmxvY2tJbmRleCA9IGN1cnNvckF0UmlnaHQgPyBiZWdpbkJsb2NrSW5kZXggKyAxIDogYmVnaW5CbG9ja0luZGV4O1xyXG5cclxuICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5OT05FKSB7XHJcbiAgICAgIC8vIE5PTkUgZGlyZWN0aW9uIHVzZWQgdG8gY2FsY3VsYXRlIHN0YXJ0IGlucHV0IHBvc2l0aW9uIGlmIG5vIGNoYXJzIHdlcmUgcmVtb3ZlZFxyXG4gICAgICAvLyBGT1IgTk9ORTpcclxuICAgICAgLy8gLVxyXG4gICAgICAvLyBpbnB1dHxhbnlcclxuICAgICAgLy8gLT5cclxuICAgICAgLy8gIGFueXxpbnB1dFxyXG4gICAgICAvLyA8LVxyXG4gICAgICAvLyAgZmlsbGVkLWlucHV0fGFueVxyXG5cclxuICAgICAgLy8gY2hlY2sgaWYgZmlyc3QgYmxvY2sgYXQgbGVmdCBpcyBpbnB1dFxyXG4gICAgICBpZiAoc2VhcmNoQmxvY2tJbmRleCA+IDApIHtcclxuICAgICAgICBjb25zdCBibG9ja0luZGV4QXRMZWZ0ID0gc2VhcmNoQmxvY2tJbmRleC0xO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrQXRMZWZ0ID0gdGhpcy5fYmxvY2tzW2Jsb2NrSW5kZXhBdExlZnRdO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5wdXRQb3MgPSBibG9ja0F0TGVmdC5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xyXG4gICAgICAgIC8vIGlzIGlucHV0XHJcbiAgICAgICAgaWYgKCFibG9ja0F0TGVmdC52YWx1ZS5sZW5ndGggfHwgYmxvY2tJbnB1dFBvcyAhPT0gYmxvY2tBdExlZnQudmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhzZWFyY2hCbG9ja0luZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIC0+XHJcbiAgICAgIGxldCBmaXJzdElucHV0QXRSaWdodCA9IHNlYXJjaEJsb2NrSW5kZXg7XHJcbiAgICAgIGZvciAobGV0IGJpPWZpcnN0SW5wdXRBdFJpZ2h0OyBiaSA8IHRoaXMuX2Jsb2Nrcy5sZW5ndGg7ICsrYmkpIHtcclxuICAgICAgICBjb25zdCBibG9ja0F0UmlnaHQgPSB0aGlzLl9ibG9ja3NbYmldO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5wdXRQb3MgPSBibG9ja0F0UmlnaHQubmVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcclxuICAgICAgICBpZiAoIWJsb2NrQXRSaWdodC52YWx1ZS5sZW5ndGggfHwgYmxvY2tJbnB1dFBvcyAhPT0gYmxvY2tBdFJpZ2h0LnZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmkpICsgYmxvY2tJbnB1dFBvcztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIDwtXHJcbiAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLWZpeGVkIHN5bWJvbFxyXG4gICAgICBmb3IgKGxldCBiaT1zZWFyY2hCbG9ja0luZGV4LTE7IGJpID49IDA7IC0tYmkpIHtcclxuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuX2Jsb2Nrc1tiaV07XHJcbiAgICAgICAgY29uc3QgYmxvY2tJbnB1dFBvcyA9IGJsb2NrLm5lYXJlc3RJbnB1dFBvcygwLCBESVJFQ1RJT04uTk9ORSk7XHJcbiAgICAgICAgLy8gaXMgaW5wdXRcclxuICAgICAgICBpZiAoIWJsb2NrLnZhbHVlLmxlbmd0aCB8fCBibG9ja0lucHV0UG9zICE9PSBibG9jay52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKGJpKSArIGJsb2NrLnZhbHVlLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjdXJzb3JQb3M7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkxFRlQgfHwgZGlyZWN0aW9uID09PSBESVJFQ1RJT04uRk9SQ0VfTEVGVCkge1xyXG4gICAgICAvLyAtXHJcbiAgICAgIC8vICBhbnl8ZmlsbGVkLWlucHV0XHJcbiAgICAgIC8vIDwtXHJcbiAgICAgIC8vICBhbnl8Zmlyc3Qgbm90IGVtcHR5IGlzIG5vdC1sZW4tYWxpZ25lZFxyXG4gICAgICAvLyAgbm90LTAtYWxpZ25lZHxhbnlcclxuICAgICAgLy8gLT5cclxuICAgICAgLy8gIGFueXxub3QtbGVuLWFsaWduZWQgb3IgZW5kXHJcblxyXG4gICAgICAvLyBjaGVjayBpZiBmaXJzdCBibG9jayBhdCByaWdodCBpcyBmaWxsZWQgaW5wdXRcclxuICAgICAgbGV0IGZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQ7XHJcbiAgICAgIGZvciAobGV0IGJpPXNlYXJjaEJsb2NrSW5kZXg7IGJpIDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytiaSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ibG9ja3NbYmldLnZhbHVlKSB7XHJcbiAgICAgICAgICBmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0ID0gYmk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHQgIT0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IGZpbGxlZEJsb2NrID0gdGhpcy5fYmxvY2tzW2ZpcnN0RmlsbGVkQmxvY2tJbmRleEF0UmlnaHRdO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5wdXRQb3MgPSBmaWxsZWRCbG9jay5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLlJJR0hUKTtcclxuICAgICAgICBpZiAoYmxvY2tJbnB1dFBvcyA9PT0gMCAmJiBmaWxsZWRCbG9jay51bm1hc2tlZFZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgLy8gZmlsbGVkIGJsb2NrIGlzIGlucHV0XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYmxvY2tTdGFydFBvcyhmaXJzdEZpbGxlZEJsb2NrSW5kZXhBdFJpZ2h0KSArIGJsb2NrSW5wdXRQb3M7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyA8LVxyXG4gICAgICAvLyBmaW5kIHRoaXMgdmFyc1xyXG4gICAgICBsZXQgZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXggPSAtMTtcclxuICAgICAgbGV0IGZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXg7ICAvLyBUT0RPIGNvbnNpZGVyIG5lc3RlZCBlbXB0eSBpbnB1dHNcclxuICAgICAgZm9yIChsZXQgYmk9c2VhcmNoQmxvY2tJbmRleC0xOyBiaSA+PSAwOyAtLWJpKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5wdXRQb3MgPSBibG9jay5uZWFyZXN0SW5wdXRQb3MoYmxvY2sudmFsdWUubGVuZ3RoLCBESVJFQ1RJT04uRk9SQ0VfTEVGVCk7XHJcbiAgICAgICAgaWYgKCFibG9jay52YWx1ZSB8fCBibG9ja0lucHV0UG9zICE9PSAwKSBmaXJzdEVtcHR5SW5wdXRCbG9ja0luZGV4ID0gYmk7XHJcbiAgICAgICAgaWYgKGJsb2NrSW5wdXRQb3MgIT09IDApIHtcclxuICAgICAgICAgIGlmIChibG9ja0lucHV0UG9zICE9PSBibG9jay52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gYWxpZ25lZCBpbnNpZGUgYmxvY2sgLSByZXR1cm4gaW1tZWRpYXRlbHlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmkpICsgYmxvY2tJbnB1dFBvcztcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZvdW5kIGZpbGxlZFxyXG4gICAgICAgICAgICBmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCA9IGJpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5MRUZUKSB7XHJcbiAgICAgICAgLy8gdHJ5IGZpbmQgZmlyc3QgZW1wdHkgaW5wdXQgYmVmb3JlIHN0YXJ0IHNlYXJjaGluZyBwb3NpdGlvbiBvbmx5IHdoZW4gbm90IGZvcmNlZFxyXG4gICAgICAgIGZvciAobGV0IGJpPWZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4KzE7IGJpIDw9IE1hdGgubWluKHNlYXJjaEJsb2NrSW5kZXgsIHRoaXMuX2Jsb2Nrcy5sZW5ndGgtMSk7ICsrYmkpIHtcclxuICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5fYmxvY2tzW2JpXTtcclxuICAgICAgICAgIGNvbnN0IGJsb2NrSW5wdXRQb3MgPSBibG9jay5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xyXG4gICAgICAgICAgY29uc3QgYmxvY2tBbGlnbmVkUG9zID0gdGhpcy5fYmxvY2tTdGFydFBvcyhiaSkgKyBibG9ja0lucHV0UG9zO1xyXG5cclxuICAgICAgICAgIGlmIChibG9ja0FsaWduZWRQb3MgPiBjdXJzb3JQb3MpIGJyZWFrO1xyXG4gICAgICAgICAgLy8gaWYgYmxvY2sgaXMgbm90IGxhenkgaW5wdXRcclxuICAgICAgICAgIGlmIChibG9ja0lucHV0UG9zICE9PSBibG9jay52YWx1ZS5sZW5ndGgpIHJldHVybiBibG9ja0FsaWduZWRQb3M7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBwcm9jZXNzIG92ZXJmbG93XHJcbiAgICAgIGlmIChmaXJzdEZpbGxlZElucHV0QmxvY2tJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoZmlyc3RGaWxsZWRJbnB1dEJsb2NrSW5kZXgpICsgdGhpcy5fYmxvY2tzW2ZpcnN0RmlsbGVkSW5wdXRCbG9ja0luZGV4XS52YWx1ZS5sZW5ndGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGZvciBsYXp5IGlmIGhhcyBhbGlnbmVkIGxlZnQgaW5zaWRlIGZpeGVkIGFuZCBoYXMgY2FtZSB0byB0aGUgc3RhcnQgLSB1c2Ugc3RhcnQgcG9zaXRpb25cclxuICAgICAgaWYgKFxyXG4gICAgICAgIGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlQgfHxcclxuICAgICAgICB0aGlzLmxhenkgJiYgIXRoaXMuZXh0cmFjdElucHV0KCkgJiYgIWlzSW5wdXQodGhpcy5fYmxvY2tzW3NlYXJjaEJsb2NrSW5kZXhdKVxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXggIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKGZpcnN0RW1wdHlJbnB1dEJsb2NrSW5kZXgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBmaW5kIGZpcnN0IGlucHV0XHJcbiAgICAgIGZvciAobGV0IGJpPXNlYXJjaEJsb2NrSW5kZXg7IGJpIDwgdGhpcy5fYmxvY2tzLmxlbmd0aDsgKytiaSkge1xyXG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5fYmxvY2tzW2JpXTtcclxuICAgICAgICBjb25zdCBibG9ja0lucHV0UG9zID0gYmxvY2submVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5OT05FKTtcclxuICAgICAgICAvLyBpcyBpbnB1dFxyXG4gICAgICAgIGlmICghYmxvY2sudmFsdWUubGVuZ3RoIHx8IGJsb2NrSW5wdXRQb3MgIT09IGJsb2NrLnZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2Jsb2NrU3RhcnRQb3MoYmkpICsgYmxvY2tJbnB1dFBvcztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkaXJlY3Rpb24gPT09IERJUkVDVElPTi5SSUdIVCB8fCBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9SSUdIVCkge1xyXG4gICAgICAvLyAtPlxyXG4gICAgICAvLyAgYW55fG5vdC1sZW4tYWxpZ25lZCBhbmQgZmlsbGVkXHJcbiAgICAgIC8vICBhbnl8bm90LWxlbi1hbGlnbmVkXHJcbiAgICAgIC8vIDwtXHJcbiAgICAgIC8vICBub3QtMC1hbGlnbmVkIG9yIHN0YXJ0fGFueVxyXG4gICAgICBsZXQgZmlyc3RJbnB1dEJsb2NrQWxpZ25lZEluZGV4OiA/bnVtYmVyO1xyXG4gICAgICBsZXQgZmlyc3RJbnB1dEJsb2NrQWxpZ25lZFBvczogP251bWJlcjtcclxuICAgICAgZm9yIChsZXQgYmk9c2VhcmNoQmxvY2tJbmRleDsgYmkgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK2JpKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5wdXRQb3MgPSBibG9jay5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpO1xyXG4gICAgICAgIGlmIChibG9ja0lucHV0UG9zICE9PSBibG9jay52YWx1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3MgPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKGJpKSArIGJsb2NrSW5wdXRQb3M7XHJcbiAgICAgICAgICBmaXJzdElucHV0QmxvY2tBbGlnbmVkSW5kZXggPSBiaTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleCAhPSBudWxsICYmIGZpcnN0SW5wdXRCbG9ja0FsaWduZWRQb3MgIT0gbnVsbCkge1xyXG4gICAgICAgIGZvciAobGV0IGJpPWZpcnN0SW5wdXRCbG9ja0FsaWduZWRJbmRleDsgYmkgPCB0aGlzLl9ibG9ja3MubGVuZ3RoOyArK2JpKSB7XHJcbiAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuX2Jsb2Nrc1tiaV07XHJcbiAgICAgICAgICBjb25zdCBibG9ja0lucHV0UG9zID0gYmxvY2submVhcmVzdElucHV0UG9zKDAsIERJUkVDVElPTi5GT1JDRV9SSUdIVCk7XHJcbiAgICAgICAgICBpZiAoYmxvY2tJbnB1dFBvcyAhPT0gYmxvY2sudmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ibG9ja1N0YXJ0UG9zKGJpKSArIGJsb2NrSW5wdXRQb3M7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTi5GT1JDRV9SSUdIVCA/XHJcbiAgICAgICAgICB0aGlzLnZhbHVlLmxlbmd0aCA6XHJcbiAgICAgICAgICBmaXJzdElucHV0QmxvY2tBbGlnbmVkUG9zO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGxldCBiaT1NYXRoLm1pbihzZWFyY2hCbG9ja0luZGV4LCB0aGlzLl9ibG9ja3MubGVuZ3RoLTEpOyBiaSA+PSAwOyAtLWJpKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLl9ibG9ja3NbYmldO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5wdXRQb3MgPSBibG9jay5uZWFyZXN0SW5wdXRQb3MoYmxvY2sudmFsdWUubGVuZ3RoLCBESVJFQ1RJT04uTEVGVCk7XHJcbiAgICAgICAgaWYgKGJsb2NrSW5wdXRQb3MgIT09IDApIHtcclxuICAgICAgICAgIGNvbnN0IGFsaWduZWRQb3MgPSB0aGlzLl9ibG9ja1N0YXJ0UG9zKGJpKSArIGJsb2NrSW5wdXRQb3M7XHJcbiAgICAgICAgICBpZiAoYWxpZ25lZFBvcyA+PSBjdXJzb3JQb3MpIHJldHVybiBhbGlnbmVkUG9zO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGN1cnNvclBvcztcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgYmxvY2sgYnkgbmFtZSAqL1xyXG4gIG1hc2tlZEJsb2NrIChuYW1lOiBzdHJpbmcpOiA/UGF0dGVybkJsb2NrIHtcclxuICAgIHJldHVybiB0aGlzLm1hc2tlZEJsb2NrcyhuYW1lKVswXTtcclxuICB9XHJcblxyXG4gIC8qKiBHZXQgYWxsIGJsb2NrcyBieSBuYW1lICovXHJcbiAgbWFza2VkQmxvY2tzIChuYW1lOiBzdHJpbmcpOiBBcnJheTxQYXR0ZXJuQmxvY2s+IHtcclxuICAgIGNvbnN0IGluZGljZXMgPSB0aGlzLl9tYXNrZWRCbG9ja3NbbmFtZV07XHJcbiAgICBpZiAoIWluZGljZXMpIHJldHVybiBbXTtcclxuICAgIHJldHVybiBpbmRpY2VzLm1hcChnaSA9PiB0aGlzLl9ibG9ja3NbZ2ldKTtcclxuICB9XHJcbn1cclxuTWFza2VkUGF0dGVybi5ERUZBVUxUUyA9IHtcclxuICBsYXp5OiB0cnVlLFxyXG4gIHBsYWNlaG9sZGVyQ2hhcjogJ18nXHJcbn07XHJcbk1hc2tlZFBhdHRlcm4uU1RPUF9DSEFSID0gJ2AnO1xyXG5NYXNrZWRQYXR0ZXJuLkVTQ0FQRV9DSEFSID0gJ1xcXFwnO1xyXG5NYXNrZWRQYXR0ZXJuLklucHV0RGVmaW5pdGlvbiA9IFBhdHRlcm5JbnB1dERlZmluaXRpb247XHJcbk1hc2tlZFBhdHRlcm4uRml4ZWREZWZpbml0aW9uID0gUGF0dGVybkZpeGVkRGVmaW5pdGlvbjtcclxuXHJcbmZ1bmN0aW9uIGlzSW5wdXQgKGJsb2NrOiBQYXR0ZXJuQmxvY2spOiBib29sZWFuIHtcclxuICBpZiAoIWJsb2NrKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIGNvbnN0IHZhbHVlID0gYmxvY2sudmFsdWU7XHJcbiAgcmV0dXJuICF2YWx1ZSB8fCBibG9jay5uZWFyZXN0SW5wdXRQb3MoMCwgRElSRUNUSU9OLk5PTkUpICE9PSB2YWx1ZS5sZW5ndGg7XHJcbn1cclxuXHJcblxyXG5JTWFzay5NYXNrZWRQYXR0ZXJuID0gTWFza2VkUGF0dGVybjtcclxuIiwiLy8gQGZsb3dcclxuaW1wb3J0IE1hc2tlZFBhdHRlcm4gZnJvbSAnLi9wYXR0ZXJuLmpzJztcclxuaW1wb3J0IHsgdHlwZSBBcHBlbmRGbGFncyB9IGZyb20gJy4vYmFzZS5qcyc7XHJcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XHJcblxyXG5cclxuLyoqIFBhdHRlcm4gd2hpY2ggYWNjZXB0cyByYW5nZXMgKi9cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgTWFza2VkUmFuZ2UgZXh0ZW5kcyBNYXNrZWRQYXR0ZXJuIHtcclxuICAvKipcclxuICAgIE9wdGlvbmFsbHkgc2V0cyBtYXggbGVuZ3RoIG9mIHBhdHRlcm4uXHJcbiAgICBVc2VkIHdoZW4gcGF0dGVybiBsZW5ndGggaXMgbG9uZ2VyIHRoZW4gYHRvYCBwYXJhbSBsZW5ndGguIFBhZHMgemVyb3MgYXQgc3RhcnQgaW4gdGhpcyBjYXNlLlxyXG4gICovXHJcbiAgbWF4TGVuZ3RoOiBudW1iZXI7XHJcbiAgLyoqIE1pbiBib3VuZCAqL1xyXG4gIGZyb206IG51bWJlcjtcclxuICAvKiogTWF4IGJvdW5kICovXHJcbiAgdG86IG51bWJlcjtcclxuICAvKiogKi9cclxuICBhdXRvZml4OiBib29sZWFuO1xyXG5cclxuICBnZXQgX21hdGNoRnJvbSAoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm1heExlbmd0aCAtIFN0cmluZyh0aGlzLmZyb20pLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBfdXBkYXRlIChvcHRzOiBhbnkpIHsgIC8vIFRPRE8gdHlwZVxyXG4gICAgb3B0cyA9IHtcclxuICAgICAgdG86IHRoaXMudG8gfHwgMCxcclxuICAgICAgZnJvbTogdGhpcy5mcm9tIHx8IDAsXHJcbiAgICAgIC4uLm9wdHMsXHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBtYXhMZW5ndGggPSBTdHJpbmcob3B0cy50bykubGVuZ3RoO1xyXG4gICAgaWYgKG9wdHMubWF4TGVuZ3RoICE9IG51bGwpIG1heExlbmd0aCA9IE1hdGgubWF4KG1heExlbmd0aCwgb3B0cy5tYXhMZW5ndGgpO1xyXG4gICAgb3B0cy5tYXhMZW5ndGggPSBtYXhMZW5ndGg7XHJcblxyXG4gICAgY29uc3QgZnJvbVN0ciA9IFN0cmluZyhvcHRzLmZyb20pLnBhZFN0YXJ0KG1heExlbmd0aCwgJzAnKTtcclxuICAgIGNvbnN0IHRvU3RyID0gU3RyaW5nKG9wdHMudG8pLnBhZFN0YXJ0KG1heExlbmd0aCwgJzAnKTtcclxuICAgIGxldCBzYW1lQ2hhcnNDb3VudCA9IDA7XHJcbiAgICB3aGlsZSAoc2FtZUNoYXJzQ291bnQgPCB0b1N0ci5sZW5ndGggJiYgdG9TdHJbc2FtZUNoYXJzQ291bnRdID09PSBmcm9tU3RyW3NhbWVDaGFyc0NvdW50XSkgKytzYW1lQ2hhcnNDb3VudDtcclxuICAgIG9wdHMubWFzayA9IHRvU3RyLnNsaWNlKDAsIHNhbWVDaGFyc0NvdW50KS5yZXBsYWNlKC8wL2csICdcXFxcMCcpICsgJzAnLnJlcGVhdChtYXhMZW5ndGggLSBzYW1lQ2hhcnNDb3VudCk7XHJcblxyXG4gICAgc3VwZXIuX3VwZGF0ZShvcHRzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgaXNDb21wbGV0ZSAoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gc3VwZXIuaXNDb21wbGV0ZSAmJiBCb29sZWFuKHRoaXMudmFsdWUpO1xyXG4gIH1cclxuXHJcbiAgYm91bmRhcmllcyAoc3RyOiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmddIHtcclxuICAgIGxldCBtaW5zdHIgPSAnJztcclxuICAgIGxldCBtYXhzdHIgPSAnJztcclxuXHJcbiAgICBjb25zdCBbLCBwbGFjZWhvbGRlciwgbnVtXSA9IHN0ci5tYXRjaCgvXihcXEQqKShcXGQqKShcXEQqKS8pIHx8IFtdO1xyXG4gICAgaWYgKG51bSkge1xyXG4gICAgICBtaW5zdHIgPSAnMCcucmVwZWF0KHBsYWNlaG9sZGVyLmxlbmd0aCkgKyBudW07XHJcbiAgICAgIG1heHN0ciA9ICc5Jy5yZXBlYXQocGxhY2Vob2xkZXIubGVuZ3RoKSArIG51bTtcclxuICAgIH1cclxuICAgIG1pbnN0ciA9IG1pbnN0ci5wYWRFbmQodGhpcy5tYXhMZW5ndGgsICcwJyk7XHJcbiAgICBtYXhzdHIgPSBtYXhzdHIucGFkRW5kKHRoaXMubWF4TGVuZ3RoLCAnOScpO1xyXG5cclxuICAgIHJldHVybiBbbWluc3RyLCBtYXhzdHJdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGRvUHJlcGFyZSAoc3RyOiBzdHJpbmcsIGZsYWdzOiBBcHBlbmRGbGFncz17fSk6IHN0cmluZyB7XHJcbiAgICBzdHIgPSBzdXBlci5kb1ByZXBhcmUoc3RyLCBmbGFncykucmVwbGFjZSgvXFxEL2csICcnKTtcclxuICAgIGlmICghdGhpcy5hdXRvZml4KSByZXR1cm4gc3RyO1xyXG5cclxuICAgIGNvbnN0IGZyb21TdHIgPSBTdHJpbmcodGhpcy5mcm9tKS5wYWRTdGFydCh0aGlzLm1heExlbmd0aCwgJzAnKTtcclxuICAgIGNvbnN0IHRvU3RyID0gU3RyaW5nKHRoaXMudG8pLnBhZFN0YXJ0KHRoaXMubWF4TGVuZ3RoLCAnMCcpO1xyXG5cclxuICAgIGNvbnN0IHZhbCA9IHRoaXMudmFsdWU7XHJcbiAgICBsZXQgcHJlcFN0ciA9ICcnO1xyXG4gICAgZm9yIChsZXQgY2k9MDsgY2k8c3RyLmxlbmd0aDsgKytjaSkge1xyXG4gICAgICBjb25zdCBuZXh0VmFsID0gdmFsICsgcHJlcFN0ciArIHN0cltjaV07XHJcbiAgICAgIGNvbnN0IFttaW5zdHIsIG1heHN0cl0gPSB0aGlzLmJvdW5kYXJpZXMobmV4dFZhbCk7XHJcblxyXG4gICAgICBpZiAoTnVtYmVyKG1heHN0cikgPCB0aGlzLmZyb20pIHByZXBTdHIgKz0gZnJvbVN0cltuZXh0VmFsLmxlbmd0aCAtIDFdO1xyXG4gICAgICBlbHNlIGlmIChOdW1iZXIobWluc3RyKSA+IHRoaXMudG8pIHByZXBTdHIgKz0gdG9TdHJbbmV4dFZhbC5sZW5ndGggLSAxXTtcclxuICAgICAgZWxzZSBwcmVwU3RyICs9IHN0cltjaV07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByZXBTdHI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZG9WYWxpZGF0ZSAoLi4uYXJnczogKik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3Qgc3RyID0gdGhpcy52YWx1ZTtcclxuXHJcbiAgICBjb25zdCBmaXJzdE5vblplcm8gPSBzdHIuc2VhcmNoKC9bXjBdLyk7XHJcbiAgICBpZiAoZmlyc3ROb25aZXJvID09PSAtMSAmJiBzdHIubGVuZ3RoIDw9IHRoaXMuX21hdGNoRnJvbSkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgY29uc3QgW21pbnN0ciwgbWF4c3RyXSA9IHRoaXMuYm91bmRhcmllcyhzdHIpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmZyb20gPD0gTnVtYmVyKG1heHN0cikgJiYgTnVtYmVyKG1pbnN0cikgPD0gdGhpcy50byAmJlxyXG4gICAgICBzdXBlci5kb1ZhbGlkYXRlKC4uLmFyZ3MpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbklNYXNrLk1hc2tlZFJhbmdlID0gTWFza2VkUmFuZ2U7XHJcbiIsIi8vIEBmbG93XHJcbmltcG9ydCBNYXNrZWRQYXR0ZXJuIGZyb20gJy4vcGF0dGVybi5qcyc7XHJcbmltcG9ydCBNYXNrZWRSYW5nZSBmcm9tICcuL3JhbmdlLmpzJztcclxuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcclxuXHJcblxyXG4vKiogRGF0ZSBtYXNrICovXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIE1hc2tlZERhdGUgZXh0ZW5kcyBNYXNrZWRQYXR0ZXJuIHtcclxuICBzdGF0aWMgR0VUX0RFRkFVTFRfQkxPQ0tTOiAoKSA9PiB7W3N0cmluZ106IGFueX07XHJcbiAgc3RhdGljIERFRkFVTFRTOiBhbnk7XHJcblxyXG4gIC8qKiBQYXR0ZXJuIG1hc2sgZm9yIGRhdGUgYWNjb3JkaW5nIHRvIHtAbGluayBNYXNrZWREYXRlI2Zvcm1hdH0gKi9cclxuICBwYXR0ZXJuOiBzdHJpbmc7XHJcbiAgLyoqIFN0YXJ0IGRhdGUgKi9cclxuICBtaW46ID9EYXRlO1xyXG4gIC8qKiBFbmQgZGF0ZSAqL1xyXG4gIG1heDogP0RhdGU7XHJcbiAgLyoqICovXHJcbiAgYXV0b2ZpeDogYm9vbGVhbjtcclxuXHJcbiAgLyoqXHJcbiAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gICovXHJcbiAgY29uc3RydWN0b3IgKG9wdHM6IGFueSkge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICAuLi5NYXNrZWREYXRlLkRFRkFVTFRTLFxyXG4gICAgICAuLi5vcHRzXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBfdXBkYXRlIChvcHRzOiBhbnkpIHtcclxuICAgIGlmIChvcHRzLm1hc2sgPT09IERhdGUpIGRlbGV0ZSBvcHRzLm1hc2s7XHJcbiAgICBpZiAob3B0cy5wYXR0ZXJuKSBvcHRzLm1hc2sgPSBvcHRzLnBhdHRlcm47XHJcblxyXG4gICAgY29uc3QgYmxvY2tzID0gb3B0cy5ibG9ja3M7XHJcbiAgICBvcHRzLmJsb2NrcyA9IE9iamVjdC5hc3NpZ24oe30sIE1hc2tlZERhdGUuR0VUX0RFRkFVTFRfQkxPQ0tTKCkpO1xyXG4gICAgLy8gYWRqdXN0IHllYXIgYmxvY2tcclxuICAgIGlmIChvcHRzLm1pbikgb3B0cy5ibG9ja3MuWS5mcm9tID0gb3B0cy5taW4uZ2V0RnVsbFllYXIoKTtcclxuICAgIGlmIChvcHRzLm1heCkgb3B0cy5ibG9ja3MuWS50byA9IG9wdHMubWF4LmdldEZ1bGxZZWFyKCk7XHJcbiAgICBpZiAob3B0cy5taW4gJiYgb3B0cy5tYXggJiYgb3B0cy5ibG9ja3MuWS5mcm9tID09PSBvcHRzLmJsb2Nrcy5ZLnRvXHJcbiAgICApIHtcclxuICAgICAgb3B0cy5ibG9ja3MubS5mcm9tID0gb3B0cy5taW4uZ2V0TW9udGgoKSArIDE7XHJcbiAgICAgIG9wdHMuYmxvY2tzLm0udG8gPSBvcHRzLm1heC5nZXRNb250aCgpICsgMTtcclxuXHJcbiAgICAgIGlmIChvcHRzLmJsb2Nrcy5tLmZyb20gPT09IG9wdHMuYmxvY2tzLm0udG8pIHtcclxuICAgICAgICBvcHRzLmJsb2Nrcy5kLmZyb20gPSBvcHRzLm1pbi5nZXREYXRlKCk7XHJcbiAgICAgICAgb3B0cy5ibG9ja3MuZC50byA9IG9wdHMubWF4LmdldERhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmFzc2lnbihvcHRzLmJsb2NrcywgYmxvY2tzKTtcclxuXHJcbiAgICAvLyBhZGQgYXV0b2ZpeFxyXG4gICAgT2JqZWN0LmtleXMob3B0cy5ibG9ja3MpLmZvckVhY2goYmsgPT4ge1xyXG4gICAgICBjb25zdCBiID0gb3B0cy5ibG9ja3NbYmtdO1xyXG4gICAgICBpZiAoISgnYXV0b2ZpeCcgaW4gYikpIGIuYXV0b2ZpeCA9IG9wdHMuYXV0b2ZpeDtcclxuICAgIH0pO1xyXG5cclxuICAgIHN1cGVyLl91cGRhdGUob3B0cyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZG9WYWxpZGF0ZSAoLi4uYXJnczogKik6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuZGF0ZTtcclxuXHJcbiAgICByZXR1cm4gc3VwZXIuZG9WYWxpZGF0ZSguLi5hcmdzKSAmJlxyXG4gICAgICAoIXRoaXMuaXNDb21wbGV0ZSB8fFxyXG4gICAgICAgIHRoaXMuaXNEYXRlRXhpc3QodGhpcy52YWx1ZSkgJiYgZGF0ZSAhPSBudWxsICYmXHJcbiAgICAgICAgKHRoaXMubWluID09IG51bGwgfHwgdGhpcy5taW4gPD0gZGF0ZSkgJiZcclxuICAgICAgICAodGhpcy5tYXggPT0gbnVsbCB8fCBkYXRlIDw9IHRoaXMubWF4KSk7XHJcbiAgfVxyXG5cclxuICAvKiogQ2hlY2tzIGlmIGRhdGUgaXMgZXhpc3RzICovXHJcbiAgaXNEYXRlRXhpc3QgKHN0cjogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JtYXQodGhpcy5wYXJzZShzdHIsIHRoaXMpLCB0aGlzKS5pbmRleE9mKHN0cikgPj0gMDtcclxuICB9XHJcblxyXG4gIC8qKiBQYXJzZWQgRGF0ZSAqL1xyXG4gIGdldCBkYXRlICgpOiA/RGF0ZSB7XHJcbiAgICByZXR1cm4gdGhpcy50eXBlZFZhbHVlO1xyXG4gIH1cclxuICBzZXQgZGF0ZSAoZGF0ZTogRGF0ZSkge1xyXG4gICAgdGhpcy50eXBlZFZhbHVlID0gZGF0ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgdHlwZWRWYWx1ZSAoKTogP0RhdGUge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNDb21wbGV0ZSA/IHN1cGVyLnR5cGVkVmFsdWUgOiBudWxsO1xyXG4gIH1cclxuICBzZXQgdHlwZWRWYWx1ZSAodmFsdWU6IERhdGUpIHtcclxuICAgIHN1cGVyLnR5cGVkVmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuTWFza2VkRGF0ZS5ERUZBVUxUUyA9IHtcclxuICBwYXR0ZXJuOiAnZHsufWBtey59YFknLFxyXG4gIGZvcm1hdDogZGF0ZSA9PiB7XHJcbiAgICBjb25zdCBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpLnBhZFN0YXJ0KDIsICcwJyk7XHJcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKS5wYWRTdGFydCgyLCAnMCcpO1xyXG4gICAgY29uc3QgeWVhciA9IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICByZXR1cm4gW2RheSwgbW9udGgsIHllYXJdLmpvaW4oJy4nKTtcclxuICB9LFxyXG4gIHBhcnNlOiBzdHIgPT4ge1xyXG4gICAgY29uc3QgW2RheSwgbW9udGgsIHllYXJdID0gc3RyLnNwbGl0KCcuJyk7XHJcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgbW9udGggLSAxLCBkYXkpO1xyXG4gIH0sXHJcbn07XHJcbk1hc2tlZERhdGUuR0VUX0RFRkFVTFRfQkxPQ0tTID0gKCkgPT4gKHtcclxuICBkOiB7XHJcbiAgICBtYXNrOiBNYXNrZWRSYW5nZSxcclxuICAgIGZyb206IDEsXHJcbiAgICB0bzogMzEsXHJcbiAgICBtYXhMZW5ndGg6IDIsXHJcbiAgfSxcclxuICBtOiB7XHJcbiAgICBtYXNrOiBNYXNrZWRSYW5nZSxcclxuICAgIGZyb206IDEsXHJcbiAgICB0bzogMTIsXHJcbiAgICBtYXhMZW5ndGg6IDIsXHJcbiAgfSxcclxuICBZOiB7XHJcbiAgICBtYXNrOiBNYXNrZWRSYW5nZSxcclxuICAgIGZyb206IDE5MDAsXHJcbiAgICB0bzogOTk5OSxcclxuICB9XHJcbn0pO1xyXG5cclxuXHJcbklNYXNrLk1hc2tlZERhdGUgPSBNYXNrZWREYXRlO1xyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xyXG5cclxuXHJcbmV4cG9ydFxyXG50eXBlIEVsZW1lbnRFdmVudCA9XHJcbiAgJ3NlbGVjdGlvbkNoYW5nZScgfFxyXG4gICdpbnB1dCcgfFxyXG4gICdkcm9wJyB8XHJcbiAgJ2NsaWNrJyB8XHJcbiAgJ2ZvY3VzJyB8XHJcbiAgJ2NvbW1pdCc7XHJcblxyXG4vKipcclxuICBHZW5lcmljIGVsZW1lbnQgQVBJIHRvIHVzZSB3aXRoIG1hc2tcclxuICBAaW50ZXJmYWNlXHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIE1hc2tFbGVtZW50IHtcclxuICAvKiogKi9cclxuICArX3Vuc2FmZVNlbGVjdGlvblN0YXJ0OiBudW1iZXI7XHJcbiAgLyoqICovXHJcbiAgK191bnNhZmVTZWxlY3Rpb25FbmQ6IG51bWJlcjtcclxuICAvKiogKi9cclxuICB2YWx1ZTogc3RyaW5nO1xyXG5cclxuICAvKiogU2FmZWx5IHJldHVybnMgc2VsZWN0aW9uIHN0YXJ0ICovXHJcbiAgZ2V0IHNlbGVjdGlvblN0YXJ0ICgpOiBudW1iZXIge1xyXG4gICAgbGV0IHN0YXJ0O1xyXG4gICAgdHJ5IHtcclxuICAgICAgc3RhcnQgPSB0aGlzLl91bnNhZmVTZWxlY3Rpb25TdGFydDtcclxuICAgIH0gY2F0Y2ggKGUpIHt9XHJcblxyXG4gICAgcmV0dXJuIHN0YXJ0ICE9IG51bGwgP1xyXG4gICAgICBzdGFydCA6XHJcbiAgICAgIHRoaXMudmFsdWUubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqIFNhZmVseSByZXR1cm5zIHNlbGVjdGlvbiBlbmQgKi9cclxuICBnZXQgc2VsZWN0aW9uRW5kICgpOiBudW1iZXIge1xyXG4gICAgbGV0IGVuZDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGVuZCA9IHRoaXMuX3Vuc2FmZVNlbGVjdGlvbkVuZDtcclxuICAgIH0gY2F0Y2ggKGUpIHt9XHJcblxyXG4gICAgcmV0dXJuIGVuZCAhPSBudWxsID9cclxuICAgICAgZW5kIDpcclxuICAgICAgdGhpcy52YWx1ZS5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvKiogU2FmZWx5IHNldHMgZWxlbWVudCBzZWxlY3Rpb24gKi9cclxuICBzZWxlY3QgKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XHJcbiAgICBpZiAoc3RhcnQgPT0gbnVsbCB8fCBlbmQgPT0gbnVsbCB8fFxyXG4gICAgICBzdGFydCA9PT0gdGhpcy5zZWxlY3Rpb25TdGFydCAmJiBlbmQgPT09IHRoaXMuc2VsZWN0aW9uRW5kKSByZXR1cm47XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5fdW5zYWZlU2VsZWN0KHN0YXJ0LCBlbmQpO1xyXG4gICAgfSBjYXRjaCAoZSkge31cclxuICB9XHJcblxyXG4gIC8qKiBTaG91bGQgYmUgb3ZlcnJpZGVuIGluIHN1YmNsYXNzZXMgKi9cclxuICBfdW5zYWZlU2VsZWN0IChzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IHZvaWQge31cclxuICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXHJcbiAgZ2V0IGlzQWN0aXZlICgpOiBib29sZWFuIHsgcmV0dXJuIGZhbHNlOyB9XHJcbiAgLyoqIFNob3VsZCBiZSBvdmVycmlkZW4gaW4gc3ViY2xhc3NlcyAqL1xyXG4gIGJpbmRFdmVudHMgKGhhbmRsZXJzOiB7W0VsZW1lbnRFdmVudF06IEZ1bmN0aW9ufSkge31cclxuICAvKiogU2hvdWxkIGJlIG92ZXJyaWRlbiBpbiBzdWJjbGFzc2VzICovXHJcbiAgdW5iaW5kRXZlbnRzICgpOiB2b2lkIHt9XHJcbn1cclxuXHJcblxyXG5JTWFzay5NYXNrRWxlbWVudCA9IE1hc2tFbGVtZW50O1xyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgTWFza0VsZW1lbnQsIHt0eXBlIEVsZW1lbnRFdmVudH0gZnJvbSAnLi9tYXNrLWVsZW1lbnQuanMnO1xyXG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xyXG5cclxuXHJcbi8qKiBCcmlkZ2UgYmV0d2VlbiBIVE1MRWxlbWVudCBhbmQge0BsaW5rIE1hc2tlZH0gKi9cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgSFRNTE1hc2tFbGVtZW50IGV4dGVuZHMgTWFza0VsZW1lbnQge1xyXG4gIC8qKiBNYXBwaW5nIGJldHdlZW4gSFRNTEVsZW1lbnQgZXZlbnRzIGFuZCBtYXNrIGludGVybmFsIGV2ZW50cyAqL1xyXG4gIHN0YXRpYyBFVkVOVFNfTUFQOiB7W0VsZW1lbnRFdmVudF06IHN0cmluZ307XHJcbiAgLyoqIEhUTUxFbGVtZW50IHRvIHVzZSBtYXNrIG9uICovXHJcbiAgaW5wdXQ6IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIF9oYW5kbGVyczoge1tzdHJpbmddOiBGdW5jdGlvbn07XHJcblxyXG4gIC8qKlxyXG4gICAgQHBhcmFtIHtIVE1MSW5wdXRFbGVtZW50fEhUTUxUZXh0QXJlYUVsZW1lbnR9IGlucHV0XHJcbiAgKi9cclxuICBjb25zdHJ1Y3RvciAoaW5wdXQ6IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xyXG4gICAgdGhpcy5faGFuZGxlcnMgPSB7fTtcclxuICB9XHJcblxyXG4gIC8qKiAqL1xyXG4gIC8vICRGbG93Rml4TWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4MzlcclxuICBnZXQgcm9vdEVsZW1lbnQgKCk6IEhUTUxEb2N1bWVudCB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5nZXRSb290Tm9kZVxyXG4gICAgICA/IHRoaXMuaW5wdXQuZ2V0Um9vdE5vZGUoKVxyXG4gICAgICA6IGRvY3VtZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBJcyBlbGVtZW50IGluIGZvY3VzXHJcbiAgICBAcmVhZG9ubHlcclxuICAqL1xyXG4gIGdldCBpc0FjdGl2ZSAoKTogYm9vbGVhbiB7XHJcbiAgICAvLyRGbG93Rml4TWVcclxuICAgIHJldHVybiB0aGlzLmlucHV0ID09PSB0aGlzLnJvb3RFbGVtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFJldHVybnMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uIHN0YXJ0XHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGdldCBfdW5zYWZlU2VsZWN0aW9uU3RhcnQgKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnB1dC5zZWxlY3Rpb25TdGFydDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgUmV0dXJucyBIVE1MRWxlbWVudCBzZWxlY3Rpb24gZW5kXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGdldCBfdW5zYWZlU2VsZWN0aW9uRW5kICgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5wdXQuc2VsZWN0aW9uRW5kO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBTZXRzIEhUTUxFbGVtZW50IHNlbGVjdGlvblxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBfdW5zYWZlU2VsZWN0IChzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5pbnB1dC5zZXRTZWxlY3Rpb25SYW5nZShzdGFydCwgZW5kKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgSFRNTEVsZW1lbnQgdmFsdWVcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZ2V0IHZhbHVlICgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5wdXQudmFsdWU7XHJcbiAgfVxyXG4gIHNldCB2YWx1ZSAodmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5pbnB1dC52YWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBCaW5kcyBIVE1MRWxlbWVudCBldmVudHMgdG8gbWFzayBpbnRlcm5hbCBldmVudHNcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgYmluZEV2ZW50cyAoaGFuZGxlcnM6IHtbRWxlbWVudEV2ZW50XTogRnVuY3Rpb259KSB7XHJcbiAgICBPYmplY3Qua2V5cyhoYW5kbGVycylcclxuICAgICAgLmZvckVhY2goZXZlbnQgPT4gdGhpcy5fdG9nZ2xlRXZlbnRIYW5kbGVyKEhUTUxNYXNrRWxlbWVudC5FVkVOVFNfTUFQW2V2ZW50XSwgaGFuZGxlcnNbZXZlbnRdKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFVuYmluZHMgSFRNTEVsZW1lbnQgZXZlbnRzIHRvIG1hc2sgaW50ZXJuYWwgZXZlbnRzXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIHVuYmluZEV2ZW50cyAoKSB7XHJcbiAgICBPYmplY3Qua2V5cyh0aGlzLl9oYW5kbGVycylcclxuICAgICAgLmZvckVhY2goZXZlbnQgPT4gdGhpcy5fdG9nZ2xlRXZlbnRIYW5kbGVyKGV2ZW50KSk7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBfdG9nZ2xlRXZlbnRIYW5kbGVyIChldmVudDogc3RyaW5nLCBoYW5kbGVyPzogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9oYW5kbGVyc1tldmVudF0pIHtcclxuICAgICAgdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLl9oYW5kbGVyc1tldmVudF0pO1xyXG4gICAgICBkZWxldGUgdGhpcy5faGFuZGxlcnNbZXZlbnRdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChoYW5kbGVyKSB7XHJcbiAgICAgIHRoaXMuaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcik7XHJcbiAgICAgIHRoaXMuX2hhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXI7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbkhUTUxNYXNrRWxlbWVudC5FVkVOVFNfTUFQID0ge1xyXG4gIHNlbGVjdGlvbkNoYW5nZTogJ2tleWRvd24nLFxyXG4gIGlucHV0OiAnaW5wdXQnLFxyXG4gIGRyb3A6ICdkcm9wJyxcclxuICBjbGljazogJ2NsaWNrJyxcclxuICBmb2N1czogJ2ZvY3VzJyxcclxuICBjb21taXQ6ICdibHVyJyxcclxufTtcclxuXHJcblxyXG5JTWFzay5IVE1MTWFza0VsZW1lbnQgPSBIVE1MTWFza0VsZW1lbnQ7XHJcbiIsIi8vIEBmbG93XHJcbmltcG9ydCBIVE1MTWFza0VsZW1lbnQgZnJvbSAnLi9odG1sLW1hc2stZWxlbWVudC5qcyc7XHJcbmltcG9ydCBJTWFzayBmcm9tICcuLi9jb3JlL2hvbGRlci5qcyc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgSFRNTENvbnRlbnRlZGl0YWJsZU1hc2tFbGVtZW50IGV4dGVuZHMgSFRNTE1hc2tFbGVtZW50IHtcclxuICAvKipcclxuICAgIFJldHVybnMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uIHN0YXJ0XHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGdldCBfdW5zYWZlU2VsZWN0aW9uU3RhcnQgKCk6IG51bWJlciB7XHJcbiAgICBjb25zdCByb290ID0gdGhpcy5yb290RWxlbWVudDtcclxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IHJvb3QuZ2V0U2VsZWN0aW9uICYmIHJvb3QuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICByZXR1cm4gc2VsZWN0aW9uICYmIHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFJldHVybnMgSFRNTEVsZW1lbnQgc2VsZWN0aW9uIGVuZFxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgX3Vuc2FmZVNlbGVjdGlvbkVuZCAoKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHJvb3QgPSB0aGlzLnJvb3RFbGVtZW50O1xyXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gcm9vdC5nZXRTZWxlY3Rpb24gJiYgcm9vdC5nZXRTZWxlY3Rpb24oKTtcclxuICAgIHJldHVybiBzZWxlY3Rpb24gJiYgKHRoaXMuX3Vuc2FmZVNlbGVjdGlvblN0YXJ0ICsgU3RyaW5nKHNlbGVjdGlvbikubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgU2V0cyBIVE1MRWxlbWVudCBzZWxlY3Rpb25cclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgX3Vuc2FmZVNlbGVjdCAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpIHtcclxuICAgIGlmICghdGhpcy5yb290RWxlbWVudC5jcmVhdGVSYW5nZSkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5yb290RWxlbWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgcmFuZ2Uuc2V0U3RhcnQodGhpcy5pbnB1dC5maXJzdENoaWxkIHx8IHRoaXMuaW5wdXQsIHN0YXJ0KTtcclxuICAgIHJhbmdlLnNldEVuZCh0aGlzLmlucHV0Lmxhc3RDaGlsZCB8fCB0aGlzLmlucHV0LCBlbmQpO1xyXG4gICAgY29uc3Qgcm9vdCA9IHRoaXMucm9vdEVsZW1lbnQ7XHJcbiAgICBjb25zdCBzZWxlY3Rpb24gPSByb290LmdldFNlbGVjdGlvbiAmJiByb290LmdldFNlbGVjdGlvbigpO1xyXG4gICAgaWYgKHNlbGVjdGlvbikge1xyXG4gICAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEhUTUxFbGVtZW50IHZhbHVlXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGdldCB2YWx1ZSAoKTogc3RyaW5nIHtcclxuICAgIC8vICRGbG93Rml4TWVcclxuICAgIHJldHVybiB0aGlzLmlucHV0LnRleHRDb250ZW50O1xyXG4gIH1cclxuICBzZXQgdmFsdWUgKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuaW5wdXQudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5JTWFzay5IVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgPSBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQ7XHJcbiIsIi8vIEBmbG93XHJcbmltcG9ydCB7b2JqZWN0SW5jbHVkZXMsIERJUkVDVElPTiwgdHlwZSBTZWxlY3Rpb259IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xyXG5pbXBvcnQgQWN0aW9uRGV0YWlscyBmcm9tICcuLi9jb3JlL2FjdGlvbi1kZXRhaWxzLmpzJztcclxuaW1wb3J0IE1hc2tlZERhdGUgZnJvbSAnLi4vbWFza2VkL2RhdGUuanMnO1xyXG5pbXBvcnQgY3JlYXRlTWFzaywge21hc2tlZENsYXNzfSBmcm9tICcuLi9tYXNrZWQvZmFjdG9yeS5qcyc7XHJcbmltcG9ydCB0eXBlIE1hc2tlZCBmcm9tICcuLi9tYXNrZWQvYmFzZS5qcyc7XHJcbmltcG9ydCB7dHlwZSBNYXNrfSBmcm9tICcuLi9tYXNrZWQvYmFzZS5qcyc7XHJcbmltcG9ydCBNYXNrRWxlbWVudCBmcm9tICcuL21hc2stZWxlbWVudC5qcyc7XHJcbmltcG9ydCBIVE1MTWFza0VsZW1lbnQgZnJvbSAnLi9odG1sLW1hc2stZWxlbWVudC5qcyc7XHJcbmltcG9ydCBIVE1MQ29udGVudGVkaXRhYmxlTWFza0VsZW1lbnQgZnJvbSAnLi9odG1sLWNvbnRlbnRlZGl0YWJsZS1tYXNrLWVsZW1lbnQuanMnO1xyXG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xyXG5cclxuXHJcbi8qKiBMaXN0ZW5zIHRvIGVsZW1lbnQgZXZlbnRzIGFuZCBjb250cm9scyBjaGFuZ2VzIGJldHdlZW4gZWxlbWVudCBhbmQge0BsaW5rIE1hc2tlZH0gKi9cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgSW5wdXRNYXNrIHtcclxuICAvKipcclxuICAgIFZpZXcgZWxlbWVudFxyXG4gICAgQHJlYWRvbmx5XHJcbiAgKi9cclxuICBlbDogTWFza0VsZW1lbnQ7XHJcblxyXG4gIC8qKlxyXG4gICAgSW50ZXJuYWwge0BsaW5rIE1hc2tlZH0gbW9kZWxcclxuICAgIEByZWFkb25seVxyXG4gICovXHJcbiAgbWFza2VkOiBNYXNrZWQ8Kj47XHJcbiAgYWxpZ25DdXJzb3I6ICgpID0+IHZvaWQ7XHJcbiAgYWxpZ25DdXJzb3JGcmllbmRseTogKCkgPT4gdm9pZDtcclxuXHJcbiAgX2xpc3RlbmVyczoge1tzdHJpbmddOiBBcnJheTxGdW5jdGlvbj59O1xyXG4gIF92YWx1ZTogc3RyaW5nO1xyXG4gIF9jaGFuZ2luZ0N1cnNvclBvczogbnVtYmVyO1xyXG4gIF91bm1hc2tlZFZhbHVlOiBzdHJpbmc7XHJcbiAgX3NhdmVTZWxlY3Rpb246ICg/RXZlbnQpID0+IHZvaWQ7XHJcbiAgX3NlbGVjdGlvbjogU2VsZWN0aW9uO1xyXG4gIF9vbklucHV0OiAoKSA9PiB2b2lkO1xyXG4gIF9vbkNoYW5nZTogKCkgPT4gdm9pZDtcclxuICBfb25Ecm9wOiAoRXZlbnQpID0+IHZvaWQ7XHJcbiAgX29uRm9jdXM6IChFdmVudCkgPT4gdm9pZDtcclxuICBfb25DbGljazogKEV2ZW50KSA9PiB2b2lkO1xyXG4gIF9jdXJzb3JDaGFuZ2luZzogP1RpbWVvdXRJRDtcclxuICBfaW5wdXRFdmVudDogP0lucHV0RXZlbnQ7XHJcblxyXG4gIC8qKlxyXG4gICAgQHBhcmFtIHtNYXNrRWxlbWVudHxIVE1MSW5wdXRFbGVtZW50fEhUTUxUZXh0QXJlYUVsZW1lbnR9IGVsXHJcbiAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gICovXHJcbiAgY29uc3RydWN0b3IgKGVsOiBNYXNrRWxlbWVudCB8IEhUTUxUZXh0QXJlYUVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50LCBvcHRzOiB7W3N0cmluZ106IGFueX0pIHtcclxuICAgIHRoaXMuZWwgPVxyXG4gICAgICAoZWwgaW5zdGFuY2VvZiBNYXNrRWxlbWVudCkgPyBlbCA6XHJcbiAgICAgIChlbC5pc0NvbnRlbnRFZGl0YWJsZSAmJiBlbC50YWdOYW1lICE9PSAnSU5QVVQnICYmIGVsLnRhZ05hbWUgIT09ICdURVhUQVJFQScpID8gbmV3IEhUTUxDb250ZW50ZWRpdGFibGVNYXNrRWxlbWVudChlbCkgOlxyXG4gICAgICBuZXcgSFRNTE1hc2tFbGVtZW50KGVsKTtcclxuICAgIHRoaXMubWFza2VkID0gY3JlYXRlTWFzayhvcHRzKTtcclxuXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxuICAgIHRoaXMuX3ZhbHVlID0gJyc7XHJcbiAgICB0aGlzLl91bm1hc2tlZFZhbHVlID0gJyc7XHJcblxyXG4gICAgdGhpcy5fc2F2ZVNlbGVjdGlvbiA9IHRoaXMuX3NhdmVTZWxlY3Rpb24uYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX29uSW5wdXQgPSB0aGlzLl9vbklucHV0LmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9vbkNoYW5nZSA9IHRoaXMuX29uQ2hhbmdlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9vbkRyb3AgPSB0aGlzLl9vbkRyb3AuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX29uRm9jdXMgPSB0aGlzLl9vbkZvY3VzLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9vbkNsaWNrID0gdGhpcy5fb25DbGljay5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5hbGlnbkN1cnNvciA9IHRoaXMuYWxpZ25DdXJzb3IuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuYWxpZ25DdXJzb3JGcmllbmRseSA9IHRoaXMuYWxpZ25DdXJzb3JGcmllbmRseS5iaW5kKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcclxuXHJcbiAgICAvLyByZWZyZXNoXHJcbiAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XHJcbiAgICB0aGlzLl9vbkNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJlYWQgb3IgdXBkYXRlIG1hc2sgKi9cclxuICBnZXQgbWFzayAoKTogTWFzayB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXNrZWQubWFzaztcclxuICB9XHJcblxyXG4gIG1hc2tFcXVhbHMgKG1hc2s6IE1hc2spIHtcclxuICAgIHJldHVybiBtYXNrID09IG51bGwgfHxcclxuICAgICAgbWFzayA9PT0gdGhpcy5tYXNrZWQubWFzayB8fFxyXG4gICAgICBtYXNrID09PSBEYXRlICYmIHRoaXMubWFza2VkIGluc3RhbmNlb2YgTWFza2VkRGF0ZTtcclxuICB9XHJcblxyXG4gIHNldCBtYXNrIChtYXNrOiBNYXNrKSB7XHJcbiAgICBpZiAodGhpcy5tYXNrRXF1YWxzKG1hc2spKSByZXR1cm47XHJcblxyXG4gICAgaWYgKCEobWFzayBpbnN0YW5jZW9mIElNYXNrLk1hc2tlZCkgJiYgdGhpcy5tYXNrZWQuY29uc3RydWN0b3IgPT09IG1hc2tlZENsYXNzKG1hc2spKSB7XHJcbiAgICAgIHRoaXMubWFza2VkLnVwZGF0ZU9wdGlvbnMoe21hc2t9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG1hc2tlZCA9IGNyZWF0ZU1hc2soe21hc2t9KTtcclxuICAgIG1hc2tlZC51bm1hc2tlZFZhbHVlID0gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcclxuICAgIHRoaXMubWFza2VkID0gbWFza2VkO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJhdyB2YWx1ZSAqL1xyXG4gIGdldCB2YWx1ZSAoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICB9XHJcblxyXG4gIHNldCB2YWx1ZSAoc3RyOiBzdHJpbmcpIHtcclxuICAgIHRoaXMubWFza2VkLnZhbHVlID0gc3RyO1xyXG4gICAgdGhpcy51cGRhdGVDb250cm9sKCk7XHJcbiAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XHJcbiAgfVxyXG5cclxuICAvKiogVW5tYXNrZWQgdmFsdWUgKi9cclxuICBnZXQgdW5tYXNrZWRWYWx1ZSAoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl91bm1hc2tlZFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0IHVubWFza2VkVmFsdWUgKHN0cjogc3RyaW5nKSB7XHJcbiAgICB0aGlzLm1hc2tlZC51bm1hc2tlZFZhbHVlID0gc3RyO1xyXG4gICAgdGhpcy51cGRhdGVDb250cm9sKCk7XHJcbiAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XHJcbiAgfVxyXG5cclxuICAvKiogVHlwZWQgdW5tYXNrZWQgdmFsdWUgKi9cclxuICBnZXQgdHlwZWRWYWx1ZSAoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLm1hc2tlZC50eXBlZFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc2V0IHR5cGVkVmFsdWUgKHZhbDogYW55KSB7XHJcbiAgICB0aGlzLm1hc2tlZC50eXBlZFZhbHVlID0gdmFsO1xyXG4gICAgdGhpcy51cGRhdGVDb250cm9sKCk7XHJcbiAgICB0aGlzLmFsaWduQ3Vyc29yKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFN0YXJ0cyBsaXN0ZW5pbmcgdG8gZWxlbWVudCBldmVudHNcclxuICAgIEBwcm90ZWN0ZWRcclxuICAqL1xyXG4gIF9iaW5kRXZlbnRzICgpIHtcclxuICAgIHRoaXMuZWwuYmluZEV2ZW50cyh7XHJcbiAgICAgIHNlbGVjdGlvbkNoYW5nZTogdGhpcy5fc2F2ZVNlbGVjdGlvbixcclxuICAgICAgaW5wdXQ6IHRoaXMuX29uSW5wdXQsXHJcbiAgICAgIGRyb3A6IHRoaXMuX29uRHJvcCxcclxuICAgICAgY2xpY2s6IHRoaXMuX29uQ2xpY2ssXHJcbiAgICAgIGZvY3VzOiB0aGlzLl9vbkZvY3VzLFxyXG4gICAgICBjb21taXQ6IHRoaXMuX29uQ2hhbmdlLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFN0b3BzIGxpc3RlbmluZyB0byBlbGVtZW50IGV2ZW50c1xyXG4gICAgQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIF91bmJpbmRFdmVudHMgKCkge1xyXG4gICAgaWYgKHRoaXMuZWwpIHRoaXMuZWwudW5iaW5kRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEZpcmVzIGN1c3RvbSBldmVudFxyXG4gICAgQHByb3RlY3RlZFxyXG4gICAqL1xyXG4gIF9maXJlRXZlbnQgKGV2OiBzdHJpbmcsIC4uLmFyZ3M6ICopIHtcclxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldl07XHJcbiAgICBpZiAoIWxpc3RlbmVycykgcmV0dXJuO1xyXG5cclxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGwgPT4gbCguLi5hcmdzKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEN1cnJlbnQgc2VsZWN0aW9uIHN0YXJ0XHJcbiAgICBAcmVhZG9ubHlcclxuICAqL1xyXG4gIGdldCBzZWxlY3Rpb25TdGFydCAoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9jdXJzb3JDaGFuZ2luZyA/XHJcbiAgICAgIHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zIDpcclxuXHJcbiAgICAgIHRoaXMuZWwuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgfVxyXG5cclxuICAvKiogQ3VycmVudCBjdXJzb3IgcG9zaXRpb24gKi9cclxuICBnZXQgY3Vyc29yUG9zICgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2N1cnNvckNoYW5naW5nID9cclxuICAgICAgdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3MgOlxyXG5cclxuICAgICAgdGhpcy5lbC5zZWxlY3Rpb25FbmQ7XHJcbiAgfVxyXG4gIHNldCBjdXJzb3JQb3MgKHBvczogbnVtYmVyKSB7XHJcbiAgICBpZiAoIXRoaXMuZWwgfHwgIXRoaXMuZWwuaXNBY3RpdmUpIHJldHVybjtcclxuXHJcbiAgICB0aGlzLmVsLnNlbGVjdChwb3MsIHBvcyk7XHJcbiAgICB0aGlzLl9zYXZlU2VsZWN0aW9uKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIFN0b3JlcyBjdXJyZW50IHNlbGVjdGlvblxyXG4gICAgQHByb3RlY3RlZFxyXG4gICovXHJcbiAgX3NhdmVTZWxlY3Rpb24gKC8qIGV2ICovKSB7XHJcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gdGhpcy5lbC52YWx1ZSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oJ0VsZW1lbnQgdmFsdWUgd2FzIGNoYW5nZWQgb3V0c2lkZSBvZiBtYXNrLiBTeW5jcm9uaXplIG1hc2sgdXNpbmcgYG1hc2sudXBkYXRlVmFsdWUoKWAgdG8gd29yayBwcm9wZXJseS4nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXHJcbiAgICB9XHJcbiAgICB0aGlzLl9zZWxlY3Rpb24gPSB7XHJcbiAgICAgIHN0YXJ0OiB0aGlzLnNlbGVjdGlvblN0YXJ0LFxyXG4gICAgICBlbmQ6IHRoaXMuY3Vyc29yUG9zXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqIFN5bmNyb25pemVzIG1vZGVsIHZhbHVlIGZyb20gdmlldyAqL1xyXG4gIHVwZGF0ZVZhbHVlICgpIHtcclxuICAgIHRoaXMubWFza2VkLnZhbHVlID0gdGhpcy5lbC52YWx1ZTtcclxuICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5tYXNrZWQudmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKiogU3luY3Jvbml6ZXMgdmlldyBmcm9tIG1vZGVsIHZhbHVlLCBmaXJlcyBjaGFuZ2UgZXZlbnRzICovXHJcbiAgdXBkYXRlQ29udHJvbCAoKSB7XHJcbiAgICBjb25zdCBuZXdVbm1hc2tlZFZhbHVlID0gdGhpcy5tYXNrZWQudW5tYXNrZWRWYWx1ZTtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5tYXNrZWQudmFsdWU7XHJcbiAgICBjb25zdCBpc0NoYW5nZWQgPSAodGhpcy51bm1hc2tlZFZhbHVlICE9PSBuZXdVbm1hc2tlZFZhbHVlIHx8XHJcbiAgICAgIHRoaXMudmFsdWUgIT09IG5ld1ZhbHVlKTtcclxuXHJcbiAgICB0aGlzLl91bm1hc2tlZFZhbHVlID0gbmV3VW5tYXNrZWRWYWx1ZTtcclxuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XHJcblxyXG4gICAgaWYgKHRoaXMuZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB0aGlzLmVsLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICBpZiAoaXNDaGFuZ2VkKSB0aGlzLl9maXJlQ2hhbmdlRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICAvKiogVXBkYXRlcyBvcHRpb25zIHdpdGggZGVlcCBlcXVhbCBjaGVjaywgcmVjcmVhdGVzIEB7bGluayBNYXNrZWR9IG1vZGVsIGlmIG1hc2sgdHlwZSBjaGFuZ2VzICovXHJcbiAgdXBkYXRlT3B0aW9ucyAob3B0czoge1tzdHJpbmddOiBhbnl9KSB7XHJcbiAgICBjb25zdCB7IG1hc2ssIC4uLnJlc3RPcHRzIH0gPSBvcHRzO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZU1hc2sgPSAhdGhpcy5tYXNrRXF1YWxzKG1hc2spO1xyXG4gICAgY29uc3QgdXBkYXRlT3B0cyA9ICFvYmplY3RJbmNsdWRlcyh0aGlzLm1hc2tlZCwgcmVzdE9wdHMpO1xyXG5cclxuICAgIGlmICh1cGRhdGVNYXNrKSB0aGlzLm1hc2sgPSBtYXNrO1xyXG4gICAgaWYgKHVwZGF0ZU9wdHMpIHRoaXMubWFza2VkLnVwZGF0ZU9wdGlvbnMocmVzdE9wdHMpO1xyXG5cclxuICAgIGlmICh1cGRhdGVNYXNrIHx8IHVwZGF0ZU9wdHMpIHRoaXMudXBkYXRlQ29udHJvbCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqIFVwZGF0ZXMgY3Vyc29yICovXHJcbiAgdXBkYXRlQ3Vyc29yIChjdXJzb3JQb3M6IG51bWJlcikge1xyXG4gICAgaWYgKGN1cnNvclBvcyA9PSBudWxsKSByZXR1cm47XHJcbiAgICB0aGlzLmN1cnNvclBvcyA9IGN1cnNvclBvcztcclxuXHJcbiAgICAvLyBhbHNvIHF1ZXVlIGNoYW5nZSBjdXJzb3IgZm9yIG1vYmlsZSBicm93c2Vyc1xyXG4gICAgdGhpcy5fZGVsYXlVcGRhdGVDdXJzb3IoY3Vyc29yUG9zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgRGVsYXlzIGN1cnNvciB1cGRhdGUgdG8gc3VwcG9ydCBtb2JpbGUgYnJvd3NlcnNcclxuICAgIEBwcml2YXRlXHJcbiAgKi9cclxuICBfZGVsYXlVcGRhdGVDdXJzb3IgKGN1cnNvclBvczogbnVtYmVyKSB7XHJcbiAgICB0aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpO1xyXG4gICAgdGhpcy5fY2hhbmdpbmdDdXJzb3JQb3MgPSBjdXJzb3JQb3M7XHJcbiAgICB0aGlzLl9jdXJzb3JDaGFuZ2luZyA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBpZiAoIXRoaXMuZWwpIHJldHVybjsgLy8gaWYgd2FzIGRlc3Ryb3llZFxyXG4gICAgICB0aGlzLmN1cnNvclBvcyA9IHRoaXMuX2NoYW5naW5nQ3Vyc29yUG9zO1xyXG4gICAgICB0aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpO1xyXG4gICAgfSwgMTApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBGaXJlcyBjdXN0b20gZXZlbnRzXHJcbiAgICBAcHJvdGVjdGVkXHJcbiAgKi9cclxuICBfZmlyZUNoYW5nZUV2ZW50cyAoKSB7XHJcbiAgICB0aGlzLl9maXJlRXZlbnQoJ2FjY2VwdCcsIHRoaXMuX2lucHV0RXZlbnQpO1xyXG4gICAgaWYgKHRoaXMubWFza2VkLmlzQ29tcGxldGUpIHRoaXMuX2ZpcmVFdmVudCgnY29tcGxldGUnLCB0aGlzLl9pbnB1dEV2ZW50KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQWJvcnRzIGRlbGF5ZWQgY3Vyc29yIHVwZGF0ZVxyXG4gICAgQHByaXZhdGVcclxuICAqL1xyXG4gIF9hYm9ydFVwZGF0ZUN1cnNvciAoKSB7XHJcbiAgICBpZiAodGhpcy5fY3Vyc29yQ2hhbmdpbmcpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2N1cnNvckNoYW5naW5nKTtcclxuICAgICAgZGVsZXRlIHRoaXMuX2N1cnNvckNoYW5naW5nO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEFsaWducyBjdXJzb3IgdG8gbmVhcmVzdCBhdmFpbGFibGUgcG9zaXRpb24gKi9cclxuICBhbGlnbkN1cnNvciAoKSB7XHJcbiAgICB0aGlzLmN1cnNvclBvcyA9IHRoaXMubWFza2VkLm5lYXJlc3RJbnB1dFBvcyh0aGlzLmN1cnNvclBvcywgRElSRUNUSU9OLkxFRlQpO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFsaWducyBjdXJzb3Igb25seSBpZiBzZWxlY3Rpb24gaXMgZW1wdHkgKi9cclxuICBhbGlnbkN1cnNvckZyaWVuZGx5ICgpIHtcclxuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ICE9PSB0aGlzLmN1cnNvclBvcykgcmV0dXJuOyAgLy8gc2tpcCBpZiByYW5nZSBpcyBzZWxlY3RlZFxyXG4gICAgdGhpcy5hbGlnbkN1cnNvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFkZHMgbGlzdGVuZXIgb24gY3VzdG9tIGV2ZW50ICovXHJcbiAgb24gKGV2OiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKSB7XHJcbiAgICBpZiAoIXRoaXMuX2xpc3RlbmVyc1tldl0pIHRoaXMuX2xpc3RlbmVyc1tldl0gPSBbXTtcclxuICAgIHRoaXMuX2xpc3RlbmVyc1tldl0ucHVzaChoYW5kbGVyKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJlbW92ZXMgY3VzdG9tIGV2ZW50IGxpc3RlbmVyICovXHJcbiAgb2ZmIChldjogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbikge1xyXG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnNbZXZdKSByZXR1cm4gdGhpcztcclxuICAgIGlmICghaGFuZGxlcikge1xyXG4gICAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2V2XTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoSW5kZXggPSB0aGlzLl9saXN0ZW5lcnNbZXZdLmluZGV4T2YoaGFuZGxlcik7XHJcbiAgICBpZiAoaEluZGV4ID49IDApIHRoaXMuX2xpc3RlbmVyc1tldl0uc3BsaWNlKGhJbmRleCwgMSk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKiBIYW5kbGVzIHZpZXcgaW5wdXQgZXZlbnQgKi9cclxuICBfb25JbnB1dCAoZTogSW5wdXRFdmVudCkge1xyXG4gICAgdGhpcy5faW5wdXRFdmVudCA9IGU7XHJcbiAgICB0aGlzLl9hYm9ydFVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgIC8vIGZpeCBzdHJhbmdlIElFIGJlaGF2aW9yXHJcbiAgICBpZiAoIXRoaXMuX3NlbGVjdGlvbikgcmV0dXJuIHRoaXMudXBkYXRlVmFsdWUoKTtcclxuXHJcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IEFjdGlvbkRldGFpbHMoXHJcbiAgICAgIC8vIG5ldyBzdGF0ZVxyXG4gICAgICB0aGlzLmVsLnZhbHVlLCB0aGlzLmN1cnNvclBvcyxcclxuICAgICAgLy8gb2xkIHN0YXRlXHJcbiAgICAgIHRoaXMudmFsdWUsIHRoaXMuX3NlbGVjdGlvbik7XHJcblxyXG4gICAgY29uc3Qgb2xkUmF3VmFsdWUgPSB0aGlzLm1hc2tlZC5yYXdJbnB1dFZhbHVlO1xyXG5cclxuICAgIGNvbnN0IG9mZnNldCA9IHRoaXMubWFza2VkLnNwbGljZShcclxuICAgICAgZGV0YWlscy5zdGFydENoYW5nZVBvcyxcclxuICAgICAgZGV0YWlscy5yZW1vdmVkLmxlbmd0aCxcclxuICAgICAgZGV0YWlscy5pbnNlcnRlZCxcclxuICAgICAgZGV0YWlscy5yZW1vdmVEaXJlY3Rpb24pLm9mZnNldDtcclxuXHJcbiAgICAvLyBmb3JjZSBhbGlnbiBpbiByZW1vdmUgZGlyZWN0aW9uIG9ubHkgaWYgbm8gaW5wdXQgY2hhcnMgd2VyZSByZW1vdmVkXHJcbiAgICAvLyBvdGhlcndpc2Ugd2Ugc3RpbGwgbmVlZCB0byBhbGlnbiB3aXRoIE5PTkUgKHRvIGdldCBvdXQgZnJvbSBmaXhlZCBzeW1ib2xzIGZvciBpbnN0YW5jZSlcclxuICAgIGNvbnN0IHJlbW92ZURpcmVjdGlvbiA9IG9sZFJhd1ZhbHVlID09PSB0aGlzLm1hc2tlZC5yYXdJbnB1dFZhbHVlID9cclxuICAgICAgZGV0YWlscy5yZW1vdmVEaXJlY3Rpb24gOlxyXG4gICAgICBESVJFQ1RJT04uTk9ORTtcclxuXHJcbiAgICBjb25zdCBjdXJzb3JQb3MgPSB0aGlzLm1hc2tlZC5uZWFyZXN0SW5wdXRQb3MoXHJcbiAgICAgIGRldGFpbHMuc3RhcnRDaGFuZ2VQb3MgKyBvZmZzZXQsXHJcbiAgICAgIHJlbW92ZURpcmVjdGlvbixcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVDb250cm9sKCk7XHJcbiAgICB0aGlzLnVwZGF0ZUN1cnNvcihjdXJzb3JQb3MpO1xyXG4gICAgZGVsZXRlIHRoaXMuX2lucHV0RXZlbnQ7XHJcbiAgfVxyXG5cclxuICAvKiogSGFuZGxlcyB2aWV3IGNoYW5nZSBldmVudCBhbmQgY29tbWl0cyBtb2RlbCB2YWx1ZSAqL1xyXG4gIF9vbkNoYW5nZSAoKSB7XHJcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gdGhpcy5lbC52YWx1ZSkge1xyXG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlKCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLm1hc2tlZC5kb0NvbW1pdCgpO1xyXG4gICAgdGhpcy51cGRhdGVDb250cm9sKCk7XHJcbiAgICB0aGlzLl9zYXZlU2VsZWN0aW9uKCk7XHJcbiAgfVxyXG5cclxuICAvKiogSGFuZGxlcyB2aWV3IGRyb3AgZXZlbnQsIHByZXZlbnRzIGJ5IGRlZmF1bHQgKi9cclxuICBfb25Ecm9wIChldjogRXZlbnQpIHtcclxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICB9XHJcblxyXG4gIC8qKiBSZXN0b3JlIGxhc3Qgc2VsZWN0aW9uIG9uIGZvY3VzICovXHJcbiAgX29uRm9jdXMgKGV2OiBFdmVudCkge1xyXG4gICAgdGhpcy5hbGlnbkN1cnNvckZyaWVuZGx5KCk7XHJcbiAgfVxyXG5cclxuICAvKiogUmVzdG9yZSBsYXN0IHNlbGVjdGlvbiBvbiBmb2N1cyAqL1xyXG4gIF9vbkNsaWNrIChldjogRXZlbnQpIHtcclxuICAgIHRoaXMuYWxpZ25DdXJzb3JGcmllbmRseSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqIFVuYmluZCB2aWV3IGV2ZW50cyBhbmQgcmVtb3ZlcyBlbGVtZW50IHJlZmVyZW5jZSAqL1xyXG4gIGRlc3Ryb3kgKCkge1xyXG4gICAgdGhpcy5fdW5iaW5kRXZlbnRzKCk7XHJcbiAgICAvLyAkRmxvd0ZpeE1lIHdoeSBub3QgZG8gc28/XHJcbiAgICB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoID0gMDtcclxuICAgIC8vICRGbG93Rml4TWVcclxuICAgIGRlbGV0ZSB0aGlzLmVsO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbklNYXNrLklucHV0TWFzayA9IElucHV0TWFzaztcclxuIiwiLy8gQGZsb3dcclxuaW1wb3J0IE1hc2tlZFBhdHRlcm4gZnJvbSAnLi9wYXR0ZXJuLmpzJztcclxuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcclxuXHJcblxyXG4vKiogUGF0dGVybiB3aGljaCB2YWxpZGF0ZXMgZW51bSB2YWx1ZXMgKi9cclxuZXhwb3J0IGRlZmF1bHRcclxuY2xhc3MgTWFza2VkRW51bSBleHRlbmRzIE1hc2tlZFBhdHRlcm4ge1xyXG4gIGVudW06IEFycmF5PHN0cmluZz47XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gICovXHJcbiAgX3VwZGF0ZSAob3B0czogYW55KSB7ICAvLyBUT0RPIHR5cGVcclxuICAgIGlmIChvcHRzLmVudW0pIG9wdHMubWFzayA9ICcqJy5yZXBlYXQob3B0cy5lbnVtWzBdLmxlbmd0aCk7XHJcblxyXG4gICAgc3VwZXIuX3VwZGF0ZShvcHRzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBkb1ZhbGlkYXRlICguLi5hcmdzOiAqKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnVtLnNvbWUoZSA9PiBlLmluZGV4T2YodGhpcy51bm1hc2tlZFZhbHVlKSA+PSAwKSAmJlxyXG4gICAgICBzdXBlci5kb1ZhbGlkYXRlKC4uLmFyZ3MpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbklNYXNrLk1hc2tlZEVudW0gPSBNYXNrZWRFbnVtO1xyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQge2VzY2FwZVJlZ0V4cCwgaW5kZXhJbkRpcmVjdGlvbiwgcG9zSW5EaXJlY3Rpb24sIHR5cGUgRGlyZWN0aW9uLCBESVJFQ1RJT059IGZyb20gJy4uL2NvcmUvdXRpbHMuanMnO1xyXG5pbXBvcnQgQ2hhbmdlRGV0YWlscyBmcm9tICcuLi9jb3JlL2NoYW5nZS1kZXRhaWxzLmpzJztcclxuXHJcbmltcG9ydCBNYXNrZWQsIHt0eXBlIE1hc2tlZE9wdGlvbnMsIHR5cGUgRXh0cmFjdEZsYWdzLCB0eXBlIEFwcGVuZEZsYWdzfSBmcm9tICcuL2Jhc2UuanMnO1xyXG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xyXG5cclxuXHJcbnR5cGUgTWFza2VkTnVtYmVyT3B0aW9ucyA9IHtcclxuICAuLi5NYXNrZWRPcHRpb25zPENsYXNzPE51bWJlcj4+LFxyXG4gIHJhZGl4OiAkUHJvcGVydHlUeXBlPE1hc2tlZE51bWJlciwgJ3JhZGl4Jz4sXHJcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAkUHJvcGVydHlUeXBlPE1hc2tlZE51bWJlciwgJ3Rob3VzYW5kc1NlcGFyYXRvcic+LFxyXG4gIG1hcFRvUmFkaXg6ICRQcm9wZXJ0eVR5cGU8TWFza2VkTnVtYmVyLCAnbWFwVG9SYWRpeCc+LFxyXG4gIHNjYWxlOiAkUHJvcGVydHlUeXBlPE1hc2tlZE51bWJlciwgJ3NjYWxlJz4sXHJcbiAgc2lnbmVkOiAkUHJvcGVydHlUeXBlPE1hc2tlZE51bWJlciwgJ3NpZ25lZCc+LFxyXG4gIG5vcm1hbGl6ZVplcm9zOiAkUHJvcGVydHlUeXBlPE1hc2tlZE51bWJlciwgJ25vcm1hbGl6ZVplcm9zJz4sXHJcbiAgcGFkRnJhY3Rpb25hbFplcm9zOiAkUHJvcGVydHlUeXBlPE1hc2tlZE51bWJlciwgJ3BhZEZyYWN0aW9uYWxaZXJvcyc+LFxyXG59O1xyXG5cclxuLyoqXHJcbiAgTnVtYmVyIG1hc2tcclxuICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gIEBwYXJhbSB7c3RyaW5nfSBvcHRzLnJhZGl4IC0gU2luZ2xlIGNoYXJcclxuICBAcGFyYW0ge3N0cmluZ30gb3B0cy50aG91c2FuZHNTZXBhcmF0b3IgLSBTaW5nbGUgY2hhclxyXG4gIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gb3B0cy5tYXBUb1JhZGl4IC0gQXJyYXkgb2Ygc2luZ2xlIGNoYXJzXHJcbiAgQHBhcmFtIHtudW1iZXJ9IG9wdHMubWluXHJcbiAgQHBhcmFtIHtudW1iZXJ9IG9wdHMubWF4XHJcbiAgQHBhcmFtIHtudW1iZXJ9IG9wdHMuc2NhbGUgLSBEaWdpdHMgYWZ0ZXIgcG9pbnRcclxuICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMuc2lnbmVkIC0gQWxsb3cgbmVnYXRpdmVcclxuICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMubm9ybWFsaXplWmVyb3MgLSBGbGFnIHRvIHJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgZW5kIG9mIGVkaXRpbmdcclxuICBAcGFyYW0ge2Jvb2xlYW59IG9wdHMucGFkRnJhY3Rpb25hbFplcm9zIC0gRmxhZyB0byBwYWQgdHJhaWxpbmcgemVyb3MgYWZ0ZXIgcG9pbnQgaW4gdGhlIGVuZCBvZiBlZGl0aW5nXHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0XHJcbmNsYXNzIE1hc2tlZE51bWJlciBleHRlbmRzIE1hc2tlZDxDbGFzczxOdW1iZXI+PiB7XHJcbiAgc3RhdGljIERFRkFVTFRTOiAkU2hhcGU8TWFza2VkTnVtYmVyT3B0aW9ucz47XHJcblxyXG4gIC8qKiBTaW5nbGUgY2hhciAqL1xyXG4gIHJhZGl4OiBzdHJpbmc7XHJcbiAgLyoqIFNpbmdsZSBjaGFyICovXHJcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiBzdHJpbmc7XHJcbiAgLyoqIEFycmF5IG9mIHNpbmdsZSBjaGFycyAqL1xyXG4gIG1hcFRvUmFkaXg6IEFycmF5PHN0cmluZz47XHJcbiAgLyoqICovXHJcbiAgbWluOiBudW1iZXI7XHJcbiAgLyoqICovXHJcbiAgbWF4OiBudW1iZXI7XHJcbiAgLyoqIERpZ2l0cyBhZnRlciBwb2ludCAqL1xyXG4gIHNjYWxlOiBudW1iZXI7XHJcbiAgLyoqICovXHJcbiAgc2lnbmVkOiBib29sZWFuO1xyXG4gIC8qKiBGbGFnIHRvIHJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyB6ZXJvcyBpbiB0aGUgZW5kIG9mIGVkaXRpbmcgKi9cclxuICBub3JtYWxpemVaZXJvczogYm9vbGVhbjtcclxuICAvKiogRmxhZyB0byBwYWQgdHJhaWxpbmcgemVyb3MgYWZ0ZXIgcG9pbnQgaW4gdGhlIGVuZCBvZiBlZGl0aW5nICovXHJcbiAgcGFkRnJhY3Rpb25hbFplcm9zOiBib29sZWFuO1xyXG5cclxuICBfbnVtYmVyUmVnRXhwOiBSZWdFeHA7XHJcbiAgX251bWJlclJlZ0V4cElucHV0OiBSZWdFeHA7XHJcbiAgX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cDogUmVnRXhwO1xyXG4gIF9tYXBUb1JhZGl4UmVnRXhwOiBSZWdFeHA7XHJcbiAgX3NlcGFyYXRvcnNQcm9jZXNzZWQ6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yIChvcHRzOiAkU2hhcGU8TWFza2VkTnVtYmVyT3B0aW9ucz4pIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgLi4uTWFza2VkTnVtYmVyLkRFRkFVTFRTLFxyXG4gICAgICAuLi5vcHRzXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBfdXBkYXRlIChvcHRzOiBNYXNrZWROdW1iZXJPcHRpb25zKSB7XHJcbiAgICBzdXBlci5fdXBkYXRlKG9wdHMpO1xyXG4gICAgdGhpcy5fdXBkYXRlUmVnRXhwcygpO1xyXG4gIH1cclxuXHJcbiAgLyoqICovXHJcbiAgX3VwZGF0ZVJlZ0V4cHMgKCkge1xyXG4gICAgLy8gdXNlIGRpZmZlcmVudCByZWdleHAgdG8gcHJvY2VzcyB1c2VyIGlucHV0IChtb3JlIHN0cmljdCwgaW5wdXQgc3VmZml4KSBhbmQgdGFpbCBzaGlmdGluZ1xyXG4gICAgbGV0IHN0YXJ0ID0gJ14nICsgKHRoaXMuYWxsb3dOZWdhdGl2ZSA/ICdbK3xcXFxcLV0/JyA6ICcnKTtcclxuICAgIGxldCBtaWRJbnB1dCA9ICcoMHwoWzEtOV0rXFxcXGQqKSk/JztcclxuICAgIGxldCBtaWQgPSAnXFxcXGQqJztcclxuXHJcbiAgICBsZXQgZW5kID0gKHRoaXMuc2NhbGUgP1xyXG4gICAgICAnKCcgKyBlc2NhcGVSZWdFeHAodGhpcy5yYWRpeCkgKyAnXFxcXGR7MCwnICsgdGhpcy5zY2FsZSArICd9KT8nIDpcclxuICAgICAgJycpICsgJyQnO1xyXG5cclxuICAgIHRoaXMuX251bWJlclJlZ0V4cElucHV0ID0gbmV3IFJlZ0V4cChzdGFydCArIG1pZElucHV0ICsgZW5kKTtcclxuICAgIHRoaXMuX251bWJlclJlZ0V4cCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBtaWQgKyBlbmQpO1xyXG4gICAgdGhpcy5fbWFwVG9SYWRpeFJlZ0V4cCA9IG5ldyBSZWdFeHAoJ1snICtcclxuICAgICAgdGhpcy5tYXBUb1JhZGl4Lm1hcChlc2NhcGVSZWdFeHApLmpvaW4oJycpICtcclxuICAgICddJywgJ2cnKTtcclxuICAgIHRoaXMuX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yKSwgJ2cnKTtcclxuICB9XHJcblxyXG4gIC8qKiAqL1xyXG4gIF9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzICh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHRoaXMuX3Rob3VzYW5kc1NlcGFyYXRvclJlZ0V4cCwgJycpO1xyXG4gIH1cclxuXHJcbiAgLyoqICovXHJcbiAgX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnMgKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjkwMTEwMi9ob3ctdG8tcHJpbnQtYS1udW1iZXItd2l0aC1jb21tYXMtYXMtdGhvdXNhbmRzLXNlcGFyYXRvcnMtaW4tamF2YXNjcmlwdFxyXG4gICAgY29uc3QgcGFydHMgPSB2YWx1ZS5zcGxpdCh0aGlzLnJhZGl4KTtcclxuICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IpO1xyXG4gICAgcmV0dXJuIHBhcnRzLmpvaW4odGhpcy5yYWRpeCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZG9QcmVwYXJlIChzdHI6IHN0cmluZywgLi4uYXJnczogKikge1xyXG4gICAgcmV0dXJuIHN1cGVyLmRvUHJlcGFyZSh0aGlzLl9yZW1vdmVUaG91c2FuZHNTZXBhcmF0b3JzKHN0ci5yZXBsYWNlKHRoaXMuX21hcFRvUmFkaXhSZWdFeHAsIHRoaXMucmFkaXgpKSwgLi4uYXJncyk7XHJcbiAgfVxyXG5cclxuICAvKiogKi9cclxuICBfc2VwYXJhdG9yc0NvdW50ICh0bzogbnVtYmVyLCBleHRlbmRPblNlcGFyYXRvcnM6IGJvb2xlYW49ZmFsc2UpOiBudW1iZXIge1xyXG4gICAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCB0bzsgKytwb3MpIHtcclxuICAgICAgaWYgKHRoaXMuX3ZhbHVlLmluZGV4T2YodGhpcy50aG91c2FuZHNTZXBhcmF0b3IsIHBvcykgPT09IHBvcykge1xyXG4gICAgICAgICsrY291bnQ7XHJcbiAgICAgICAgaWYgKGV4dGVuZE9uU2VwYXJhdG9ycykgdG8gKz0gdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvdW50O1xyXG4gIH1cclxuXHJcbiAgLyoqICovXHJcbiAgX3NlcGFyYXRvcnNDb3VudEZyb21TbGljZSAoc2xpY2U6IHN0cmluZz10aGlzLl92YWx1ZSk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fc2VwYXJhdG9yc0NvdW50KHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMoc2xpY2UpLmxlbmd0aCwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZXh0cmFjdElucHV0IChmcm9tUG9zPzogbnVtYmVyPTAsIHRvUG9zPzogbnVtYmVyPXRoaXMudmFsdWUubGVuZ3RoLCBmbGFncz86IEV4dHJhY3RGbGFncyk6IHN0cmluZyB7XHJcbiAgICBbZnJvbVBvcywgdG9Qb3NdID0gdGhpcy5fYWRqdXN0UmFuZ2VXaXRoU2VwYXJhdG9ycyhmcm9tUG9zLCB0b1Bvcyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnMoc3VwZXIuZXh0cmFjdElucHV0KGZyb21Qb3MsIHRvUG9zLCBmbGFncykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIF9hcHBlbmRDaGFyUmF3IChjaDogc3RyaW5nLCBmbGFnczogQXBwZW5kRmxhZ3M9e30pOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIGlmICghdGhpcy50aG91c2FuZHNTZXBhcmF0b3IpIHJldHVybiBzdXBlci5fYXBwZW5kQ2hhclJhdyhjaCwgZmxhZ3MpO1xyXG5cclxuICAgIGNvbnN0IHByZXZCZWZvcmVUYWlsVmFsdWUgPSBmbGFncy50YWlsICYmIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUgP1xyXG4gICAgICBmbGFncy5fYmVmb3JlVGFpbFN0YXRlLl92YWx1ZSA6XHJcbiAgICAgIHRoaXMuX3ZhbHVlO1xyXG4gICAgY29uc3QgcHJldkJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UocHJldkJlZm9yZVRhaWxWYWx1ZSk7XHJcbiAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX3JlbW92ZVRob3VzYW5kc1NlcGFyYXRvcnModGhpcy52YWx1ZSk7XHJcblxyXG4gICAgY29uc3QgYXBwZW5kRGV0YWlscyA9IHN1cGVyLl9hcHBlbmRDaGFyUmF3KGNoLCBmbGFncyk7XHJcblxyXG4gICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9pbnNlcnRUaG91c2FuZHNTZXBhcmF0b3JzKHRoaXMuX3ZhbHVlKTtcclxuICAgIGNvbnN0IGJlZm9yZVRhaWxWYWx1ZSA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSA/XHJcbiAgICAgIGZsYWdzLl9iZWZvcmVUYWlsU3RhdGUuX3ZhbHVlIDpcclxuICAgICAgdGhpcy5fdmFsdWU7XHJcbiAgICBjb25zdCBiZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50RnJvbVNsaWNlKGJlZm9yZVRhaWxWYWx1ZSk7XHJcblxyXG4gICAgYXBwZW5kRGV0YWlscy50YWlsU2hpZnQgKz0gKGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgLSBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCkgKiB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGg7XHJcbiAgICBhcHBlbmREZXRhaWxzLnNraXAgPSAhYXBwZW5kRGV0YWlscy5yYXdJbnNlcnRlZCAmJiBjaCA9PT0gdGhpcy50aG91c2FuZHNTZXBhcmF0b3I7XHJcbiAgICByZXR1cm4gYXBwZW5kRGV0YWlscztcclxuICB9XHJcblxyXG4gIC8qKiAqL1xyXG4gIF9maW5kU2VwYXJhdG9yQXJvdW5kIChwb3M6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy50aG91c2FuZHNTZXBhcmF0b3IpIHtcclxuICAgICAgY29uc3Qgc2VhcmNoRnJvbSA9IHBvcyAtIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aCArIDE7XHJcbiAgICAgIGNvbnN0IHNlcGFyYXRvclBvcyA9IHRoaXMudmFsdWUuaW5kZXhPZih0aGlzLnRob3VzYW5kc1NlcGFyYXRvciwgc2VhcmNoRnJvbSk7XHJcbiAgICAgIGlmIChzZXBhcmF0b3JQb3MgPD0gcG9zKSByZXR1cm4gc2VwYXJhdG9yUG9zO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAtMTtcclxuICB9XHJcblxyXG4gIF9hZGp1c3RSYW5nZVdpdGhTZXBhcmF0b3JzIChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcclxuICAgIGNvbnN0IHNlcGFyYXRvckFyb3VuZEZyb21Qb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKGZyb20pO1xyXG4gICAgaWYgKHNlcGFyYXRvckFyb3VuZEZyb21Qb3MgPj0gMCkgZnJvbSA9IHNlcGFyYXRvckFyb3VuZEZyb21Qb3M7XHJcblxyXG4gICAgY29uc3Qgc2VwYXJhdG9yQXJvdW5kVG9Qb3MgPSB0aGlzLl9maW5kU2VwYXJhdG9yQXJvdW5kKHRvKTtcclxuICAgIGlmIChzZXBhcmF0b3JBcm91bmRUb1BvcyA+PSAwKSB0byA9IHNlcGFyYXRvckFyb3VuZFRvUG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xyXG4gICAgcmV0dXJuIFtmcm9tLCB0b107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgcmVtb3ZlIChmcm9tUG9zPzogbnVtYmVyPTAsIHRvUG9zPzogbnVtYmVyPXRoaXMudmFsdWUubGVuZ3RoKTogQ2hhbmdlRGV0YWlscyB7XHJcbiAgICBbZnJvbVBvcywgdG9Qb3NdID0gdGhpcy5fYWRqdXN0UmFuZ2VXaXRoU2VwYXJhdG9ycyhmcm9tUG9zLCB0b1Bvcyk7XHJcblxyXG4gICAgY29uc3QgdmFsdWVCZWZvcmVQb3MgPSB0aGlzLnZhbHVlLnNsaWNlKDAsIGZyb21Qb3MpO1xyXG4gICAgY29uc3QgdmFsdWVBZnRlclBvcyA9IHRoaXMudmFsdWUuc2xpY2UodG9Qb3MpO1xyXG5cclxuICAgIGNvbnN0IHByZXZCZWZvcmVUYWlsU2VwYXJhdG9yc0NvdW50ID0gdGhpcy5fc2VwYXJhdG9yc0NvdW50KHZhbHVlQmVmb3JlUG9zLmxlbmd0aCk7XHJcbiAgICB0aGlzLl92YWx1ZSA9IHRoaXMuX2luc2VydFRob3VzYW5kc1NlcGFyYXRvcnModGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh2YWx1ZUJlZm9yZVBvcyArIHZhbHVlQWZ0ZXJQb3MpKTtcclxuICAgIGNvbnN0IGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgPSB0aGlzLl9zZXBhcmF0b3JzQ291bnRGcm9tU2xpY2UodmFsdWVCZWZvcmVQb3MpO1xyXG5cclxuICAgIHJldHVybiBuZXcgQ2hhbmdlRGV0YWlscyh7XHJcbiAgICAgIHRhaWxTaGlmdDogKGJlZm9yZVRhaWxTZXBhcmF0b3JzQ291bnQgLSBwcmV2QmVmb3JlVGFpbFNlcGFyYXRvcnNDb3VudCkgKiB0aGlzLnRob3VzYW5kc1NlcGFyYXRvci5sZW5ndGgsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBuZWFyZXN0SW5wdXRQb3MgKGN1cnNvclBvczogbnVtYmVyLCBkaXJlY3Rpb24/OiBEaXJlY3Rpb24pOiBudW1iZXIge1xyXG4gICAgaWYgKCF0aGlzLnRob3VzYW5kc1NlcGFyYXRvcikgcmV0dXJuIGN1cnNvclBvcztcclxuXHJcbiAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xyXG4gICAgICBjYXNlIERJUkVDVElPTi5OT05FOlxyXG4gICAgICBjYXNlIERJUkVDVElPTi5MRUZUOlxyXG4gICAgICBjYXNlIERJUkVDVElPTi5GT1JDRV9MRUZUOiB7XHJcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9yQXRMZWZ0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MgLSAxKTtcclxuICAgICAgICBpZiAoc2VwYXJhdG9yQXRMZWZ0UG9zID49IDApIHtcclxuICAgICAgICAgIGNvbnN0IHNlcGFyYXRvckF0TGVmdEVuZFBvcyA9IHNlcGFyYXRvckF0TGVmdFBvcyArIHRoaXMudGhvdXNhbmRzU2VwYXJhdG9yLmxlbmd0aDtcclxuICAgICAgICAgIGlmIChjdXJzb3JQb3MgPCBzZXBhcmF0b3JBdExlZnRFbmRQb3MgfHxcclxuICAgICAgICAgICAgdGhpcy52YWx1ZS5sZW5ndGggPD0gc2VwYXJhdG9yQXRMZWZ0RW5kUG9zIHx8XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OLkZPUkNFX0xFRlRcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2VwYXJhdG9yQXRMZWZ0UG9zO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlIERJUkVDVElPTi5SSUdIVDpcclxuICAgICAgY2FzZSBESVJFQ1RJT04uRk9SQ0VfUklHSFQ6IHtcclxuICAgICAgICBjb25zdCBzZXBhcmF0b3JBdFJpZ2h0UG9zID0gdGhpcy5fZmluZFNlcGFyYXRvckFyb3VuZChjdXJzb3JQb3MpO1xyXG4gICAgICAgIGlmIChzZXBhcmF0b3JBdFJpZ2h0UG9zID49IDApIHtcclxuICAgICAgICAgIHJldHVybiBzZXBhcmF0b3JBdFJpZ2h0UG9zICsgdGhpcy50aG91c2FuZHNTZXBhcmF0b3IubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdXJzb3JQb3M7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZG9WYWxpZGF0ZSAoZmxhZ3M6IEFwcGVuZEZsYWdzKSB7XHJcbiAgICBjb25zdCByZWdleHAgPSBmbGFncy5pbnB1dCA/IHRoaXMuX251bWJlclJlZ0V4cElucHV0IDogdGhpcy5fbnVtYmVyUmVnRXhwO1xyXG5cclxuICAgIC8vIHZhbGlkYXRlIGFzIHN0cmluZ1xyXG4gICAgbGV0IHZhbGlkID0gcmVnZXhwLnRlc3QodGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh0aGlzLnZhbHVlKSk7XHJcblxyXG4gICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgIC8vIHZhbGlkYXRlIGFzIG51bWJlclxyXG4gICAgICBjb25zdCBudW1iZXIgPSB0aGlzLm51bWJlcjtcclxuICAgICAgdmFsaWQgPSB2YWxpZCAmJiAhaXNOYU4obnVtYmVyKSAmJlxyXG4gICAgICAgIC8vIGNoZWNrIG1pbiBib3VuZCBmb3IgbmVnYXRpdmUgdmFsdWVzXHJcbiAgICAgICAgKHRoaXMubWluID09IG51bGwgfHwgdGhpcy5taW4gPj0gMCB8fCB0aGlzLm1pbiA8PSB0aGlzLm51bWJlcikgJiZcclxuICAgICAgICAvLyBjaGVjayBtYXggYm91bmQgZm9yIHBvc2l0aXZlIHZhbHVlc1xyXG4gICAgICAgICh0aGlzLm1heCA9PSBudWxsIHx8IHRoaXMubWF4IDw9IDAgfHwgdGhpcy5udW1iZXIgPD0gdGhpcy5tYXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWxpZCAmJiBzdXBlci5kb1ZhbGlkYXRlKGZsYWdzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBkb0NvbW1pdCAoKSB7XHJcbiAgICBpZiAodGhpcy52YWx1ZSkge1xyXG4gICAgICBjb25zdCBudW1iZXIgPSB0aGlzLm51bWJlcjtcclxuICAgICAgbGV0IHZhbGlkbnVtID0gbnVtYmVyO1xyXG5cclxuICAgICAgLy8gY2hlY2sgYm91bmRzXHJcbiAgICAgIGlmICh0aGlzLm1pbiAhPSBudWxsKSB2YWxpZG51bSA9IE1hdGgubWF4KHZhbGlkbnVtLCB0aGlzLm1pbik7XHJcbiAgICAgIGlmICh0aGlzLm1heCAhPSBudWxsKSB2YWxpZG51bSA9IE1hdGgubWluKHZhbGlkbnVtLCB0aGlzLm1heCk7XHJcblxyXG4gICAgICBpZiAodmFsaWRudW0gIT09IG51bWJlcikgdGhpcy51bm1hc2tlZFZhbHVlID0gU3RyaW5nKHZhbGlkbnVtKTtcclxuXHJcbiAgICAgIGxldCBmb3JtYXR0ZWQgPSB0aGlzLnZhbHVlO1xyXG5cclxuICAgICAgaWYgKHRoaXMubm9ybWFsaXplWmVyb3MpIGZvcm1hdHRlZCA9IHRoaXMuX25vcm1hbGl6ZVplcm9zKGZvcm1hdHRlZCk7XHJcbiAgICAgIGlmICh0aGlzLnBhZEZyYWN0aW9uYWxaZXJvcykgZm9ybWF0dGVkID0gdGhpcy5fcGFkRnJhY3Rpb25hbFplcm9zKGZvcm1hdHRlZCk7XHJcblxyXG4gICAgICB0aGlzLl92YWx1ZSA9IGZvcm1hdHRlZDtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlci5kb0NvbW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqICovXHJcbiAgX25vcm1hbGl6ZVplcm9zICh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHBhcnRzID0gdGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyh2YWx1ZSkuc3BsaXQodGhpcy5yYWRpeCk7XHJcblxyXG4gICAgLy8gcmVtb3ZlIGxlYWRpbmcgemVyb3NcclxuICAgIHBhcnRzWzBdID0gcGFydHNbMF0ucmVwbGFjZSgvXihcXEQqKSgwKikoXFxkKikvLCAobWF0Y2gsIHNpZ24sIHplcm9zLCBudW0pID0+IHNpZ24gKyBudW0pO1xyXG4gICAgLy8gYWRkIGxlYWRpbmcgemVyb1xyXG4gICAgaWYgKHZhbHVlLmxlbmd0aCAmJiAhL1xcZCQvLnRlc3QocGFydHNbMF0pKSBwYXJ0c1swXSA9IHBhcnRzWzBdICsgJzAnO1xyXG5cclxuICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgIHBhcnRzWzFdID0gcGFydHNbMV0ucmVwbGFjZSgvMCokLywgJycpOyAgLy8gcmVtb3ZlIHRyYWlsaW5nIHplcm9zXHJcbiAgICAgIGlmICghcGFydHNbMV0ubGVuZ3RoKSBwYXJ0cy5sZW5ndGggPSAxOyAgLy8gcmVtb3ZlIGZyYWN0aW9uYWxcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5faW5zZXJ0VGhvdXNhbmRzU2VwYXJhdG9ycyhwYXJ0cy5qb2luKHRoaXMucmFkaXgpKTtcclxuICB9XHJcblxyXG4gIC8qKiAqL1xyXG4gIF9wYWRGcmFjdGlvbmFsWmVyb3MgKHZhbHVlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIHZhbHVlO1xyXG5cclxuICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc3BsaXQodGhpcy5yYWRpeCk7XHJcbiAgICBpZiAocGFydHMubGVuZ3RoIDwgMikgcGFydHMucHVzaCgnJyk7XHJcbiAgICBwYXJ0c1sxXSA9IHBhcnRzWzFdLnBhZEVuZCh0aGlzLnNjYWxlLCAnMCcpO1xyXG4gICAgcmV0dXJuIHBhcnRzLmpvaW4odGhpcy5yYWRpeCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZ2V0IHVubWFza2VkVmFsdWUgKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fcmVtb3ZlVGhvdXNhbmRzU2VwYXJhdG9ycyhcclxuICAgICAgdGhpcy5fbm9ybWFsaXplWmVyb3MoXHJcbiAgICAgICAgdGhpcy52YWx1ZSkpXHJcbiAgICAgIC5yZXBsYWNlKHRoaXMucmFkaXgsICcuJyk7XHJcbiAgfVxyXG5cclxuICBzZXQgdW5tYXNrZWRWYWx1ZSAodW5tYXNrZWRWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICBzdXBlci51bm1hc2tlZFZhbHVlID0gdW5tYXNrZWRWYWx1ZS5yZXBsYWNlKCcuJywgdGhpcy5yYWRpeCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZ2V0IHR5cGVkVmFsdWUgKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTnVtYmVyKHRoaXMudW5tYXNrZWRWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzZXQgdHlwZWRWYWx1ZSAobjogbnVtYmVyKSB7XHJcbiAgICBzdXBlci51bm1hc2tlZFZhbHVlID0gU3RyaW5nKG4pO1xyXG4gIH1cclxuXHJcbiAgLyoqIFBhcnNlZCBOdW1iZXIgKi9cclxuICBnZXQgbnVtYmVyICgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZWRWYWx1ZTtcclxuICB9XHJcblxyXG4gIHNldCBudW1iZXIgKG51bWJlcjogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnR5cGVkVmFsdWUgPSBudW1iZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIElzIG5lZ2F0aXZlIGFsbG93ZWRcclxuICAgIEByZWFkb25seVxyXG4gICovXHJcbiAgZ2V0IGFsbG93TmVnYXRpdmUgKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc2lnbmVkIHx8XHJcbiAgICAgICh0aGlzLm1pbiAhPSBudWxsICYmIHRoaXMubWluIDwgMCkgfHxcclxuICAgICAgKHRoaXMubWF4ICE9IG51bGwgJiYgdGhpcy5tYXggPCAwKTtcclxuICB9XHJcbn1cclxuTWFza2VkTnVtYmVyLkRFRkFVTFRTID0ge1xyXG4gIHJhZGl4OiAnLCcsXHJcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnJyxcclxuICBtYXBUb1JhZGl4OiBbJy4nXSxcclxuICBzY2FsZTogMixcclxuICBzaWduZWQ6IGZhbHNlLFxyXG4gIG5vcm1hbGl6ZVplcm9zOiB0cnVlLFxyXG4gIHBhZEZyYWN0aW9uYWxaZXJvczogZmFsc2UsXHJcbn07XHJcblxyXG5cclxuSU1hc2suTWFza2VkTnVtYmVyID0gTWFza2VkTnVtYmVyO1xyXG4iLCIvLyBAZmxvd1xyXG5pbXBvcnQgTWFza2VkLCB7dHlwZSBNYXNrZWRPcHRpb25zfSBmcm9tICcuL2Jhc2UuanMnO1xyXG5pbXBvcnQgSU1hc2sgZnJvbSAnLi4vY29yZS9ob2xkZXIuanMnO1xyXG5cclxuXHJcbi8qKiBNYXNraW5nIGJ5IGN1c3RvbSBGdW5jdGlvbiAqL1xyXG5leHBvcnQgZGVmYXVsdFxyXG5jbGFzcyBNYXNrZWRGdW5jdGlvbiBleHRlbmRzIE1hc2tlZDxGdW5jdGlvbj4ge1xyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgICBAcGFyYW0ge09iamVjdH0gb3B0c1xyXG4gICovXHJcbiAgX3VwZGF0ZSAob3B0czogTWFza2VkT3B0aW9uczxGdW5jdGlvbj4pIHtcclxuICAgIGlmIChvcHRzLm1hc2spIG9wdHMudmFsaWRhdGUgPSBvcHRzLm1hc2s7XHJcbiAgICBzdXBlci5fdXBkYXRlKG9wdHMpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbklNYXNrLk1hc2tlZEZ1bmN0aW9uID0gTWFza2VkRnVuY3Rpb247XHJcbiIsIi8vIEBmbG93XHJcbmltcG9ydCBDaGFuZ2VEZXRhaWxzIGZyb20gJy4uL2NvcmUvY2hhbmdlLWRldGFpbHMuanMnO1xyXG5pbXBvcnQgY3JlYXRlTWFzayBmcm9tICcuL2ZhY3RvcnkuanMnO1xyXG5pbXBvcnQgTWFza2VkLCB7dHlwZSBBcHBlbmRGbGFncywgdHlwZSBNYXNrZWRTdGF0ZX0gZnJvbSAnLi9iYXNlLmpzJztcclxuaW1wb3J0IHsgdHlwZSBUYWlsRGV0YWlscyB9IGZyb20gJy4uL2NvcmUvdGFpbC1kZXRhaWxzLmpzJztcclxuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcclxuXHJcblxyXG50eXBlIE1hc2tlZER5bmFtaWNTdGF0ZSA9IHt8XHJcbiAgLi4uTWFza2VkU3RhdGUsXHJcbiAgX3Jhd0lucHV0VmFsdWU6IHN0cmluZyxcclxuICBjb21waWxlZE1hc2tzOiBBcnJheTwqPixcclxuICBjdXJyZW50TWFza1JlZjogP01hc2tlZDwqPixcclxuICBjdXJyZW50TWFzazogKixcclxufH07XHJcblxyXG50eXBlIER5bmFtaWNNYXNrVHlwZSA9IEFycmF5PHtbc3RyaW5nXTogYW55fT47XHJcbi8qKiBEeW5hbWljIG1hc2sgZm9yIGNob29zaW5nIGFwcm9wcmlhdGUgbWFzayBpbiBydW4tdGltZSAqL1xyXG5leHBvcnQgZGVmYXVsdFxyXG5jbGFzcyBNYXNrZWREeW5hbWljIGV4dGVuZHMgTWFza2VkPER5bmFtaWNNYXNrVHlwZT4ge1xyXG4gIC8qKiBDdXJyZW50bHkgY2hvc2VuIG1hc2sgKi9cclxuICBjdXJyZW50TWFzazogP01hc2tlZDwqPjtcclxuICAvKiogQ29tcGxpbGVkIHtAbGluayBNYXNrZWR9IG9wdGlvbnMgKi9cclxuICBjb21waWxlZE1hc2tzOiBBcnJheTxNYXNrZWQ8Kj4+O1xyXG4gIC8qKiBDaG9vc2VzIHtAbGluayBNYXNrZWR9IGRlcGVuZGluZyBvbiBpbnB1dCB2YWx1ZSAqL1xyXG4gIGRpc3BhdGNoOiAoc3RyaW5nLCBNYXNrZWQ8Kj4sIEFwcGVuZEZsYWdzKSA9PiBNYXNrZWQ8Kj47XHJcblxyXG4gIC8qKlxyXG4gICAgQHBhcmFtIHtPYmplY3R9IG9wdHNcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yIChvcHRzOiBhbnkpIHtcclxuICAgIHN1cGVyKHtcclxuICAgICAgLi4uTWFza2VkRHluYW1pYy5ERUZBVUxUUyxcclxuICAgICAgLi4ub3B0c1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5jdXJyZW50TWFzayA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgX3VwZGF0ZSAob3B0czogYW55KSB7XHJcbiAgICBzdXBlci5fdXBkYXRlKG9wdHMpO1xyXG4gICAgaWYgKCdtYXNrJyBpbiBvcHRzKSB7XHJcbiAgICAgIC8vIG1hc2sgY291bGQgYmUgdG90YWxseSBkeW5hbWljIHdpdGggb25seSBgZGlzcGF0Y2hgIG9wdGlvblxyXG4gICAgICB0aGlzLmNvbXBpbGVkTWFza3MgPSBBcnJheS5pc0FycmF5KG9wdHMubWFzaykgP1xyXG4gICAgICAgIG9wdHMubWFzay5tYXAobSA9PiBjcmVhdGVNYXNrKG0pKSA6XHJcbiAgICAgICAgW107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgX2FwcGVuZENoYXJSYXcgKC4uLmFyZ3M6ICopOiBDaGFuZ2VEZXRhaWxzIHtcclxuICAgIGNvbnN0IGRldGFpbHMgPSB0aGlzLl9hcHBseURpc3BhdGNoKC4uLmFyZ3MpO1xyXG5cclxuICAgIGlmICh0aGlzLmN1cnJlbnRNYXNrKSB7XHJcbiAgICAgIGRldGFpbHMuYWdncmVnYXRlKHRoaXMuY3VycmVudE1hc2suX2FwcGVuZENoYXIoLi4uYXJncykpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkZXRhaWxzO1xyXG4gIH1cclxuXHJcbiAgX2FwcGx5RGlzcGF0Y2ggKGFwcGVuZGVkOiBzdHJpbmc9JycsIGZsYWdzOiBBcHBlbmRGbGFncz17fSkge1xyXG4gICAgY29uc3QgcHJldlZhbHVlQmVmb3JlVGFpbCA9IGZsYWdzLnRhaWwgJiYgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZSAhPSBudWxsID9cclxuICAgICAgZmxhZ3MuX2JlZm9yZVRhaWxTdGF0ZS5fdmFsdWUgOlxyXG4gICAgICB0aGlzLnZhbHVlO1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZSA9IHRoaXMucmF3SW5wdXRWYWx1ZTtcclxuICAgIGNvbnN0IGluc2VydFZhbHVlID0gZmxhZ3MudGFpbCAmJiBmbGFncy5fYmVmb3JlVGFpbFN0YXRlICE9IG51bGwgP1xyXG4gICAgICAvLyAkRmxvd0ZpeE1lIC0gdGlyZWQgdG8gZmlnaHQgd2l0aCB0eXBlIHN5c3RlbVxyXG4gICAgICBmbGFncy5fYmVmb3JlVGFpbFN0YXRlLl9yYXdJbnB1dFZhbHVlIDpcclxuICAgICAgaW5wdXRWYWx1ZTtcclxuICAgIGNvbnN0IHRhaWxWYWx1ZSA9IGlucHV0VmFsdWUuc2xpY2UoaW5zZXJ0VmFsdWUubGVuZ3RoKTtcclxuICAgIGNvbnN0IHByZXZNYXNrID0gdGhpcy5jdXJyZW50TWFzaztcclxuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgQ2hhbmdlRGV0YWlscygpO1xyXG5cclxuICAgIGNvbnN0IHByZXZNYXNrU3RhdGUgPSBwcmV2TWFzayAmJiBwcmV2TWFzay5zdGF0ZTtcclxuXHJcbiAgICAvLyBjbG9uZSBmbGFncyB0byBwcmV2ZW50IG92ZXJ3cml0aW5nIGBfYmVmb3JlVGFpbFN0YXRlYFxyXG4gICAgdGhpcy5jdXJyZW50TWFzayA9IHRoaXMuZG9EaXNwYXRjaChhcHBlbmRlZCwgeyAuLi5mbGFncyB9KTtcclxuXHJcbiAgICAvLyByZXN0b3JlIHN0YXRlIGFmdGVyIGRpc3BhdGNoXHJcbiAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xyXG4gICAgICBpZiAodGhpcy5jdXJyZW50TWFzayAhPT0gcHJldk1hc2spIHtcclxuICAgICAgICAvLyBpZiBtYXNrIGNoYW5nZWQgcmVhcHBseSBpbnB1dFxyXG4gICAgICAgIHRoaXMuY3VycmVudE1hc2sucmVzZXQoKTtcclxuXHJcbiAgICAgICAgLy8gJEZsb3dGaXhNZSAtIGl0J3Mgb2ssIHdlIGRvbid0IGNoYW5nZSBjdXJyZW50IG1hc2sgYWJvdmVcclxuICAgICAgICBjb25zdCBkID0gdGhpcy5jdXJyZW50TWFzay5hcHBlbmQoaW5zZXJ0VmFsdWUsIHtyYXc6IHRydWV9KTtcclxuICAgICAgICBkZXRhaWxzLnRhaWxTaGlmdCA9IGQuaW5zZXJ0ZWQubGVuZ3RoIC0gcHJldlZhbHVlQmVmb3JlVGFpbC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGlmICh0YWlsVmFsdWUpIHtcclxuICAgICAgICAgIC8vICRGbG93Rml4TWUgLSBpdCdzIG9rLCB3ZSBkb24ndCBjaGFuZ2UgY3VycmVudCBtYXNrIGFib3ZlXHJcbiAgICAgICAgICBkZXRhaWxzLnRhaWxTaGlmdCArPSB0aGlzLmN1cnJlbnRNYXNrLmFwcGVuZCh0YWlsVmFsdWUsIHtyYXc6IHRydWUsIHRhaWw6IHRydWV9KS50YWlsU2hpZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIERpc3BhdGNoIGNhbiBkbyBzb21ldGhpbmcgYmFkIHdpdGggc3RhdGUsIHNvXHJcbiAgICAgICAgLy8gcmVzdG9yZSBwcmV2IG1hc2sgc3RhdGVcclxuICAgICAgICB0aGlzLmN1cnJlbnRNYXNrLnN0YXRlID0gcHJldk1hc2tTdGF0ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkZXRhaWxzO1xyXG4gIH1cclxuXHJcbiAgX2FwcGVuZFBsYWNlaG9sZGVyICguLi5hcmdzOiAqKSB7XHJcbiAgICBjb25zdCBkZXRhaWxzID0gdGhpcy5fYXBwbHlEaXNwYXRjaCguLi5hcmdzKTtcclxuXHJcbiAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xyXG4gICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLmN1cnJlbnRNYXNrLl9hcHBlbmRQbGFjZWhvbGRlcigpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGV0YWlscztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBkb0Rpc3BhdGNoKGFwcGVuZGVkOiBzdHJpbmcsIGZsYWdzOiBBcHBlbmRGbGFncz17fSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goYXBwZW5kZWQsIHRoaXMsIGZsYWdzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBkb1ZhbGlkYXRlICguLi5hcmdzOiAqKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gc3VwZXIuZG9WYWxpZGF0ZSguLi5hcmdzKSAmJiAoXHJcbiAgICAgICF0aGlzLmN1cnJlbnRNYXNrIHx8IHRoaXMuY3VycmVudE1hc2suZG9WYWxpZGF0ZSguLi5hcmdzKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgcmVzZXQgKCkge1xyXG4gICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHRoaXMuY3VycmVudE1hc2sucmVzZXQoKTtcclxuICAgIHRoaXMuY29tcGlsZWRNYXNrcy5mb3JFYWNoKG0gPT4gbS5yZXNldCgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgdmFsdWUgKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/IHRoaXMuY3VycmVudE1hc2sudmFsdWUgOiAnJztcclxuICB9XHJcblxyXG4gIHNldCB2YWx1ZSAodmFsdWU6IHN0cmluZykge1xyXG4gICAgc3VwZXIudmFsdWUgPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgdW5tYXNrZWRWYWx1ZSAoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay51bm1hc2tlZFZhbHVlIDogJyc7XHJcbiAgfVxyXG5cclxuICBzZXQgdW5tYXNrZWRWYWx1ZSAodW5tYXNrZWRWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICBzdXBlci51bm1hc2tlZFZhbHVlID0gdW5tYXNrZWRWYWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgdHlwZWRWYWx1ZSAoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRNYXNrID8gdGhpcy5jdXJyZW50TWFzay50eXBlZFZhbHVlIDogJyc7XHJcbiAgfVxyXG5cclxuICAvLyBwcm9iYWJseSB0eXBlZFZhbHVlIHNob3VsZCBub3QgYmUgdXNlZCB3aXRoIGR5bmFtaWNcclxuICBzZXQgdHlwZWRWYWx1ZSAodmFsdWU6IGFueSkge1xyXG4gICAgbGV0IHVubWFza2VkVmFsdWUgPSBTdHJpbmcodmFsdWUpO1xyXG5cclxuICAgIC8vIGRvdWJsZSBjaGVjayBpdFxyXG4gICAgaWYgKHRoaXMuY3VycmVudE1hc2spIHtcclxuICAgICAgdGhpcy5jdXJyZW50TWFzay50eXBlZFZhbHVlID0gdmFsdWU7XHJcbiAgICAgIHVubWFza2VkVmFsdWUgPSB0aGlzLmN1cnJlbnRNYXNrLnVubWFza2VkVmFsdWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnVubWFza2VkVmFsdWUgPSB1bm1hc2tlZFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGdldCBpc0NvbXBsZXRlICgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMuY3VycmVudE1hc2sgJiYgdGhpcy5jdXJyZW50TWFzay5pc0NvbXBsZXRlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIHJlbW92ZSAoLi4uYXJnczogKik6IENoYW5nZURldGFpbHMge1xyXG4gICAgY29uc3QgZGV0YWlsczogQ2hhbmdlRGV0YWlscyA9IG5ldyBDaGFuZ2VEZXRhaWxzKCk7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50TWFzaykge1xyXG4gICAgICBkZXRhaWxzLmFnZ3JlZ2F0ZSh0aGlzLmN1cnJlbnRNYXNrLnJlbW92ZSguLi5hcmdzKSlcclxuICAgICAgICAvLyB1cGRhdGUgd2l0aCBkaXNwYXRjaFxyXG4gICAgICAgIC5hZ2dyZWdhdGUodGhpcy5fYXBwbHlEaXNwYXRjaCgpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGV0YWlscztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBnZXQgc3RhdGUgKCk6IE1hc2tlZER5bmFtaWNTdGF0ZSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5zdXBlci5zdGF0ZSxcclxuICAgICAgX3Jhd0lucHV0VmFsdWU6IHRoaXMucmF3SW5wdXRWYWx1ZSxcclxuICAgICAgY29tcGlsZWRNYXNrczogdGhpcy5jb21waWxlZE1hc2tzLm1hcChtID0+IG0uc3RhdGUpLFxyXG4gICAgICBjdXJyZW50TWFza1JlZjogdGhpcy5jdXJyZW50TWFzayxcclxuICAgICAgY3VycmVudE1hc2s6IHRoaXMuY3VycmVudE1hc2sgJiYgdGhpcy5jdXJyZW50TWFzay5zdGF0ZSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXQgc3RhdGUgKHN0YXRlOiBNYXNrZWREeW5hbWljU3RhdGUpIHtcclxuICAgIGNvbnN0IHtjb21waWxlZE1hc2tzLCBjdXJyZW50TWFza1JlZiwgY3VycmVudE1hc2ssIC4uLm1hc2tlZFN0YXRlfSA9IHN0YXRlO1xyXG4gICAgdGhpcy5jb21waWxlZE1hc2tzLmZvckVhY2goKG0sIG1pKSA9PiBtLnN0YXRlID0gY29tcGlsZWRNYXNrc1ttaV0pO1xyXG4gICAgaWYgKGN1cnJlbnRNYXNrUmVmICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5jdXJyZW50TWFzayA9IGN1cnJlbnRNYXNrUmVmO1xyXG4gICAgICB0aGlzLmN1cnJlbnRNYXNrLnN0YXRlID0gY3VycmVudE1hc2s7XHJcbiAgICB9XHJcbiAgICBzdXBlci5zdGF0ZSA9IG1hc2tlZFN0YXRlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICBAb3ZlcnJpZGVcclxuICAqL1xyXG4gIGV4dHJhY3RJbnB1dCAoLi4uYXJnczogKik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/XHJcbiAgICAgIHRoaXMuY3VycmVudE1hc2suZXh0cmFjdElucHV0KC4uLmFyZ3MpIDpcclxuICAgICAgJyc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgIEBvdmVycmlkZVxyXG4gICovXHJcbiAgZXh0cmFjdFRhaWwgKC4uLmFyZ3M6ICopOiBUYWlsRGV0YWlscyB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/XHJcbiAgICAgIHRoaXMuY3VycmVudE1hc2suZXh0cmFjdFRhaWwoLi4uYXJncykgOlxyXG4gICAgICBzdXBlci5leHRyYWN0VGFpbCguLi5hcmdzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBkb0NvbW1pdCAoKSB7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50TWFzaykgdGhpcy5jdXJyZW50TWFzay5kb0NvbW1pdCgpO1xyXG4gICAgc3VwZXIuZG9Db21taXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgQG92ZXJyaWRlXHJcbiAgKi9cclxuICBuZWFyZXN0SW5wdXRQb3MoLi4uYXJnczogKik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/XHJcbiAgICAgIHRoaXMuY3VycmVudE1hc2submVhcmVzdElucHV0UG9zKC4uLmFyZ3MpIDpcclxuICAgICAgc3VwZXIubmVhcmVzdElucHV0UG9zKC4uLmFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG92ZXJ3cml0ZSAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50TWFzayA/XHJcbiAgICAgIHRoaXMuY3VycmVudE1hc2sub3ZlcndyaXRlIDpcclxuICAgICAgc3VwZXIub3ZlcndyaXRlO1xyXG4gIH1cclxuXHJcbiAgc2V0IG92ZXJ3cml0ZSAob3ZlcndyaXRlOiAqKSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ1wib3ZlcndyaXRlXCIgb3B0aW9uIGlzIG5vdCBhdmFpbGFibGUgaW4gZHluYW1pYyBtYXNrLCB1c2UgdGhpcyBvcHRpb24gaW4gc2libGluZ3MnKTtcclxuICB9XHJcbn1cclxuXHJcbk1hc2tlZER5bmFtaWMuREVGQVVMVFMgPSB7XHJcbiAgZGlzcGF0Y2g6IChhcHBlbmRlZCwgbWFza2VkLCBmbGFncykgPT4ge1xyXG4gICAgaWYgKCFtYXNrZWQuY29tcGlsZWRNYXNrcy5sZW5ndGgpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpbnB1dFZhbHVlID0gbWFza2VkLnJhd0lucHV0VmFsdWU7XHJcblxyXG4gICAgLy8gc2ltdWxhdGUgaW5wdXRcclxuICAgIGNvbnN0IGlucHV0cyA9IG1hc2tlZC5jb21waWxlZE1hc2tzLm1hcCgobSwgaW5kZXgpID0+IHtcclxuICAgICAgbS5yZXNldCgpO1xyXG4gICAgICBtLmFwcGVuZChpbnB1dFZhbHVlLCB7IHJhdzogdHJ1ZSB9KTtcclxuICAgICAgbS5hcHBlbmQoYXBwZW5kZWQsIGZsYWdzKTtcclxuICAgICAgY29uc3Qgd2VpZ2h0ID0gbS5yYXdJbnB1dFZhbHVlLmxlbmd0aDtcclxuXHJcbiAgICAgIHJldHVybiB7d2VpZ2h0LCBpbmRleH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBwb3AgbWFza3Mgd2l0aCBsb25nZXIgdmFsdWVzIGZpcnN0XHJcbiAgICBpbnB1dHMuc29ydCgoaTEsIGkyKSA9PiBpMi53ZWlnaHQgLSBpMS53ZWlnaHQpO1xyXG5cclxuICAgIHJldHVybiBtYXNrZWQuY29tcGlsZWRNYXNrc1tpbnB1dHNbMF0uaW5kZXhdO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG5JTWFzay5NYXNrZWREeW5hbWljID0gTWFza2VkRHluYW1pYztcclxuIiwiaW1wb3J0IGNyZWF0ZU1hc2sgZnJvbSAnLi9mYWN0b3J5JztcclxuaW1wb3J0IElNYXNrIGZyb20gJy4uL2NvcmUvaG9sZGVyLmpzJztcclxuXHJcblxyXG4vKiogTWFzayBwaXBlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gdHlwZXMgKi9cclxuZXhwb3J0XHJcbmNvbnN0IFBJUEVfVFlQRSA9IHtcclxuICBNQVNLRUQ6ICd2YWx1ZScsXHJcbiAgVU5NQVNLRUQ6ICd1bm1hc2tlZFZhbHVlJyxcclxuICBUWVBFRDogJ3R5cGVkVmFsdWUnLFxyXG59O1xyXG5cclxuLyoqIENyZWF0ZXMgbmV3IHBpcGUgZnVuY3Rpb24gZGVwZW5kaW5nIG9uIG1hc2sgdHlwZSwgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBvcHRpb25zICovXHJcbmV4cG9ydFxyXG5mdW5jdGlvbiBjcmVhdGVQaXBlIChtYXNrLCBmcm9tPVBJUEVfVFlQRS5NQVNLRUQsIHRvPVBJUEVfVFlQRS5NQVNLRUQpIHtcclxuICBjb25zdCBtYXNrZWQgPSBjcmVhdGVNYXNrKG1hc2spO1xyXG4gIHJldHVybiAodmFsdWUpID0+IG1hc2tlZC5ydW5Jc29sYXRlZChtID0+IHtcclxuICAgIG1bZnJvbV0gPSB2YWx1ZTtcclxuICAgIHJldHVybiBtW3RvXTtcclxuICB9KTtcclxufVxyXG5cclxuLyoqIFBpcGVzIHZhbHVlIHRocm91Z2ggbWFzayBkZXBlbmRpbmcgb24gbWFzayB0eXBlLCBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIG9wdGlvbnMgKi9cclxuZXhwb3J0XHJcbmZ1bmN0aW9uIHBpcGUgKHZhbHVlLCAuLi5waXBlQXJncykge1xyXG4gIHJldHVybiBjcmVhdGVQaXBlKC4uLnBpcGVBcmdzKSh2YWx1ZSk7XHJcbn1cclxuXHJcblxyXG5JTWFzay5QSVBFX1RZUEUgPSBQSVBFX1RZUEU7XHJcbklNYXNrLmNyZWF0ZVBpcGUgPSBjcmVhdGVQaXBlO1xyXG5JTWFzay5waXBlID0gcGlwZTtcclxuIiwiLyohIHNtb290aC1zY3JvbGwgdjE2LjEuMyB8IChjKSAyMDIwIENocmlzIEZlcmRpbmFuZGkgfCBNSVQgTGljZW5zZSB8IGh0dHA6Ly9naXRodWIuY29tL2NmZXJkaW5hbmRpL3Ntb290aC1zY3JvbGwgKi9cbndpbmRvdy5FbGVtZW50JiYhRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCYmKEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3Q9ZnVuY3Rpb24oZSl7dmFyIHQsbj0odGhpcy5kb2N1bWVudHx8dGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKGUpLG89dGhpcztkb3tmb3IodD1uLmxlbmd0aDswPD0tLXQmJm4uaXRlbSh0KSE9PW87KTt9d2hpbGUodDwwJiYobz1vLnBhcmVudEVsZW1lbnQpKTtyZXR1cm4gb30pLChmdW5jdGlvbigpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudClyZXR1cm47ZnVuY3Rpb24gZShlLHQpe3Q9dHx8e2J1YmJsZXM6ITEsY2FuY2VsYWJsZTohMSxkZXRhaWw6dm9pZCAwfTt2YXIgbj1kb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO3JldHVybiBuLmluaXRDdXN0b21FdmVudChlLHQuYnViYmxlcyx0LmNhbmNlbGFibGUsdC5kZXRhaWwpLG59ZS5wcm90b3R5cGU9d2luZG93LkV2ZW50LnByb3RvdHlwZSx3aW5kb3cuQ3VzdG9tRXZlbnQ9ZX0pKCksKGZ1bmN0aW9uKCl7Zm9yKHZhciByPTAsZT1bXCJtc1wiLFwibW96XCIsXCJ3ZWJraXRcIixcIm9cIl0sdD0wO3Q8ZS5sZW5ndGgmJiF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lOysrdCl3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lPXdpbmRvd1tlW3RdK1wiUmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJdLHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT13aW5kb3dbZVt0XStcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdfHx3aW5kb3dbZVt0XStcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHwod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT1mdW5jdGlvbihlLHQpe3ZhciBuPShuZXcgRGF0ZSkuZ2V0VGltZSgpLG89TWF0aC5tYXgoMCwxNi0obi1yKSksYT13aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlKG4rbyl9KSxvKTtyZXR1cm4gcj1uK28sYX0pLHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZXx8KHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZT1mdW5jdGlvbihlKXtjbGVhclRpbWVvdXQoZSl9KX0pKCksKGZ1bmN0aW9uKGUsdCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXSwoZnVuY3Rpb24oKXtyZXR1cm4gdChlKX0pKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10KGUpOmUuU21vb3RoU2Nyb2xsPXQoZSl9KShcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLChmdW5jdGlvbihNKXtcInVzZSBzdHJpY3RcIjt2YXIgcT17aWdub3JlOlwiW2RhdGEtc2Nyb2xsLWlnbm9yZV1cIixoZWFkZXI6bnVsbCx0b3BPbkVtcHR5SGFzaDohMCxzcGVlZDo1MDAsc3BlZWRBc0R1cmF0aW9uOiExLGR1cmF0aW9uTWF4Om51bGwsZHVyYXRpb25NaW46bnVsbCxjbGlwOiEwLG9mZnNldDowLGVhc2luZzpcImVhc2VJbk91dEN1YmljXCIsY3VzdG9tRWFzaW5nOm51bGwsdXBkYXRlVVJMOiEwLHBvcHN0YXRlOiEwLGVtaXRFdmVudHM6ITB9LEk9ZnVuY3Rpb24oKXt2YXIgbj17fTtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhcmd1bWVudHMsKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCBpbiBlKXtpZighZS5oYXNPd25Qcm9wZXJ0eSh0KSlyZXR1cm47blt0XT1lW3RdfX0pKSxufSxyPWZ1bmN0aW9uKGUpe1wiI1wiPT09ZS5jaGFyQXQoMCkmJihlPWUuc3Vic3RyKDEpKTtmb3IodmFyIHQsbj1TdHJpbmcoZSksbz1uLmxlbmd0aCxhPS0xLHI9XCJcIixpPW4uY2hhckNvZGVBdCgwKTsrK2E8bzspe2lmKDA9PT0odD1uLmNoYXJDb2RlQXQoYSkpKXRocm93IG5ldyBJbnZhbGlkQ2hhcmFjdGVyRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlcjogdGhlIGlucHV0IGNvbnRhaW5zIFUrMDAwMC5cIik7MTw9dCYmdDw9MzF8fDEyNz09dHx8MD09PWEmJjQ4PD10JiZ0PD01N3x8MT09PWEmJjQ4PD10JiZ0PD01NyYmNDU9PT1pP3IrPVwiXFxcXFwiK3QudG9TdHJpbmcoMTYpK1wiIFwiOnIrPTEyODw9dHx8NDU9PT10fHw5NT09PXR8fDQ4PD10JiZ0PD01N3x8NjU8PXQmJnQ8PTkwfHw5Nzw9dCYmdDw9MTIyP24uY2hhckF0KGEpOlwiXFxcXFwiK24uY2hhckF0KGEpfXJldHVyblwiI1wiK3J9LEY9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCxkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0LGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0LGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpfSxMPWZ1bmN0aW9uKGUpe3JldHVybiBlPyh0PWUscGFyc2VJbnQoTS5nZXRDb21wdXRlZFN0eWxlKHQpLmhlaWdodCwxMCkrZS5vZmZzZXRUb3ApOjA7dmFyIHR9LHg9ZnVuY3Rpb24oZSx0LG4pezA9PT1lJiZkb2N1bWVudC5ib2R5LmZvY3VzKCksbnx8KGUuZm9jdXMoKSxkb2N1bWVudC5hY3RpdmVFbGVtZW50IT09ZSYmKGUuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIixcIi0xXCIpLGUuZm9jdXMoKSxlLnN0eWxlLm91dGxpbmU9XCJub25lXCIpLE0uc2Nyb2xsVG8oMCx0KSl9LEg9ZnVuY3Rpb24oZSx0LG4sbyl7aWYodC5lbWl0RXZlbnRzJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBNLkN1c3RvbUV2ZW50KXt2YXIgYT1uZXcgQ3VzdG9tRXZlbnQoZSx7YnViYmxlczohMCxkZXRhaWw6e2FuY2hvcjpuLHRvZ2dsZTpvfX0pO2RvY3VtZW50LmRpc3BhdGNoRXZlbnQoYSl9fTtyZXR1cm4gZnVuY3Rpb24obyxlKXt2YXIgYixhLEEsTyxDPXt9O0MuY2FuY2VsU2Nyb2xsPWZ1bmN0aW9uKGUpe2NhbmNlbEFuaW1hdGlvbkZyYW1lKE8pLE89bnVsbCxlfHxIKFwic2Nyb2xsQ2FuY2VsXCIsYil9LEMuYW5pbWF0ZVNjcm9sbD1mdW5jdGlvbihhLHIsZSl7Qy5jYW5jZWxTY3JvbGwoKTt2YXIgaT1JKGJ8fHEsZXx8e30pLGM9XCJbb2JqZWN0IE51bWJlcl1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSx0PWN8fCFhLnRhZ05hbWU/bnVsbDphO2lmKGN8fHQpe3ZhciBzPU0ucGFnZVlPZmZzZXQ7aS5oZWFkZXImJiFBJiYoQT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGkuaGVhZGVyKSk7dmFyIG4sbyx1LGwsbSxkLGYsaCxwPUwoQSksZz1jP2E6KGZ1bmN0aW9uKGUsdCxuLG8pe3ZhciBhPTA7aWYoZS5vZmZzZXRQYXJlbnQpZm9yKDthKz1lLm9mZnNldFRvcCxlPWUub2Zmc2V0UGFyZW50Oyk7cmV0dXJuIGE9TWF0aC5tYXgoYS10LW4sMCksbyYmKGE9TWF0aC5taW4oYSxGKCktTS5pbm5lckhlaWdodCkpLGF9KSh0LHAscGFyc2VJbnQoXCJmdW5jdGlvblwiPT10eXBlb2YgaS5vZmZzZXQ/aS5vZmZzZXQoYSxyKTppLm9mZnNldCwxMCksaS5jbGlwKSx5PWctcyx2PUYoKSx3PTAsUz0obj15LHU9KG89aSkuc3BlZWRBc0R1cmF0aW9uP28uc3BlZWQ6TWF0aC5hYnMobi8xZTMqby5zcGVlZCksby5kdXJhdGlvbk1heCYmdT5vLmR1cmF0aW9uTWF4P28uZHVyYXRpb25NYXg6by5kdXJhdGlvbk1pbiYmdTxvLmR1cmF0aW9uTWluP28uZHVyYXRpb25NaW46cGFyc2VJbnQodSwxMCkpLEU9ZnVuY3Rpb24oZSl7dmFyIHQsbixvO2x8fChsPWUpLHcrPWUtbCxkPXMreSoobj1tPTE8KG09MD09PVM/MDp3L1MpPzE6bSxcImVhc2VJblF1YWRcIj09PSh0PWkpLmVhc2luZyYmKG89bipuKSxcImVhc2VPdXRRdWFkXCI9PT10LmVhc2luZyYmKG89biooMi1uKSksXCJlYXNlSW5PdXRRdWFkXCI9PT10LmVhc2luZyYmKG89bjwuNT8yKm4qbjooNC0yKm4pKm4tMSksXCJlYXNlSW5DdWJpY1wiPT09dC5lYXNpbmcmJihvPW4qbipuKSxcImVhc2VPdXRDdWJpY1wiPT09dC5lYXNpbmcmJihvPS0tbipuKm4rMSksXCJlYXNlSW5PdXRDdWJpY1wiPT09dC5lYXNpbmcmJihvPW48LjU/NCpuKm4qbjoobi0xKSooMipuLTIpKigyKm4tMikrMSksXCJlYXNlSW5RdWFydFwiPT09dC5lYXNpbmcmJihvPW4qbipuKm4pLFwiZWFzZU91dFF1YXJ0XCI9PT10LmVhc2luZyYmKG89MS0gLS1uKm4qbipuKSxcImVhc2VJbk91dFF1YXJ0XCI9PT10LmVhc2luZyYmKG89bjwuNT84Km4qbipuKm46MS04Ki0tbipuKm4qbiksXCJlYXNlSW5RdWludFwiPT09dC5lYXNpbmcmJihvPW4qbipuKm4qbiksXCJlYXNlT3V0UXVpbnRcIj09PXQuZWFzaW5nJiYobz0xKy0tbipuKm4qbipuKSxcImVhc2VJbk91dFF1aW50XCI9PT10LmVhc2luZyYmKG89bjwuNT8xNipuKm4qbipuKm46MSsxNiotLW4qbipuKm4qbiksdC5jdXN0b21FYXNpbmcmJihvPXQuY3VzdG9tRWFzaW5nKG4pKSxvfHxuKSxNLnNjcm9sbFRvKDAsTWF0aC5mbG9vcihkKSksKGZ1bmN0aW9uKGUsdCl7dmFyIG49TS5wYWdlWU9mZnNldDtpZihlPT10fHxuPT10fHwoczx0JiZNLmlubmVySGVpZ2h0K24pPj12KXJldHVybiBDLmNhbmNlbFNjcm9sbCghMCkseChhLHQsYyksSChcInNjcm9sbFN0b3BcIixpLGEsciksIShPPWw9bnVsbCl9KShkLGcpfHwoTz1NLnJlcXVlc3RBbmltYXRpb25GcmFtZShFKSxsPWUpfTswPT09TS5wYWdlWU9mZnNldCYmTS5zY3JvbGxUbygwLDApLGY9YSxoPWksY3x8aGlzdG9yeS5wdXNoU3RhdGUmJmgudXBkYXRlVVJMJiZoaXN0b3J5LnB1c2hTdGF0ZSh7c21vb3RoU2Nyb2xsOkpTT04uc3RyaW5naWZ5KGgpLGFuY2hvcjpmLmlkfSxkb2N1bWVudC50aXRsZSxmPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1wiI3RvcFwiOlwiI1wiK2YuaWQpLFwibWF0Y2hNZWRpYVwiaW4gTSYmTS5tYXRjaE1lZGlhKFwiKHByZWZlcnMtcmVkdWNlZC1tb3Rpb24pXCIpLm1hdGNoZXM/eChhLE1hdGguZmxvb3IoZyksITEpOihIKFwic2Nyb2xsU3RhcnRcIixpLGEsciksQy5jYW5jZWxTY3JvbGwoITApLE0ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKEUpKX19O3ZhciB0PWZ1bmN0aW9uKGUpe2lmKCFlLmRlZmF1bHRQcmV2ZW50ZWQmJiEoMCE9PWUuYnV0dG9ufHxlLm1ldGFLZXl8fGUuY3RybEtleXx8ZS5zaGlmdEtleSkmJlwiY2xvc2VzdFwiaW4gZS50YXJnZXQmJihhPWUudGFyZ2V0LmNsb3Nlc3QobykpJiZcImFcIj09PWEudGFnTmFtZS50b0xvd2VyQ2FzZSgpJiYhZS50YXJnZXQuY2xvc2VzdChiLmlnbm9yZSkmJmEuaG9zdG5hbWU9PT1NLmxvY2F0aW9uLmhvc3RuYW1lJiZhLnBhdGhuYW1lPT09TS5sb2NhdGlvbi5wYXRobmFtZSYmLyMvLnRlc3QoYS5ocmVmKSl7dmFyIHQsbjt0cnl7dD1yKGRlY29kZVVSSUNvbXBvbmVudChhLmhhc2gpKX1jYXRjaChlKXt0PXIoYS5oYXNoKX1pZihcIiNcIj09PXQpe2lmKCFiLnRvcE9uRW1wdHlIYXNoKXJldHVybjtuPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudH1lbHNlIG49ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTsobj1ufHxcIiN0b3BcIiE9PXQ/bjpkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpJiYoZS5wcmV2ZW50RGVmYXVsdCgpLChmdW5jdGlvbihlKXtpZihoaXN0b3J5LnJlcGxhY2VTdGF0ZSYmZS51cGRhdGVVUkwmJiFoaXN0b3J5LnN0YXRlKXt2YXIgdD1NLmxvY2F0aW9uLmhhc2g7dD10fHxcIlwiLGhpc3RvcnkucmVwbGFjZVN0YXRlKHtzbW9vdGhTY3JvbGw6SlNPTi5zdHJpbmdpZnkoZSksYW5jaG9yOnR8fE0ucGFnZVlPZmZzZXR9LGRvY3VtZW50LnRpdGxlLHR8fE0ubG9jYXRpb24uaHJlZil9fSkoYiksQy5hbmltYXRlU2Nyb2xsKG4sYSkpfX0sbj1mdW5jdGlvbihlKXtpZihudWxsIT09aGlzdG9yeS5zdGF0ZSYmaGlzdG9yeS5zdGF0ZS5zbW9vdGhTY3JvbGwmJmhpc3Rvcnkuc3RhdGUuc21vb3RoU2Nyb2xsPT09SlNPTi5zdHJpbmdpZnkoYikpe3ZhciB0PWhpc3Rvcnkuc3RhdGUuYW5jaG9yO1wic3RyaW5nXCI9PXR5cGVvZiB0JiZ0JiYhKHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihyKGhpc3Rvcnkuc3RhdGUuYW5jaG9yKSkpfHxDLmFuaW1hdGVTY3JvbGwodCxudWxsLHt1cGRhdGVVUkw6ITF9KX19O0MuZGVzdHJveT1mdW5jdGlvbigpe2ImJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0LCExKSxNLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLG4sITEpLEMuY2FuY2VsU2Nyb2xsKCksTz1BPWE9Yj1udWxsKX07cmV0dXJuIChmdW5jdGlvbigpe2lmKCEoXCJxdWVyeVNlbGVjdG9yXCJpbiBkb2N1bWVudCYmXCJhZGRFdmVudExpc3RlbmVyXCJpbiBNJiZcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiaW4gTSYmXCJjbG9zZXN0XCJpbiBNLkVsZW1lbnQucHJvdG90eXBlKSl0aHJvd1wiU21vb3RoIFNjcm9sbDogVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHJlcXVpcmVkIEphdmFTY3JpcHQgbWV0aG9kcyBhbmQgYnJvd3NlciBBUElzLlwiO0MuZGVzdHJveSgpLGI9SShxLGV8fHt9KSxBPWIuaGVhZGVyP2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYi5oZWFkZXIpOm51bGwsZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdCwhMSksYi51cGRhdGVVUkwmJmIucG9wc3RhdGUmJk0uYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsbiwhMSl9KSgpLEN9fSkpOyJdfQ==
